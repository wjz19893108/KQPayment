// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Header.pb.h"
// @@protoc_insertion_point(imports)

@implementation HeaderRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [HeaderRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Header ()
@property (strong) NSString* rsaKey;
@property (strong) NSString* aesKey;
@property (strong) NSString* exchangeKeyResult;
@property (strong) NSString* version;
@property (strong) NSString* appVersion;
@property (strong) NSString* appType;
@property (strong) NSString* bizType;
@property (strong) NSString* reqTime;
@property (strong) NSString* responseCode;
@property (strong) NSString* responseMsg;
@property (strong) NSString* loginToken;
@property (strong) NSString* requestId;
@property (strong) NSString* appChannel;
@property (strong) NSString* appendData;
@property (strong) HeaderDeviceInfo* deviceInfo;
@property (strong) NSString* sourceId;
@property (strong) NSString* primarySource;
@property (strong) NSString* sdkChannel;
@property (strong) NSString* cityId;
@end

@implementation Header

- (BOOL) hasRsaKey {
  return !!hasRsaKey_;
}
- (void) setHasRsaKey:(BOOL) _value_ {
  hasRsaKey_ = !!_value_;
}
@synthesize rsaKey;
- (BOOL) hasAesKey {
  return !!hasAesKey_;
}
- (void) setHasAesKey:(BOOL) _value_ {
  hasAesKey_ = !!_value_;
}
@synthesize aesKey;
- (BOOL) hasExchangeKeyResult {
  return !!hasExchangeKeyResult_;
}
- (void) setHasExchangeKeyResult:(BOOL) _value_ {
  hasExchangeKeyResult_ = !!_value_;
}
@synthesize exchangeKeyResult;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasAppVersion {
  return !!hasAppVersion_;
}
- (void) setHasAppVersion:(BOOL) _value_ {
  hasAppVersion_ = !!_value_;
}
@synthesize appVersion;
- (BOOL) hasAppType {
  return !!hasAppType_;
}
- (void) setHasAppType:(BOOL) _value_ {
  hasAppType_ = !!_value_;
}
@synthesize appType;
- (BOOL) hasBizType {
  return !!hasBizType_;
}
- (void) setHasBizType:(BOOL) _value_ {
  hasBizType_ = !!_value_;
}
@synthesize bizType;
- (BOOL) hasReqTime {
  return !!hasReqTime_;
}
- (void) setHasReqTime:(BOOL) _value_ {
  hasReqTime_ = !!_value_;
}
@synthesize reqTime;
- (BOOL) hasResponseCode {
  return !!hasResponseCode_;
}
- (void) setHasResponseCode:(BOOL) _value_ {
  hasResponseCode_ = !!_value_;
}
@synthesize responseCode;
- (BOOL) hasResponseMsg {
  return !!hasResponseMsg_;
}
- (void) setHasResponseMsg:(BOOL) _value_ {
  hasResponseMsg_ = !!_value_;
}
@synthesize responseMsg;
- (BOOL) hasLoginToken {
  return !!hasLoginToken_;
}
- (void) setHasLoginToken:(BOOL) _value_ {
  hasLoginToken_ = !!_value_;
}
@synthesize loginToken;
- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) _value_ {
  hasRequestId_ = !!_value_;
}
@synthesize requestId;
- (BOOL) hasAppChannel {
  return !!hasAppChannel_;
}
- (void) setHasAppChannel:(BOOL) _value_ {
  hasAppChannel_ = !!_value_;
}
@synthesize appChannel;
- (BOOL) hasAppendData {
  return !!hasAppendData_;
}
- (void) setHasAppendData:(BOOL) _value_ {
  hasAppendData_ = !!_value_;
}
@synthesize appendData;
- (BOOL) hasDeviceInfo {
  return !!hasDeviceInfo_;
}
- (void) setHasDeviceInfo:(BOOL) _value_ {
  hasDeviceInfo_ = !!_value_;
}
@synthesize deviceInfo;
- (BOOL) hasSourceId {
  return !!hasSourceId_;
}
- (void) setHasSourceId:(BOOL) _value_ {
  hasSourceId_ = !!_value_;
}
@synthesize sourceId;
- (BOOL) hasPrimarySource {
  return !!hasPrimarySource_;
}
- (void) setHasPrimarySource:(BOOL) _value_ {
  hasPrimarySource_ = !!_value_;
}
@synthesize primarySource;
- (BOOL) hasSdkChannel {
  return !!hasSdkChannel_;
}
- (void) setHasSdkChannel:(BOOL) _value_ {
  hasSdkChannel_ = !!_value_;
}
@synthesize sdkChannel;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) _value_ {
  hasCityId_ = !!_value_;
}
@synthesize cityId;
- (instancetype) init {
  if ((self = [super init])) {
    self.rsaKey = @"";
    self.aesKey = @"";
    self.exchangeKeyResult = @"";
    self.version = @"";
    self.appVersion = @"";
    self.appType = @"";
    self.bizType = @"";
    self.reqTime = @"";
    self.responseCode = @"";
    self.responseMsg = @"";
    self.loginToken = @"";
    self.requestId = @"";
    self.appChannel = @"";
    self.appendData = @"";
    self.deviceInfo = [HeaderDeviceInfo defaultInstance];
    self.sourceId = @"";
    self.primarySource = @"";
    self.sdkChannel = @"";
    self.cityId = @"";
  }
  return self;
}
static Header* defaultHeaderInstance = nil;
+ (void) initialize {
  if (self == [Header class]) {
    defaultHeaderInstance = [[Header alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHeaderInstance;
}
- (instancetype) defaultInstance {
  return defaultHeaderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRsaKey) {
    [output writeString:1 value:self.rsaKey];
  }
  if (self.hasAesKey) {
    [output writeString:2 value:self.aesKey];
  }
  if (self.hasExchangeKeyResult) {
    [output writeString:3 value:self.exchangeKeyResult];
  }
  if (self.hasVersion) {
    [output writeString:4 value:self.version];
  }
  if (self.hasAppVersion) {
    [output writeString:5 value:self.appVersion];
  }
  if (self.hasAppType) {
    [output writeString:6 value:self.appType];
  }
  if (self.hasBizType) {
    [output writeString:7 value:self.bizType];
  }
  if (self.hasReqTime) {
    [output writeString:8 value:self.reqTime];
  }
  if (self.hasResponseCode) {
    [output writeString:9 value:self.responseCode];
  }
  if (self.hasResponseMsg) {
    [output writeString:10 value:self.responseMsg];
  }
  if (self.hasLoginToken) {
    [output writeString:11 value:self.loginToken];
  }
  if (self.hasRequestId) {
    [output writeString:12 value:self.requestId];
  }
  if (self.hasAppChannel) {
    [output writeString:13 value:self.appChannel];
  }
  if (self.hasAppendData) {
    [output writeString:14 value:self.appendData];
  }
  if (self.hasDeviceInfo) {
    [output writeMessage:15 value:self.deviceInfo];
  }
  if (self.hasSourceId) {
    [output writeString:16 value:self.sourceId];
  }
  if (self.hasPrimarySource) {
    [output writeString:17 value:self.primarySource];
  }
  if (self.hasSdkChannel) {
    [output writeString:18 value:self.sdkChannel];
  }
  if (self.hasCityId) {
    [output writeString:19 value:self.cityId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRsaKey) {
    size_ += computeStringSize(1, self.rsaKey);
  }
  if (self.hasAesKey) {
    size_ += computeStringSize(2, self.aesKey);
  }
  if (self.hasExchangeKeyResult) {
    size_ += computeStringSize(3, self.exchangeKeyResult);
  }
  if (self.hasVersion) {
    size_ += computeStringSize(4, self.version);
  }
  if (self.hasAppVersion) {
    size_ += computeStringSize(5, self.appVersion);
  }
  if (self.hasAppType) {
    size_ += computeStringSize(6, self.appType);
  }
  if (self.hasBizType) {
    size_ += computeStringSize(7, self.bizType);
  }
  if (self.hasReqTime) {
    size_ += computeStringSize(8, self.reqTime);
  }
  if (self.hasResponseCode) {
    size_ += computeStringSize(9, self.responseCode);
  }
  if (self.hasResponseMsg) {
    size_ += computeStringSize(10, self.responseMsg);
  }
  if (self.hasLoginToken) {
    size_ += computeStringSize(11, self.loginToken);
  }
  if (self.hasRequestId) {
    size_ += computeStringSize(12, self.requestId);
  }
  if (self.hasAppChannel) {
    size_ += computeStringSize(13, self.appChannel);
  }
  if (self.hasAppendData) {
    size_ += computeStringSize(14, self.appendData);
  }
  if (self.hasDeviceInfo) {
    size_ += computeMessageSize(15, self.deviceInfo);
  }
  if (self.hasSourceId) {
    size_ += computeStringSize(16, self.sourceId);
  }
  if (self.hasPrimarySource) {
    size_ += computeStringSize(17, self.primarySource);
  }
  if (self.hasSdkChannel) {
    size_ += computeStringSize(18, self.sdkChannel);
  }
  if (self.hasCityId) {
    size_ += computeStringSize(19, self.cityId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Header*) parseFromData:(NSData*) data {
  return (Header*)[[[Header builder] mergeFromData:data] build];
}
+ (Header*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Header*) parseFromInputStream:(NSInputStream*) input {
  return (Header*)[[[Header builder] mergeFromInputStream:input] build];
}
+ (Header*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Header*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Header*)[[[Header builder] mergeFromCodedInputStream:input] build];
}
+ (Header*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderBuilder*) builder {
  return [[HeaderBuilder alloc] init];
}
+ (HeaderBuilder*) builderWithPrototype:(Header*) prototype {
  return [[Header builder] mergeFrom:prototype];
}
- (HeaderBuilder*) builder {
  return [Header builder];
}
- (HeaderBuilder*) toBuilder {
  return [Header builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRsaKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rsaKey", self.rsaKey];
  }
  if (self.hasAesKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"aesKey", self.aesKey];
  }
  if (self.hasExchangeKeyResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"exchangeKeyResult", self.exchangeKeyResult];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasAppVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersion", self.appVersion];
  }
  if (self.hasAppType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appType", self.appType];
  }
  if (self.hasBizType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bizType", self.bizType];
  }
  if (self.hasReqTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqTime", self.reqTime];
  }
  if (self.hasResponseCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseCode", self.responseCode];
  }
  if (self.hasResponseMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseMsg", self.responseMsg];
  }
  if (self.hasLoginToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginToken", self.loginToken];
  }
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", self.requestId];
  }
  if (self.hasAppChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appChannel", self.appChannel];
  }
  if (self.hasAppendData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appendData", self.appendData];
  }
  if (self.hasDeviceInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"deviceInfo"];
    [self.deviceInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSourceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceId", self.sourceId];
  }
  if (self.hasPrimarySource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"primarySource", self.primarySource];
  }
  if (self.hasSdkChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sdkChannel", self.sdkChannel];
  }
  if (self.hasCityId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cityId", self.cityId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRsaKey) {
    [dictionary setObject: self.rsaKey forKey: @"rsaKey"];
  }
  if (self.hasAesKey) {
    [dictionary setObject: self.aesKey forKey: @"aesKey"];
  }
  if (self.hasExchangeKeyResult) {
    [dictionary setObject: self.exchangeKeyResult forKey: @"exchangeKeyResult"];
  }
  if (self.hasVersion) {
    [dictionary setObject: self.version forKey: @"version"];
  }
  if (self.hasAppVersion) {
    [dictionary setObject: self.appVersion forKey: @"appVersion"];
  }
  if (self.hasAppType) {
    [dictionary setObject: self.appType forKey: @"appType"];
  }
  if (self.hasBizType) {
    [dictionary setObject: self.bizType forKey: @"bizType"];
  }
  if (self.hasReqTime) {
    [dictionary setObject: self.reqTime forKey: @"reqTime"];
  }
  if (self.hasResponseCode) {
    [dictionary setObject: self.responseCode forKey: @"responseCode"];
  }
  if (self.hasResponseMsg) {
    [dictionary setObject: self.responseMsg forKey: @"responseMsg"];
  }
  if (self.hasLoginToken) {
    [dictionary setObject: self.loginToken forKey: @"loginToken"];
  }
  if (self.hasRequestId) {
    [dictionary setObject: self.requestId forKey: @"requestId"];
  }
  if (self.hasAppChannel) {
    [dictionary setObject: self.appChannel forKey: @"appChannel"];
  }
  if (self.hasAppendData) {
    [dictionary setObject: self.appendData forKey: @"appendData"];
  }
  if (self.hasDeviceInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.deviceInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"deviceInfo"];
  }
  if (self.hasSourceId) {
    [dictionary setObject: self.sourceId forKey: @"sourceId"];
  }
  if (self.hasPrimarySource) {
    [dictionary setObject: self.primarySource forKey: @"primarySource"];
  }
  if (self.hasSdkChannel) {
    [dictionary setObject: self.sdkChannel forKey: @"sdkChannel"];
  }
  if (self.hasCityId) {
    [dictionary setObject: self.cityId forKey: @"cityId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Header class]]) {
    return NO;
  }
  Header *otherMessage = other;
  return
      self.hasRsaKey == otherMessage.hasRsaKey &&
      (!self.hasRsaKey || [self.rsaKey isEqual:otherMessage.rsaKey]) &&
      self.hasAesKey == otherMessage.hasAesKey &&
      (!self.hasAesKey || [self.aesKey isEqual:otherMessage.aesKey]) &&
      self.hasExchangeKeyResult == otherMessage.hasExchangeKeyResult &&
      (!self.hasExchangeKeyResult || [self.exchangeKeyResult isEqual:otherMessage.exchangeKeyResult]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasAppVersion == otherMessage.hasAppVersion &&
      (!self.hasAppVersion || [self.appVersion isEqual:otherMessage.appVersion]) &&
      self.hasAppType == otherMessage.hasAppType &&
      (!self.hasAppType || [self.appType isEqual:otherMessage.appType]) &&
      self.hasBizType == otherMessage.hasBizType &&
      (!self.hasBizType || [self.bizType isEqual:otherMessage.bizType]) &&
      self.hasReqTime == otherMessage.hasReqTime &&
      (!self.hasReqTime || [self.reqTime isEqual:otherMessage.reqTime]) &&
      self.hasResponseCode == otherMessage.hasResponseCode &&
      (!self.hasResponseCode || [self.responseCode isEqual:otherMessage.responseCode]) &&
      self.hasResponseMsg == otherMessage.hasResponseMsg &&
      (!self.hasResponseMsg || [self.responseMsg isEqual:otherMessage.responseMsg]) &&
      self.hasLoginToken == otherMessage.hasLoginToken &&
      (!self.hasLoginToken || [self.loginToken isEqual:otherMessage.loginToken]) &&
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || [self.requestId isEqual:otherMessage.requestId]) &&
      self.hasAppChannel == otherMessage.hasAppChannel &&
      (!self.hasAppChannel || [self.appChannel isEqual:otherMessage.appChannel]) &&
      self.hasAppendData == otherMessage.hasAppendData &&
      (!self.hasAppendData || [self.appendData isEqual:otherMessage.appendData]) &&
      self.hasDeviceInfo == otherMessage.hasDeviceInfo &&
      (!self.hasDeviceInfo || [self.deviceInfo isEqual:otherMessage.deviceInfo]) &&
      self.hasSourceId == otherMessage.hasSourceId &&
      (!self.hasSourceId || [self.sourceId isEqual:otherMessage.sourceId]) &&
      self.hasPrimarySource == otherMessage.hasPrimarySource &&
      (!self.hasPrimarySource || [self.primarySource isEqual:otherMessage.primarySource]) &&
      self.hasSdkChannel == otherMessage.hasSdkChannel &&
      (!self.hasSdkChannel || [self.sdkChannel isEqual:otherMessage.sdkChannel]) &&
      self.hasCityId == otherMessage.hasCityId &&
      (!self.hasCityId || [self.cityId isEqual:otherMessage.cityId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRsaKey) {
    hashCode = hashCode * 31 + [self.rsaKey hash];
  }
  if (self.hasAesKey) {
    hashCode = hashCode * 31 + [self.aesKey hash];
  }
  if (self.hasExchangeKeyResult) {
    hashCode = hashCode * 31 + [self.exchangeKeyResult hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasAppVersion) {
    hashCode = hashCode * 31 + [self.appVersion hash];
  }
  if (self.hasAppType) {
    hashCode = hashCode * 31 + [self.appType hash];
  }
  if (self.hasBizType) {
    hashCode = hashCode * 31 + [self.bizType hash];
  }
  if (self.hasReqTime) {
    hashCode = hashCode * 31 + [self.reqTime hash];
  }
  if (self.hasResponseCode) {
    hashCode = hashCode * 31 + [self.responseCode hash];
  }
  if (self.hasResponseMsg) {
    hashCode = hashCode * 31 + [self.responseMsg hash];
  }
  if (self.hasLoginToken) {
    hashCode = hashCode * 31 + [self.loginToken hash];
  }
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [self.requestId hash];
  }
  if (self.hasAppChannel) {
    hashCode = hashCode * 31 + [self.appChannel hash];
  }
  if (self.hasAppendData) {
    hashCode = hashCode * 31 + [self.appendData hash];
  }
  if (self.hasDeviceInfo) {
    hashCode = hashCode * 31 + [self.deviceInfo hash];
  }
  if (self.hasSourceId) {
    hashCode = hashCode * 31 + [self.sourceId hash];
  }
  if (self.hasPrimarySource) {
    hashCode = hashCode * 31 + [self.primarySource hash];
  }
  if (self.hasSdkChannel) {
    hashCode = hashCode * 31 + [self.sdkChannel hash];
  }
  if (self.hasCityId) {
    hashCode = hashCode * 31 + [self.cityId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HeaderDeviceInfo ()
@property (strong) NSString* mac;
@property (strong) NSString* imei;
@property (strong) NSString* imsi;
@property (strong) NSString* deviceId;
@property (strong) NSString* ip;
@property (strong) NSString* x;
@property (strong) NSString* y;
@end

@implementation HeaderDeviceInfo

- (BOOL) hasMac {
  return !!hasMac_;
}
- (void) setHasMac:(BOOL) _value_ {
  hasMac_ = !!_value_;
}
@synthesize mac;
- (BOOL) hasImei {
  return !!hasImei_;
}
- (void) setHasImei:(BOOL) _value_ {
  hasImei_ = !!_value_;
}
@synthesize imei;
- (BOOL) hasImsi {
  return !!hasImsi_;
}
- (void) setHasImsi:(BOOL) _value_ {
  hasImsi_ = !!_value_;
}
@synthesize imsi;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasIp {
  return !!hasIp_;
}
- (void) setHasIp:(BOOL) _value_ {
  hasIp_ = !!_value_;
}
@synthesize ip;
- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) _value_ {
  hasX_ = !!_value_;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) _value_ {
  hasY_ = !!_value_;
}
@synthesize y;
- (instancetype) init {
  if ((self = [super init])) {
    self.mac = @"";
    self.imei = @"";
    self.imsi = @"";
    self.deviceId = @"";
    self.ip = @"";
    self.x = @"";
    self.y = @"";
  }
  return self;
}
static HeaderDeviceInfo* defaultHeaderDeviceInfoInstance = nil;
+ (void) initialize {
  if (self == [HeaderDeviceInfo class]) {
    defaultHeaderDeviceInfoInstance = [[HeaderDeviceInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHeaderDeviceInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultHeaderDeviceInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMac) {
    [output writeString:1 value:self.mac];
  }
  if (self.hasImei) {
    [output writeString:2 value:self.imei];
  }
  if (self.hasImsi) {
    [output writeString:3 value:self.imsi];
  }
  if (self.hasDeviceId) {
    [output writeString:4 value:self.deviceId];
  }
  if (self.hasIp) {
    [output writeString:5 value:self.ip];
  }
  if (self.hasX) {
    [output writeString:6 value:self.x];
  }
  if (self.hasY) {
    [output writeString:7 value:self.y];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMac) {
    size_ += computeStringSize(1, self.mac);
  }
  if (self.hasImei) {
    size_ += computeStringSize(2, self.imei);
  }
  if (self.hasImsi) {
    size_ += computeStringSize(3, self.imsi);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(4, self.deviceId);
  }
  if (self.hasIp) {
    size_ += computeStringSize(5, self.ip);
  }
  if (self.hasX) {
    size_ += computeStringSize(6, self.x);
  }
  if (self.hasY) {
    size_ += computeStringSize(7, self.y);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HeaderDeviceInfo*) parseFromData:(NSData*) data {
  return (HeaderDeviceInfo*)[[[HeaderDeviceInfo builder] mergeFromData:data] build];
}
+ (HeaderDeviceInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderDeviceInfo*)[[[HeaderDeviceInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HeaderDeviceInfo*) parseFromInputStream:(NSInputStream*) input {
  return (HeaderDeviceInfo*)[[[HeaderDeviceInfo builder] mergeFromInputStream:input] build];
}
+ (HeaderDeviceInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderDeviceInfo*)[[[HeaderDeviceInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderDeviceInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HeaderDeviceInfo*)[[[HeaderDeviceInfo builder] mergeFromCodedInputStream:input] build];
}
+ (HeaderDeviceInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderDeviceInfo*)[[[HeaderDeviceInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderDeviceInfoBuilder*) builder {
  return [[HeaderDeviceInfoBuilder alloc] init];
}
+ (HeaderDeviceInfoBuilder*) builderWithPrototype:(HeaderDeviceInfo*) prototype {
  return [[HeaderDeviceInfo builder] mergeFrom:prototype];
}
- (HeaderDeviceInfoBuilder*) builder {
  return [HeaderDeviceInfo builder];
}
- (HeaderDeviceInfoBuilder*) toBuilder {
  return [HeaderDeviceInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mac", self.mac];
  }
  if (self.hasImei) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imei", self.imei];
  }
  if (self.hasImsi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imsi", self.imsi];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip", self.ip];
  }
  if (self.hasX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"x", self.x];
  }
  if (self.hasY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"y", self.y];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMac) {
    [dictionary setObject: self.mac forKey: @"mac"];
  }
  if (self.hasImei) {
    [dictionary setObject: self.imei forKey: @"imei"];
  }
  if (self.hasImsi) {
    [dictionary setObject: self.imsi forKey: @"imsi"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasIp) {
    [dictionary setObject: self.ip forKey: @"ip"];
  }
  if (self.hasX) {
    [dictionary setObject: self.x forKey: @"x"];
  }
  if (self.hasY) {
    [dictionary setObject: self.y forKey: @"y"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HeaderDeviceInfo class]]) {
    return NO;
  }
  HeaderDeviceInfo *otherMessage = other;
  return
      self.hasMac == otherMessage.hasMac &&
      (!self.hasMac || [self.mac isEqual:otherMessage.mac]) &&
      self.hasImei == otherMessage.hasImei &&
      (!self.hasImei || [self.imei isEqual:otherMessage.imei]) &&
      self.hasImsi == otherMessage.hasImsi &&
      (!self.hasImsi || [self.imsi isEqual:otherMessage.imsi]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasIp == otherMessage.hasIp &&
      (!self.hasIp || [self.ip isEqual:otherMessage.ip]) &&
      self.hasX == otherMessage.hasX &&
      (!self.hasX || [self.x isEqual:otherMessage.x]) &&
      self.hasY == otherMessage.hasY &&
      (!self.hasY || [self.y isEqual:otherMessage.y]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMac) {
    hashCode = hashCode * 31 + [self.mac hash];
  }
  if (self.hasImei) {
    hashCode = hashCode * 31 + [self.imei hash];
  }
  if (self.hasImsi) {
    hashCode = hashCode * 31 + [self.imsi hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasIp) {
    hashCode = hashCode * 31 + [self.ip hash];
  }
  if (self.hasX) {
    hashCode = hashCode * 31 + [self.x hash];
  }
  if (self.hasY) {
    hashCode = hashCode * 31 + [self.y hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HeaderDeviceInfoBuilder()
@property (strong) HeaderDeviceInfo* resultDeviceInfo;
@end

@implementation HeaderDeviceInfoBuilder
@synthesize resultDeviceInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDeviceInfo = [[HeaderDeviceInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDeviceInfo;
}
- (HeaderDeviceInfoBuilder*) clear {
  self.resultDeviceInfo = [[HeaderDeviceInfo alloc] init];
  return self;
}
- (HeaderDeviceInfoBuilder*) clone {
  return [HeaderDeviceInfo builderWithPrototype:resultDeviceInfo];
}
- (HeaderDeviceInfo*) defaultInstance {
  return [HeaderDeviceInfo defaultInstance];
}
- (HeaderDeviceInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HeaderDeviceInfo*) buildPartial {
  HeaderDeviceInfo* returnMe = resultDeviceInfo;
  self.resultDeviceInfo = nil;
  return returnMe;
}
- (HeaderDeviceInfoBuilder*) mergeFrom:(HeaderDeviceInfo*) other {
  if (other == [HeaderDeviceInfo defaultInstance]) {
    return self;
  }
  if (other.hasMac) {
    [self setMac:other.mac];
  }
  if (other.hasImei) {
    [self setImei:other.imei];
  }
  if (other.hasImsi) {
    [self setImsi:other.imsi];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasIp) {
    [self setIp:other.ip];
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeaderDeviceInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeaderDeviceInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMac:[input readString]];
        break;
      }
      case 18: {
        [self setImei:[input readString]];
        break;
      }
      case 26: {
        [self setImsi:[input readString]];
        break;
      }
      case 34: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 42: {
        [self setIp:[input readString]];
        break;
      }
      case 50: {
        [self setX:[input readString]];
        break;
      }
      case 58: {
        [self setY:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMac {
  return resultDeviceInfo.hasMac;
}
- (NSString*) mac {
  return resultDeviceInfo.mac;
}
- (HeaderDeviceInfoBuilder*) setMac:(NSString*) value {
  resultDeviceInfo.hasMac = YES;
  resultDeviceInfo.mac = value;
  return self;
}
- (HeaderDeviceInfoBuilder*) clearMac {
  resultDeviceInfo.hasMac = NO;
  resultDeviceInfo.mac = @"";
  return self;
}
- (BOOL) hasImei {
  return resultDeviceInfo.hasImei;
}
- (NSString*) imei {
  return resultDeviceInfo.imei;
}
- (HeaderDeviceInfoBuilder*) setImei:(NSString*) value {
  resultDeviceInfo.hasImei = YES;
  resultDeviceInfo.imei = value;
  return self;
}
- (HeaderDeviceInfoBuilder*) clearImei {
  resultDeviceInfo.hasImei = NO;
  resultDeviceInfo.imei = @"";
  return self;
}
- (BOOL) hasImsi {
  return resultDeviceInfo.hasImsi;
}
- (NSString*) imsi {
  return resultDeviceInfo.imsi;
}
- (HeaderDeviceInfoBuilder*) setImsi:(NSString*) value {
  resultDeviceInfo.hasImsi = YES;
  resultDeviceInfo.imsi = value;
  return self;
}
- (HeaderDeviceInfoBuilder*) clearImsi {
  resultDeviceInfo.hasImsi = NO;
  resultDeviceInfo.imsi = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultDeviceInfo.hasDeviceId;
}
- (NSString*) deviceId {
  return resultDeviceInfo.deviceId;
}
- (HeaderDeviceInfoBuilder*) setDeviceId:(NSString*) value {
  resultDeviceInfo.hasDeviceId = YES;
  resultDeviceInfo.deviceId = value;
  return self;
}
- (HeaderDeviceInfoBuilder*) clearDeviceId {
  resultDeviceInfo.hasDeviceId = NO;
  resultDeviceInfo.deviceId = @"";
  return self;
}
- (BOOL) hasIp {
  return resultDeviceInfo.hasIp;
}
- (NSString*) ip {
  return resultDeviceInfo.ip;
}
- (HeaderDeviceInfoBuilder*) setIp:(NSString*) value {
  resultDeviceInfo.hasIp = YES;
  resultDeviceInfo.ip = value;
  return self;
}
- (HeaderDeviceInfoBuilder*) clearIp {
  resultDeviceInfo.hasIp = NO;
  resultDeviceInfo.ip = @"";
  return self;
}
- (BOOL) hasX {
  return resultDeviceInfo.hasX;
}
- (NSString*) x {
  return resultDeviceInfo.x;
}
- (HeaderDeviceInfoBuilder*) setX:(NSString*) value {
  resultDeviceInfo.hasX = YES;
  resultDeviceInfo.x = value;
  return self;
}
- (HeaderDeviceInfoBuilder*) clearX {
  resultDeviceInfo.hasX = NO;
  resultDeviceInfo.x = @"";
  return self;
}
- (BOOL) hasY {
  return resultDeviceInfo.hasY;
}
- (NSString*) y {
  return resultDeviceInfo.y;
}
- (HeaderDeviceInfoBuilder*) setY:(NSString*) value {
  resultDeviceInfo.hasY = YES;
  resultDeviceInfo.y = value;
  return self;
}
- (HeaderDeviceInfoBuilder*) clearY {
  resultDeviceInfo.hasY = NO;
  resultDeviceInfo.y = @"";
  return self;
}
@end

@interface HeaderBuilder()
@property (strong) Header* resultHeader;
@end

@implementation HeaderBuilder
@synthesize resultHeader;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHeader = [[Header alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHeader;
}
- (HeaderBuilder*) clear {
  self.resultHeader = [[Header alloc] init];
  return self;
}
- (HeaderBuilder*) clone {
  return [Header builderWithPrototype:resultHeader];
}
- (Header*) defaultInstance {
  return [Header defaultInstance];
}
- (Header*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Header*) buildPartial {
  Header* returnMe = resultHeader;
  self.resultHeader = nil;
  return returnMe;
}
- (HeaderBuilder*) mergeFrom:(Header*) other {
  if (other == [Header defaultInstance]) {
    return self;
  }
  if (other.hasRsaKey) {
    [self setRsaKey:other.rsaKey];
  }
  if (other.hasAesKey) {
    [self setAesKey:other.aesKey];
  }
  if (other.hasExchangeKeyResult) {
    [self setExchangeKeyResult:other.exchangeKeyResult];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasAppVersion) {
    [self setAppVersion:other.appVersion];
  }
  if (other.hasAppType) {
    [self setAppType:other.appType];
  }
  if (other.hasBizType) {
    [self setBizType:other.bizType];
  }
  if (other.hasReqTime) {
    [self setReqTime:other.reqTime];
  }
  if (other.hasResponseCode) {
    [self setResponseCode:other.responseCode];
  }
  if (other.hasResponseMsg) {
    [self setResponseMsg:other.responseMsg];
  }
  if (other.hasLoginToken) {
    [self setLoginToken:other.loginToken];
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  if (other.hasAppChannel) {
    [self setAppChannel:other.appChannel];
  }
  if (other.hasAppendData) {
    [self setAppendData:other.appendData];
  }
  if (other.hasDeviceInfo) {
    [self mergeDeviceInfo:other.deviceInfo];
  }
  if (other.hasSourceId) {
    [self setSourceId:other.sourceId];
  }
  if (other.hasPrimarySource) {
    [self setPrimarySource:other.primarySource];
  }
  if (other.hasSdkChannel) {
    [self setSdkChannel:other.sdkChannel];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRsaKey:[input readString]];
        break;
      }
      case 18: {
        [self setAesKey:[input readString]];
        break;
      }
      case 26: {
        [self setExchangeKeyResult:[input readString]];
        break;
      }
      case 34: {
        [self setVersion:[input readString]];
        break;
      }
      case 42: {
        [self setAppVersion:[input readString]];
        break;
      }
      case 50: {
        [self setAppType:[input readString]];
        break;
      }
      case 58: {
        [self setBizType:[input readString]];
        break;
      }
      case 66: {
        [self setReqTime:[input readString]];
        break;
      }
      case 74: {
        [self setResponseCode:[input readString]];
        break;
      }
      case 82: {
        [self setResponseMsg:[input readString]];
        break;
      }
      case 90: {
        [self setLoginToken:[input readString]];
        break;
      }
      case 98: {
        [self setRequestId:[input readString]];
        break;
      }
      case 106: {
        [self setAppChannel:[input readString]];
        break;
      }
      case 114: {
        [self setAppendData:[input readString]];
        break;
      }
      case 122: {
        HeaderDeviceInfoBuilder* subBuilder = [HeaderDeviceInfo builder];
        if (self.hasDeviceInfo) {
          [subBuilder mergeFrom:self.deviceInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDeviceInfo:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        [self setSourceId:[input readString]];
        break;
      }
      case 138: {
        [self setPrimarySource:[input readString]];
        break;
      }
      case 146: {
        [self setSdkChannel:[input readString]];
        break;
      }
      case 154: {
        [self setCityId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRsaKey {
  return resultHeader.hasRsaKey;
}
- (NSString*) rsaKey {
  return resultHeader.rsaKey;
}
- (HeaderBuilder*) setRsaKey:(NSString*) value {
  resultHeader.hasRsaKey = YES;
  resultHeader.rsaKey = value;
  return self;
}
- (HeaderBuilder*) clearRsaKey {
  resultHeader.hasRsaKey = NO;
  resultHeader.rsaKey = @"";
  return self;
}
- (BOOL) hasAesKey {
  return resultHeader.hasAesKey;
}
- (NSString*) aesKey {
  return resultHeader.aesKey;
}
- (HeaderBuilder*) setAesKey:(NSString*) value {
  resultHeader.hasAesKey = YES;
  resultHeader.aesKey = value;
  return self;
}
- (HeaderBuilder*) clearAesKey {
  resultHeader.hasAesKey = NO;
  resultHeader.aesKey = @"";
  return self;
}
- (BOOL) hasExchangeKeyResult {
  return resultHeader.hasExchangeKeyResult;
}
- (NSString*) exchangeKeyResult {
  return resultHeader.exchangeKeyResult;
}
- (HeaderBuilder*) setExchangeKeyResult:(NSString*) value {
  resultHeader.hasExchangeKeyResult = YES;
  resultHeader.exchangeKeyResult = value;
  return self;
}
- (HeaderBuilder*) clearExchangeKeyResult {
  resultHeader.hasExchangeKeyResult = NO;
  resultHeader.exchangeKeyResult = @"";
  return self;
}
- (BOOL) hasVersion {
  return resultHeader.hasVersion;
}
- (NSString*) version {
  return resultHeader.version;
}
- (HeaderBuilder*) setVersion:(NSString*) value {
  resultHeader.hasVersion = YES;
  resultHeader.version = value;
  return self;
}
- (HeaderBuilder*) clearVersion {
  resultHeader.hasVersion = NO;
  resultHeader.version = @"";
  return self;
}
- (BOOL) hasAppVersion {
  return resultHeader.hasAppVersion;
}
- (NSString*) appVersion {
  return resultHeader.appVersion;
}
- (HeaderBuilder*) setAppVersion:(NSString*) value {
  resultHeader.hasAppVersion = YES;
  resultHeader.appVersion = value;
  return self;
}
- (HeaderBuilder*) clearAppVersion {
  resultHeader.hasAppVersion = NO;
  resultHeader.appVersion = @"";
  return self;
}
- (BOOL) hasAppType {
  return resultHeader.hasAppType;
}
- (NSString*) appType {
  return resultHeader.appType;
}
- (HeaderBuilder*) setAppType:(NSString*) value {
  resultHeader.hasAppType = YES;
  resultHeader.appType = value;
  return self;
}
- (HeaderBuilder*) clearAppType {
  resultHeader.hasAppType = NO;
  resultHeader.appType = @"";
  return self;
}
- (BOOL) hasBizType {
  return resultHeader.hasBizType;
}
- (NSString*) bizType {
  return resultHeader.bizType;
}
- (HeaderBuilder*) setBizType:(NSString*) value {
  resultHeader.hasBizType = YES;
  resultHeader.bizType = value;
  return self;
}
- (HeaderBuilder*) clearBizType {
  resultHeader.hasBizType = NO;
  resultHeader.bizType = @"";
  return self;
}
- (BOOL) hasReqTime {
  return resultHeader.hasReqTime;
}
- (NSString*) reqTime {
  return resultHeader.reqTime;
}
- (HeaderBuilder*) setReqTime:(NSString*) value {
  resultHeader.hasReqTime = YES;
  resultHeader.reqTime = value;
  return self;
}
- (HeaderBuilder*) clearReqTime {
  resultHeader.hasReqTime = NO;
  resultHeader.reqTime = @"";
  return self;
}
- (BOOL) hasResponseCode {
  return resultHeader.hasResponseCode;
}
- (NSString*) responseCode {
  return resultHeader.responseCode;
}
- (HeaderBuilder*) setResponseCode:(NSString*) value {
  resultHeader.hasResponseCode = YES;
  resultHeader.responseCode = value;
  return self;
}
- (HeaderBuilder*) clearResponseCode {
  resultHeader.hasResponseCode = NO;
  resultHeader.responseCode = @"";
  return self;
}
- (BOOL) hasResponseMsg {
  return resultHeader.hasResponseMsg;
}
- (NSString*) responseMsg {
  return resultHeader.responseMsg;
}
- (HeaderBuilder*) setResponseMsg:(NSString*) value {
  resultHeader.hasResponseMsg = YES;
  resultHeader.responseMsg = value;
  return self;
}
- (HeaderBuilder*) clearResponseMsg {
  resultHeader.hasResponseMsg = NO;
  resultHeader.responseMsg = @"";
  return self;
}
- (BOOL) hasLoginToken {
  return resultHeader.hasLoginToken;
}
- (NSString*) loginToken {
  return resultHeader.loginToken;
}
- (HeaderBuilder*) setLoginToken:(NSString*) value {
  resultHeader.hasLoginToken = YES;
  resultHeader.loginToken = value;
  return self;
}
- (HeaderBuilder*) clearLoginToken {
  resultHeader.hasLoginToken = NO;
  resultHeader.loginToken = @"";
  return self;
}
- (BOOL) hasRequestId {
  return resultHeader.hasRequestId;
}
- (NSString*) requestId {
  return resultHeader.requestId;
}
- (HeaderBuilder*) setRequestId:(NSString*) value {
  resultHeader.hasRequestId = YES;
  resultHeader.requestId = value;
  return self;
}
- (HeaderBuilder*) clearRequestId {
  resultHeader.hasRequestId = NO;
  resultHeader.requestId = @"";
  return self;
}
- (BOOL) hasAppChannel {
  return resultHeader.hasAppChannel;
}
- (NSString*) appChannel {
  return resultHeader.appChannel;
}
- (HeaderBuilder*) setAppChannel:(NSString*) value {
  resultHeader.hasAppChannel = YES;
  resultHeader.appChannel = value;
  return self;
}
- (HeaderBuilder*) clearAppChannel {
  resultHeader.hasAppChannel = NO;
  resultHeader.appChannel = @"";
  return self;
}
- (BOOL) hasAppendData {
  return resultHeader.hasAppendData;
}
- (NSString*) appendData {
  return resultHeader.appendData;
}
- (HeaderBuilder*) setAppendData:(NSString*) value {
  resultHeader.hasAppendData = YES;
  resultHeader.appendData = value;
  return self;
}
- (HeaderBuilder*) clearAppendData {
  resultHeader.hasAppendData = NO;
  resultHeader.appendData = @"";
  return self;
}
- (BOOL) hasDeviceInfo {
  return resultHeader.hasDeviceInfo;
}
- (HeaderDeviceInfo*) deviceInfo {
  return resultHeader.deviceInfo;
}
- (HeaderBuilder*) setDeviceInfo:(HeaderDeviceInfo*) value {
  resultHeader.hasDeviceInfo = YES;
  resultHeader.deviceInfo = value;
  return self;
}
- (HeaderBuilder*) setDeviceInfoBuilder:(HeaderDeviceInfoBuilder*) builderForValue {
  return [self setDeviceInfo:[builderForValue build]];
}
- (HeaderBuilder*) mergeDeviceInfo:(HeaderDeviceInfo*) value {
  if (resultHeader.hasDeviceInfo &&
      resultHeader.deviceInfo != [HeaderDeviceInfo defaultInstance]) {
    resultHeader.deviceInfo =
      [[[HeaderDeviceInfo builderWithPrototype:resultHeader.deviceInfo] mergeFrom:value] buildPartial];
  } else {
    resultHeader.deviceInfo = value;
  }
  resultHeader.hasDeviceInfo = YES;
  return self;
}
- (HeaderBuilder*) clearDeviceInfo {
  resultHeader.hasDeviceInfo = NO;
  resultHeader.deviceInfo = [HeaderDeviceInfo defaultInstance];
  return self;
}
- (BOOL) hasSourceId {
  return resultHeader.hasSourceId;
}
- (NSString*) sourceId {
  return resultHeader.sourceId;
}
- (HeaderBuilder*) setSourceId:(NSString*) value {
  resultHeader.hasSourceId = YES;
  resultHeader.sourceId = value;
  return self;
}
- (HeaderBuilder*) clearSourceId {
  resultHeader.hasSourceId = NO;
  resultHeader.sourceId = @"";
  return self;
}
- (BOOL) hasPrimarySource {
  return resultHeader.hasPrimarySource;
}
- (NSString*) primarySource {
  return resultHeader.primarySource;
}
- (HeaderBuilder*) setPrimarySource:(NSString*) value {
  resultHeader.hasPrimarySource = YES;
  resultHeader.primarySource = value;
  return self;
}
- (HeaderBuilder*) clearPrimarySource {
  resultHeader.hasPrimarySource = NO;
  resultHeader.primarySource = @"";
  return self;
}
- (BOOL) hasSdkChannel {
  return resultHeader.hasSdkChannel;
}
- (NSString*) sdkChannel {
  return resultHeader.sdkChannel;
}
- (HeaderBuilder*) setSdkChannel:(NSString*) value {
  resultHeader.hasSdkChannel = YES;
  resultHeader.sdkChannel = value;
  return self;
}
- (HeaderBuilder*) clearSdkChannel {
  resultHeader.hasSdkChannel = NO;
  resultHeader.sdkChannel = @"";
  return self;
}
- (BOOL) hasCityId {
  return resultHeader.hasCityId;
}
- (NSString*) cityId {
  return resultHeader.cityId;
}
- (HeaderBuilder*) setCityId:(NSString*) value {
  resultHeader.hasCityId = YES;
  resultHeader.cityId = value;
  return self;
}
- (HeaderBuilder*) clearCityId {
  resultHeader.hasCityId = NO;
  resultHeader.cityId = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
