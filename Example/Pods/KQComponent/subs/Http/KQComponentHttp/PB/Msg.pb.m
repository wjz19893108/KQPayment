// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Msg.pb.h"
// @@protoc_insertion_point(imports)

@implementation MsgRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MsgRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Content ()
@property (strong) NSString* password;
@property (strong) NSString* businessType;
@property (strong) NSString* termId;
@property (strong) NSString* payPassword;
@property (strong) NSString* bankId;
@property (strong) NSString* bankName;
@property (strong) NSString* orderId;
@property (strong) NSString* amt;
@property (strong) NSString* token;
@property (strong) NSString* validateCode;
@property (strong) NSString* termTxnTime;
@property (strong) NSString* idType;
@property (strong) NSString* holderName;
@property (strong) NSString* expireDate;
@property (strong) NSString* vaType;
@property (strong) NSString* pan;
@property (strong) NSString* shortPan;
@property (strong) NSString* phoneNo;
@property (strong) NSString* authDebitBankNames;
@property (strong) NSString* cardId;
@property (strong) NSString* txnType;
@property (strong) NSString* productCode;
@property (strong) NSString* id;
@property (strong) NSString* name;
@property (strong) NSString* province;
@property (strong) NSString* city;
@property (strong) NSString* pageNo;
@property (strong) NSString* startDate;
@property (strong) NSString* endDate;
@property (strong) NSString* status;
@property (strong) NSString* optionType;
@property (strong) NSString* securityQuestion;
@property (strong) NSString* securityAnswer;
@property (strong) NSString* cardType;
@property (strong) NSString* email;
@property (strong) NSString* uniQrCode;
@property (strong) NSString* productType;
@property (strong) NSString* address;
@property (strong) NSString* resendFlag;
@property (strong) NSString* passwordType;
@property (strong) NSString* cvv2;
@property (strong) NSString* refreshToken;
@property (strong) NSString* idTxnCtrl;
@property (strong) NSString* extData1;
@property (strong) NSString* authBankIds;
@property (strong) NSString* authDebitBankIds;
@property (strong) NSString* authBankNames;
@property (strong) NSString* branchBank;
@property (strong) NSString* txnFlag;
@property (strong) NSString* authCode;
@property (strong) NSString* txnTime;
@property (strong) NSString* signFlag;
@property (strong) NSString* productName;
@property (strong) NSString* zoneType;
@property (strong) NSString* pin;
@property (strong) NSString* origOrderId;
@property (strong) NSString* count;
@property (strong) NSString* remark;
@property (strong) NSString* memAcctcodeName;
@property (strong) NSString* memAcctcodeBalance;
@property (strong) NSString* existFlg;
@property (strong) NSString* payeeNotes;
@property (strong) NSString* realNameFlg;
@property (strong) NSString* bindPhoneFlg;
@property (strong) NSString* firstLoginFlg;
@property (strong) NSString* totalAmt;
@property (strong) NSString* totalCount;
@property (strong) NSString* orderType;
@property (strong) NSString* certId;
@property (strong) NSString* recommendId;
@property (strong) NSString* orderCode;
@property (strong) NSString* max;
@property (strong) NSString* statusSet;
@property (strong) NSString* outTradeNo;
@property (strong) ContentAppInfo* appInfo;
@property (strong) NSMutableArray * bankArray;
@property (strong) ContentMember* member;
@property (strong) NSMutableArray * memberIdentityArray;
@property (strong) NSMutableArray * safeProblemArray;
@property (strong) NSMutableArray * queryWalletBill99BillResponseArray;
@property (strong) NSMutableArray * atpProdArray;
@property (strong) NSString* tradeId;
@property (strong) NSString* endTime;
@property (strong) NSMutableArray * solidCardArray;
@property (strong) NSString* userFlag;
@property (strong) NSString* idCardNo;
@property (strong) NSString* idCardImg;
@property (strong) NSString* photo;
@property (strong) NSString* isDisplay;
@property (strong) NSString* shortPhones;
@property (strong) NSString* ripAmount;
@property (strong) ContentMemberAuthDto* memberAuthDto;
@property (strong) NSMutableArray * bankLimitAmountDtoArray;
@property (strong) NSString* occupation;
@property (strong) NSString* partnerUserId;
@property (strong) NSString* memberBankAcctId;
@property (strong) NSString* expiresIn;
@property (strong) ContentAppUpInfo* appUpInfo;
@property (strong) NSString* keyboardSeq;
@property (strong) NSString* imgCode;
@property (strong) NSString* imgToken;
@property (strong) NSString* validateToken;
@property (strong) NSString* errorType;
@property (strong) NSString* flag;
@property (strong) NSMutableArray * queryAllFinaprodResponseArray;
@property (strong) NSString* finProdType;
@property (strong) NSString* tradeType;
@property (strong) NSString* prodStatus;
@property (strong) NSString* queryOrders;
@property (strong) NSString* horizonTo;
@property (strong) NSString* returnRateExp;
@property (strong) NSMutableArray * atpTradeOrderArray;
@property (strong) NSString* totalFrozenAmt;
@property (strong) NSString* fee;
@property (strong) NSString* transFeeRate;
@property (strong) NSString* bankNameId;
@property (strong) ContentFinancialInfo* financialInfo;
@property (strong) NSMutableArray * prodAccountInfoArray;
@property (strong) NSString* isMainOrder;
@property (strong) NSString* merchantId;
@property (strong) NSString* merchantName;
@property (strong) NSString* osVersion;
@property (strong) NSString* isRoot;
@property (strong) NSString* size;
@property (strong) NSString* phoneModel;
@property (strong) NSString* wifiName;
@property (strong) NSString* wifiMac;
@property (strong) NSString* appId;
@property (strong) NSString* merchantCode;
@property (strong) NSString* billOrderNo;
@property (strong) NSString* channelType;
@property (strong) NSString* orderAmount;
@property (strong) NSString* payMode;
@property (strong) NSString* payAmount;
@property (strong) NSString* orderStatus;
@property (strong) NSString* outOrderType;
@property (strong) NSString* txnTimeStart;
@property (strong) NSString* txnTimeExpire;
@property (strong) NSString* payStatus;
@property (strong) ContentProductInfo* productInfo;
@property (strong) NSMutableArray * payMethodArray;
@property (strong) NSString* outEquityCode;
@property (strong) NSString* outEquityAmount;
@property (strong) NSString* payMethodId;
@property (strong) NSMutableArray * instalmentArray;
@property (strong) NSString* instalmentId;
@property (strong) NSString* txnEndTime;
@property (strong) NSString* validateElement;
@property (strong) NSString* sMsCode;
@property (strong) NSMutableArray * voucherArray;
@property (strong) NSMutableArray * ateTradeOrderArray;
@property (strong) NSString* equityAmount;
@property (strong) NSString* supportFinger;
@property (strong) NSString* type;
@property (strong) NSString* tradeStatus;
@property (strong) NSString* productDesc;
@property (strong) NSString* subMerchantName;
@property (strong) NSString* memo;
@property (strong) NSString* notifyMode;
@property (strong) NSMutableArray * memberListArray;
@property (strong) NSString* gpsInfo;
@property (strong) NSString* publishNo;
@property (strong) NSString* resolution;
@property (strong) NSString* msgTypeId;
@property (strong) NSString* lastRecordId;
@property (strong) NSString* scollUp;
@property (strong) NSString* jsonCallBack;
@property (strong) NSMutableArray * msgTypeInfoArray;
@property (strong) NSMutableArray * msgInfoArray;
@property (strong) NSString* msgId;
@property (strong) NSMutableArray * resourceInfoArray;
@property (strong) NSMutableArray * commonZipInfoArray;
@property (strong) NSMutableArray * shareInfoArray;
@property (strong) NSString* resourceId;
@property (strong) NSString* vcsBizType;
@property (strong) NSString* msg;
@property (strong) NSString* repayCode;
@property (strong) NSMutableArray * userAppLoginInfoArray;
@property (strong) NSString* resultType;
@property (strong) NSMutableArray * conflictAccArray;
@property (strong) NSString* sysFrom;
@property (strong) NSString* loginPin;
@property (strong) NS_RETURNS_NOT_RETAINED NSString* newLoginPin;
@property (strong) NSString* payPwd;
@property (strong) NS_RETURNS_NOT_RETAINED NSString* newPayPwd;
@property (strong) NSString* payPwdResetFlag;
@property (strong) NSString* sex;
@property (strong) NSString* birthday;
@property (strong) NSString* nationality;
@property (strong) NSString* issuingAuthority;
@property (strong) NSMutableArray * cardInfoArray;
@property (strong) ContentSummarizeInfo* summarizeInfo;
@property (strong) NSString* currentPage;
@property (strong) NSString* pageSize;
@property (strong) NSMutableArray * txnInfoArray;
@property (strong) NSString* applyTime;
@property (strong) NSString* totalFee;
@property (strong) NSString* tipInfo;
@property (strong) NSString* checkCode;
@property (strong) NSString* total;
@property (strong) NSString* repayAmt;
@property (strong) NSString* billOrderId;
@property (strong) NSString* txnAcctNo;
@property (strong) NSString* lastRowNum;
@property (strong) NSString* info;
@property (strong) NSMutableArray * creditOrderArray;
@property (strong) NSString* repayStatus;
@property (strong) NSString* interest;
@property (strong) NSString* returnAmt;
@property (strong) NSString* stages;
@property (strong) NSMutableArray * divideArray;
@property (strong) NSMutableArray * repayOrderArray;
@property (strong) NSMutableArray * payTypesArray;
@property (strong) NSString* payType;
@property (strong) NSMutableArray * repayRecordArray;
@property (strong) NSString* accountAmt;
@property (strong) NSString* statusName;
@property (strong) NSString* forceFaceCheck;
@property (strong) NSString* allowRepay;
@property (strong) NSString* locationProvince;
@property (strong) NSString* locationCity;
@property (strong) NSString* locationDistrict;
@property (strong) NSString* locationAddress;
@property (strong) NSString* kakaUrl;
@property (strong) NSString* doudouUrl;
@property (strong) NSString* repayId;
@property (strong) NSMutableArray * contractArray;
@property (strong) NSString* url;
@property (strong) ContentFrozenInfo* frozenInfo;
@property (strong) NSString* fcsCreditAmt;
@property (strong) NSString* leftFcsCreditAmt;
@property (strong) NSString* fcsCreditAmtStatus;
@property (strong) NSString* fcsCreditAmtType;
@property (strong) NSString* fcsCreditUrl;
@property (strong) NSString* leftCreditAmtName;
@property (strong) NSString* totalCreditAmtName;
@property (strong) NSString* fcsCreditName;
@property (strong) NSString* fcsName;
@property (strong) NSString* quotaShowType;
@property (strong) NSString* fcsMerchantName;
@property (strong) NSString* leftFcsCreditName;
@property (strong) NSString* supplementInfo;
@property (strong) NSString* extInfo;
@property (strong) NSString* sort;
@property (strong) NSMutableArray * quotaListArray;
@property (strong) NSString* isShowPreQuotaAmt;
@property (strong) NSString* preFcsAmt;
@property (strong) NSString* preFcsUrl;
@property (strong) NSMutableArray * freeListArray;
@property (strong) NSString* userGrade;
@property (strong) ContentMemberTwo* memberTwo;
@property (strong) NSString* mebCode;
@property (strong) NSString* userName;
@property (strong) NSString* lastRequestTime;
@property (strong) ContentCardInfo* cardInfoObject;
@property (strong) ContentOrderInfo* orderInfo;
@property (strong) NSMutableArray * productGroupArray;
@property (strong) NSString* amtType;
@property (strong) NSMutableArray * withdrawLimitArray;
@property (strong) NSString* equityCode;
@property (strong) NSString* functionCode;
@property (strong) NSString* twSign;
@property (strong) NSString* leftSumAmt;
@property (strong) NSString* virtualOrderAmt;
@property (strong) NSString* sumCreditAmt;
@property (strong) NSString* showVoucher;
@property (strong) NSMutableArray * equityInfoArray;
@property (strong) NSMutableArray * activityArray;
@property (strong) NSString* billId;
@property (strong) NSString* siedc;
@property (strong) NSMutableArray * interestsArray;
@property (strong) NSString* queryInterval;
@property (strong) NSString* queryTimes;
@property (strong) NSString* stlMerchantCode;
@property (strong) NSString* equityMessage;
@property (strong) NSString* outEquityMessage;
@property (strong) NSMutableArray * seedDataArray;
@property (strong) NSMutableArray * extMapArray;
@end

@implementation Content

- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasBusinessType {
  return !!hasBusinessType_;
}
- (void) setHasBusinessType:(BOOL) _value_ {
  hasBusinessType_ = !!_value_;
}
@synthesize businessType;
- (BOOL) hasTermId {
  return !!hasTermId_;
}
- (void) setHasTermId:(BOOL) _value_ {
  hasTermId_ = !!_value_;
}
@synthesize termId;
- (BOOL) hasPayPassword {
  return !!hasPayPassword_;
}
- (void) setHasPayPassword:(BOOL) _value_ {
  hasPayPassword_ = !!_value_;
}
@synthesize payPassword;
- (BOOL) hasBankId {
  return !!hasBankId_;
}
- (void) setHasBankId:(BOOL) _value_ {
  hasBankId_ = !!_value_;
}
@synthesize bankId;
- (BOOL) hasBankName {
  return !!hasBankName_;
}
- (void) setHasBankName:(BOOL) _value_ {
  hasBankName_ = !!_value_;
}
@synthesize bankName;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) _value_ {
  hasOrderId_ = !!_value_;
}
@synthesize orderId;
- (BOOL) hasAmt {
  return !!hasAmt_;
}
- (void) setHasAmt:(BOOL) _value_ {
  hasAmt_ = !!_value_;
}
@synthesize amt;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (BOOL) hasValidateCode {
  return !!hasValidateCode_;
}
- (void) setHasValidateCode:(BOOL) _value_ {
  hasValidateCode_ = !!_value_;
}
@synthesize validateCode;
- (BOOL) hasTermTxnTime {
  return !!hasTermTxnTime_;
}
- (void) setHasTermTxnTime:(BOOL) _value_ {
  hasTermTxnTime_ = !!_value_;
}
@synthesize termTxnTime;
- (BOOL) hasIdType {
  return !!hasIdType_;
}
- (void) setHasIdType:(BOOL) _value_ {
  hasIdType_ = !!_value_;
}
@synthesize idType;
- (BOOL) hasHolderName {
  return !!hasHolderName_;
}
- (void) setHasHolderName:(BOOL) _value_ {
  hasHolderName_ = !!_value_;
}
@synthesize holderName;
- (BOOL) hasExpireDate {
  return !!hasExpireDate_;
}
- (void) setHasExpireDate:(BOOL) _value_ {
  hasExpireDate_ = !!_value_;
}
@synthesize expireDate;
- (BOOL) hasVaType {
  return !!hasVaType_;
}
- (void) setHasVaType:(BOOL) _value_ {
  hasVaType_ = !!_value_;
}
@synthesize vaType;
- (BOOL) hasPan {
  return !!hasPan_;
}
- (void) setHasPan:(BOOL) _value_ {
  hasPan_ = !!_value_;
}
@synthesize pan;
- (BOOL) hasShortPan {
  return !!hasShortPan_;
}
- (void) setHasShortPan:(BOOL) _value_ {
  hasShortPan_ = !!_value_;
}
@synthesize shortPan;
- (BOOL) hasPhoneNo {
  return !!hasPhoneNo_;
}
- (void) setHasPhoneNo:(BOOL) _value_ {
  hasPhoneNo_ = !!_value_;
}
@synthesize phoneNo;
- (BOOL) hasAuthDebitBankNames {
  return !!hasAuthDebitBankNames_;
}
- (void) setHasAuthDebitBankNames:(BOOL) _value_ {
  hasAuthDebitBankNames_ = !!_value_;
}
@synthesize authDebitBankNames;
- (BOOL) hasCardId {
  return !!hasCardId_;
}
- (void) setHasCardId:(BOOL) _value_ {
  hasCardId_ = !!_value_;
}
@synthesize cardId;
- (BOOL) hasTxnType {
  return !!hasTxnType_;
}
- (void) setHasTxnType:(BOOL) _value_ {
  hasTxnType_ = !!_value_;
}
@synthesize txnType;
- (BOOL) hasProductCode {
  return !!hasProductCode_;
}
- (void) setHasProductCode:(BOOL) _value_ {
  hasProductCode_ = !!_value_;
}
@synthesize productCode;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasProvince {
  return !!hasProvince_;
}
- (void) setHasProvince:(BOOL) _value_ {
  hasProvince_ = !!_value_;
}
@synthesize province;
- (BOOL) hasCity {
  return !!hasCity_;
}
- (void) setHasCity:(BOOL) _value_ {
  hasCity_ = !!_value_;
}
@synthesize city;
- (BOOL) hasPageNo {
  return !!hasPageNo_;
}
- (void) setHasPageNo:(BOOL) _value_ {
  hasPageNo_ = !!_value_;
}
@synthesize pageNo;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) _value_ {
  hasStartDate_ = !!_value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) _value_ {
  hasEndDate_ = !!_value_;
}
@synthesize endDate;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasOptionType {
  return !!hasOptionType_;
}
- (void) setHasOptionType:(BOOL) _value_ {
  hasOptionType_ = !!_value_;
}
@synthesize optionType;
- (BOOL) hasSecurityQuestion {
  return !!hasSecurityQuestion_;
}
- (void) setHasSecurityQuestion:(BOOL) _value_ {
  hasSecurityQuestion_ = !!_value_;
}
@synthesize securityQuestion;
- (BOOL) hasSecurityAnswer {
  return !!hasSecurityAnswer_;
}
- (void) setHasSecurityAnswer:(BOOL) _value_ {
  hasSecurityAnswer_ = !!_value_;
}
@synthesize securityAnswer;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) _value_ {
  hasCardType_ = !!_value_;
}
@synthesize cardType;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasUniQrCode {
  return !!hasUniQrCode_;
}
- (void) setHasUniQrCode:(BOOL) _value_ {
  hasUniQrCode_ = !!_value_;
}
@synthesize uniQrCode;
- (BOOL) hasProductType {
  return !!hasProductType_;
}
- (void) setHasProductType:(BOOL) _value_ {
  hasProductType_ = !!_value_;
}
@synthesize productType;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) _value_ {
  hasAddress_ = !!_value_;
}
@synthesize address;
- (BOOL) hasResendFlag {
  return !!hasResendFlag_;
}
- (void) setHasResendFlag:(BOOL) _value_ {
  hasResendFlag_ = !!_value_;
}
@synthesize resendFlag;
- (BOOL) hasPasswordType {
  return !!hasPasswordType_;
}
- (void) setHasPasswordType:(BOOL) _value_ {
  hasPasswordType_ = !!_value_;
}
@synthesize passwordType;
- (BOOL) hasCvv2 {
  return !!hasCvv2_;
}
- (void) setHasCvv2:(BOOL) _value_ {
  hasCvv2_ = !!_value_;
}
@synthesize cvv2;
- (BOOL) hasRefreshToken {
  return !!hasRefreshToken_;
}
- (void) setHasRefreshToken:(BOOL) _value_ {
  hasRefreshToken_ = !!_value_;
}
@synthesize refreshToken;
- (BOOL) hasIdTxnCtrl {
  return !!hasIdTxnCtrl_;
}
- (void) setHasIdTxnCtrl:(BOOL) _value_ {
  hasIdTxnCtrl_ = !!_value_;
}
@synthesize idTxnCtrl;
- (BOOL) hasExtData1 {
  return !!hasExtData1_;
}
- (void) setHasExtData1:(BOOL) _value_ {
  hasExtData1_ = !!_value_;
}
@synthesize extData1;
- (BOOL) hasAuthBankIds {
  return !!hasAuthBankIds_;
}
- (void) setHasAuthBankIds:(BOOL) _value_ {
  hasAuthBankIds_ = !!_value_;
}
@synthesize authBankIds;
- (BOOL) hasAuthDebitBankIds {
  return !!hasAuthDebitBankIds_;
}
- (void) setHasAuthDebitBankIds:(BOOL) _value_ {
  hasAuthDebitBankIds_ = !!_value_;
}
@synthesize authDebitBankIds;
- (BOOL) hasAuthBankNames {
  return !!hasAuthBankNames_;
}
- (void) setHasAuthBankNames:(BOOL) _value_ {
  hasAuthBankNames_ = !!_value_;
}
@synthesize authBankNames;
- (BOOL) hasBranchBank {
  return !!hasBranchBank_;
}
- (void) setHasBranchBank:(BOOL) _value_ {
  hasBranchBank_ = !!_value_;
}
@synthesize branchBank;
- (BOOL) hasTxnFlag {
  return !!hasTxnFlag_;
}
- (void) setHasTxnFlag:(BOOL) _value_ {
  hasTxnFlag_ = !!_value_;
}
@synthesize txnFlag;
- (BOOL) hasAuthCode {
  return !!hasAuthCode_;
}
- (void) setHasAuthCode:(BOOL) _value_ {
  hasAuthCode_ = !!_value_;
}
@synthesize authCode;
- (BOOL) hasTxnTime {
  return !!hasTxnTime_;
}
- (void) setHasTxnTime:(BOOL) _value_ {
  hasTxnTime_ = !!_value_;
}
@synthesize txnTime;
- (BOOL) hasSignFlag {
  return !!hasSignFlag_;
}
- (void) setHasSignFlag:(BOOL) _value_ {
  hasSignFlag_ = !!_value_;
}
@synthesize signFlag;
- (BOOL) hasProductName {
  return !!hasProductName_;
}
- (void) setHasProductName:(BOOL) _value_ {
  hasProductName_ = !!_value_;
}
@synthesize productName;
- (BOOL) hasZoneType {
  return !!hasZoneType_;
}
- (void) setHasZoneType:(BOOL) _value_ {
  hasZoneType_ = !!_value_;
}
@synthesize zoneType;
- (BOOL) hasPin {
  return !!hasPin_;
}
- (void) setHasPin:(BOOL) _value_ {
  hasPin_ = !!_value_;
}
@synthesize pin;
- (BOOL) hasOrigOrderId {
  return !!hasOrigOrderId_;
}
- (void) setHasOrigOrderId:(BOOL) _value_ {
  hasOrigOrderId_ = !!_value_;
}
@synthesize origOrderId;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasRemark {
  return !!hasRemark_;
}
- (void) setHasRemark:(BOOL) _value_ {
  hasRemark_ = !!_value_;
}
@synthesize remark;
- (BOOL) hasMemAcctcodeName {
  return !!hasMemAcctcodeName_;
}
- (void) setHasMemAcctcodeName:(BOOL) _value_ {
  hasMemAcctcodeName_ = !!_value_;
}
@synthesize memAcctcodeName;
- (BOOL) hasMemAcctcodeBalance {
  return !!hasMemAcctcodeBalance_;
}
- (void) setHasMemAcctcodeBalance:(BOOL) _value_ {
  hasMemAcctcodeBalance_ = !!_value_;
}
@synthesize memAcctcodeBalance;
- (BOOL) hasExistFlg {
  return !!hasExistFlg_;
}
- (void) setHasExistFlg:(BOOL) _value_ {
  hasExistFlg_ = !!_value_;
}
@synthesize existFlg;
- (BOOL) hasPayeeNotes {
  return !!hasPayeeNotes_;
}
- (void) setHasPayeeNotes:(BOOL) _value_ {
  hasPayeeNotes_ = !!_value_;
}
@synthesize payeeNotes;
- (BOOL) hasRealNameFlg {
  return !!hasRealNameFlg_;
}
- (void) setHasRealNameFlg:(BOOL) _value_ {
  hasRealNameFlg_ = !!_value_;
}
@synthesize realNameFlg;
- (BOOL) hasBindPhoneFlg {
  return !!hasBindPhoneFlg_;
}
- (void) setHasBindPhoneFlg:(BOOL) _value_ {
  hasBindPhoneFlg_ = !!_value_;
}
@synthesize bindPhoneFlg;
- (BOOL) hasFirstLoginFlg {
  return !!hasFirstLoginFlg_;
}
- (void) setHasFirstLoginFlg:(BOOL) _value_ {
  hasFirstLoginFlg_ = !!_value_;
}
@synthesize firstLoginFlg;
- (BOOL) hasTotalAmt {
  return !!hasTotalAmt_;
}
- (void) setHasTotalAmt:(BOOL) _value_ {
  hasTotalAmt_ = !!_value_;
}
@synthesize totalAmt;
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) _value_ {
  hasTotalCount_ = !!_value_;
}
@synthesize totalCount;
- (BOOL) hasOrderType {
  return !!hasOrderType_;
}
- (void) setHasOrderType:(BOOL) _value_ {
  hasOrderType_ = !!_value_;
}
@synthesize orderType;
- (BOOL) hasCertId {
  return !!hasCertId_;
}
- (void) setHasCertId:(BOOL) _value_ {
  hasCertId_ = !!_value_;
}
@synthesize certId;
- (BOOL) hasRecommendId {
  return !!hasRecommendId_;
}
- (void) setHasRecommendId:(BOOL) _value_ {
  hasRecommendId_ = !!_value_;
}
@synthesize recommendId;
- (BOOL) hasOrderCode {
  return !!hasOrderCode_;
}
- (void) setHasOrderCode:(BOOL) _value_ {
  hasOrderCode_ = !!_value_;
}
@synthesize orderCode;
- (BOOL) hasMax {
  return !!hasMax_;
}
- (void) setHasMax:(BOOL) _value_ {
  hasMax_ = !!_value_;
}
@synthesize max;
- (BOOL) hasStatusSet {
  return !!hasStatusSet_;
}
- (void) setHasStatusSet:(BOOL) _value_ {
  hasStatusSet_ = !!_value_;
}
@synthesize statusSet;
- (BOOL) hasOutTradeNo {
  return !!hasOutTradeNo_;
}
- (void) setHasOutTradeNo:(BOOL) _value_ {
  hasOutTradeNo_ = !!_value_;
}
@synthesize outTradeNo;
- (BOOL) hasAppInfo {
  return !!hasAppInfo_;
}
- (void) setHasAppInfo:(BOOL) _value_ {
  hasAppInfo_ = !!_value_;
}
@synthesize appInfo;
@synthesize bankArray;
@dynamic bank;
- (BOOL) hasMember {
  return !!hasMember_;
}
- (void) setHasMember:(BOOL) _value_ {
  hasMember_ = !!_value_;
}
@synthesize member;
@synthesize memberIdentityArray;
@dynamic memberIdentity;
@synthesize safeProblemArray;
@dynamic safeProblem;
@synthesize queryWalletBill99BillResponseArray;
@dynamic queryWalletBill99BillResponse;
@synthesize atpProdArray;
@dynamic atpProd;
- (BOOL) hasTradeId {
  return !!hasTradeId_;
}
- (void) setHasTradeId:(BOOL) _value_ {
  hasTradeId_ = !!_value_;
}
@synthesize tradeId;
- (BOOL) hasEndTime {
  return !!hasEndTime_;
}
- (void) setHasEndTime:(BOOL) _value_ {
  hasEndTime_ = !!_value_;
}
@synthesize endTime;
@synthesize solidCardArray;
@dynamic solidCard;
- (BOOL) hasUserFlag {
  return !!hasUserFlag_;
}
- (void) setHasUserFlag:(BOOL) _value_ {
  hasUserFlag_ = !!_value_;
}
@synthesize userFlag;
- (BOOL) hasIdCardNo {
  return !!hasIdCardNo_;
}
- (void) setHasIdCardNo:(BOOL) _value_ {
  hasIdCardNo_ = !!_value_;
}
@synthesize idCardNo;
- (BOOL) hasIdCardImg {
  return !!hasIdCardImg_;
}
- (void) setHasIdCardImg:(BOOL) _value_ {
  hasIdCardImg_ = !!_value_;
}
@synthesize idCardImg;
- (BOOL) hasPhoto {
  return !!hasPhoto_;
}
- (void) setHasPhoto:(BOOL) _value_ {
  hasPhoto_ = !!_value_;
}
@synthesize photo;
- (BOOL) hasIsDisplay {
  return !!hasIsDisplay_;
}
- (void) setHasIsDisplay:(BOOL) _value_ {
  hasIsDisplay_ = !!_value_;
}
@synthesize isDisplay;
- (BOOL) hasShortPhones {
  return !!hasShortPhones_;
}
- (void) setHasShortPhones:(BOOL) _value_ {
  hasShortPhones_ = !!_value_;
}
@synthesize shortPhones;
- (BOOL) hasRipAmount {
  return !!hasRipAmount_;
}
- (void) setHasRipAmount:(BOOL) _value_ {
  hasRipAmount_ = !!_value_;
}
@synthesize ripAmount;
- (BOOL) hasMemberAuthDto {
  return !!hasMemberAuthDto_;
}
- (void) setHasMemberAuthDto:(BOOL) _value_ {
  hasMemberAuthDto_ = !!_value_;
}
@synthesize memberAuthDto;
@synthesize bankLimitAmountDtoArray;
@dynamic bankLimitAmountDto;
- (BOOL) hasOccupation {
  return !!hasOccupation_;
}
- (void) setHasOccupation:(BOOL) _value_ {
  hasOccupation_ = !!_value_;
}
@synthesize occupation;
- (BOOL) hasPartnerUserId {
  return !!hasPartnerUserId_;
}
- (void) setHasPartnerUserId:(BOOL) _value_ {
  hasPartnerUserId_ = !!_value_;
}
@synthesize partnerUserId;
- (BOOL) hasMemberBankAcctId {
  return !!hasMemberBankAcctId_;
}
- (void) setHasMemberBankAcctId:(BOOL) _value_ {
  hasMemberBankAcctId_ = !!_value_;
}
@synthesize memberBankAcctId;
- (BOOL) hasExpiresIn {
  return !!hasExpiresIn_;
}
- (void) setHasExpiresIn:(BOOL) _value_ {
  hasExpiresIn_ = !!_value_;
}
@synthesize expiresIn;
- (BOOL) hasAppUpInfo {
  return !!hasAppUpInfo_;
}
- (void) setHasAppUpInfo:(BOOL) _value_ {
  hasAppUpInfo_ = !!_value_;
}
@synthesize appUpInfo;
- (BOOL) hasKeyboardSeq {
  return !!hasKeyboardSeq_;
}
- (void) setHasKeyboardSeq:(BOOL) _value_ {
  hasKeyboardSeq_ = !!_value_;
}
@synthesize keyboardSeq;
- (BOOL) hasImgCode {
  return !!hasImgCode_;
}
- (void) setHasImgCode:(BOOL) _value_ {
  hasImgCode_ = !!_value_;
}
@synthesize imgCode;
- (BOOL) hasImgToken {
  return !!hasImgToken_;
}
- (void) setHasImgToken:(BOOL) _value_ {
  hasImgToken_ = !!_value_;
}
@synthesize imgToken;
- (BOOL) hasValidateToken {
  return !!hasValidateToken_;
}
- (void) setHasValidateToken:(BOOL) _value_ {
  hasValidateToken_ = !!_value_;
}
@synthesize validateToken;
- (BOOL) hasErrorType {
  return !!hasErrorType_;
}
- (void) setHasErrorType:(BOOL) _value_ {
  hasErrorType_ = !!_value_;
}
@synthesize errorType;
- (BOOL) hasFlag {
  return !!hasFlag_;
}
- (void) setHasFlag:(BOOL) _value_ {
  hasFlag_ = !!_value_;
}
@synthesize flag;
@synthesize queryAllFinaprodResponseArray;
@dynamic queryAllFinaprodResponse;
- (BOOL) hasFinProdType {
  return !!hasFinProdType_;
}
- (void) setHasFinProdType:(BOOL) _value_ {
  hasFinProdType_ = !!_value_;
}
@synthesize finProdType;
- (BOOL) hasTradeType {
  return !!hasTradeType_;
}
- (void) setHasTradeType:(BOOL) _value_ {
  hasTradeType_ = !!_value_;
}
@synthesize tradeType;
- (BOOL) hasProdStatus {
  return !!hasProdStatus_;
}
- (void) setHasProdStatus:(BOOL) _value_ {
  hasProdStatus_ = !!_value_;
}
@synthesize prodStatus;
- (BOOL) hasQueryOrders {
  return !!hasQueryOrders_;
}
- (void) setHasQueryOrders:(BOOL) _value_ {
  hasQueryOrders_ = !!_value_;
}
@synthesize queryOrders;
- (BOOL) hasHorizonTo {
  return !!hasHorizonTo_;
}
- (void) setHasHorizonTo:(BOOL) _value_ {
  hasHorizonTo_ = !!_value_;
}
@synthesize horizonTo;
- (BOOL) hasReturnRateExp {
  return !!hasReturnRateExp_;
}
- (void) setHasReturnRateExp:(BOOL) _value_ {
  hasReturnRateExp_ = !!_value_;
}
@synthesize returnRateExp;
@synthesize atpTradeOrderArray;
@dynamic atpTradeOrder;
- (BOOL) hasTotalFrozenAmt {
  return !!hasTotalFrozenAmt_;
}
- (void) setHasTotalFrozenAmt:(BOOL) _value_ {
  hasTotalFrozenAmt_ = !!_value_;
}
@synthesize totalFrozenAmt;
- (BOOL) hasFee {
  return !!hasFee_;
}
- (void) setHasFee:(BOOL) _value_ {
  hasFee_ = !!_value_;
}
@synthesize fee;
- (BOOL) hasTransFeeRate {
  return !!hasTransFeeRate_;
}
- (void) setHasTransFeeRate:(BOOL) _value_ {
  hasTransFeeRate_ = !!_value_;
}
@synthesize transFeeRate;
- (BOOL) hasBankNameId {
  return !!hasBankNameId_;
}
- (void) setHasBankNameId:(BOOL) _value_ {
  hasBankNameId_ = !!_value_;
}
@synthesize bankNameId;
- (BOOL) hasFinancialInfo {
  return !!hasFinancialInfo_;
}
- (void) setHasFinancialInfo:(BOOL) _value_ {
  hasFinancialInfo_ = !!_value_;
}
@synthesize financialInfo;
@synthesize prodAccountInfoArray;
@dynamic prodAccountInfo;
- (BOOL) hasIsMainOrder {
  return !!hasIsMainOrder_;
}
- (void) setHasIsMainOrder:(BOOL) _value_ {
  hasIsMainOrder_ = !!_value_;
}
@synthesize isMainOrder;
- (BOOL) hasMerchantId {
  return !!hasMerchantId_;
}
- (void) setHasMerchantId:(BOOL) _value_ {
  hasMerchantId_ = !!_value_;
}
@synthesize merchantId;
- (BOOL) hasMerchantName {
  return !!hasMerchantName_;
}
- (void) setHasMerchantName:(BOOL) _value_ {
  hasMerchantName_ = !!_value_;
}
@synthesize merchantName;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) _value_ {
  hasOsVersion_ = !!_value_;
}
@synthesize osVersion;
- (BOOL) hasIsRoot {
  return !!hasIsRoot_;
}
- (void) setHasIsRoot:(BOOL) _value_ {
  hasIsRoot_ = !!_value_;
}
@synthesize isRoot;
- (BOOL) hasSize {
  return !!hasSize_;
}
- (void) setHasSize:(BOOL) _value_ {
  hasSize_ = !!_value_;
}
@synthesize size;
- (BOOL) hasPhoneModel {
  return !!hasPhoneModel_;
}
- (void) setHasPhoneModel:(BOOL) _value_ {
  hasPhoneModel_ = !!_value_;
}
@synthesize phoneModel;
- (BOOL) hasWifiName {
  return !!hasWifiName_;
}
- (void) setHasWifiName:(BOOL) _value_ {
  hasWifiName_ = !!_value_;
}
@synthesize wifiName;
- (BOOL) hasWifiMac {
  return !!hasWifiMac_;
}
- (void) setHasWifiMac:(BOOL) _value_ {
  hasWifiMac_ = !!_value_;
}
@synthesize wifiMac;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) _value_ {
  hasAppId_ = !!_value_;
}
@synthesize appId;
- (BOOL) hasMerchantCode {
  return !!hasMerchantCode_;
}
- (void) setHasMerchantCode:(BOOL) _value_ {
  hasMerchantCode_ = !!_value_;
}
@synthesize merchantCode;
- (BOOL) hasBillOrderNo {
  return !!hasBillOrderNo_;
}
- (void) setHasBillOrderNo:(BOOL) _value_ {
  hasBillOrderNo_ = !!_value_;
}
@synthesize billOrderNo;
- (BOOL) hasChannelType {
  return !!hasChannelType_;
}
- (void) setHasChannelType:(BOOL) _value_ {
  hasChannelType_ = !!_value_;
}
@synthesize channelType;
- (BOOL) hasOrderAmount {
  return !!hasOrderAmount_;
}
- (void) setHasOrderAmount:(BOOL) _value_ {
  hasOrderAmount_ = !!_value_;
}
@synthesize orderAmount;
- (BOOL) hasPayMode {
  return !!hasPayMode_;
}
- (void) setHasPayMode:(BOOL) _value_ {
  hasPayMode_ = !!_value_;
}
@synthesize payMode;
- (BOOL) hasPayAmount {
  return !!hasPayAmount_;
}
- (void) setHasPayAmount:(BOOL) _value_ {
  hasPayAmount_ = !!_value_;
}
@synthesize payAmount;
- (BOOL) hasOrderStatus {
  return !!hasOrderStatus_;
}
- (void) setHasOrderStatus:(BOOL) _value_ {
  hasOrderStatus_ = !!_value_;
}
@synthesize orderStatus;
- (BOOL) hasOutOrderType {
  return !!hasOutOrderType_;
}
- (void) setHasOutOrderType:(BOOL) _value_ {
  hasOutOrderType_ = !!_value_;
}
@synthesize outOrderType;
- (BOOL) hasTxnTimeStart {
  return !!hasTxnTimeStart_;
}
- (void) setHasTxnTimeStart:(BOOL) _value_ {
  hasTxnTimeStart_ = !!_value_;
}
@synthesize txnTimeStart;
- (BOOL) hasTxnTimeExpire {
  return !!hasTxnTimeExpire_;
}
- (void) setHasTxnTimeExpire:(BOOL) _value_ {
  hasTxnTimeExpire_ = !!_value_;
}
@synthesize txnTimeExpire;
- (BOOL) hasPayStatus {
  return !!hasPayStatus_;
}
- (void) setHasPayStatus:(BOOL) _value_ {
  hasPayStatus_ = !!_value_;
}
@synthesize payStatus;
- (BOOL) hasProductInfo {
  return !!hasProductInfo_;
}
- (void) setHasProductInfo:(BOOL) _value_ {
  hasProductInfo_ = !!_value_;
}
@synthesize productInfo;
@synthesize payMethodArray;
@dynamic payMethod;
- (BOOL) hasOutEquityCode {
  return !!hasOutEquityCode_;
}
- (void) setHasOutEquityCode:(BOOL) _value_ {
  hasOutEquityCode_ = !!_value_;
}
@synthesize outEquityCode;
- (BOOL) hasOutEquityAmount {
  return !!hasOutEquityAmount_;
}
- (void) setHasOutEquityAmount:(BOOL) _value_ {
  hasOutEquityAmount_ = !!_value_;
}
@synthesize outEquityAmount;
- (BOOL) hasPayMethodId {
  return !!hasPayMethodId_;
}
- (void) setHasPayMethodId:(BOOL) _value_ {
  hasPayMethodId_ = !!_value_;
}
@synthesize payMethodId;
@synthesize instalmentArray;
@dynamic instalment;
- (BOOL) hasInstalmentId {
  return !!hasInstalmentId_;
}
- (void) setHasInstalmentId:(BOOL) _value_ {
  hasInstalmentId_ = !!_value_;
}
@synthesize instalmentId;
- (BOOL) hasTxnEndTime {
  return !!hasTxnEndTime_;
}
- (void) setHasTxnEndTime:(BOOL) _value_ {
  hasTxnEndTime_ = !!_value_;
}
@synthesize txnEndTime;
- (BOOL) hasValidateElement {
  return !!hasValidateElement_;
}
- (void) setHasValidateElement:(BOOL) _value_ {
  hasValidateElement_ = !!_value_;
}
@synthesize validateElement;
- (BOOL) hasSMsCode {
  return !!hasSMsCode_;
}
- (void) setHasSMsCode:(BOOL) _value_ {
  hasSMsCode_ = !!_value_;
}
@synthesize sMsCode;
@synthesize voucherArray;
@dynamic voucher;
@synthesize ateTradeOrderArray;
@dynamic ateTradeOrder;
- (BOOL) hasEquityAmount {
  return !!hasEquityAmount_;
}
- (void) setHasEquityAmount:(BOOL) _value_ {
  hasEquityAmount_ = !!_value_;
}
@synthesize equityAmount;
- (BOOL) hasSupportFinger {
  return !!hasSupportFinger_;
}
- (void) setHasSupportFinger:(BOOL) _value_ {
  hasSupportFinger_ = !!_value_;
}
@synthesize supportFinger;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasTradeStatus {
  return !!hasTradeStatus_;
}
- (void) setHasTradeStatus:(BOOL) _value_ {
  hasTradeStatus_ = !!_value_;
}
@synthesize tradeStatus;
- (BOOL) hasProductDesc {
  return !!hasProductDesc_;
}
- (void) setHasProductDesc:(BOOL) _value_ {
  hasProductDesc_ = !!_value_;
}
@synthesize productDesc;
- (BOOL) hasSubMerchantName {
  return !!hasSubMerchantName_;
}
- (void) setHasSubMerchantName:(BOOL) _value_ {
  hasSubMerchantName_ = !!_value_;
}
@synthesize subMerchantName;
- (BOOL) hasMemo {
  return !!hasMemo_;
}
- (void) setHasMemo:(BOOL) _value_ {
  hasMemo_ = !!_value_;
}
@synthesize memo;
- (BOOL) hasNotifyMode {
  return !!hasNotifyMode_;
}
- (void) setHasNotifyMode:(BOOL) _value_ {
  hasNotifyMode_ = !!_value_;
}
@synthesize notifyMode;
@synthesize memberListArray;
@dynamic memberList;
- (BOOL) hasGpsInfo {
  return !!hasGpsInfo_;
}
- (void) setHasGpsInfo:(BOOL) _value_ {
  hasGpsInfo_ = !!_value_;
}
@synthesize gpsInfo;
- (BOOL) hasPublishNo {
  return !!hasPublishNo_;
}
- (void) setHasPublishNo:(BOOL) _value_ {
  hasPublishNo_ = !!_value_;
}
@synthesize publishNo;
- (BOOL) hasResolution {
  return !!hasResolution_;
}
- (void) setHasResolution:(BOOL) _value_ {
  hasResolution_ = !!_value_;
}
@synthesize resolution;
- (BOOL) hasMsgTypeId {
  return !!hasMsgTypeId_;
}
- (void) setHasMsgTypeId:(BOOL) _value_ {
  hasMsgTypeId_ = !!_value_;
}
@synthesize msgTypeId;
- (BOOL) hasLastRecordId {
  return !!hasLastRecordId_;
}
- (void) setHasLastRecordId:(BOOL) _value_ {
  hasLastRecordId_ = !!_value_;
}
@synthesize lastRecordId;
- (BOOL) hasScollUp {
  return !!hasScollUp_;
}
- (void) setHasScollUp:(BOOL) _value_ {
  hasScollUp_ = !!_value_;
}
@synthesize scollUp;
- (BOOL) hasJsonCallBack {
  return !!hasJsonCallBack_;
}
- (void) setHasJsonCallBack:(BOOL) _value_ {
  hasJsonCallBack_ = !!_value_;
}
@synthesize jsonCallBack;
@synthesize msgTypeInfoArray;
@dynamic msgTypeInfo;
@synthesize msgInfoArray;
@dynamic msgInfo;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
@synthesize resourceInfoArray;
@dynamic resourceInfo;
@synthesize commonZipInfoArray;
@dynamic commonZipInfo;
@synthesize shareInfoArray;
@dynamic shareInfo;
- (BOOL) hasResourceId {
  return !!hasResourceId_;
}
- (void) setHasResourceId:(BOOL) _value_ {
  hasResourceId_ = !!_value_;
}
@synthesize resourceId;
- (BOOL) hasVcsBizType {
  return !!hasVcsBizType_;
}
- (void) setHasVcsBizType:(BOOL) _value_ {
  hasVcsBizType_ = !!_value_;
}
@synthesize vcsBizType;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (BOOL) hasRepayCode {
  return !!hasRepayCode_;
}
- (void) setHasRepayCode:(BOOL) _value_ {
  hasRepayCode_ = !!_value_;
}
@synthesize repayCode;
@synthesize userAppLoginInfoArray;
@dynamic userAppLoginInfo;
- (BOOL) hasResultType {
  return !!hasResultType_;
}
- (void) setHasResultType:(BOOL) _value_ {
  hasResultType_ = !!_value_;
}
@synthesize resultType;
@synthesize conflictAccArray;
@dynamic conflictAcc;
- (BOOL) hasSysFrom {
  return !!hasSysFrom_;
}
- (void) setHasSysFrom:(BOOL) _value_ {
  hasSysFrom_ = !!_value_;
}
@synthesize sysFrom;
- (BOOL) hasLoginPin {
  return !!hasLoginPin_;
}
- (void) setHasLoginPin:(BOOL) _value_ {
  hasLoginPin_ = !!_value_;
}
@synthesize loginPin;
- (BOOL) hasNewLoginPin {
  return !!hasNewLoginPin_;
}
- (void) setHasNewLoginPin:(BOOL) _value_ {
  hasNewLoginPin_ = !!_value_;
}
@synthesize newLoginPin;
- (BOOL) hasPayPwd {
  return !!hasPayPwd_;
}
- (void) setHasPayPwd:(BOOL) _value_ {
  hasPayPwd_ = !!_value_;
}
@synthesize payPwd;
- (BOOL) hasNewPayPwd {
  return !!hasNewPayPwd_;
}
- (void) setHasNewPayPwd:(BOOL) _value_ {
  hasNewPayPwd_ = !!_value_;
}
@synthesize newPayPwd;
- (BOOL) hasPayPwdResetFlag {
  return !!hasPayPwdResetFlag_;
}
- (void) setHasPayPwdResetFlag:(BOOL) _value_ {
  hasPayPwdResetFlag_ = !!_value_;
}
@synthesize payPwdResetFlag;
- (BOOL) hasSex {
  return !!hasSex_;
}
- (void) setHasSex:(BOOL) _value_ {
  hasSex_ = !!_value_;
}
@synthesize sex;
- (BOOL) hasBirthday {
  return !!hasBirthday_;
}
- (void) setHasBirthday:(BOOL) _value_ {
  hasBirthday_ = !!_value_;
}
@synthesize birthday;
- (BOOL) hasNationality {
  return !!hasNationality_;
}
- (void) setHasNationality:(BOOL) _value_ {
  hasNationality_ = !!_value_;
}
@synthesize nationality;
- (BOOL) hasIssuingAuthority {
  return !!hasIssuingAuthority_;
}
- (void) setHasIssuingAuthority:(BOOL) _value_ {
  hasIssuingAuthority_ = !!_value_;
}
@synthesize issuingAuthority;
@synthesize cardInfoArray;
@dynamic cardInfo;
- (BOOL) hasSummarizeInfo {
  return !!hasSummarizeInfo_;
}
- (void) setHasSummarizeInfo:(BOOL) _value_ {
  hasSummarizeInfo_ = !!_value_;
}
@synthesize summarizeInfo;
- (BOOL) hasCurrentPage {
  return !!hasCurrentPage_;
}
- (void) setHasCurrentPage:(BOOL) _value_ {
  hasCurrentPage_ = !!_value_;
}
@synthesize currentPage;
- (BOOL) hasPageSize {
  return !!hasPageSize_;
}
- (void) setHasPageSize:(BOOL) _value_ {
  hasPageSize_ = !!_value_;
}
@synthesize pageSize;
@synthesize txnInfoArray;
@dynamic txnInfo;
- (BOOL) hasApplyTime {
  return !!hasApplyTime_;
}
- (void) setHasApplyTime:(BOOL) _value_ {
  hasApplyTime_ = !!_value_;
}
@synthesize applyTime;
- (BOOL) hasTotalFee {
  return !!hasTotalFee_;
}
- (void) setHasTotalFee:(BOOL) _value_ {
  hasTotalFee_ = !!_value_;
}
@synthesize totalFee;
- (BOOL) hasTipInfo {
  return !!hasTipInfo_;
}
- (void) setHasTipInfo:(BOOL) _value_ {
  hasTipInfo_ = !!_value_;
}
@synthesize tipInfo;
- (BOOL) hasCheckCode {
  return !!hasCheckCode_;
}
- (void) setHasCheckCode:(BOOL) _value_ {
  hasCheckCode_ = !!_value_;
}
@synthesize checkCode;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) _value_ {
  hasTotal_ = !!_value_;
}
@synthesize total;
- (BOOL) hasRepayAmt {
  return !!hasRepayAmt_;
}
- (void) setHasRepayAmt:(BOOL) _value_ {
  hasRepayAmt_ = !!_value_;
}
@synthesize repayAmt;
- (BOOL) hasBillOrderId {
  return !!hasBillOrderId_;
}
- (void) setHasBillOrderId:(BOOL) _value_ {
  hasBillOrderId_ = !!_value_;
}
@synthesize billOrderId;
- (BOOL) hasTxnAcctNo {
  return !!hasTxnAcctNo_;
}
- (void) setHasTxnAcctNo:(BOOL) _value_ {
  hasTxnAcctNo_ = !!_value_;
}
@synthesize txnAcctNo;
- (BOOL) hasLastRowNum {
  return !!hasLastRowNum_;
}
- (void) setHasLastRowNum:(BOOL) _value_ {
  hasLastRowNum_ = !!_value_;
}
@synthesize lastRowNum;
- (BOOL) hasInfo {
  return !!hasInfo_;
}
- (void) setHasInfo:(BOOL) _value_ {
  hasInfo_ = !!_value_;
}
@synthesize info;
@synthesize creditOrderArray;
@dynamic creditOrder;
- (BOOL) hasRepayStatus {
  return !!hasRepayStatus_;
}
- (void) setHasRepayStatus:(BOOL) _value_ {
  hasRepayStatus_ = !!_value_;
}
@synthesize repayStatus;
- (BOOL) hasInterest {
  return !!hasInterest_;
}
- (void) setHasInterest:(BOOL) _value_ {
  hasInterest_ = !!_value_;
}
@synthesize interest;
- (BOOL) hasReturnAmt {
  return !!hasReturnAmt_;
}
- (void) setHasReturnAmt:(BOOL) _value_ {
  hasReturnAmt_ = !!_value_;
}
@synthesize returnAmt;
- (BOOL) hasStages {
  return !!hasStages_;
}
- (void) setHasStages:(BOOL) _value_ {
  hasStages_ = !!_value_;
}
@synthesize stages;
@synthesize divideArray;
@dynamic divide;
@synthesize repayOrderArray;
@dynamic repayOrder;
@synthesize payTypesArray;
@dynamic payTypes;
- (BOOL) hasPayType {
  return !!hasPayType_;
}
- (void) setHasPayType:(BOOL) _value_ {
  hasPayType_ = !!_value_;
}
@synthesize payType;
@synthesize repayRecordArray;
@dynamic repayRecord;
- (BOOL) hasAccountAmt {
  return !!hasAccountAmt_;
}
- (void) setHasAccountAmt:(BOOL) _value_ {
  hasAccountAmt_ = !!_value_;
}
@synthesize accountAmt;
- (BOOL) hasStatusName {
  return !!hasStatusName_;
}
- (void) setHasStatusName:(BOOL) _value_ {
  hasStatusName_ = !!_value_;
}
@synthesize statusName;
- (BOOL) hasForceFaceCheck {
  return !!hasForceFaceCheck_;
}
- (void) setHasForceFaceCheck:(BOOL) _value_ {
  hasForceFaceCheck_ = !!_value_;
}
@synthesize forceFaceCheck;
- (BOOL) hasAllowRepay {
  return !!hasAllowRepay_;
}
- (void) setHasAllowRepay:(BOOL) _value_ {
  hasAllowRepay_ = !!_value_;
}
@synthesize allowRepay;
- (BOOL) hasLocationProvince {
  return !!hasLocationProvince_;
}
- (void) setHasLocationProvince:(BOOL) _value_ {
  hasLocationProvince_ = !!_value_;
}
@synthesize locationProvince;
- (BOOL) hasLocationCity {
  return !!hasLocationCity_;
}
- (void) setHasLocationCity:(BOOL) _value_ {
  hasLocationCity_ = !!_value_;
}
@synthesize locationCity;
- (BOOL) hasLocationDistrict {
  return !!hasLocationDistrict_;
}
- (void) setHasLocationDistrict:(BOOL) _value_ {
  hasLocationDistrict_ = !!_value_;
}
@synthesize locationDistrict;
- (BOOL) hasLocationAddress {
  return !!hasLocationAddress_;
}
- (void) setHasLocationAddress:(BOOL) _value_ {
  hasLocationAddress_ = !!_value_;
}
@synthesize locationAddress;
- (BOOL) hasKakaUrl {
  return !!hasKakaUrl_;
}
- (void) setHasKakaUrl:(BOOL) _value_ {
  hasKakaUrl_ = !!_value_;
}
@synthesize kakaUrl;
- (BOOL) hasDoudouUrl {
  return !!hasDoudouUrl_;
}
- (void) setHasDoudouUrl:(BOOL) _value_ {
  hasDoudouUrl_ = !!_value_;
}
@synthesize doudouUrl;
- (BOOL) hasRepayId {
  return !!hasRepayId_;
}
- (void) setHasRepayId:(BOOL) _value_ {
  hasRepayId_ = !!_value_;
}
@synthesize repayId;
@synthesize contractArray;
@dynamic contract;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasFrozenInfo {
  return !!hasFrozenInfo_;
}
- (void) setHasFrozenInfo:(BOOL) _value_ {
  hasFrozenInfo_ = !!_value_;
}
@synthesize frozenInfo;
- (BOOL) hasFcsCreditAmt {
  return !!hasFcsCreditAmt_;
}
- (void) setHasFcsCreditAmt:(BOOL) _value_ {
  hasFcsCreditAmt_ = !!_value_;
}
@synthesize fcsCreditAmt;
- (BOOL) hasLeftFcsCreditAmt {
  return !!hasLeftFcsCreditAmt_;
}
- (void) setHasLeftFcsCreditAmt:(BOOL) _value_ {
  hasLeftFcsCreditAmt_ = !!_value_;
}
@synthesize leftFcsCreditAmt;
- (BOOL) hasFcsCreditAmtStatus {
  return !!hasFcsCreditAmtStatus_;
}
- (void) setHasFcsCreditAmtStatus:(BOOL) _value_ {
  hasFcsCreditAmtStatus_ = !!_value_;
}
@synthesize fcsCreditAmtStatus;
- (BOOL) hasFcsCreditAmtType {
  return !!hasFcsCreditAmtType_;
}
- (void) setHasFcsCreditAmtType:(BOOL) _value_ {
  hasFcsCreditAmtType_ = !!_value_;
}
@synthesize fcsCreditAmtType;
- (BOOL) hasFcsCreditUrl {
  return !!hasFcsCreditUrl_;
}
- (void) setHasFcsCreditUrl:(BOOL) _value_ {
  hasFcsCreditUrl_ = !!_value_;
}
@synthesize fcsCreditUrl;
- (BOOL) hasLeftCreditAmtName {
  return !!hasLeftCreditAmtName_;
}
- (void) setHasLeftCreditAmtName:(BOOL) _value_ {
  hasLeftCreditAmtName_ = !!_value_;
}
@synthesize leftCreditAmtName;
- (BOOL) hasTotalCreditAmtName {
  return !!hasTotalCreditAmtName_;
}
- (void) setHasTotalCreditAmtName:(BOOL) _value_ {
  hasTotalCreditAmtName_ = !!_value_;
}
@synthesize totalCreditAmtName;
- (BOOL) hasFcsCreditName {
  return !!hasFcsCreditName_;
}
- (void) setHasFcsCreditName:(BOOL) _value_ {
  hasFcsCreditName_ = !!_value_;
}
@synthesize fcsCreditName;
- (BOOL) hasFcsName {
  return !!hasFcsName_;
}
- (void) setHasFcsName:(BOOL) _value_ {
  hasFcsName_ = !!_value_;
}
@synthesize fcsName;
- (BOOL) hasQuotaShowType {
  return !!hasQuotaShowType_;
}
- (void) setHasQuotaShowType:(BOOL) _value_ {
  hasQuotaShowType_ = !!_value_;
}
@synthesize quotaShowType;
- (BOOL) hasFcsMerchantName {
  return !!hasFcsMerchantName_;
}
- (void) setHasFcsMerchantName:(BOOL) _value_ {
  hasFcsMerchantName_ = !!_value_;
}
@synthesize fcsMerchantName;
- (BOOL) hasLeftFcsCreditName {
  return !!hasLeftFcsCreditName_;
}
- (void) setHasLeftFcsCreditName:(BOOL) _value_ {
  hasLeftFcsCreditName_ = !!_value_;
}
@synthesize leftFcsCreditName;
- (BOOL) hasSupplementInfo {
  return !!hasSupplementInfo_;
}
- (void) setHasSupplementInfo:(BOOL) _value_ {
  hasSupplementInfo_ = !!_value_;
}
@synthesize supplementInfo;
- (BOOL) hasExtInfo {
  return !!hasExtInfo_;
}
- (void) setHasExtInfo:(BOOL) _value_ {
  hasExtInfo_ = !!_value_;
}
@synthesize extInfo;
- (BOOL) hasSort {
  return !!hasSort_;
}
- (void) setHasSort:(BOOL) _value_ {
  hasSort_ = !!_value_;
}
@synthesize sort;
@synthesize quotaListArray;
@dynamic quotaList;
- (BOOL) hasIsShowPreQuotaAmt {
  return !!hasIsShowPreQuotaAmt_;
}
- (void) setHasIsShowPreQuotaAmt:(BOOL) _value_ {
  hasIsShowPreQuotaAmt_ = !!_value_;
}
@synthesize isShowPreQuotaAmt;
- (BOOL) hasPreFcsAmt {
  return !!hasPreFcsAmt_;
}
- (void) setHasPreFcsAmt:(BOOL) _value_ {
  hasPreFcsAmt_ = !!_value_;
}
@synthesize preFcsAmt;
- (BOOL) hasPreFcsUrl {
  return !!hasPreFcsUrl_;
}
- (void) setHasPreFcsUrl:(BOOL) _value_ {
  hasPreFcsUrl_ = !!_value_;
}
@synthesize preFcsUrl;
@synthesize freeListArray;
@dynamic freeList;
- (BOOL) hasUserGrade {
  return !!hasUserGrade_;
}
- (void) setHasUserGrade:(BOOL) _value_ {
  hasUserGrade_ = !!_value_;
}
@synthesize userGrade;
- (BOOL) hasMemberTwo {
  return !!hasMemberTwo_;
}
- (void) setHasMemberTwo:(BOOL) _value_ {
  hasMemberTwo_ = !!_value_;
}
@synthesize memberTwo;
- (BOOL) hasMebCode {
  return !!hasMebCode_;
}
- (void) setHasMebCode:(BOOL) _value_ {
  hasMebCode_ = !!_value_;
}
@synthesize mebCode;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasLastRequestTime {
  return !!hasLastRequestTime_;
}
- (void) setHasLastRequestTime:(BOOL) _value_ {
  hasLastRequestTime_ = !!_value_;
}
@synthesize lastRequestTime;
- (BOOL) hasCardInfoObject {
  return !!hasCardInfoObject_;
}
- (void) setHasCardInfoObject:(BOOL) _value_ {
  hasCardInfoObject_ = !!_value_;
}
@synthesize cardInfoObject;
- (BOOL) hasOrderInfo {
  return !!hasOrderInfo_;
}
- (void) setHasOrderInfo:(BOOL) _value_ {
  hasOrderInfo_ = !!_value_;
}
@synthesize orderInfo;
@synthesize productGroupArray;
@dynamic productGroup;
- (BOOL) hasAmtType {
  return !!hasAmtType_;
}
- (void) setHasAmtType:(BOOL) _value_ {
  hasAmtType_ = !!_value_;
}
@synthesize amtType;
@synthesize withdrawLimitArray;
@dynamic withdrawLimit;
- (BOOL) hasEquityCode {
  return !!hasEquityCode_;
}
- (void) setHasEquityCode:(BOOL) _value_ {
  hasEquityCode_ = !!_value_;
}
@synthesize equityCode;
- (BOOL) hasFunctionCode {
  return !!hasFunctionCode_;
}
- (void) setHasFunctionCode:(BOOL) _value_ {
  hasFunctionCode_ = !!_value_;
}
@synthesize functionCode;
- (BOOL) hasTwSign {
  return !!hasTwSign_;
}
- (void) setHasTwSign:(BOOL) _value_ {
  hasTwSign_ = !!_value_;
}
@synthesize twSign;
- (BOOL) hasLeftSumAmt {
  return !!hasLeftSumAmt_;
}
- (void) setHasLeftSumAmt:(BOOL) _value_ {
  hasLeftSumAmt_ = !!_value_;
}
@synthesize leftSumAmt;
- (BOOL) hasVirtualOrderAmt {
  return !!hasVirtualOrderAmt_;
}
- (void) setHasVirtualOrderAmt:(BOOL) _value_ {
  hasVirtualOrderAmt_ = !!_value_;
}
@synthesize virtualOrderAmt;
- (BOOL) hasSumCreditAmt {
  return !!hasSumCreditAmt_;
}
- (void) setHasSumCreditAmt:(BOOL) _value_ {
  hasSumCreditAmt_ = !!_value_;
}
@synthesize sumCreditAmt;
- (BOOL) hasShowVoucher {
  return !!hasShowVoucher_;
}
- (void) setHasShowVoucher:(BOOL) _value_ {
  hasShowVoucher_ = !!_value_;
}
@synthesize showVoucher;
@synthesize equityInfoArray;
@dynamic equityInfo;
@synthesize activityArray;
@dynamic activity;
- (BOOL) hasBillId {
  return !!hasBillId_;
}
- (void) setHasBillId:(BOOL) _value_ {
  hasBillId_ = !!_value_;
}
@synthesize billId;
- (BOOL) hasSiedc {
  return !!hasSiedc_;
}
- (void) setHasSiedc:(BOOL) _value_ {
  hasSiedc_ = !!_value_;
}
@synthesize siedc;
@synthesize interestsArray;
@dynamic interests;
- (BOOL) hasQueryInterval {
  return !!hasQueryInterval_;
}
- (void) setHasQueryInterval:(BOOL) _value_ {
  hasQueryInterval_ = !!_value_;
}
@synthesize queryInterval;
- (BOOL) hasQueryTimes {
  return !!hasQueryTimes_;
}
- (void) setHasQueryTimes:(BOOL) _value_ {
  hasQueryTimes_ = !!_value_;
}
@synthesize queryTimes;
- (BOOL) hasStlMerchantCode {
  return !!hasStlMerchantCode_;
}
- (void) setHasStlMerchantCode:(BOOL) _value_ {
  hasStlMerchantCode_ = !!_value_;
}
@synthesize stlMerchantCode;
- (BOOL) hasEquityMessage {
  return !!hasEquityMessage_;
}
- (void) setHasEquityMessage:(BOOL) _value_ {
  hasEquityMessage_ = !!_value_;
}
@synthesize equityMessage;
- (BOOL) hasOutEquityMessage {
  return !!hasOutEquityMessage_;
}
- (void) setHasOutEquityMessage:(BOOL) _value_ {
  hasOutEquityMessage_ = !!_value_;
}
@synthesize outEquityMessage;
@synthesize seedDataArray;
@dynamic seedData;
@synthesize extMapArray;
@dynamic extMap;
- (instancetype) init {
  if ((self = [super init])) {
    self.password = @"";
    self.businessType = @"";
    self.termId = @"";
    self.payPassword = @"";
    self.bankId = @"";
    self.bankName = @"";
    self.orderId = @"";
    self.amt = @"";
    self.token = @"";
    self.validateCode = @"";
    self.termTxnTime = @"";
    self.idType = @"";
    self.holderName = @"";
    self.expireDate = @"";
    self.vaType = @"";
    self.pan = @"";
    self.shortPan = @"";
    self.phoneNo = @"";
    self.authDebitBankNames = @"";
    self.cardId = @"";
    self.txnType = @"";
    self.productCode = @"";
    self.id = @"";
    self.name = @"";
    self.province = @"";
    self.city = @"";
    self.pageNo = @"";
    self.startDate = @"";
    self.endDate = @"";
    self.status = @"";
    self.optionType = @"";
    self.securityQuestion = @"";
    self.securityAnswer = @"";
    self.cardType = @"";
    self.email = @"";
    self.uniQrCode = @"";
    self.productType = @"";
    self.address = @"";
    self.resendFlag = @"";
    self.passwordType = @"";
    self.cvv2 = @"";
    self.refreshToken = @"";
    self.idTxnCtrl = @"";
    self.extData1 = @"";
    self.authBankIds = @"";
    self.authDebitBankIds = @"";
    self.authBankNames = @"";
    self.branchBank = @"";
    self.txnFlag = @"";
    self.authCode = @"";
    self.txnTime = @"";
    self.signFlag = @"";
    self.productName = @"";
    self.zoneType = @"";
    self.pin = @"";
    self.origOrderId = @"";
    self.count = @"";
    self.remark = @"";
    self.memAcctcodeName = @"";
    self.memAcctcodeBalance = @"";
    self.existFlg = @"";
    self.payeeNotes = @"";
    self.realNameFlg = @"";
    self.bindPhoneFlg = @"";
    self.firstLoginFlg = @"";
    self.totalAmt = @"";
    self.totalCount = @"";
    self.orderType = @"";
    self.certId = @"";
    self.recommendId = @"";
    self.orderCode = @"";
    self.max = @"";
    self.statusSet = @"";
    self.outTradeNo = @"";
    self.appInfo = [ContentAppInfo defaultInstance];
    self.member = [ContentMember defaultInstance];
    self.tradeId = @"";
    self.endTime = @"";
    self.userFlag = @"";
    self.idCardNo = @"";
    self.idCardImg = @"";
    self.photo = @"";
    self.isDisplay = @"";
    self.shortPhones = @"";
    self.ripAmount = @"";
    self.memberAuthDto = [ContentMemberAuthDto defaultInstance];
    self.occupation = @"";
    self.partnerUserId = @"";
    self.memberBankAcctId = @"";
    self.expiresIn = @"";
    self.appUpInfo = [ContentAppUpInfo defaultInstance];
    self.keyboardSeq = @"";
    self.imgCode = @"";
    self.imgToken = @"";
    self.validateToken = @"";
    self.errorType = @"";
    self.flag = @"";
    self.finProdType = @"";
    self.tradeType = @"";
    self.prodStatus = @"";
    self.queryOrders = @"";
    self.horizonTo = @"";
    self.returnRateExp = @"";
    self.totalFrozenAmt = @"";
    self.fee = @"";
    self.transFeeRate = @"";
    self.bankNameId = @"";
    self.financialInfo = [ContentFinancialInfo defaultInstance];
    self.isMainOrder = @"";
    self.merchantId = @"";
    self.merchantName = @"";
    self.osVersion = @"";
    self.isRoot = @"";
    self.size = @"";
    self.phoneModel = @"";
    self.wifiName = @"";
    self.wifiMac = @"";
    self.appId = @"";
    self.merchantCode = @"";
    self.billOrderNo = @"";
    self.channelType = @"";
    self.orderAmount = @"";
    self.payMode = @"";
    self.payAmount = @"";
    self.orderStatus = @"";
    self.outOrderType = @"";
    self.txnTimeStart = @"";
    self.txnTimeExpire = @"";
    self.payStatus = @"";
    self.productInfo = [ContentProductInfo defaultInstance];
    self.outEquityCode = @"";
    self.outEquityAmount = @"";
    self.payMethodId = @"";
    self.instalmentId = @"";
    self.txnEndTime = @"";
    self.validateElement = @"";
    self.sMsCode = @"";
    self.equityAmount = @"";
    self.supportFinger = @"";
    self.type = @"";
    self.tradeStatus = @"";
    self.productDesc = @"";
    self.subMerchantName = @"";
    self.memo = @"";
    self.notifyMode = @"";
    self.gpsInfo = @"";
    self.publishNo = @"";
    self.resolution = @"";
    self.msgTypeId = @"";
    self.lastRecordId = @"";
    self.scollUp = @"";
    self.jsonCallBack = @"";
    self.msgId = @"";
    self.resourceId = @"";
    self.vcsBizType = @"";
    self.msg = @"";
    self.repayCode = @"";
    self.resultType = @"";
    self.sysFrom = @"";
    self.loginPin = @"";
    self.newLoginPin = @"";
    self.payPwd = @"";
    self.newPayPwd = @"";
    self.payPwdResetFlag = @"";
    self.sex = @"";
    self.birthday = @"";
    self.nationality = @"";
    self.issuingAuthority = @"";
    self.summarizeInfo = [ContentSummarizeInfo defaultInstance];
    self.currentPage = @"";
    self.pageSize = @"";
    self.applyTime = @"";
    self.totalFee = @"";
    self.tipInfo = @"";
    self.checkCode = @"";
    self.total = @"";
    self.repayAmt = @"";
    self.billOrderId = @"";
    self.txnAcctNo = @"";
    self.lastRowNum = @"";
    self.info = @"";
    self.repayStatus = @"";
    self.interest = @"";
    self.returnAmt = @"";
    self.stages = @"";
    self.payType = @"";
    self.accountAmt = @"";
    self.statusName = @"";
    self.forceFaceCheck = @"";
    self.allowRepay = @"";
    self.locationProvince = @"";
    self.locationCity = @"";
    self.locationDistrict = @"";
    self.locationAddress = @"";
    self.kakaUrl = @"";
    self.doudouUrl = @"";
    self.repayId = @"";
    self.url = @"";
    self.frozenInfo = [ContentFrozenInfo defaultInstance];
    self.fcsCreditAmt = @"";
    self.leftFcsCreditAmt = @"";
    self.fcsCreditAmtStatus = @"";
    self.fcsCreditAmtType = @"";
    self.fcsCreditUrl = @"";
    self.leftCreditAmtName = @"";
    self.totalCreditAmtName = @"";
    self.fcsCreditName = @"";
    self.fcsName = @"";
    self.quotaShowType = @"";
    self.fcsMerchantName = @"";
    self.leftFcsCreditName = @"";
    self.supplementInfo = @"";
    self.extInfo = @"";
    self.sort = @"";
    self.isShowPreQuotaAmt = @"";
    self.preFcsAmt = @"";
    self.preFcsUrl = @"";
    self.userGrade = @"";
    self.memberTwo = [ContentMemberTwo defaultInstance];
    self.mebCode = @"";
    self.userName = @"";
    self.lastRequestTime = @"";
    self.cardInfoObject = [ContentCardInfo defaultInstance];
    self.orderInfo = [ContentOrderInfo defaultInstance];
    self.amtType = @"";
    self.equityCode = @"";
    self.functionCode = @"";
    self.twSign = @"";
    self.leftSumAmt = @"";
    self.virtualOrderAmt = @"";
    self.sumCreditAmt = @"";
    self.showVoucher = @"";
    self.billId = @"";
    self.siedc = @"";
    self.queryInterval = @"";
    self.queryTimes = @"";
    self.stlMerchantCode = @"";
    self.equityMessage = @"";
    self.outEquityMessage = @"";
  }
  return self;
}
static Content* defaultContentInstance = nil;
+ (void) initialize {
  if (self == [Content class]) {
    defaultContentInstance = [[Content alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentInstance;
}
- (instancetype) defaultInstance {
  return defaultContentInstance;
}
- (NSArray *)bank {
  return bankArray;
}
- (ContentBank*)bankAtIndex:(NSUInteger)index {
  return [bankArray objectAtIndex:index];
}
- (NSArray *)memberIdentity {
  return memberIdentityArray;
}
- (ContentMemberIdentity*)memberIdentityAtIndex:(NSUInteger)index {
  return [memberIdentityArray objectAtIndex:index];
}
- (NSArray *)safeProblem {
  return safeProblemArray;
}
- (NSString*)safeProblemAtIndex:(NSUInteger)index {
  return [safeProblemArray objectAtIndex:index];
}
- (NSArray *)queryWalletBill99BillResponse {
  return queryWalletBill99BillResponseArray;
}
- (ContentQueryWalletBill99BillResponse*)queryWalletBill99BillResponseAtIndex:(NSUInteger)index {
  return [queryWalletBill99BillResponseArray objectAtIndex:index];
}
- (NSArray *)atpProd {
  return atpProdArray;
}
- (ContentAtpProd*)atpProdAtIndex:(NSUInteger)index {
  return [atpProdArray objectAtIndex:index];
}
- (NSArray *)solidCard {
  return solidCardArray;
}
- (ContentSolidCard*)solidCardAtIndex:(NSUInteger)index {
  return [solidCardArray objectAtIndex:index];
}
- (NSArray *)bankLimitAmountDto {
  return bankLimitAmountDtoArray;
}
- (ContentBankLimitAmountDto*)bankLimitAmountDtoAtIndex:(NSUInteger)index {
  return [bankLimitAmountDtoArray objectAtIndex:index];
}
- (NSArray *)queryAllFinaprodResponse {
  return queryAllFinaprodResponseArray;
}
- (ContentQueryAllFinaprodResponse*)queryAllFinaprodResponseAtIndex:(NSUInteger)index {
  return [queryAllFinaprodResponseArray objectAtIndex:index];
}
- (NSArray *)atpTradeOrder {
  return atpTradeOrderArray;
}
- (ContentAtpTradeOrder*)atpTradeOrderAtIndex:(NSUInteger)index {
  return [atpTradeOrderArray objectAtIndex:index];
}
- (NSArray *)prodAccountInfo {
  return prodAccountInfoArray;
}
- (ContentProdAccountInfo*)prodAccountInfoAtIndex:(NSUInteger)index {
  return [prodAccountInfoArray objectAtIndex:index];
}
- (NSArray *)payMethod {
  return payMethodArray;
}
- (ContentPayMethod*)payMethodAtIndex:(NSUInteger)index {
  return [payMethodArray objectAtIndex:index];
}
- (NSArray *)instalment {
  return instalmentArray;
}
- (ContentInstalment*)instalmentAtIndex:(NSUInteger)index {
  return [instalmentArray objectAtIndex:index];
}
- (NSArray *)voucher {
  return voucherArray;
}
- (ContentVoucher*)voucherAtIndex:(NSUInteger)index {
  return [voucherArray objectAtIndex:index];
}
- (NSArray *)ateTradeOrder {
  return ateTradeOrderArray;
}
- (ContentAteTradeOrder*)ateTradeOrderAtIndex:(NSUInteger)index {
  return [ateTradeOrderArray objectAtIndex:index];
}
- (NSArray *)memberList {
  return memberListArray;
}
- (ContentMemberTwo*)memberListAtIndex:(NSUInteger)index {
  return [memberListArray objectAtIndex:index];
}
- (NSArray *)msgTypeInfo {
  return msgTypeInfoArray;
}
- (ContentMsgTypeInfo*)msgTypeInfoAtIndex:(NSUInteger)index {
  return [msgTypeInfoArray objectAtIndex:index];
}
- (NSArray *)msgInfo {
  return msgInfoArray;
}
- (ContentMsgInfo*)msgInfoAtIndex:(NSUInteger)index {
  return [msgInfoArray objectAtIndex:index];
}
- (NSArray *)resourceInfo {
  return resourceInfoArray;
}
- (ContentResourceInfo*)resourceInfoAtIndex:(NSUInteger)index {
  return [resourceInfoArray objectAtIndex:index];
}
- (NSArray *)commonZipInfo {
  return commonZipInfoArray;
}
- (ContentCommonZipInfo*)commonZipInfoAtIndex:(NSUInteger)index {
  return [commonZipInfoArray objectAtIndex:index];
}
- (NSArray *)shareInfo {
  return shareInfoArray;
}
- (ContentShareInfo*)shareInfoAtIndex:(NSUInteger)index {
  return [shareInfoArray objectAtIndex:index];
}
- (NSArray *)userAppLoginInfo {
  return userAppLoginInfoArray;
}
- (ContentUserAppLoginInfo*)userAppLoginInfoAtIndex:(NSUInteger)index {
  return [userAppLoginInfoArray objectAtIndex:index];
}
- (NSArray *)conflictAcc {
  return conflictAccArray;
}
- (ContentConflictAcc*)conflictAccAtIndex:(NSUInteger)index {
  return [conflictAccArray objectAtIndex:index];
}
- (NSArray *)cardInfo {
  return cardInfoArray;
}
- (ContentCardInfo*)cardInfoAtIndex:(NSUInteger)index {
  return [cardInfoArray objectAtIndex:index];
}
- (NSArray *)txnInfo {
  return txnInfoArray;
}
- (ContentTxnInfo*)txnInfoAtIndex:(NSUInteger)index {
  return [txnInfoArray objectAtIndex:index];
}
- (NSArray *)creditOrder {
  return creditOrderArray;
}
- (ContentCreditOrder*)creditOrderAtIndex:(NSUInteger)index {
  return [creditOrderArray objectAtIndex:index];
}
- (NSArray *)divide {
  return divideArray;
}
- (ContentDivide*)divideAtIndex:(NSUInteger)index {
  return [divideArray objectAtIndex:index];
}
- (NSArray *)repayOrder {
  return repayOrderArray;
}
- (ContentRepayOrder*)repayOrderAtIndex:(NSUInteger)index {
  return [repayOrderArray objectAtIndex:index];
}
- (NSArray *)payTypes {
  return payTypesArray;
}
- (ContentPayType*)payTypesAtIndex:(NSUInteger)index {
  return [payTypesArray objectAtIndex:index];
}
- (NSArray *)repayRecord {
  return repayRecordArray;
}
- (ContentRepayRecord*)repayRecordAtIndex:(NSUInteger)index {
  return [repayRecordArray objectAtIndex:index];
}
- (NSArray *)contract {
  return contractArray;
}
- (ContentContract*)contractAtIndex:(NSUInteger)index {
  return [contractArray objectAtIndex:index];
}
- (NSArray *)quotaList {
  return quotaListArray;
}
- (ContentResult*)quotaListAtIndex:(NSUInteger)index {
  return [quotaListArray objectAtIndex:index];
}
- (NSArray *)freeList {
  return freeListArray;
}
- (ContentResult*)freeListAtIndex:(NSUInteger)index {
  return [freeListArray objectAtIndex:index];
}
- (NSArray *)productGroup {
  return productGroupArray;
}
- (ContentProductGroup*)productGroupAtIndex:(NSUInteger)index {
  return [productGroupArray objectAtIndex:index];
}
- (NSArray *)withdrawLimit {
  return withdrawLimitArray;
}
- (ContentWithdrawLimit*)withdrawLimitAtIndex:(NSUInteger)index {
  return [withdrawLimitArray objectAtIndex:index];
}
- (NSArray *)equityInfo {
  return equityInfoArray;
}
- (ContentEquityInfo*)equityInfoAtIndex:(NSUInteger)index {
  return [equityInfoArray objectAtIndex:index];
}
- (NSArray *)activity {
  return activityArray;
}
- (ContentActivity*)activityAtIndex:(NSUInteger)index {
  return [activityArray objectAtIndex:index];
}
- (NSArray *)interests {
  return interestsArray;
}
- (ContentInterest*)interestsAtIndex:(NSUInteger)index {
  return [interestsArray objectAtIndex:index];
}
- (NSArray *)seedData {
  return seedDataArray;
}
- (ContentSeedData*)seedDataAtIndex:(NSUInteger)index {
  return [seedDataArray objectAtIndex:index];
}
- (NSArray *)extMap {
  return extMapArray;
}
- (ContentExtMap*)extMapAtIndex:(NSUInteger)index {
  return [extMapArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPassword) {
    [output writeString:1 value:self.password];
  }
  if (self.hasBusinessType) {
    [output writeString:2 value:self.businessType];
  }
  if (self.hasTermId) {
    [output writeString:3 value:self.termId];
  }
  if (self.hasPayPassword) {
    [output writeString:4 value:self.payPassword];
  }
  if (self.hasBankId) {
    [output writeString:5 value:self.bankId];
  }
  if (self.hasBankName) {
    [output writeString:6 value:self.bankName];
  }
  if (self.hasOrderId) {
    [output writeString:7 value:self.orderId];
  }
  if (self.hasAmt) {
    [output writeString:8 value:self.amt];
  }
  if (self.hasToken) {
    [output writeString:9 value:self.token];
  }
  if (self.hasValidateCode) {
    [output writeString:10 value:self.validateCode];
  }
  if (self.hasTermTxnTime) {
    [output writeString:11 value:self.termTxnTime];
  }
  if (self.hasIdType) {
    [output writeString:12 value:self.idType];
  }
  if (self.hasHolderName) {
    [output writeString:13 value:self.holderName];
  }
  if (self.hasExpireDate) {
    [output writeString:14 value:self.expireDate];
  }
  if (self.hasVaType) {
    [output writeString:15 value:self.vaType];
  }
  if (self.hasPan) {
    [output writeString:16 value:self.pan];
  }
  if (self.hasShortPan) {
    [output writeString:17 value:self.shortPan];
  }
  if (self.hasPhoneNo) {
    [output writeString:18 value:self.phoneNo];
  }
  if (self.hasAuthDebitBankNames) {
    [output writeString:19 value:self.authDebitBankNames];
  }
  if (self.hasCardId) {
    [output writeString:20 value:self.cardId];
  }
  if (self.hasTxnType) {
    [output writeString:21 value:self.txnType];
  }
  if (self.hasProductCode) {
    [output writeString:22 value:self.productCode];
  }
  if (self.hasId) {
    [output writeString:23 value:self.id];
  }
  if (self.hasName) {
    [output writeString:24 value:self.name];
  }
  if (self.hasProvince) {
    [output writeString:25 value:self.province];
  }
  if (self.hasCity) {
    [output writeString:26 value:self.city];
  }
  if (self.hasPageNo) {
    [output writeString:27 value:self.pageNo];
  }
  if (self.hasStartDate) {
    [output writeString:28 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:29 value:self.endDate];
  }
  if (self.hasStatus) {
    [output writeString:30 value:self.status];
  }
  if (self.hasOptionType) {
    [output writeString:31 value:self.optionType];
  }
  if (self.hasSecurityQuestion) {
    [output writeString:32 value:self.securityQuestion];
  }
  if (self.hasSecurityAnswer) {
    [output writeString:33 value:self.securityAnswer];
  }
  if (self.hasCardType) {
    [output writeString:34 value:self.cardType];
  }
  if (self.hasEmail) {
    [output writeString:35 value:self.email];
  }
  if (self.hasUniQrCode) {
    [output writeString:36 value:self.uniQrCode];
  }
  if (self.hasProductType) {
    [output writeString:37 value:self.productType];
  }
  if (self.hasAddress) {
    [output writeString:38 value:self.address];
  }
  if (self.hasResendFlag) {
    [output writeString:39 value:self.resendFlag];
  }
  if (self.hasPasswordType) {
    [output writeString:40 value:self.passwordType];
  }
  if (self.hasCvv2) {
    [output writeString:41 value:self.cvv2];
  }
  if (self.hasRefreshToken) {
    [output writeString:42 value:self.refreshToken];
  }
  if (self.hasIdTxnCtrl) {
    [output writeString:43 value:self.idTxnCtrl];
  }
  if (self.hasExtData1) {
    [output writeString:44 value:self.extData1];
  }
  if (self.hasAuthBankIds) {
    [output writeString:45 value:self.authBankIds];
  }
  if (self.hasAuthDebitBankIds) {
    [output writeString:46 value:self.authDebitBankIds];
  }
  if (self.hasAuthBankNames) {
    [output writeString:47 value:self.authBankNames];
  }
  if (self.hasBranchBank) {
    [output writeString:48 value:self.branchBank];
  }
  if (self.hasTxnFlag) {
    [output writeString:49 value:self.txnFlag];
  }
  if (self.hasAuthCode) {
    [output writeString:50 value:self.authCode];
  }
  if (self.hasTxnTime) {
    [output writeString:51 value:self.txnTime];
  }
  if (self.hasSignFlag) {
    [output writeString:52 value:self.signFlag];
  }
  if (self.hasProductName) {
    [output writeString:53 value:self.productName];
  }
  if (self.hasZoneType) {
    [output writeString:54 value:self.zoneType];
  }
  if (self.hasPin) {
    [output writeString:55 value:self.pin];
  }
  if (self.hasOrigOrderId) {
    [output writeString:56 value:self.origOrderId];
  }
  if (self.hasCount) {
    [output writeString:57 value:self.count];
  }
  if (self.hasRemark) {
    [output writeString:58 value:self.remark];
  }
  if (self.hasMemAcctcodeName) {
    [output writeString:59 value:self.memAcctcodeName];
  }
  if (self.hasMemAcctcodeBalance) {
    [output writeString:60 value:self.memAcctcodeBalance];
  }
  if (self.hasExistFlg) {
    [output writeString:61 value:self.existFlg];
  }
  if (self.hasPayeeNotes) {
    [output writeString:62 value:self.payeeNotes];
  }
  if (self.hasRealNameFlg) {
    [output writeString:63 value:self.realNameFlg];
  }
  if (self.hasBindPhoneFlg) {
    [output writeString:64 value:self.bindPhoneFlg];
  }
  if (self.hasFirstLoginFlg) {
    [output writeString:65 value:self.firstLoginFlg];
  }
  if (self.hasTotalAmt) {
    [output writeString:66 value:self.totalAmt];
  }
  if (self.hasTotalCount) {
    [output writeString:67 value:self.totalCount];
  }
  if (self.hasOrderType) {
    [output writeString:68 value:self.orderType];
  }
  if (self.hasCertId) {
    [output writeString:69 value:self.certId];
  }
  if (self.hasRecommendId) {
    [output writeString:70 value:self.recommendId];
  }
  if (self.hasOrderCode) {
    [output writeString:71 value:self.orderCode];
  }
  if (self.hasMax) {
    [output writeString:72 value:self.max];
  }
  if (self.hasStatusSet) {
    [output writeString:73 value:self.statusSet];
  }
  if (self.hasOutTradeNo) {
    [output writeString:74 value:self.outTradeNo];
  }
  if (self.hasAppInfo) {
    [output writeMessage:75 value:self.appInfo];
  }
  [self.bankArray enumerateObjectsUsingBlock:^(ContentBank *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:76 value:element];
  }];
  if (self.hasMember) {
    [output writeMessage:77 value:self.member];
  }
  [self.memberIdentityArray enumerateObjectsUsingBlock:^(ContentMemberIdentity *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:78 value:element];
  }];
  [self.safeProblemArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:79 value:element];
  }];
  [self.queryWalletBill99BillResponseArray enumerateObjectsUsingBlock:^(ContentQueryWalletBill99BillResponse *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:80 value:element];
  }];
  [self.atpProdArray enumerateObjectsUsingBlock:^(ContentAtpProd *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:81 value:element];
  }];
  if (self.hasTradeId) {
    [output writeString:82 value:self.tradeId];
  }
  if (self.hasEndTime) {
    [output writeString:83 value:self.endTime];
  }
  [self.solidCardArray enumerateObjectsUsingBlock:^(ContentSolidCard *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:84 value:element];
  }];
  if (self.hasUserFlag) {
    [output writeString:85 value:self.userFlag];
  }
  if (self.hasIdCardNo) {
    [output writeString:86 value:self.idCardNo];
  }
  if (self.hasIdCardImg) {
    [output writeString:87 value:self.idCardImg];
  }
  if (self.hasPhoto) {
    [output writeString:88 value:self.photo];
  }
  if (self.hasIsDisplay) {
    [output writeString:89 value:self.isDisplay];
  }
  if (self.hasShortPhones) {
    [output writeString:90 value:self.shortPhones];
  }
  if (self.hasRipAmount) {
    [output writeString:91 value:self.ripAmount];
  }
  if (self.hasMemberAuthDto) {
    [output writeMessage:92 value:self.memberAuthDto];
  }
  [self.bankLimitAmountDtoArray enumerateObjectsUsingBlock:^(ContentBankLimitAmountDto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:93 value:element];
  }];
  if (self.hasOccupation) {
    [output writeString:94 value:self.occupation];
  }
  if (self.hasPartnerUserId) {
    [output writeString:95 value:self.partnerUserId];
  }
  if (self.hasMemberBankAcctId) {
    [output writeString:96 value:self.memberBankAcctId];
  }
  if (self.hasExpiresIn) {
    [output writeString:97 value:self.expiresIn];
  }
  if (self.hasAppUpInfo) {
    [output writeMessage:98 value:self.appUpInfo];
  }
  if (self.hasKeyboardSeq) {
    [output writeString:99 value:self.keyboardSeq];
  }
  if (self.hasImgCode) {
    [output writeString:100 value:self.imgCode];
  }
  if (self.hasImgToken) {
    [output writeString:101 value:self.imgToken];
  }
  if (self.hasValidateToken) {
    [output writeString:102 value:self.validateToken];
  }
  if (self.hasErrorType) {
    [output writeString:103 value:self.errorType];
  }
  if (self.hasFlag) {
    [output writeString:104 value:self.flag];
  }
  [self.queryAllFinaprodResponseArray enumerateObjectsUsingBlock:^(ContentQueryAllFinaprodResponse *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:105 value:element];
  }];
  if (self.hasFinProdType) {
    [output writeString:106 value:self.finProdType];
  }
  if (self.hasTradeType) {
    [output writeString:107 value:self.tradeType];
  }
  if (self.hasProdStatus) {
    [output writeString:108 value:self.prodStatus];
  }
  if (self.hasQueryOrders) {
    [output writeString:109 value:self.queryOrders];
  }
  if (self.hasHorizonTo) {
    [output writeString:110 value:self.horizonTo];
  }
  if (self.hasReturnRateExp) {
    [output writeString:111 value:self.returnRateExp];
  }
  [self.atpTradeOrderArray enumerateObjectsUsingBlock:^(ContentAtpTradeOrder *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:112 value:element];
  }];
  if (self.hasTotalFrozenAmt) {
    [output writeString:113 value:self.totalFrozenAmt];
  }
  if (self.hasFee) {
    [output writeString:114 value:self.fee];
  }
  if (self.hasTransFeeRate) {
    [output writeString:115 value:self.transFeeRate];
  }
  if (self.hasBankNameId) {
    [output writeString:116 value:self.bankNameId];
  }
  if (self.hasFinancialInfo) {
    [output writeMessage:117 value:self.financialInfo];
  }
  [self.prodAccountInfoArray enumerateObjectsUsingBlock:^(ContentProdAccountInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:118 value:element];
  }];
  if (self.hasIsMainOrder) {
    [output writeString:119 value:self.isMainOrder];
  }
  if (self.hasMerchantId) {
    [output writeString:120 value:self.merchantId];
  }
  if (self.hasMerchantName) {
    [output writeString:121 value:self.merchantName];
  }
  if (self.hasOsVersion) {
    [output writeString:122 value:self.osVersion];
  }
  if (self.hasIsRoot) {
    [output writeString:123 value:self.isRoot];
  }
  if (self.hasSize) {
    [output writeString:124 value:self.size];
  }
  if (self.hasPhoneModel) {
    [output writeString:125 value:self.phoneModel];
  }
  if (self.hasWifiName) {
    [output writeString:126 value:self.wifiName];
  }
  if (self.hasWifiMac) {
    [output writeString:127 value:self.wifiMac];
  }
  if (self.hasAppId) {
    [output writeString:128 value:self.appId];
  }
  if (self.hasMerchantCode) {
    [output writeString:129 value:self.merchantCode];
  }
  if (self.hasBillOrderNo) {
    [output writeString:130 value:self.billOrderNo];
  }
  if (self.hasChannelType) {
    [output writeString:131 value:self.channelType];
  }
  if (self.hasOrderAmount) {
    [output writeString:132 value:self.orderAmount];
  }
  if (self.hasPayMode) {
    [output writeString:133 value:self.payMode];
  }
  if (self.hasPayAmount) {
    [output writeString:134 value:self.payAmount];
  }
  if (self.hasOrderStatus) {
    [output writeString:135 value:self.orderStatus];
  }
  if (self.hasOutOrderType) {
    [output writeString:136 value:self.outOrderType];
  }
  if (self.hasTxnTimeStart) {
    [output writeString:137 value:self.txnTimeStart];
  }
  if (self.hasTxnTimeExpire) {
    [output writeString:138 value:self.txnTimeExpire];
  }
  if (self.hasPayStatus) {
    [output writeString:139 value:self.payStatus];
  }
  if (self.hasProductInfo) {
    [output writeMessage:140 value:self.productInfo];
  }
  [self.payMethodArray enumerateObjectsUsingBlock:^(ContentPayMethod *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:141 value:element];
  }];
  if (self.hasOutEquityCode) {
    [output writeString:142 value:self.outEquityCode];
  }
  if (self.hasOutEquityAmount) {
    [output writeString:143 value:self.outEquityAmount];
  }
  if (self.hasPayMethodId) {
    [output writeString:144 value:self.payMethodId];
  }
  [self.instalmentArray enumerateObjectsUsingBlock:^(ContentInstalment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:145 value:element];
  }];
  if (self.hasInstalmentId) {
    [output writeString:146 value:self.instalmentId];
  }
  if (self.hasTxnEndTime) {
    [output writeString:147 value:self.txnEndTime];
  }
  if (self.hasValidateElement) {
    [output writeString:148 value:self.validateElement];
  }
  if (self.hasSMsCode) {
    [output writeString:149 value:self.sMsCode];
  }
  [self.voucherArray enumerateObjectsUsingBlock:^(ContentVoucher *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:150 value:element];
  }];
  [self.ateTradeOrderArray enumerateObjectsUsingBlock:^(ContentAteTradeOrder *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:151 value:element];
  }];
  if (self.hasEquityAmount) {
    [output writeString:152 value:self.equityAmount];
  }
  if (self.hasSupportFinger) {
    [output writeString:153 value:self.supportFinger];
  }
  if (self.hasType) {
    [output writeString:154 value:self.type];
  }
  if (self.hasTradeStatus) {
    [output writeString:155 value:self.tradeStatus];
  }
  if (self.hasProductDesc) {
    [output writeString:156 value:self.productDesc];
  }
  if (self.hasSubMerchantName) {
    [output writeString:157 value:self.subMerchantName];
  }
  if (self.hasMemo) {
    [output writeString:158 value:self.memo];
  }
  if (self.hasNotifyMode) {
    [output writeString:159 value:self.notifyMode];
  }
  [self.memberListArray enumerateObjectsUsingBlock:^(ContentMemberTwo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:160 value:element];
  }];
  if (self.hasGpsInfo) {
    [output writeString:161 value:self.gpsInfo];
  }
  if (self.hasPublishNo) {
    [output writeString:162 value:self.publishNo];
  }
  if (self.hasResolution) {
    [output writeString:163 value:self.resolution];
  }
  if (self.hasMsgTypeId) {
    [output writeString:164 value:self.msgTypeId];
  }
  if (self.hasLastRecordId) {
    [output writeString:165 value:self.lastRecordId];
  }
  if (self.hasScollUp) {
    [output writeString:166 value:self.scollUp];
  }
  if (self.hasJsonCallBack) {
    [output writeString:167 value:self.jsonCallBack];
  }
  [self.msgTypeInfoArray enumerateObjectsUsingBlock:^(ContentMsgTypeInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:168 value:element];
  }];
  [self.msgInfoArray enumerateObjectsUsingBlock:^(ContentMsgInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:169 value:element];
  }];
  if (self.hasMsgId) {
    [output writeString:170 value:self.msgId];
  }
  [self.resourceInfoArray enumerateObjectsUsingBlock:^(ContentResourceInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:171 value:element];
  }];
  [self.commonZipInfoArray enumerateObjectsUsingBlock:^(ContentCommonZipInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:172 value:element];
  }];
  [self.shareInfoArray enumerateObjectsUsingBlock:^(ContentShareInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:173 value:element];
  }];
  if (self.hasResourceId) {
    [output writeString:174 value:self.resourceId];
  }
  if (self.hasVcsBizType) {
    [output writeString:175 value:self.vcsBizType];
  }
  if (self.hasMsg) {
    [output writeString:176 value:self.msg];
  }
  if (self.hasRepayCode) {
    [output writeString:177 value:self.repayCode];
  }
  [self.userAppLoginInfoArray enumerateObjectsUsingBlock:^(ContentUserAppLoginInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:178 value:element];
  }];
  if (self.hasResultType) {
    [output writeString:179 value:self.resultType];
  }
  [self.conflictAccArray enumerateObjectsUsingBlock:^(ContentConflictAcc *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:180 value:element];
  }];
  if (self.hasSysFrom) {
    [output writeString:181 value:self.sysFrom];
  }
  if (self.hasLoginPin) {
    [output writeString:182 value:self.loginPin];
  }
  if (self.hasNewLoginPin) {
    [output writeString:183 value:self.newLoginPin];
  }
  if (self.hasPayPwd) {
    [output writeString:184 value:self.payPwd];
  }
  if (self.hasNewPayPwd) {
    [output writeString:185 value:self.newPayPwd];
  }
  if (self.hasPayPwdResetFlag) {
    [output writeString:186 value:self.payPwdResetFlag];
  }
  if (self.hasSex) {
    [output writeString:187 value:self.sex];
  }
  if (self.hasBirthday) {
    [output writeString:188 value:self.birthday];
  }
  if (self.hasNationality) {
    [output writeString:189 value:self.nationality];
  }
  if (self.hasIssuingAuthority) {
    [output writeString:190 value:self.issuingAuthority];
  }
  [self.cardInfoArray enumerateObjectsUsingBlock:^(ContentCardInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:191 value:element];
  }];
  if (self.hasSummarizeInfo) {
    [output writeMessage:192 value:self.summarizeInfo];
  }
  if (self.hasCurrentPage) {
    [output writeString:193 value:self.currentPage];
  }
  if (self.hasPageSize) {
    [output writeString:194 value:self.pageSize];
  }
  [self.txnInfoArray enumerateObjectsUsingBlock:^(ContentTxnInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:195 value:element];
  }];
  if (self.hasApplyTime) {
    [output writeString:196 value:self.applyTime];
  }
  if (self.hasTotalFee) {
    [output writeString:197 value:self.totalFee];
  }
  if (self.hasTipInfo) {
    [output writeString:198 value:self.tipInfo];
  }
  if (self.hasCheckCode) {
    [output writeString:199 value:self.checkCode];
  }
  if (self.hasTotal) {
    [output writeString:200 value:self.total];
  }
  if (self.hasRepayAmt) {
    [output writeString:201 value:self.repayAmt];
  }
  if (self.hasBillOrderId) {
    [output writeString:202 value:self.billOrderId];
  }
  if (self.hasTxnAcctNo) {
    [output writeString:203 value:self.txnAcctNo];
  }
  if (self.hasLastRowNum) {
    [output writeString:204 value:self.lastRowNum];
  }
  if (self.hasInfo) {
    [output writeString:205 value:self.info];
  }
  [self.creditOrderArray enumerateObjectsUsingBlock:^(ContentCreditOrder *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:206 value:element];
  }];
  if (self.hasRepayStatus) {
    [output writeString:207 value:self.repayStatus];
  }
  if (self.hasInterest) {
    [output writeString:208 value:self.interest];
  }
  if (self.hasReturnAmt) {
    [output writeString:209 value:self.returnAmt];
  }
  if (self.hasStages) {
    [output writeString:210 value:self.stages];
  }
  [self.divideArray enumerateObjectsUsingBlock:^(ContentDivide *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:211 value:element];
  }];
  [self.repayOrderArray enumerateObjectsUsingBlock:^(ContentRepayOrder *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:212 value:element];
  }];
  [self.payTypesArray enumerateObjectsUsingBlock:^(ContentPayType *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:213 value:element];
  }];
  if (self.hasPayType) {
    [output writeString:214 value:self.payType];
  }
  [self.repayRecordArray enumerateObjectsUsingBlock:^(ContentRepayRecord *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:215 value:element];
  }];
  if (self.hasAccountAmt) {
    [output writeString:216 value:self.accountAmt];
  }
  if (self.hasStatusName) {
    [output writeString:217 value:self.statusName];
  }
  if (self.hasForceFaceCheck) {
    [output writeString:218 value:self.forceFaceCheck];
  }
  if (self.hasAllowRepay) {
    [output writeString:219 value:self.allowRepay];
  }
  if (self.hasLocationProvince) {
    [output writeString:220 value:self.locationProvince];
  }
  if (self.hasLocationCity) {
    [output writeString:221 value:self.locationCity];
  }
  if (self.hasLocationDistrict) {
    [output writeString:222 value:self.locationDistrict];
  }
  if (self.hasLocationAddress) {
    [output writeString:223 value:self.locationAddress];
  }
  if (self.hasKakaUrl) {
    [output writeString:224 value:self.kakaUrl];
  }
  if (self.hasDoudouUrl) {
    [output writeString:225 value:self.doudouUrl];
  }
  if (self.hasRepayId) {
    [output writeString:226 value:self.repayId];
  }
  [self.contractArray enumerateObjectsUsingBlock:^(ContentContract *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:227 value:element];
  }];
  if (self.hasUrl) {
    [output writeString:228 value:self.url];
  }
  if (self.hasFrozenInfo) {
    [output writeMessage:229 value:self.frozenInfo];
  }
  if (self.hasFcsCreditAmt) {
    [output writeString:230 value:self.fcsCreditAmt];
  }
  if (self.hasLeftFcsCreditAmt) {
    [output writeString:231 value:self.leftFcsCreditAmt];
  }
  if (self.hasFcsCreditAmtStatus) {
    [output writeString:232 value:self.fcsCreditAmtStatus];
  }
  if (self.hasFcsCreditAmtType) {
    [output writeString:233 value:self.fcsCreditAmtType];
  }
  if (self.hasFcsCreditUrl) {
    [output writeString:234 value:self.fcsCreditUrl];
  }
  if (self.hasLeftCreditAmtName) {
    [output writeString:235 value:self.leftCreditAmtName];
  }
  if (self.hasTotalCreditAmtName) {
    [output writeString:236 value:self.totalCreditAmtName];
  }
  if (self.hasFcsCreditName) {
    [output writeString:237 value:self.fcsCreditName];
  }
  if (self.hasFcsName) {
    [output writeString:238 value:self.fcsName];
  }
  if (self.hasQuotaShowType) {
    [output writeString:239 value:self.quotaShowType];
  }
  if (self.hasFcsMerchantName) {
    [output writeString:240 value:self.fcsMerchantName];
  }
  if (self.hasLeftFcsCreditName) {
    [output writeString:241 value:self.leftFcsCreditName];
  }
  if (self.hasSupplementInfo) {
    [output writeString:242 value:self.supplementInfo];
  }
  if (self.hasExtInfo) {
    [output writeString:243 value:self.extInfo];
  }
  if (self.hasSort) {
    [output writeString:244 value:self.sort];
  }
  [self.quotaListArray enumerateObjectsUsingBlock:^(ContentResult *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:245 value:element];
  }];
  if (self.hasIsShowPreQuotaAmt) {
    [output writeString:246 value:self.isShowPreQuotaAmt];
  }
  if (self.hasPreFcsAmt) {
    [output writeString:247 value:self.preFcsAmt];
  }
  if (self.hasPreFcsUrl) {
    [output writeString:248 value:self.preFcsUrl];
  }
  [self.freeListArray enumerateObjectsUsingBlock:^(ContentResult *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:249 value:element];
  }];
  if (self.hasUserGrade) {
    [output writeString:250 value:self.userGrade];
  }
  if (self.hasMemberTwo) {
    [output writeMessage:251 value:self.memberTwo];
  }
  if (self.hasMebCode) {
    [output writeString:252 value:self.mebCode];
  }
  if (self.hasUserName) {
    [output writeString:253 value:self.userName];
  }
  if (self.hasLastRequestTime) {
    [output writeString:254 value:self.lastRequestTime];
  }
  if (self.hasCardInfoObject) {
    [output writeMessage:255 value:self.cardInfoObject];
  }
  if (self.hasOrderInfo) {
    [output writeMessage:256 value:self.orderInfo];
  }
  [self.productGroupArray enumerateObjectsUsingBlock:^(ContentProductGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:257 value:element];
  }];
  if (self.hasAmtType) {
    [output writeString:258 value:self.amtType];
  }
  [self.withdrawLimitArray enumerateObjectsUsingBlock:^(ContentWithdrawLimit *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:259 value:element];
  }];
  if (self.hasEquityCode) {
    [output writeString:260 value:self.equityCode];
  }
  if (self.hasFunctionCode) {
    [output writeString:261 value:self.functionCode];
  }
  if (self.hasTwSign) {
    [output writeString:262 value:self.twSign];
  }
  if (self.hasLeftSumAmt) {
    [output writeString:263 value:self.leftSumAmt];
  }
  if (self.hasVirtualOrderAmt) {
    [output writeString:264 value:self.virtualOrderAmt];
  }
  if (self.hasSumCreditAmt) {
    [output writeString:265 value:self.sumCreditAmt];
  }
  if (self.hasShowVoucher) {
    [output writeString:266 value:self.showVoucher];
  }
  [self.equityInfoArray enumerateObjectsUsingBlock:^(ContentEquityInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:267 value:element];
  }];
  [self.activityArray enumerateObjectsUsingBlock:^(ContentActivity *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:268 value:element];
  }];
  if (self.hasBillId) {
    [output writeString:269 value:self.billId];
  }
  if (self.hasSiedc) {
    [output writeString:270 value:self.siedc];
  }
  [self.interestsArray enumerateObjectsUsingBlock:^(ContentInterest *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:271 value:element];
  }];
  if (self.hasQueryInterval) {
    [output writeString:272 value:self.queryInterval];
  }
  if (self.hasQueryTimes) {
    [output writeString:273 value:self.queryTimes];
  }
  if (self.hasStlMerchantCode) {
    [output writeString:274 value:self.stlMerchantCode];
  }
  if (self.hasEquityMessage) {
    [output writeString:275 value:self.equityMessage];
  }
  if (self.hasOutEquityMessage) {
    [output writeString:276 value:self.outEquityMessage];
  }
  [self.seedDataArray enumerateObjectsUsingBlock:^(ContentSeedData *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:277 value:element];
  }];
  [self.extMapArray enumerateObjectsUsingBlock:^(ContentExtMap *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:999 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPassword) {
    size_ += computeStringSize(1, self.password);
  }
  if (self.hasBusinessType) {
    size_ += computeStringSize(2, self.businessType);
  }
  if (self.hasTermId) {
    size_ += computeStringSize(3, self.termId);
  }
  if (self.hasPayPassword) {
    size_ += computeStringSize(4, self.payPassword);
  }
  if (self.hasBankId) {
    size_ += computeStringSize(5, self.bankId);
  }
  if (self.hasBankName) {
    size_ += computeStringSize(6, self.bankName);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(7, self.orderId);
  }
  if (self.hasAmt) {
    size_ += computeStringSize(8, self.amt);
  }
  if (self.hasToken) {
    size_ += computeStringSize(9, self.token);
  }
  if (self.hasValidateCode) {
    size_ += computeStringSize(10, self.validateCode);
  }
  if (self.hasTermTxnTime) {
    size_ += computeStringSize(11, self.termTxnTime);
  }
  if (self.hasIdType) {
    size_ += computeStringSize(12, self.idType);
  }
  if (self.hasHolderName) {
    size_ += computeStringSize(13, self.holderName);
  }
  if (self.hasExpireDate) {
    size_ += computeStringSize(14, self.expireDate);
  }
  if (self.hasVaType) {
    size_ += computeStringSize(15, self.vaType);
  }
  if (self.hasPan) {
    size_ += computeStringSize(16, self.pan);
  }
  if (self.hasShortPan) {
    size_ += computeStringSize(17, self.shortPan);
  }
  if (self.hasPhoneNo) {
    size_ += computeStringSize(18, self.phoneNo);
  }
  if (self.hasAuthDebitBankNames) {
    size_ += computeStringSize(19, self.authDebitBankNames);
  }
  if (self.hasCardId) {
    size_ += computeStringSize(20, self.cardId);
  }
  if (self.hasTxnType) {
    size_ += computeStringSize(21, self.txnType);
  }
  if (self.hasProductCode) {
    size_ += computeStringSize(22, self.productCode);
  }
  if (self.hasId) {
    size_ += computeStringSize(23, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(24, self.name);
  }
  if (self.hasProvince) {
    size_ += computeStringSize(25, self.province);
  }
  if (self.hasCity) {
    size_ += computeStringSize(26, self.city);
  }
  if (self.hasPageNo) {
    size_ += computeStringSize(27, self.pageNo);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(28, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(29, self.endDate);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(30, self.status);
  }
  if (self.hasOptionType) {
    size_ += computeStringSize(31, self.optionType);
  }
  if (self.hasSecurityQuestion) {
    size_ += computeStringSize(32, self.securityQuestion);
  }
  if (self.hasSecurityAnswer) {
    size_ += computeStringSize(33, self.securityAnswer);
  }
  if (self.hasCardType) {
    size_ += computeStringSize(34, self.cardType);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(35, self.email);
  }
  if (self.hasUniQrCode) {
    size_ += computeStringSize(36, self.uniQrCode);
  }
  if (self.hasProductType) {
    size_ += computeStringSize(37, self.productType);
  }
  if (self.hasAddress) {
    size_ += computeStringSize(38, self.address);
  }
  if (self.hasResendFlag) {
    size_ += computeStringSize(39, self.resendFlag);
  }
  if (self.hasPasswordType) {
    size_ += computeStringSize(40, self.passwordType);
  }
  if (self.hasCvv2) {
    size_ += computeStringSize(41, self.cvv2);
  }
  if (self.hasRefreshToken) {
    size_ += computeStringSize(42, self.refreshToken);
  }
  if (self.hasIdTxnCtrl) {
    size_ += computeStringSize(43, self.idTxnCtrl);
  }
  if (self.hasExtData1) {
    size_ += computeStringSize(44, self.extData1);
  }
  if (self.hasAuthBankIds) {
    size_ += computeStringSize(45, self.authBankIds);
  }
  if (self.hasAuthDebitBankIds) {
    size_ += computeStringSize(46, self.authDebitBankIds);
  }
  if (self.hasAuthBankNames) {
    size_ += computeStringSize(47, self.authBankNames);
  }
  if (self.hasBranchBank) {
    size_ += computeStringSize(48, self.branchBank);
  }
  if (self.hasTxnFlag) {
    size_ += computeStringSize(49, self.txnFlag);
  }
  if (self.hasAuthCode) {
    size_ += computeStringSize(50, self.authCode);
  }
  if (self.hasTxnTime) {
    size_ += computeStringSize(51, self.txnTime);
  }
  if (self.hasSignFlag) {
    size_ += computeStringSize(52, self.signFlag);
  }
  if (self.hasProductName) {
    size_ += computeStringSize(53, self.productName);
  }
  if (self.hasZoneType) {
    size_ += computeStringSize(54, self.zoneType);
  }
  if (self.hasPin) {
    size_ += computeStringSize(55, self.pin);
  }
  if (self.hasOrigOrderId) {
    size_ += computeStringSize(56, self.origOrderId);
  }
  if (self.hasCount) {
    size_ += computeStringSize(57, self.count);
  }
  if (self.hasRemark) {
    size_ += computeStringSize(58, self.remark);
  }
  if (self.hasMemAcctcodeName) {
    size_ += computeStringSize(59, self.memAcctcodeName);
  }
  if (self.hasMemAcctcodeBalance) {
    size_ += computeStringSize(60, self.memAcctcodeBalance);
  }
  if (self.hasExistFlg) {
    size_ += computeStringSize(61, self.existFlg);
  }
  if (self.hasPayeeNotes) {
    size_ += computeStringSize(62, self.payeeNotes);
  }
  if (self.hasRealNameFlg) {
    size_ += computeStringSize(63, self.realNameFlg);
  }
  if (self.hasBindPhoneFlg) {
    size_ += computeStringSize(64, self.bindPhoneFlg);
  }
  if (self.hasFirstLoginFlg) {
    size_ += computeStringSize(65, self.firstLoginFlg);
  }
  if (self.hasTotalAmt) {
    size_ += computeStringSize(66, self.totalAmt);
  }
  if (self.hasTotalCount) {
    size_ += computeStringSize(67, self.totalCount);
  }
  if (self.hasOrderType) {
    size_ += computeStringSize(68, self.orderType);
  }
  if (self.hasCertId) {
    size_ += computeStringSize(69, self.certId);
  }
  if (self.hasRecommendId) {
    size_ += computeStringSize(70, self.recommendId);
  }
  if (self.hasOrderCode) {
    size_ += computeStringSize(71, self.orderCode);
  }
  if (self.hasMax) {
    size_ += computeStringSize(72, self.max);
  }
  if (self.hasStatusSet) {
    size_ += computeStringSize(73, self.statusSet);
  }
  if (self.hasOutTradeNo) {
    size_ += computeStringSize(74, self.outTradeNo);
  }
  if (self.hasAppInfo) {
    size_ += computeMessageSize(75, self.appInfo);
  }
  [self.bankArray enumerateObjectsUsingBlock:^(ContentBank *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(76, element);
  }];
  if (self.hasMember) {
    size_ += computeMessageSize(77, self.member);
  }
  [self.memberIdentityArray enumerateObjectsUsingBlock:^(ContentMemberIdentity *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(78, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.safeProblemArray.count;
    [self.safeProblemArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  [self.queryWalletBill99BillResponseArray enumerateObjectsUsingBlock:^(ContentQueryWalletBill99BillResponse *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(80, element);
  }];
  [self.atpProdArray enumerateObjectsUsingBlock:^(ContentAtpProd *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(81, element);
  }];
  if (self.hasTradeId) {
    size_ += computeStringSize(82, self.tradeId);
  }
  if (self.hasEndTime) {
    size_ += computeStringSize(83, self.endTime);
  }
  [self.solidCardArray enumerateObjectsUsingBlock:^(ContentSolidCard *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(84, element);
  }];
  if (self.hasUserFlag) {
    size_ += computeStringSize(85, self.userFlag);
  }
  if (self.hasIdCardNo) {
    size_ += computeStringSize(86, self.idCardNo);
  }
  if (self.hasIdCardImg) {
    size_ += computeStringSize(87, self.idCardImg);
  }
  if (self.hasPhoto) {
    size_ += computeStringSize(88, self.photo);
  }
  if (self.hasIsDisplay) {
    size_ += computeStringSize(89, self.isDisplay);
  }
  if (self.hasShortPhones) {
    size_ += computeStringSize(90, self.shortPhones);
  }
  if (self.hasRipAmount) {
    size_ += computeStringSize(91, self.ripAmount);
  }
  if (self.hasMemberAuthDto) {
    size_ += computeMessageSize(92, self.memberAuthDto);
  }
  [self.bankLimitAmountDtoArray enumerateObjectsUsingBlock:^(ContentBankLimitAmountDto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(93, element);
  }];
  if (self.hasOccupation) {
    size_ += computeStringSize(94, self.occupation);
  }
  if (self.hasPartnerUserId) {
    size_ += computeStringSize(95, self.partnerUserId);
  }
  if (self.hasMemberBankAcctId) {
    size_ += computeStringSize(96, self.memberBankAcctId);
  }
  if (self.hasExpiresIn) {
    size_ += computeStringSize(97, self.expiresIn);
  }
  if (self.hasAppUpInfo) {
    size_ += computeMessageSize(98, self.appUpInfo);
  }
  if (self.hasKeyboardSeq) {
    size_ += computeStringSize(99, self.keyboardSeq);
  }
  if (self.hasImgCode) {
    size_ += computeStringSize(100, self.imgCode);
  }
  if (self.hasImgToken) {
    size_ += computeStringSize(101, self.imgToken);
  }
  if (self.hasValidateToken) {
    size_ += computeStringSize(102, self.validateToken);
  }
  if (self.hasErrorType) {
    size_ += computeStringSize(103, self.errorType);
  }
  if (self.hasFlag) {
    size_ += computeStringSize(104, self.flag);
  }
  [self.queryAllFinaprodResponseArray enumerateObjectsUsingBlock:^(ContentQueryAllFinaprodResponse *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(105, element);
  }];
  if (self.hasFinProdType) {
    size_ += computeStringSize(106, self.finProdType);
  }
  if (self.hasTradeType) {
    size_ += computeStringSize(107, self.tradeType);
  }
  if (self.hasProdStatus) {
    size_ += computeStringSize(108, self.prodStatus);
  }
  if (self.hasQueryOrders) {
    size_ += computeStringSize(109, self.queryOrders);
  }
  if (self.hasHorizonTo) {
    size_ += computeStringSize(110, self.horizonTo);
  }
  if (self.hasReturnRateExp) {
    size_ += computeStringSize(111, self.returnRateExp);
  }
  [self.atpTradeOrderArray enumerateObjectsUsingBlock:^(ContentAtpTradeOrder *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(112, element);
  }];
  if (self.hasTotalFrozenAmt) {
    size_ += computeStringSize(113, self.totalFrozenAmt);
  }
  if (self.hasFee) {
    size_ += computeStringSize(114, self.fee);
  }
  if (self.hasTransFeeRate) {
    size_ += computeStringSize(115, self.transFeeRate);
  }
  if (self.hasBankNameId) {
    size_ += computeStringSize(116, self.bankNameId);
  }
  if (self.hasFinancialInfo) {
    size_ += computeMessageSize(117, self.financialInfo);
  }
  [self.prodAccountInfoArray enumerateObjectsUsingBlock:^(ContentProdAccountInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(118, element);
  }];
  if (self.hasIsMainOrder) {
    size_ += computeStringSize(119, self.isMainOrder);
  }
  if (self.hasMerchantId) {
    size_ += computeStringSize(120, self.merchantId);
  }
  if (self.hasMerchantName) {
    size_ += computeStringSize(121, self.merchantName);
  }
  if (self.hasOsVersion) {
    size_ += computeStringSize(122, self.osVersion);
  }
  if (self.hasIsRoot) {
    size_ += computeStringSize(123, self.isRoot);
  }
  if (self.hasSize) {
    size_ += computeStringSize(124, self.size);
  }
  if (self.hasPhoneModel) {
    size_ += computeStringSize(125, self.phoneModel);
  }
  if (self.hasWifiName) {
    size_ += computeStringSize(126, self.wifiName);
  }
  if (self.hasWifiMac) {
    size_ += computeStringSize(127, self.wifiMac);
  }
  if (self.hasAppId) {
    size_ += computeStringSize(128, self.appId);
  }
  if (self.hasMerchantCode) {
    size_ += computeStringSize(129, self.merchantCode);
  }
  if (self.hasBillOrderNo) {
    size_ += computeStringSize(130, self.billOrderNo);
  }
  if (self.hasChannelType) {
    size_ += computeStringSize(131, self.channelType);
  }
  if (self.hasOrderAmount) {
    size_ += computeStringSize(132, self.orderAmount);
  }
  if (self.hasPayMode) {
    size_ += computeStringSize(133, self.payMode);
  }
  if (self.hasPayAmount) {
    size_ += computeStringSize(134, self.payAmount);
  }
  if (self.hasOrderStatus) {
    size_ += computeStringSize(135, self.orderStatus);
  }
  if (self.hasOutOrderType) {
    size_ += computeStringSize(136, self.outOrderType);
  }
  if (self.hasTxnTimeStart) {
    size_ += computeStringSize(137, self.txnTimeStart);
  }
  if (self.hasTxnTimeExpire) {
    size_ += computeStringSize(138, self.txnTimeExpire);
  }
  if (self.hasPayStatus) {
    size_ += computeStringSize(139, self.payStatus);
  }
  if (self.hasProductInfo) {
    size_ += computeMessageSize(140, self.productInfo);
  }
  [self.payMethodArray enumerateObjectsUsingBlock:^(ContentPayMethod *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(141, element);
  }];
  if (self.hasOutEquityCode) {
    size_ += computeStringSize(142, self.outEquityCode);
  }
  if (self.hasOutEquityAmount) {
    size_ += computeStringSize(143, self.outEquityAmount);
  }
  if (self.hasPayMethodId) {
    size_ += computeStringSize(144, self.payMethodId);
  }
  [self.instalmentArray enumerateObjectsUsingBlock:^(ContentInstalment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(145, element);
  }];
  if (self.hasInstalmentId) {
    size_ += computeStringSize(146, self.instalmentId);
  }
  if (self.hasTxnEndTime) {
    size_ += computeStringSize(147, self.txnEndTime);
  }
  if (self.hasValidateElement) {
    size_ += computeStringSize(148, self.validateElement);
  }
  if (self.hasSMsCode) {
    size_ += computeStringSize(149, self.sMsCode);
  }
  [self.voucherArray enumerateObjectsUsingBlock:^(ContentVoucher *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(150, element);
  }];
  [self.ateTradeOrderArray enumerateObjectsUsingBlock:^(ContentAteTradeOrder *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(151, element);
  }];
  if (self.hasEquityAmount) {
    size_ += computeStringSize(152, self.equityAmount);
  }
  if (self.hasSupportFinger) {
    size_ += computeStringSize(153, self.supportFinger);
  }
  if (self.hasType) {
    size_ += computeStringSize(154, self.type);
  }
  if (self.hasTradeStatus) {
    size_ += computeStringSize(155, self.tradeStatus);
  }
  if (self.hasProductDesc) {
    size_ += computeStringSize(156, self.productDesc);
  }
  if (self.hasSubMerchantName) {
    size_ += computeStringSize(157, self.subMerchantName);
  }
  if (self.hasMemo) {
    size_ += computeStringSize(158, self.memo);
  }
  if (self.hasNotifyMode) {
    size_ += computeStringSize(159, self.notifyMode);
  }
  [self.memberListArray enumerateObjectsUsingBlock:^(ContentMemberTwo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(160, element);
  }];
  if (self.hasGpsInfo) {
    size_ += computeStringSize(161, self.gpsInfo);
  }
  if (self.hasPublishNo) {
    size_ += computeStringSize(162, self.publishNo);
  }
  if (self.hasResolution) {
    size_ += computeStringSize(163, self.resolution);
  }
  if (self.hasMsgTypeId) {
    size_ += computeStringSize(164, self.msgTypeId);
  }
  if (self.hasLastRecordId) {
    size_ += computeStringSize(165, self.lastRecordId);
  }
  if (self.hasScollUp) {
    size_ += computeStringSize(166, self.scollUp);
  }
  if (self.hasJsonCallBack) {
    size_ += computeStringSize(167, self.jsonCallBack);
  }
  [self.msgTypeInfoArray enumerateObjectsUsingBlock:^(ContentMsgTypeInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(168, element);
  }];
  [self.msgInfoArray enumerateObjectsUsingBlock:^(ContentMsgInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(169, element);
  }];
  if (self.hasMsgId) {
    size_ += computeStringSize(170, self.msgId);
  }
  [self.resourceInfoArray enumerateObjectsUsingBlock:^(ContentResourceInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(171, element);
  }];
  [self.commonZipInfoArray enumerateObjectsUsingBlock:^(ContentCommonZipInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(172, element);
  }];
  [self.shareInfoArray enumerateObjectsUsingBlock:^(ContentShareInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(173, element);
  }];
  if (self.hasResourceId) {
    size_ += computeStringSize(174, self.resourceId);
  }
  if (self.hasVcsBizType) {
    size_ += computeStringSize(175, self.vcsBizType);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(176, self.msg);
  }
  if (self.hasRepayCode) {
    size_ += computeStringSize(177, self.repayCode);
  }
  [self.userAppLoginInfoArray enumerateObjectsUsingBlock:^(ContentUserAppLoginInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(178, element);
  }];
  if (self.hasResultType) {
    size_ += computeStringSize(179, self.resultType);
  }
  [self.conflictAccArray enumerateObjectsUsingBlock:^(ContentConflictAcc *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(180, element);
  }];
  if (self.hasSysFrom) {
    size_ += computeStringSize(181, self.sysFrom);
  }
  if (self.hasLoginPin) {
    size_ += computeStringSize(182, self.loginPin);
  }
  if (self.hasNewLoginPin) {
    size_ += computeStringSize(183, self.newLoginPin);
  }
  if (self.hasPayPwd) {
    size_ += computeStringSize(184, self.payPwd);
  }
  if (self.hasNewPayPwd) {
    size_ += computeStringSize(185, self.newPayPwd);
  }
  if (self.hasPayPwdResetFlag) {
    size_ += computeStringSize(186, self.payPwdResetFlag);
  }
  if (self.hasSex) {
    size_ += computeStringSize(187, self.sex);
  }
  if (self.hasBirthday) {
    size_ += computeStringSize(188, self.birthday);
  }
  if (self.hasNationality) {
    size_ += computeStringSize(189, self.nationality);
  }
  if (self.hasIssuingAuthority) {
    size_ += computeStringSize(190, self.issuingAuthority);
  }
  [self.cardInfoArray enumerateObjectsUsingBlock:^(ContentCardInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(191, element);
  }];
  if (self.hasSummarizeInfo) {
    size_ += computeMessageSize(192, self.summarizeInfo);
  }
  if (self.hasCurrentPage) {
    size_ += computeStringSize(193, self.currentPage);
  }
  if (self.hasPageSize) {
    size_ += computeStringSize(194, self.pageSize);
  }
  [self.txnInfoArray enumerateObjectsUsingBlock:^(ContentTxnInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(195, element);
  }];
  if (self.hasApplyTime) {
    size_ += computeStringSize(196, self.applyTime);
  }
  if (self.hasTotalFee) {
    size_ += computeStringSize(197, self.totalFee);
  }
  if (self.hasTipInfo) {
    size_ += computeStringSize(198, self.tipInfo);
  }
  if (self.hasCheckCode) {
    size_ += computeStringSize(199, self.checkCode);
  }
  if (self.hasTotal) {
    size_ += computeStringSize(200, self.total);
  }
  if (self.hasRepayAmt) {
    size_ += computeStringSize(201, self.repayAmt);
  }
  if (self.hasBillOrderId) {
    size_ += computeStringSize(202, self.billOrderId);
  }
  if (self.hasTxnAcctNo) {
    size_ += computeStringSize(203, self.txnAcctNo);
  }
  if (self.hasLastRowNum) {
    size_ += computeStringSize(204, self.lastRowNum);
  }
  if (self.hasInfo) {
    size_ += computeStringSize(205, self.info);
  }
  [self.creditOrderArray enumerateObjectsUsingBlock:^(ContentCreditOrder *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(206, element);
  }];
  if (self.hasRepayStatus) {
    size_ += computeStringSize(207, self.repayStatus);
  }
  if (self.hasInterest) {
    size_ += computeStringSize(208, self.interest);
  }
  if (self.hasReturnAmt) {
    size_ += computeStringSize(209, self.returnAmt);
  }
  if (self.hasStages) {
    size_ += computeStringSize(210, self.stages);
  }
  [self.divideArray enumerateObjectsUsingBlock:^(ContentDivide *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(211, element);
  }];
  [self.repayOrderArray enumerateObjectsUsingBlock:^(ContentRepayOrder *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(212, element);
  }];
  [self.payTypesArray enumerateObjectsUsingBlock:^(ContentPayType *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(213, element);
  }];
  if (self.hasPayType) {
    size_ += computeStringSize(214, self.payType);
  }
  [self.repayRecordArray enumerateObjectsUsingBlock:^(ContentRepayRecord *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(215, element);
  }];
  if (self.hasAccountAmt) {
    size_ += computeStringSize(216, self.accountAmt);
  }
  if (self.hasStatusName) {
    size_ += computeStringSize(217, self.statusName);
  }
  if (self.hasForceFaceCheck) {
    size_ += computeStringSize(218, self.forceFaceCheck);
  }
  if (self.hasAllowRepay) {
    size_ += computeStringSize(219, self.allowRepay);
  }
  if (self.hasLocationProvince) {
    size_ += computeStringSize(220, self.locationProvince);
  }
  if (self.hasLocationCity) {
    size_ += computeStringSize(221, self.locationCity);
  }
  if (self.hasLocationDistrict) {
    size_ += computeStringSize(222, self.locationDistrict);
  }
  if (self.hasLocationAddress) {
    size_ += computeStringSize(223, self.locationAddress);
  }
  if (self.hasKakaUrl) {
    size_ += computeStringSize(224, self.kakaUrl);
  }
  if (self.hasDoudouUrl) {
    size_ += computeStringSize(225, self.doudouUrl);
  }
  if (self.hasRepayId) {
    size_ += computeStringSize(226, self.repayId);
  }
  [self.contractArray enumerateObjectsUsingBlock:^(ContentContract *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(227, element);
  }];
  if (self.hasUrl) {
    size_ += computeStringSize(228, self.url);
  }
  if (self.hasFrozenInfo) {
    size_ += computeMessageSize(229, self.frozenInfo);
  }
  if (self.hasFcsCreditAmt) {
    size_ += computeStringSize(230, self.fcsCreditAmt);
  }
  if (self.hasLeftFcsCreditAmt) {
    size_ += computeStringSize(231, self.leftFcsCreditAmt);
  }
  if (self.hasFcsCreditAmtStatus) {
    size_ += computeStringSize(232, self.fcsCreditAmtStatus);
  }
  if (self.hasFcsCreditAmtType) {
    size_ += computeStringSize(233, self.fcsCreditAmtType);
  }
  if (self.hasFcsCreditUrl) {
    size_ += computeStringSize(234, self.fcsCreditUrl);
  }
  if (self.hasLeftCreditAmtName) {
    size_ += computeStringSize(235, self.leftCreditAmtName);
  }
  if (self.hasTotalCreditAmtName) {
    size_ += computeStringSize(236, self.totalCreditAmtName);
  }
  if (self.hasFcsCreditName) {
    size_ += computeStringSize(237, self.fcsCreditName);
  }
  if (self.hasFcsName) {
    size_ += computeStringSize(238, self.fcsName);
  }
  if (self.hasQuotaShowType) {
    size_ += computeStringSize(239, self.quotaShowType);
  }
  if (self.hasFcsMerchantName) {
    size_ += computeStringSize(240, self.fcsMerchantName);
  }
  if (self.hasLeftFcsCreditName) {
    size_ += computeStringSize(241, self.leftFcsCreditName);
  }
  if (self.hasSupplementInfo) {
    size_ += computeStringSize(242, self.supplementInfo);
  }
  if (self.hasExtInfo) {
    size_ += computeStringSize(243, self.extInfo);
  }
  if (self.hasSort) {
    size_ += computeStringSize(244, self.sort);
  }
  [self.quotaListArray enumerateObjectsUsingBlock:^(ContentResult *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(245, element);
  }];
  if (self.hasIsShowPreQuotaAmt) {
    size_ += computeStringSize(246, self.isShowPreQuotaAmt);
  }
  if (self.hasPreFcsAmt) {
    size_ += computeStringSize(247, self.preFcsAmt);
  }
  if (self.hasPreFcsUrl) {
    size_ += computeStringSize(248, self.preFcsUrl);
  }
  [self.freeListArray enumerateObjectsUsingBlock:^(ContentResult *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(249, element);
  }];
  if (self.hasUserGrade) {
    size_ += computeStringSize(250, self.userGrade);
  }
  if (self.hasMemberTwo) {
    size_ += computeMessageSize(251, self.memberTwo);
  }
  if (self.hasMebCode) {
    size_ += computeStringSize(252, self.mebCode);
  }
  if (self.hasUserName) {
    size_ += computeStringSize(253, self.userName);
  }
  if (self.hasLastRequestTime) {
    size_ += computeStringSize(254, self.lastRequestTime);
  }
  if (self.hasCardInfoObject) {
    size_ += computeMessageSize(255, self.cardInfoObject);
  }
  if (self.hasOrderInfo) {
    size_ += computeMessageSize(256, self.orderInfo);
  }
  [self.productGroupArray enumerateObjectsUsingBlock:^(ContentProductGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(257, element);
  }];
  if (self.hasAmtType) {
    size_ += computeStringSize(258, self.amtType);
  }
  [self.withdrawLimitArray enumerateObjectsUsingBlock:^(ContentWithdrawLimit *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(259, element);
  }];
  if (self.hasEquityCode) {
    size_ += computeStringSize(260, self.equityCode);
  }
  if (self.hasFunctionCode) {
    size_ += computeStringSize(261, self.functionCode);
  }
  if (self.hasTwSign) {
    size_ += computeStringSize(262, self.twSign);
  }
  if (self.hasLeftSumAmt) {
    size_ += computeStringSize(263, self.leftSumAmt);
  }
  if (self.hasVirtualOrderAmt) {
    size_ += computeStringSize(264, self.virtualOrderAmt);
  }
  if (self.hasSumCreditAmt) {
    size_ += computeStringSize(265, self.sumCreditAmt);
  }
  if (self.hasShowVoucher) {
    size_ += computeStringSize(266, self.showVoucher);
  }
  [self.equityInfoArray enumerateObjectsUsingBlock:^(ContentEquityInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(267, element);
  }];
  [self.activityArray enumerateObjectsUsingBlock:^(ContentActivity *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(268, element);
  }];
  if (self.hasBillId) {
    size_ += computeStringSize(269, self.billId);
  }
  if (self.hasSiedc) {
    size_ += computeStringSize(270, self.siedc);
  }
  [self.interestsArray enumerateObjectsUsingBlock:^(ContentInterest *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(271, element);
  }];
  if (self.hasQueryInterval) {
    size_ += computeStringSize(272, self.queryInterval);
  }
  if (self.hasQueryTimes) {
    size_ += computeStringSize(273, self.queryTimes);
  }
  if (self.hasStlMerchantCode) {
    size_ += computeStringSize(274, self.stlMerchantCode);
  }
  if (self.hasEquityMessage) {
    size_ += computeStringSize(275, self.equityMessage);
  }
  if (self.hasOutEquityMessage) {
    size_ += computeStringSize(276, self.outEquityMessage);
  }
  [self.seedDataArray enumerateObjectsUsingBlock:^(ContentSeedData *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(277, element);
  }];
  [self.extMapArray enumerateObjectsUsingBlock:^(ContentExtMap *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(999, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Content*) parseFromData:(NSData*) data {
  return (Content*)[[[Content builder] mergeFromData:data] build];
}
+ (Content*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Content*)[[[Content builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Content*) parseFromInputStream:(NSInputStream*) input {
  return (Content*)[[[Content builder] mergeFromInputStream:input] build];
}
+ (Content*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Content*)[[[Content builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Content*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Content*)[[[Content builder] mergeFromCodedInputStream:input] build];
}
+ (Content*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Content*)[[[Content builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentBuilder*) builder {
  return [[ContentBuilder alloc] init];
}
+ (ContentBuilder*) builderWithPrototype:(Content*) prototype {
  return [[Content builder] mergeFrom:prototype];
}
- (ContentBuilder*) builder {
  return [Content builder];
}
- (ContentBuilder*) toBuilder {
  return [Content builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasBusinessType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"businessType", self.businessType];
  }
  if (self.hasTermId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"termId", self.termId];
  }
  if (self.hasPayPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payPassword", self.payPassword];
  }
  if (self.hasBankId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankId", self.bankId];
  }
  if (self.hasBankName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankName", self.bankName];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amt", self.amt];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  if (self.hasValidateCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validateCode", self.validateCode];
  }
  if (self.hasTermTxnTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"termTxnTime", self.termTxnTime];
  }
  if (self.hasIdType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idType", self.idType];
  }
  if (self.hasHolderName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"holderName", self.holderName];
  }
  if (self.hasExpireDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expireDate", self.expireDate];
  }
  if (self.hasVaType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vaType", self.vaType];
  }
  if (self.hasPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pan", self.pan];
  }
  if (self.hasShortPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shortPan", self.shortPan];
  }
  if (self.hasPhoneNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNo", self.phoneNo];
  }
  if (self.hasAuthDebitBankNames) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authDebitBankNames", self.authDebitBankNames];
  }
  if (self.hasCardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardId", self.cardId];
  }
  if (self.hasTxnType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnType", self.txnType];
  }
  if (self.hasProductCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productCode", self.productCode];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasProvince) {
    [output appendFormat:@"%@%@: %@\n", indent, @"province", self.province];
  }
  if (self.hasCity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"city", self.city];
  }
  if (self.hasPageNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pageNo", self.pageNo];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasOptionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionType", self.optionType];
  }
  if (self.hasSecurityQuestion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securityQuestion", self.securityQuestion];
  }
  if (self.hasSecurityAnswer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securityAnswer", self.securityAnswer];
  }
  if (self.hasCardType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardType", self.cardType];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasUniQrCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uniQrCode", self.uniQrCode];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", self.productType];
  }
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasResendFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resendFlag", self.resendFlag];
  }
  if (self.hasPasswordType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passwordType", self.passwordType];
  }
  if (self.hasCvv2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cvv2", self.cvv2];
  }
  if (self.hasRefreshToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refreshToken", self.refreshToken];
  }
  if (self.hasIdTxnCtrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idTxnCtrl", self.idTxnCtrl];
  }
  if (self.hasExtData1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extData1", self.extData1];
  }
  if (self.hasAuthBankIds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authBankIds", self.authBankIds];
  }
  if (self.hasAuthDebitBankIds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authDebitBankIds", self.authDebitBankIds];
  }
  if (self.hasAuthBankNames) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authBankNames", self.authBankNames];
  }
  if (self.hasBranchBank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"branchBank", self.branchBank];
  }
  if (self.hasTxnFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnFlag", self.txnFlag];
  }
  if (self.hasAuthCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authCode", self.authCode];
  }
  if (self.hasTxnTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnTime", self.txnTime];
  }
  if (self.hasSignFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signFlag", self.signFlag];
  }
  if (self.hasProductName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productName", self.productName];
  }
  if (self.hasZoneType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zoneType", self.zoneType];
  }
  if (self.hasPin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pin", self.pin];
  }
  if (self.hasOrigOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"origOrderId", self.origOrderId];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", self.count];
  }
  if (self.hasRemark) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remark", self.remark];
  }
  if (self.hasMemAcctcodeName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memAcctcodeName", self.memAcctcodeName];
  }
  if (self.hasMemAcctcodeBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memAcctcodeBalance", self.memAcctcodeBalance];
  }
  if (self.hasExistFlg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"existFlg", self.existFlg];
  }
  if (self.hasPayeeNotes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payeeNotes", self.payeeNotes];
  }
  if (self.hasRealNameFlg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"realNameFlg", self.realNameFlg];
  }
  if (self.hasBindPhoneFlg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bindPhoneFlg", self.bindPhoneFlg];
  }
  if (self.hasFirstLoginFlg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"firstLoginFlg", self.firstLoginFlg];
  }
  if (self.hasTotalAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalAmt", self.totalAmt];
  }
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", self.totalCount];
  }
  if (self.hasOrderType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderType", self.orderType];
  }
  if (self.hasCertId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certId", self.certId];
  }
  if (self.hasRecommendId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recommendId", self.recommendId];
  }
  if (self.hasOrderCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderCode", self.orderCode];
  }
  if (self.hasMax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"max", self.max];
  }
  if (self.hasStatusSet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusSet", self.statusSet];
  }
  if (self.hasOutTradeNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outTradeNo", self.outTradeNo];
  }
  if (self.hasAppInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"appInfo"];
    [self.appInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.bankArray enumerateObjectsUsingBlock:^(ContentBank *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bank"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMember) {
    [output appendFormat:@"%@%@ {\n", indent, @"member"];
    [self.member writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.memberIdentityArray enumerateObjectsUsingBlock:^(ContentMemberIdentity *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"memberIdentity"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.safeProblemArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"safeProblem", obj];
  }];
  [self.queryWalletBill99BillResponseArray enumerateObjectsUsingBlock:^(ContentQueryWalletBill99BillResponse *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"queryWalletBill99BillResponse"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.atpProdArray enumerateObjectsUsingBlock:^(ContentAtpProd *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"atpProd"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeId", self.tradeId];
  }
  if (self.hasEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTime", self.endTime];
  }
  [self.solidCardArray enumerateObjectsUsingBlock:^(ContentSolidCard *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"solidCard"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUserFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userFlag", self.userFlag];
  }
  if (self.hasIdCardNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idCardNo", self.idCardNo];
  }
  if (self.hasIdCardImg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idCardImg", self.idCardImg];
  }
  if (self.hasPhoto) {
    [output appendFormat:@"%@%@: %@\n", indent, @"photo", self.photo];
  }
  if (self.hasIsDisplay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDisplay", self.isDisplay];
  }
  if (self.hasShortPhones) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shortPhones", self.shortPhones];
  }
  if (self.hasRipAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ripAmount", self.ripAmount];
  }
  if (self.hasMemberAuthDto) {
    [output appendFormat:@"%@%@ {\n", indent, @"memberAuthDto"];
    [self.memberAuthDto writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.bankLimitAmountDtoArray enumerateObjectsUsingBlock:^(ContentBankLimitAmountDto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bankLimitAmountDto"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOccupation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"occupation", self.occupation];
  }
  if (self.hasPartnerUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"partnerUserId", self.partnerUserId];
  }
  if (self.hasMemberBankAcctId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberBankAcctId", self.memberBankAcctId];
  }
  if (self.hasExpiresIn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expiresIn", self.expiresIn];
  }
  if (self.hasAppUpInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"appUpInfo"];
    [self.appUpInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasKeyboardSeq) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keyboardSeq", self.keyboardSeq];
  }
  if (self.hasImgCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgCode", self.imgCode];
  }
  if (self.hasImgToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgToken", self.imgToken];
  }
  if (self.hasValidateToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validateToken", self.validateToken];
  }
  if (self.hasErrorType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorType", self.errorType];
  }
  if (self.hasFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flag", self.flag];
  }
  [self.queryAllFinaprodResponseArray enumerateObjectsUsingBlock:^(ContentQueryAllFinaprodResponse *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"queryAllFinaprodResponse"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasFinProdType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finProdType", self.finProdType];
  }
  if (self.hasTradeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeType", self.tradeType];
  }
  if (self.hasProdStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prodStatus", self.prodStatus];
  }
  if (self.hasQueryOrders) {
    [output appendFormat:@"%@%@: %@\n", indent, @"queryOrders", self.queryOrders];
  }
  if (self.hasHorizonTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"horizonTo", self.horizonTo];
  }
  if (self.hasReturnRateExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"returnRateExp", self.returnRateExp];
  }
  [self.atpTradeOrderArray enumerateObjectsUsingBlock:^(ContentAtpTradeOrder *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"atpTradeOrder"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTotalFrozenAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalFrozenAmt", self.totalFrozenAmt];
  }
  if (self.hasFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fee", self.fee];
  }
  if (self.hasTransFeeRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transFeeRate", self.transFeeRate];
  }
  if (self.hasBankNameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankNameId", self.bankNameId];
  }
  if (self.hasFinancialInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"financialInfo"];
    [self.financialInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.prodAccountInfoArray enumerateObjectsUsingBlock:^(ContentProdAccountInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"prodAccountInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasIsMainOrder) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isMainOrder", self.isMainOrder];
  }
  if (self.hasMerchantId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantId", self.merchantId];
  }
  if (self.hasMerchantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantName", self.merchantName];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", self.osVersion];
  }
  if (self.hasIsRoot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRoot", self.isRoot];
  }
  if (self.hasSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"size", self.size];
  }
  if (self.hasPhoneModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneModel", self.phoneModel];
  }
  if (self.hasWifiName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wifiName", self.wifiName];
  }
  if (self.hasWifiMac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wifiMac", self.wifiMac];
  }
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  if (self.hasMerchantCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantCode", self.merchantCode];
  }
  if (self.hasBillOrderNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"billOrderNo", self.billOrderNo];
  }
  if (self.hasChannelType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelType", self.channelType];
  }
  if (self.hasOrderAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderAmount", self.orderAmount];
  }
  if (self.hasPayMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payMode", self.payMode];
  }
  if (self.hasPayAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payAmount", self.payAmount];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderStatus", self.orderStatus];
  }
  if (self.hasOutOrderType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outOrderType", self.outOrderType];
  }
  if (self.hasTxnTimeStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnTimeStart", self.txnTimeStart];
  }
  if (self.hasTxnTimeExpire) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnTimeExpire", self.txnTimeExpire];
  }
  if (self.hasPayStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payStatus", self.payStatus];
  }
  if (self.hasProductInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"productInfo"];
    [self.productInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.payMethodArray enumerateObjectsUsingBlock:^(ContentPayMethod *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"payMethod"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOutEquityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outEquityCode", self.outEquityCode];
  }
  if (self.hasOutEquityAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outEquityAmount", self.outEquityAmount];
  }
  if (self.hasPayMethodId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payMethodId", self.payMethodId];
  }
  [self.instalmentArray enumerateObjectsUsingBlock:^(ContentInstalment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"instalment"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasInstalmentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"instalmentId", self.instalmentId];
  }
  if (self.hasTxnEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnEndTime", self.txnEndTime];
  }
  if (self.hasValidateElement) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validateElement", self.validateElement];
  }
  if (self.hasSMsCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sMsCode", self.sMsCode];
  }
  [self.voucherArray enumerateObjectsUsingBlock:^(ContentVoucher *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"voucher"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.ateTradeOrderArray enumerateObjectsUsingBlock:^(ContentAteTradeOrder *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ateTradeOrder"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasEquityAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"equityAmount", self.equityAmount];
  }
  if (self.hasSupportFinger) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportFinger", self.supportFinger];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasTradeStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeStatus", self.tradeStatus];
  }
  if (self.hasProductDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productDesc", self.productDesc];
  }
  if (self.hasSubMerchantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subMerchantName", self.subMerchantName];
  }
  if (self.hasMemo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memo", self.memo];
  }
  if (self.hasNotifyMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"notifyMode", self.notifyMode];
  }
  [self.memberListArray enumerateObjectsUsingBlock:^(ContentMemberTwo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"memberList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasGpsInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gpsInfo", self.gpsInfo];
  }
  if (self.hasPublishNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publishNo", self.publishNo];
  }
  if (self.hasResolution) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resolution", self.resolution];
  }
  if (self.hasMsgTypeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgTypeId", self.msgTypeId];
  }
  if (self.hasLastRecordId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastRecordId", self.lastRecordId];
  }
  if (self.hasScollUp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scollUp", self.scollUp];
  }
  if (self.hasJsonCallBack) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jsonCallBack", self.jsonCallBack];
  }
  [self.msgTypeInfoArray enumerateObjectsUsingBlock:^(ContentMsgTypeInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"msgTypeInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.msgInfoArray enumerateObjectsUsingBlock:^(ContentMsgInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"msgInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", self.msgId];
  }
  [self.resourceInfoArray enumerateObjectsUsingBlock:^(ContentResourceInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"resourceInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.commonZipInfoArray enumerateObjectsUsingBlock:^(ContentCommonZipInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"commonZipInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.shareInfoArray enumerateObjectsUsingBlock:^(ContentShareInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"shareInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasResourceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resourceId", self.resourceId];
  }
  if (self.hasVcsBizType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vcsBizType", self.vcsBizType];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasRepayCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayCode", self.repayCode];
  }
  [self.userAppLoginInfoArray enumerateObjectsUsingBlock:^(ContentUserAppLoginInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userAppLoginInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasResultType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultType", self.resultType];
  }
  [self.conflictAccArray enumerateObjectsUsingBlock:^(ContentConflictAcc *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"conflictAcc"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSysFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sysFrom", self.sysFrom];
  }
  if (self.hasLoginPin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginPin", self.loginPin];
  }
  if (self.hasNewLoginPin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newLoginPin", self.newLoginPin];
  }
  if (self.hasPayPwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payPwd", self.payPwd];
  }
  if (self.hasNewPayPwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newPayPwd", self.newPayPwd];
  }
  if (self.hasPayPwdResetFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payPwdResetFlag", self.payPwdResetFlag];
  }
  if (self.hasSex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sex", self.sex];
  }
  if (self.hasBirthday) {
    [output appendFormat:@"%@%@: %@\n", indent, @"birthday", self.birthday];
  }
  if (self.hasNationality) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nationality", self.nationality];
  }
  if (self.hasIssuingAuthority) {
    [output appendFormat:@"%@%@: %@\n", indent, @"issuingAuthority", self.issuingAuthority];
  }
  [self.cardInfoArray enumerateObjectsUsingBlock:^(ContentCardInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"cardInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSummarizeInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"summarizeInfo"];
    [self.summarizeInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCurrentPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentPage", self.currentPage];
  }
  if (self.hasPageSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pageSize", self.pageSize];
  }
  [self.txnInfoArray enumerateObjectsUsingBlock:^(ContentTxnInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"txnInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasApplyTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyTime", self.applyTime];
  }
  if (self.hasTotalFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalFee", self.totalFee];
  }
  if (self.hasTipInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tipInfo", self.tipInfo];
  }
  if (self.hasCheckCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"checkCode", self.checkCode];
  }
  if (self.hasTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"total", self.total];
  }
  if (self.hasRepayAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayAmt", self.repayAmt];
  }
  if (self.hasBillOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"billOrderId", self.billOrderId];
  }
  if (self.hasTxnAcctNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnAcctNo", self.txnAcctNo];
  }
  if (self.hasLastRowNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastRowNum", self.lastRowNum];
  }
  if (self.hasInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"info", self.info];
  }
  [self.creditOrderArray enumerateObjectsUsingBlock:^(ContentCreditOrder *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"creditOrder"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasRepayStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayStatus", self.repayStatus];
  }
  if (self.hasInterest) {
    [output appendFormat:@"%@%@: %@\n", indent, @"interest", self.interest];
  }
  if (self.hasReturnAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"returnAmt", self.returnAmt];
  }
  if (self.hasStages) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stages", self.stages];
  }
  [self.divideArray enumerateObjectsUsingBlock:^(ContentDivide *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"divide"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repayOrderArray enumerateObjectsUsingBlock:^(ContentRepayOrder *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repayOrder"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.payTypesArray enumerateObjectsUsingBlock:^(ContentPayType *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"payTypes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasPayType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payType", self.payType];
  }
  [self.repayRecordArray enumerateObjectsUsingBlock:^(ContentRepayRecord *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repayRecord"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAccountAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountAmt", self.accountAmt];
  }
  if (self.hasStatusName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusName", self.statusName];
  }
  if (self.hasForceFaceCheck) {
    [output appendFormat:@"%@%@: %@\n", indent, @"forceFaceCheck", self.forceFaceCheck];
  }
  if (self.hasAllowRepay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowRepay", self.allowRepay];
  }
  if (self.hasLocationProvince) {
    [output appendFormat:@"%@%@: %@\n", indent, @"locationProvince", self.locationProvince];
  }
  if (self.hasLocationCity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"locationCity", self.locationCity];
  }
  if (self.hasLocationDistrict) {
    [output appendFormat:@"%@%@: %@\n", indent, @"locationDistrict", self.locationDistrict];
  }
  if (self.hasLocationAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"locationAddress", self.locationAddress];
  }
  if (self.hasKakaUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kakaUrl", self.kakaUrl];
  }
  if (self.hasDoudouUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"doudouUrl", self.doudouUrl];
  }
  if (self.hasRepayId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayId", self.repayId];
  }
  [self.contractArray enumerateObjectsUsingBlock:^(ContentContract *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contract"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasFrozenInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"frozenInfo"];
    [self.frozenInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFcsCreditAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsCreditAmt", self.fcsCreditAmt];
  }
  if (self.hasLeftFcsCreditAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftFcsCreditAmt", self.leftFcsCreditAmt];
  }
  if (self.hasFcsCreditAmtStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsCreditAmtStatus", self.fcsCreditAmtStatus];
  }
  if (self.hasFcsCreditAmtType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsCreditAmtType", self.fcsCreditAmtType];
  }
  if (self.hasFcsCreditUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsCreditUrl", self.fcsCreditUrl];
  }
  if (self.hasLeftCreditAmtName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftCreditAmtName", self.leftCreditAmtName];
  }
  if (self.hasTotalCreditAmtName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCreditAmtName", self.totalCreditAmtName];
  }
  if (self.hasFcsCreditName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsCreditName", self.fcsCreditName];
  }
  if (self.hasFcsName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsName", self.fcsName];
  }
  if (self.hasQuotaShowType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"quotaShowType", self.quotaShowType];
  }
  if (self.hasFcsMerchantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsMerchantName", self.fcsMerchantName];
  }
  if (self.hasLeftFcsCreditName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftFcsCreditName", self.leftFcsCreditName];
  }
  if (self.hasSupplementInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supplementInfo", self.supplementInfo];
  }
  if (self.hasExtInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extInfo", self.extInfo];
  }
  if (self.hasSort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sort", self.sort];
  }
  [self.quotaListArray enumerateObjectsUsingBlock:^(ContentResult *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"quotaList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasIsShowPreQuotaAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isShowPreQuotaAmt", self.isShowPreQuotaAmt];
  }
  if (self.hasPreFcsAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preFcsAmt", self.preFcsAmt];
  }
  if (self.hasPreFcsUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preFcsUrl", self.preFcsUrl];
  }
  [self.freeListArray enumerateObjectsUsingBlock:^(ContentResult *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"freeList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUserGrade) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userGrade", self.userGrade];
  }
  if (self.hasMemberTwo) {
    [output appendFormat:@"%@%@ {\n", indent, @"memberTwo"];
    [self.memberTwo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMebCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mebCode", self.mebCode];
  }
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasLastRequestTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastRequestTime", self.lastRequestTime];
  }
  if (self.hasCardInfoObject) {
    [output appendFormat:@"%@%@ {\n", indent, @"cardInfoObject"];
    [self.cardInfoObject writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOrderInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderInfo"];
    [self.orderInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.productGroupArray enumerateObjectsUsingBlock:^(ContentProductGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"productGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAmtType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amtType", self.amtType];
  }
  [self.withdrawLimitArray enumerateObjectsUsingBlock:^(ContentWithdrawLimit *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"withdrawLimit"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasEquityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"equityCode", self.equityCode];
  }
  if (self.hasFunctionCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"functionCode", self.functionCode];
  }
  if (self.hasTwSign) {
    [output appendFormat:@"%@%@: %@\n", indent, @"twSign", self.twSign];
  }
  if (self.hasLeftSumAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftSumAmt", self.leftSumAmt];
  }
  if (self.hasVirtualOrderAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"virtualOrderAmt", self.virtualOrderAmt];
  }
  if (self.hasSumCreditAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sumCreditAmt", self.sumCreditAmt];
  }
  if (self.hasShowVoucher) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showVoucher", self.showVoucher];
  }
  [self.equityInfoArray enumerateObjectsUsingBlock:^(ContentEquityInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"equityInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.activityArray enumerateObjectsUsingBlock:^(ContentActivity *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"activity"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasBillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"billId", self.billId];
  }
  if (self.hasSiedc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"siedc", self.siedc];
  }
  [self.interestsArray enumerateObjectsUsingBlock:^(ContentInterest *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"interests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasQueryInterval) {
    [output appendFormat:@"%@%@: %@\n", indent, @"queryInterval", self.queryInterval];
  }
  if (self.hasQueryTimes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"queryTimes", self.queryTimes];
  }
  if (self.hasStlMerchantCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stlMerchantCode", self.stlMerchantCode];
  }
  if (self.hasEquityMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"equityMessage", self.equityMessage];
  }
  if (self.hasOutEquityMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outEquityMessage", self.outEquityMessage];
  }
  [self.seedDataArray enumerateObjectsUsingBlock:^(ContentSeedData *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"seedData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.extMapArray enumerateObjectsUsingBlock:^(ContentExtMap *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"extMap"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasBusinessType) {
    [dictionary setObject: self.businessType forKey: @"businessType"];
  }
  if (self.hasTermId) {
    [dictionary setObject: self.termId forKey: @"termId"];
  }
  if (self.hasPayPassword) {
    [dictionary setObject: self.payPassword forKey: @"payPassword"];
  }
  if (self.hasBankId) {
    [dictionary setObject: self.bankId forKey: @"bankId"];
  }
  if (self.hasBankName) {
    [dictionary setObject: self.bankName forKey: @"bankName"];
  }
  if (self.hasOrderId) {
    [dictionary setObject: self.orderId forKey: @"orderId"];
  }
  if (self.hasAmt) {
    [dictionary setObject: self.amt forKey: @"amt"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  if (self.hasValidateCode) {
    [dictionary setObject: self.validateCode forKey: @"validateCode"];
  }
  if (self.hasTermTxnTime) {
    [dictionary setObject: self.termTxnTime forKey: @"termTxnTime"];
  }
  if (self.hasIdType) {
    [dictionary setObject: self.idType forKey: @"idType"];
  }
  if (self.hasHolderName) {
    [dictionary setObject: self.holderName forKey: @"holderName"];
  }
  if (self.hasExpireDate) {
    [dictionary setObject: self.expireDate forKey: @"expireDate"];
  }
  if (self.hasVaType) {
    [dictionary setObject: self.vaType forKey: @"vaType"];
  }
  if (self.hasPan) {
    [dictionary setObject: self.pan forKey: @"pan"];
  }
  if (self.hasShortPan) {
    [dictionary setObject: self.shortPan forKey: @"shortPan"];
  }
  if (self.hasPhoneNo) {
    [dictionary setObject: self.phoneNo forKey: @"phoneNo"];
  }
  if (self.hasAuthDebitBankNames) {
    [dictionary setObject: self.authDebitBankNames forKey: @"authDebitBankNames"];
  }
  if (self.hasCardId) {
    [dictionary setObject: self.cardId forKey: @"cardId"];
  }
  if (self.hasTxnType) {
    [dictionary setObject: self.txnType forKey: @"txnType"];
  }
  if (self.hasProductCode) {
    [dictionary setObject: self.productCode forKey: @"productCode"];
  }
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasProvince) {
    [dictionary setObject: self.province forKey: @"province"];
  }
  if (self.hasCity) {
    [dictionary setObject: self.city forKey: @"city"];
  }
  if (self.hasPageNo) {
    [dictionary setObject: self.pageNo forKey: @"pageNo"];
  }
  if (self.hasStartDate) {
    [dictionary setObject: self.startDate forKey: @"startDate"];
  }
  if (self.hasEndDate) {
    [dictionary setObject: self.endDate forKey: @"endDate"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  if (self.hasOptionType) {
    [dictionary setObject: self.optionType forKey: @"optionType"];
  }
  if (self.hasSecurityQuestion) {
    [dictionary setObject: self.securityQuestion forKey: @"securityQuestion"];
  }
  if (self.hasSecurityAnswer) {
    [dictionary setObject: self.securityAnswer forKey: @"securityAnswer"];
  }
  if (self.hasCardType) {
    [dictionary setObject: self.cardType forKey: @"cardType"];
  }
  if (self.hasEmail) {
    [dictionary setObject: self.email forKey: @"email"];
  }
  if (self.hasUniQrCode) {
    [dictionary setObject: self.uniQrCode forKey: @"uniQrCode"];
  }
  if (self.hasProductType) {
    [dictionary setObject: self.productType forKey: @"productType"];
  }
  if (self.hasAddress) {
    [dictionary setObject: self.address forKey: @"address"];
  }
  if (self.hasResendFlag) {
    [dictionary setObject: self.resendFlag forKey: @"resendFlag"];
  }
  if (self.hasPasswordType) {
    [dictionary setObject: self.passwordType forKey: @"passwordType"];
  }
  if (self.hasCvv2) {
    [dictionary setObject: self.cvv2 forKey: @"cvv2"];
  }
  if (self.hasRefreshToken) {
    [dictionary setObject: self.refreshToken forKey: @"refreshToken"];
  }
  if (self.hasIdTxnCtrl) {
    [dictionary setObject: self.idTxnCtrl forKey: @"idTxnCtrl"];
  }
  if (self.hasExtData1) {
    [dictionary setObject: self.extData1 forKey: @"extData1"];
  }
  if (self.hasAuthBankIds) {
    [dictionary setObject: self.authBankIds forKey: @"authBankIds"];
  }
  if (self.hasAuthDebitBankIds) {
    [dictionary setObject: self.authDebitBankIds forKey: @"authDebitBankIds"];
  }
  if (self.hasAuthBankNames) {
    [dictionary setObject: self.authBankNames forKey: @"authBankNames"];
  }
  if (self.hasBranchBank) {
    [dictionary setObject: self.branchBank forKey: @"branchBank"];
  }
  if (self.hasTxnFlag) {
    [dictionary setObject: self.txnFlag forKey: @"txnFlag"];
  }
  if (self.hasAuthCode) {
    [dictionary setObject: self.authCode forKey: @"authCode"];
  }
  if (self.hasTxnTime) {
    [dictionary setObject: self.txnTime forKey: @"txnTime"];
  }
  if (self.hasSignFlag) {
    [dictionary setObject: self.signFlag forKey: @"signFlag"];
  }
  if (self.hasProductName) {
    [dictionary setObject: self.productName forKey: @"productName"];
  }
  if (self.hasZoneType) {
    [dictionary setObject: self.zoneType forKey: @"zoneType"];
  }
  if (self.hasPin) {
    [dictionary setObject: self.pin forKey: @"pin"];
  }
  if (self.hasOrigOrderId) {
    [dictionary setObject: self.origOrderId forKey: @"origOrderId"];
  }
  if (self.hasCount) {
    [dictionary setObject: self.count forKey: @"count"];
  }
  if (self.hasRemark) {
    [dictionary setObject: self.remark forKey: @"remark"];
  }
  if (self.hasMemAcctcodeName) {
    [dictionary setObject: self.memAcctcodeName forKey: @"memAcctcodeName"];
  }
  if (self.hasMemAcctcodeBalance) {
    [dictionary setObject: self.memAcctcodeBalance forKey: @"memAcctcodeBalance"];
  }
  if (self.hasExistFlg) {
    [dictionary setObject: self.existFlg forKey: @"existFlg"];
  }
  if (self.hasPayeeNotes) {
    [dictionary setObject: self.payeeNotes forKey: @"payeeNotes"];
  }
  if (self.hasRealNameFlg) {
    [dictionary setObject: self.realNameFlg forKey: @"realNameFlg"];
  }
  if (self.hasBindPhoneFlg) {
    [dictionary setObject: self.bindPhoneFlg forKey: @"bindPhoneFlg"];
  }
  if (self.hasFirstLoginFlg) {
    [dictionary setObject: self.firstLoginFlg forKey: @"firstLoginFlg"];
  }
  if (self.hasTotalAmt) {
    [dictionary setObject: self.totalAmt forKey: @"totalAmt"];
  }
  if (self.hasTotalCount) {
    [dictionary setObject: self.totalCount forKey: @"totalCount"];
  }
  if (self.hasOrderType) {
    [dictionary setObject: self.orderType forKey: @"orderType"];
  }
  if (self.hasCertId) {
    [dictionary setObject: self.certId forKey: @"certId"];
  }
  if (self.hasRecommendId) {
    [dictionary setObject: self.recommendId forKey: @"recommendId"];
  }
  if (self.hasOrderCode) {
    [dictionary setObject: self.orderCode forKey: @"orderCode"];
  }
  if (self.hasMax) {
    [dictionary setObject: self.max forKey: @"max"];
  }
  if (self.hasStatusSet) {
    [dictionary setObject: self.statusSet forKey: @"statusSet"];
  }
  if (self.hasOutTradeNo) {
    [dictionary setObject: self.outTradeNo forKey: @"outTradeNo"];
  }
  if (self.hasAppInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.appInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"appInfo"];
  }
  for (ContentBank* element in self.bankArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bank"];
  }
  if (self.hasMember) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.member storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"member"];
  }
  for (ContentMemberIdentity* element in self.memberIdentityArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"memberIdentity"];
  }
  [dictionary setObject:self.safeProblem forKey: @"safeProblem"];
  for (ContentQueryWalletBill99BillResponse* element in self.queryWalletBill99BillResponseArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"queryWalletBill99BillResponse"];
  }
  for (ContentAtpProd* element in self.atpProdArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"atpProd"];
  }
  if (self.hasTradeId) {
    [dictionary setObject: self.tradeId forKey: @"tradeId"];
  }
  if (self.hasEndTime) {
    [dictionary setObject: self.endTime forKey: @"endTime"];
  }
  for (ContentSolidCard* element in self.solidCardArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"solidCard"];
  }
  if (self.hasUserFlag) {
    [dictionary setObject: self.userFlag forKey: @"userFlag"];
  }
  if (self.hasIdCardNo) {
    [dictionary setObject: self.idCardNo forKey: @"idCardNo"];
  }
  if (self.hasIdCardImg) {
    [dictionary setObject: self.idCardImg forKey: @"idCardImg"];
  }
  if (self.hasPhoto) {
    [dictionary setObject: self.photo forKey: @"photo"];
  }
  if (self.hasIsDisplay) {
    [dictionary setObject: self.isDisplay forKey: @"isDisplay"];
  }
  if (self.hasShortPhones) {
    [dictionary setObject: self.shortPhones forKey: @"shortPhones"];
  }
  if (self.hasRipAmount) {
    [dictionary setObject: self.ripAmount forKey: @"ripAmount"];
  }
  if (self.hasMemberAuthDto) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.memberAuthDto storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"memberAuthDto"];
  }
  for (ContentBankLimitAmountDto* element in self.bankLimitAmountDtoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bankLimitAmountDto"];
  }
  if (self.hasOccupation) {
    [dictionary setObject: self.occupation forKey: @"occupation"];
  }
  if (self.hasPartnerUserId) {
    [dictionary setObject: self.partnerUserId forKey: @"partnerUserId"];
  }
  if (self.hasMemberBankAcctId) {
    [dictionary setObject: self.memberBankAcctId forKey: @"memberBankAcctId"];
  }
  if (self.hasExpiresIn) {
    [dictionary setObject: self.expiresIn forKey: @"expiresIn"];
  }
  if (self.hasAppUpInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.appUpInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"appUpInfo"];
  }
  if (self.hasKeyboardSeq) {
    [dictionary setObject: self.keyboardSeq forKey: @"keyboardSeq"];
  }
  if (self.hasImgCode) {
    [dictionary setObject: self.imgCode forKey: @"imgCode"];
  }
  if (self.hasImgToken) {
    [dictionary setObject: self.imgToken forKey: @"imgToken"];
  }
  if (self.hasValidateToken) {
    [dictionary setObject: self.validateToken forKey: @"validateToken"];
  }
  if (self.hasErrorType) {
    [dictionary setObject: self.errorType forKey: @"errorType"];
  }
  if (self.hasFlag) {
    [dictionary setObject: self.flag forKey: @"flag"];
  }
  for (ContentQueryAllFinaprodResponse* element in self.queryAllFinaprodResponseArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"queryAllFinaprodResponse"];
  }
  if (self.hasFinProdType) {
    [dictionary setObject: self.finProdType forKey: @"finProdType"];
  }
  if (self.hasTradeType) {
    [dictionary setObject: self.tradeType forKey: @"tradeType"];
  }
  if (self.hasProdStatus) {
    [dictionary setObject: self.prodStatus forKey: @"prodStatus"];
  }
  if (self.hasQueryOrders) {
    [dictionary setObject: self.queryOrders forKey: @"queryOrders"];
  }
  if (self.hasHorizonTo) {
    [dictionary setObject: self.horizonTo forKey: @"horizonTo"];
  }
  if (self.hasReturnRateExp) {
    [dictionary setObject: self.returnRateExp forKey: @"returnRateExp"];
  }
  for (ContentAtpTradeOrder* element in self.atpTradeOrderArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"atpTradeOrder"];
  }
  if (self.hasTotalFrozenAmt) {
    [dictionary setObject: self.totalFrozenAmt forKey: @"totalFrozenAmt"];
  }
  if (self.hasFee) {
    [dictionary setObject: self.fee forKey: @"fee"];
  }
  if (self.hasTransFeeRate) {
    [dictionary setObject: self.transFeeRate forKey: @"transFeeRate"];
  }
  if (self.hasBankNameId) {
    [dictionary setObject: self.bankNameId forKey: @"bankNameId"];
  }
  if (self.hasFinancialInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.financialInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"financialInfo"];
  }
  for (ContentProdAccountInfo* element in self.prodAccountInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"prodAccountInfo"];
  }
  if (self.hasIsMainOrder) {
    [dictionary setObject: self.isMainOrder forKey: @"isMainOrder"];
  }
  if (self.hasMerchantId) {
    [dictionary setObject: self.merchantId forKey: @"merchantId"];
  }
  if (self.hasMerchantName) {
    [dictionary setObject: self.merchantName forKey: @"merchantName"];
  }
  if (self.hasOsVersion) {
    [dictionary setObject: self.osVersion forKey: @"osVersion"];
  }
  if (self.hasIsRoot) {
    [dictionary setObject: self.isRoot forKey: @"isRoot"];
  }
  if (self.hasSize) {
    [dictionary setObject: self.size forKey: @"size"];
  }
  if (self.hasPhoneModel) {
    [dictionary setObject: self.phoneModel forKey: @"phoneModel"];
  }
  if (self.hasWifiName) {
    [dictionary setObject: self.wifiName forKey: @"wifiName"];
  }
  if (self.hasWifiMac) {
    [dictionary setObject: self.wifiMac forKey: @"wifiMac"];
  }
  if (self.hasAppId) {
    [dictionary setObject: self.appId forKey: @"appId"];
  }
  if (self.hasMerchantCode) {
    [dictionary setObject: self.merchantCode forKey: @"merchantCode"];
  }
  if (self.hasBillOrderNo) {
    [dictionary setObject: self.billOrderNo forKey: @"billOrderNo"];
  }
  if (self.hasChannelType) {
    [dictionary setObject: self.channelType forKey: @"channelType"];
  }
  if (self.hasOrderAmount) {
    [dictionary setObject: self.orderAmount forKey: @"orderAmount"];
  }
  if (self.hasPayMode) {
    [dictionary setObject: self.payMode forKey: @"payMode"];
  }
  if (self.hasPayAmount) {
    [dictionary setObject: self.payAmount forKey: @"payAmount"];
  }
  if (self.hasOrderStatus) {
    [dictionary setObject: self.orderStatus forKey: @"orderStatus"];
  }
  if (self.hasOutOrderType) {
    [dictionary setObject: self.outOrderType forKey: @"outOrderType"];
  }
  if (self.hasTxnTimeStart) {
    [dictionary setObject: self.txnTimeStart forKey: @"txnTimeStart"];
  }
  if (self.hasTxnTimeExpire) {
    [dictionary setObject: self.txnTimeExpire forKey: @"txnTimeExpire"];
  }
  if (self.hasPayStatus) {
    [dictionary setObject: self.payStatus forKey: @"payStatus"];
  }
  if (self.hasProductInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.productInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"productInfo"];
  }
  for (ContentPayMethod* element in self.payMethodArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"payMethod"];
  }
  if (self.hasOutEquityCode) {
    [dictionary setObject: self.outEquityCode forKey: @"outEquityCode"];
  }
  if (self.hasOutEquityAmount) {
    [dictionary setObject: self.outEquityAmount forKey: @"outEquityAmount"];
  }
  if (self.hasPayMethodId) {
    [dictionary setObject: self.payMethodId forKey: @"payMethodId"];
  }
  for (ContentInstalment* element in self.instalmentArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"instalment"];
  }
  if (self.hasInstalmentId) {
    [dictionary setObject: self.instalmentId forKey: @"instalmentId"];
  }
  if (self.hasTxnEndTime) {
    [dictionary setObject: self.txnEndTime forKey: @"txnEndTime"];
  }
  if (self.hasValidateElement) {
    [dictionary setObject: self.validateElement forKey: @"validateElement"];
  }
  if (self.hasSMsCode) {
    [dictionary setObject: self.sMsCode forKey: @"sMsCode"];
  }
  for (ContentVoucher* element in self.voucherArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"voucher"];
  }
  for (ContentAteTradeOrder* element in self.ateTradeOrderArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ateTradeOrder"];
  }
  if (self.hasEquityAmount) {
    [dictionary setObject: self.equityAmount forKey: @"equityAmount"];
  }
  if (self.hasSupportFinger) {
    [dictionary setObject: self.supportFinger forKey: @"supportFinger"];
  }
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  if (self.hasTradeStatus) {
    [dictionary setObject: self.tradeStatus forKey: @"tradeStatus"];
  }
  if (self.hasProductDesc) {
    [dictionary setObject: self.productDesc forKey: @"productDesc"];
  }
  if (self.hasSubMerchantName) {
    [dictionary setObject: self.subMerchantName forKey: @"subMerchantName"];
  }
  if (self.hasMemo) {
    [dictionary setObject: self.memo forKey: @"memo"];
  }
  if (self.hasNotifyMode) {
    [dictionary setObject: self.notifyMode forKey: @"notifyMode"];
  }
  for (ContentMemberTwo* element in self.memberListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"memberList"];
  }
  if (self.hasGpsInfo) {
    [dictionary setObject: self.gpsInfo forKey: @"gpsInfo"];
  }
  if (self.hasPublishNo) {
    [dictionary setObject: self.publishNo forKey: @"publishNo"];
  }
  if (self.hasResolution) {
    [dictionary setObject: self.resolution forKey: @"resolution"];
  }
  if (self.hasMsgTypeId) {
    [dictionary setObject: self.msgTypeId forKey: @"msgTypeId"];
  }
  if (self.hasLastRecordId) {
    [dictionary setObject: self.lastRecordId forKey: @"lastRecordId"];
  }
  if (self.hasScollUp) {
    [dictionary setObject: self.scollUp forKey: @"scollUp"];
  }
  if (self.hasJsonCallBack) {
    [dictionary setObject: self.jsonCallBack forKey: @"jsonCallBack"];
  }
  for (ContentMsgTypeInfo* element in self.msgTypeInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"msgTypeInfo"];
  }
  for (ContentMsgInfo* element in self.msgInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"msgInfo"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: self.msgId forKey: @"msgId"];
  }
  for (ContentResourceInfo* element in self.resourceInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"resourceInfo"];
  }
  for (ContentCommonZipInfo* element in self.commonZipInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"commonZipInfo"];
  }
  for (ContentShareInfo* element in self.shareInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"shareInfo"];
  }
  if (self.hasResourceId) {
    [dictionary setObject: self.resourceId forKey: @"resourceId"];
  }
  if (self.hasVcsBizType) {
    [dictionary setObject: self.vcsBizType forKey: @"vcsBizType"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  if (self.hasRepayCode) {
    [dictionary setObject: self.repayCode forKey: @"repayCode"];
  }
  for (ContentUserAppLoginInfo* element in self.userAppLoginInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userAppLoginInfo"];
  }
  if (self.hasResultType) {
    [dictionary setObject: self.resultType forKey: @"resultType"];
  }
  for (ContentConflictAcc* element in self.conflictAccArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"conflictAcc"];
  }
  if (self.hasSysFrom) {
    [dictionary setObject: self.sysFrom forKey: @"sysFrom"];
  }
  if (self.hasLoginPin) {
    [dictionary setObject: self.loginPin forKey: @"loginPin"];
  }
  if (self.hasNewLoginPin) {
    [dictionary setObject: self.newLoginPin forKey: @"newLoginPin"];
  }
  if (self.hasPayPwd) {
    [dictionary setObject: self.payPwd forKey: @"payPwd"];
  }
  if (self.hasNewPayPwd) {
    [dictionary setObject: self.newPayPwd forKey: @"newPayPwd"];
  }
  if (self.hasPayPwdResetFlag) {
    [dictionary setObject: self.payPwdResetFlag forKey: @"payPwdResetFlag"];
  }
  if (self.hasSex) {
    [dictionary setObject: self.sex forKey: @"sex"];
  }
  if (self.hasBirthday) {
    [dictionary setObject: self.birthday forKey: @"birthday"];
  }
  if (self.hasNationality) {
    [dictionary setObject: self.nationality forKey: @"nationality"];
  }
  if (self.hasIssuingAuthority) {
    [dictionary setObject: self.issuingAuthority forKey: @"issuingAuthority"];
  }
  for (ContentCardInfo* element in self.cardInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"cardInfo"];
  }
  if (self.hasSummarizeInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.summarizeInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"summarizeInfo"];
  }
  if (self.hasCurrentPage) {
    [dictionary setObject: self.currentPage forKey: @"currentPage"];
  }
  if (self.hasPageSize) {
    [dictionary setObject: self.pageSize forKey: @"pageSize"];
  }
  for (ContentTxnInfo* element in self.txnInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"txnInfo"];
  }
  if (self.hasApplyTime) {
    [dictionary setObject: self.applyTime forKey: @"applyTime"];
  }
  if (self.hasTotalFee) {
    [dictionary setObject: self.totalFee forKey: @"totalFee"];
  }
  if (self.hasTipInfo) {
    [dictionary setObject: self.tipInfo forKey: @"tipInfo"];
  }
  if (self.hasCheckCode) {
    [dictionary setObject: self.checkCode forKey: @"checkCode"];
  }
  if (self.hasTotal) {
    [dictionary setObject: self.total forKey: @"total"];
  }
  if (self.hasRepayAmt) {
    [dictionary setObject: self.repayAmt forKey: @"repayAmt"];
  }
  if (self.hasBillOrderId) {
    [dictionary setObject: self.billOrderId forKey: @"billOrderId"];
  }
  if (self.hasTxnAcctNo) {
    [dictionary setObject: self.txnAcctNo forKey: @"txnAcctNo"];
  }
  if (self.hasLastRowNum) {
    [dictionary setObject: self.lastRowNum forKey: @"lastRowNum"];
  }
  if (self.hasInfo) {
    [dictionary setObject: self.info forKey: @"info"];
  }
  for (ContentCreditOrder* element in self.creditOrderArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"creditOrder"];
  }
  if (self.hasRepayStatus) {
    [dictionary setObject: self.repayStatus forKey: @"repayStatus"];
  }
  if (self.hasInterest) {
    [dictionary setObject: self.interest forKey: @"interest"];
  }
  if (self.hasReturnAmt) {
    [dictionary setObject: self.returnAmt forKey: @"returnAmt"];
  }
  if (self.hasStages) {
    [dictionary setObject: self.stages forKey: @"stages"];
  }
  for (ContentDivide* element in self.divideArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"divide"];
  }
  for (ContentRepayOrder* element in self.repayOrderArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repayOrder"];
  }
  for (ContentPayType* element in self.payTypesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"payTypes"];
  }
  if (self.hasPayType) {
    [dictionary setObject: self.payType forKey: @"payType"];
  }
  for (ContentRepayRecord* element in self.repayRecordArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repayRecord"];
  }
  if (self.hasAccountAmt) {
    [dictionary setObject: self.accountAmt forKey: @"accountAmt"];
  }
  if (self.hasStatusName) {
    [dictionary setObject: self.statusName forKey: @"statusName"];
  }
  if (self.hasForceFaceCheck) {
    [dictionary setObject: self.forceFaceCheck forKey: @"forceFaceCheck"];
  }
  if (self.hasAllowRepay) {
    [dictionary setObject: self.allowRepay forKey: @"allowRepay"];
  }
  if (self.hasLocationProvince) {
    [dictionary setObject: self.locationProvince forKey: @"locationProvince"];
  }
  if (self.hasLocationCity) {
    [dictionary setObject: self.locationCity forKey: @"locationCity"];
  }
  if (self.hasLocationDistrict) {
    [dictionary setObject: self.locationDistrict forKey: @"locationDistrict"];
  }
  if (self.hasLocationAddress) {
    [dictionary setObject: self.locationAddress forKey: @"locationAddress"];
  }
  if (self.hasKakaUrl) {
    [dictionary setObject: self.kakaUrl forKey: @"kakaUrl"];
  }
  if (self.hasDoudouUrl) {
    [dictionary setObject: self.doudouUrl forKey: @"doudouUrl"];
  }
  if (self.hasRepayId) {
    [dictionary setObject: self.repayId forKey: @"repayId"];
  }
  for (ContentContract* element in self.contractArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"contract"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  if (self.hasFrozenInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.frozenInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"frozenInfo"];
  }
  if (self.hasFcsCreditAmt) {
    [dictionary setObject: self.fcsCreditAmt forKey: @"fcsCreditAmt"];
  }
  if (self.hasLeftFcsCreditAmt) {
    [dictionary setObject: self.leftFcsCreditAmt forKey: @"leftFcsCreditAmt"];
  }
  if (self.hasFcsCreditAmtStatus) {
    [dictionary setObject: self.fcsCreditAmtStatus forKey: @"fcsCreditAmtStatus"];
  }
  if (self.hasFcsCreditAmtType) {
    [dictionary setObject: self.fcsCreditAmtType forKey: @"fcsCreditAmtType"];
  }
  if (self.hasFcsCreditUrl) {
    [dictionary setObject: self.fcsCreditUrl forKey: @"fcsCreditUrl"];
  }
  if (self.hasLeftCreditAmtName) {
    [dictionary setObject: self.leftCreditAmtName forKey: @"leftCreditAmtName"];
  }
  if (self.hasTotalCreditAmtName) {
    [dictionary setObject: self.totalCreditAmtName forKey: @"totalCreditAmtName"];
  }
  if (self.hasFcsCreditName) {
    [dictionary setObject: self.fcsCreditName forKey: @"fcsCreditName"];
  }
  if (self.hasFcsName) {
    [dictionary setObject: self.fcsName forKey: @"fcsName"];
  }
  if (self.hasQuotaShowType) {
    [dictionary setObject: self.quotaShowType forKey: @"quotaShowType"];
  }
  if (self.hasFcsMerchantName) {
    [dictionary setObject: self.fcsMerchantName forKey: @"fcsMerchantName"];
  }
  if (self.hasLeftFcsCreditName) {
    [dictionary setObject: self.leftFcsCreditName forKey: @"leftFcsCreditName"];
  }
  if (self.hasSupplementInfo) {
    [dictionary setObject: self.supplementInfo forKey: @"supplementInfo"];
  }
  if (self.hasExtInfo) {
    [dictionary setObject: self.extInfo forKey: @"extInfo"];
  }
  if (self.hasSort) {
    [dictionary setObject: self.sort forKey: @"sort"];
  }
  for (ContentResult* element in self.quotaListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"quotaList"];
  }
  if (self.hasIsShowPreQuotaAmt) {
    [dictionary setObject: self.isShowPreQuotaAmt forKey: @"isShowPreQuotaAmt"];
  }
  if (self.hasPreFcsAmt) {
    [dictionary setObject: self.preFcsAmt forKey: @"preFcsAmt"];
  }
  if (self.hasPreFcsUrl) {
    [dictionary setObject: self.preFcsUrl forKey: @"preFcsUrl"];
  }
  for (ContentResult* element in self.freeListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"freeList"];
  }
  if (self.hasUserGrade) {
    [dictionary setObject: self.userGrade forKey: @"userGrade"];
  }
  if (self.hasMemberTwo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.memberTwo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"memberTwo"];
  }
  if (self.hasMebCode) {
    [dictionary setObject: self.mebCode forKey: @"mebCode"];
  }
  if (self.hasUserName) {
    [dictionary setObject: self.userName forKey: @"userName"];
  }
  if (self.hasLastRequestTime) {
    [dictionary setObject: self.lastRequestTime forKey: @"lastRequestTime"];
  }
  if (self.hasCardInfoObject) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.cardInfoObject storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"cardInfoObject"];
  }
  if (self.hasOrderInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.orderInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"orderInfo"];
  }
  for (ContentProductGroup* element in self.productGroupArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"productGroup"];
  }
  if (self.hasAmtType) {
    [dictionary setObject: self.amtType forKey: @"amtType"];
  }
  for (ContentWithdrawLimit* element in self.withdrawLimitArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"withdrawLimit"];
  }
  if (self.hasEquityCode) {
    [dictionary setObject: self.equityCode forKey: @"equityCode"];
  }
  if (self.hasFunctionCode) {
    [dictionary setObject: self.functionCode forKey: @"functionCode"];
  }
  if (self.hasTwSign) {
    [dictionary setObject: self.twSign forKey: @"twSign"];
  }
  if (self.hasLeftSumAmt) {
    [dictionary setObject: self.leftSumAmt forKey: @"leftSumAmt"];
  }
  if (self.hasVirtualOrderAmt) {
    [dictionary setObject: self.virtualOrderAmt forKey: @"virtualOrderAmt"];
  }
  if (self.hasSumCreditAmt) {
    [dictionary setObject: self.sumCreditAmt forKey: @"sumCreditAmt"];
  }
  if (self.hasShowVoucher) {
    [dictionary setObject: self.showVoucher forKey: @"showVoucher"];
  }
  for (ContentEquityInfo* element in self.equityInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"equityInfo"];
  }
  for (ContentActivity* element in self.activityArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"activity"];
  }
  if (self.hasBillId) {
    [dictionary setObject: self.billId forKey: @"billId"];
  }
  if (self.hasSiedc) {
    [dictionary setObject: self.siedc forKey: @"siedc"];
  }
  for (ContentInterest* element in self.interestsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"interests"];
  }
  if (self.hasQueryInterval) {
    [dictionary setObject: self.queryInterval forKey: @"queryInterval"];
  }
  if (self.hasQueryTimes) {
    [dictionary setObject: self.queryTimes forKey: @"queryTimes"];
  }
  if (self.hasStlMerchantCode) {
    [dictionary setObject: self.stlMerchantCode forKey: @"stlMerchantCode"];
  }
  if (self.hasEquityMessage) {
    [dictionary setObject: self.equityMessage forKey: @"equityMessage"];
  }
  if (self.hasOutEquityMessage) {
    [dictionary setObject: self.outEquityMessage forKey: @"outEquityMessage"];
  }
  for (ContentSeedData* element in self.seedDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"seedData"];
  }
  for (ContentExtMap* element in self.extMapArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"extMap"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Content class]]) {
    return NO;
  }
  Content *otherMessage = other;
  return
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasBusinessType == otherMessage.hasBusinessType &&
      (!self.hasBusinessType || [self.businessType isEqual:otherMessage.businessType]) &&
      self.hasTermId == otherMessage.hasTermId &&
      (!self.hasTermId || [self.termId isEqual:otherMessage.termId]) &&
      self.hasPayPassword == otherMessage.hasPayPassword &&
      (!self.hasPayPassword || [self.payPassword isEqual:otherMessage.payPassword]) &&
      self.hasBankId == otherMessage.hasBankId &&
      (!self.hasBankId || [self.bankId isEqual:otherMessage.bankId]) &&
      self.hasBankName == otherMessage.hasBankName &&
      (!self.hasBankName || [self.bankName isEqual:otherMessage.bankName]) &&
      self.hasOrderId == otherMessage.hasOrderId &&
      (!self.hasOrderId || [self.orderId isEqual:otherMessage.orderId]) &&
      self.hasAmt == otherMessage.hasAmt &&
      (!self.hasAmt || [self.amt isEqual:otherMessage.amt]) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      self.hasValidateCode == otherMessage.hasValidateCode &&
      (!self.hasValidateCode || [self.validateCode isEqual:otherMessage.validateCode]) &&
      self.hasTermTxnTime == otherMessage.hasTermTxnTime &&
      (!self.hasTermTxnTime || [self.termTxnTime isEqual:otherMessage.termTxnTime]) &&
      self.hasIdType == otherMessage.hasIdType &&
      (!self.hasIdType || [self.idType isEqual:otherMessage.idType]) &&
      self.hasHolderName == otherMessage.hasHolderName &&
      (!self.hasHolderName || [self.holderName isEqual:otherMessage.holderName]) &&
      self.hasExpireDate == otherMessage.hasExpireDate &&
      (!self.hasExpireDate || [self.expireDate isEqual:otherMessage.expireDate]) &&
      self.hasVaType == otherMessage.hasVaType &&
      (!self.hasVaType || [self.vaType isEqual:otherMessage.vaType]) &&
      self.hasPan == otherMessage.hasPan &&
      (!self.hasPan || [self.pan isEqual:otherMessage.pan]) &&
      self.hasShortPan == otherMessage.hasShortPan &&
      (!self.hasShortPan || [self.shortPan isEqual:otherMessage.shortPan]) &&
      self.hasPhoneNo == otherMessage.hasPhoneNo &&
      (!self.hasPhoneNo || [self.phoneNo isEqual:otherMessage.phoneNo]) &&
      self.hasAuthDebitBankNames == otherMessage.hasAuthDebitBankNames &&
      (!self.hasAuthDebitBankNames || [self.authDebitBankNames isEqual:otherMessage.authDebitBankNames]) &&
      self.hasCardId == otherMessage.hasCardId &&
      (!self.hasCardId || [self.cardId isEqual:otherMessage.cardId]) &&
      self.hasTxnType == otherMessage.hasTxnType &&
      (!self.hasTxnType || [self.txnType isEqual:otherMessage.txnType]) &&
      self.hasProductCode == otherMessage.hasProductCode &&
      (!self.hasProductCode || [self.productCode isEqual:otherMessage.productCode]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasProvince == otherMessage.hasProvince &&
      (!self.hasProvince || [self.province isEqual:otherMessage.province]) &&
      self.hasCity == otherMessage.hasCity &&
      (!self.hasCity || [self.city isEqual:otherMessage.city]) &&
      self.hasPageNo == otherMessage.hasPageNo &&
      (!self.hasPageNo || [self.pageNo isEqual:otherMessage.pageNo]) &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasOptionType == otherMessage.hasOptionType &&
      (!self.hasOptionType || [self.optionType isEqual:otherMessage.optionType]) &&
      self.hasSecurityQuestion == otherMessage.hasSecurityQuestion &&
      (!self.hasSecurityQuestion || [self.securityQuestion isEqual:otherMessage.securityQuestion]) &&
      self.hasSecurityAnswer == otherMessage.hasSecurityAnswer &&
      (!self.hasSecurityAnswer || [self.securityAnswer isEqual:otherMessage.securityAnswer]) &&
      self.hasCardType == otherMessage.hasCardType &&
      (!self.hasCardType || [self.cardType isEqual:otherMessage.cardType]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasUniQrCode == otherMessage.hasUniQrCode &&
      (!self.hasUniQrCode || [self.uniQrCode isEqual:otherMessage.uniQrCode]) &&
      self.hasProductType == otherMessage.hasProductType &&
      (!self.hasProductType || [self.productType isEqual:otherMessage.productType]) &&
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasResendFlag == otherMessage.hasResendFlag &&
      (!self.hasResendFlag || [self.resendFlag isEqual:otherMessage.resendFlag]) &&
      self.hasPasswordType == otherMessage.hasPasswordType &&
      (!self.hasPasswordType || [self.passwordType isEqual:otherMessage.passwordType]) &&
      self.hasCvv2 == otherMessage.hasCvv2 &&
      (!self.hasCvv2 || [self.cvv2 isEqual:otherMessage.cvv2]) &&
      self.hasRefreshToken == otherMessage.hasRefreshToken &&
      (!self.hasRefreshToken || [self.refreshToken isEqual:otherMessage.refreshToken]) &&
      self.hasIdTxnCtrl == otherMessage.hasIdTxnCtrl &&
      (!self.hasIdTxnCtrl || [self.idTxnCtrl isEqual:otherMessage.idTxnCtrl]) &&
      self.hasExtData1 == otherMessage.hasExtData1 &&
      (!self.hasExtData1 || [self.extData1 isEqual:otherMessage.extData1]) &&
      self.hasAuthBankIds == otherMessage.hasAuthBankIds &&
      (!self.hasAuthBankIds || [self.authBankIds isEqual:otherMessage.authBankIds]) &&
      self.hasAuthDebitBankIds == otherMessage.hasAuthDebitBankIds &&
      (!self.hasAuthDebitBankIds || [self.authDebitBankIds isEqual:otherMessage.authDebitBankIds]) &&
      self.hasAuthBankNames == otherMessage.hasAuthBankNames &&
      (!self.hasAuthBankNames || [self.authBankNames isEqual:otherMessage.authBankNames]) &&
      self.hasBranchBank == otherMessage.hasBranchBank &&
      (!self.hasBranchBank || [self.branchBank isEqual:otherMessage.branchBank]) &&
      self.hasTxnFlag == otherMessage.hasTxnFlag &&
      (!self.hasTxnFlag || [self.txnFlag isEqual:otherMessage.txnFlag]) &&
      self.hasAuthCode == otherMessage.hasAuthCode &&
      (!self.hasAuthCode || [self.authCode isEqual:otherMessage.authCode]) &&
      self.hasTxnTime == otherMessage.hasTxnTime &&
      (!self.hasTxnTime || [self.txnTime isEqual:otherMessage.txnTime]) &&
      self.hasSignFlag == otherMessage.hasSignFlag &&
      (!self.hasSignFlag || [self.signFlag isEqual:otherMessage.signFlag]) &&
      self.hasProductName == otherMessage.hasProductName &&
      (!self.hasProductName || [self.productName isEqual:otherMessage.productName]) &&
      self.hasZoneType == otherMessage.hasZoneType &&
      (!self.hasZoneType || [self.zoneType isEqual:otherMessage.zoneType]) &&
      self.hasPin == otherMessage.hasPin &&
      (!self.hasPin || [self.pin isEqual:otherMessage.pin]) &&
      self.hasOrigOrderId == otherMessage.hasOrigOrderId &&
      (!self.hasOrigOrderId || [self.origOrderId isEqual:otherMessage.origOrderId]) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || [self.count isEqual:otherMessage.count]) &&
      self.hasRemark == otherMessage.hasRemark &&
      (!self.hasRemark || [self.remark isEqual:otherMessage.remark]) &&
      self.hasMemAcctcodeName == otherMessage.hasMemAcctcodeName &&
      (!self.hasMemAcctcodeName || [self.memAcctcodeName isEqual:otherMessage.memAcctcodeName]) &&
      self.hasMemAcctcodeBalance == otherMessage.hasMemAcctcodeBalance &&
      (!self.hasMemAcctcodeBalance || [self.memAcctcodeBalance isEqual:otherMessage.memAcctcodeBalance]) &&
      self.hasExistFlg == otherMessage.hasExistFlg &&
      (!self.hasExistFlg || [self.existFlg isEqual:otherMessage.existFlg]) &&
      self.hasPayeeNotes == otherMessage.hasPayeeNotes &&
      (!self.hasPayeeNotes || [self.payeeNotes isEqual:otherMessage.payeeNotes]) &&
      self.hasRealNameFlg == otherMessage.hasRealNameFlg &&
      (!self.hasRealNameFlg || [self.realNameFlg isEqual:otherMessage.realNameFlg]) &&
      self.hasBindPhoneFlg == otherMessage.hasBindPhoneFlg &&
      (!self.hasBindPhoneFlg || [self.bindPhoneFlg isEqual:otherMessage.bindPhoneFlg]) &&
      self.hasFirstLoginFlg == otherMessage.hasFirstLoginFlg &&
      (!self.hasFirstLoginFlg || [self.firstLoginFlg isEqual:otherMessage.firstLoginFlg]) &&
      self.hasTotalAmt == otherMessage.hasTotalAmt &&
      (!self.hasTotalAmt || [self.totalAmt isEqual:otherMessage.totalAmt]) &&
      self.hasTotalCount == otherMessage.hasTotalCount &&
      (!self.hasTotalCount || [self.totalCount isEqual:otherMessage.totalCount]) &&
      self.hasOrderType == otherMessage.hasOrderType &&
      (!self.hasOrderType || [self.orderType isEqual:otherMessage.orderType]) &&
      self.hasCertId == otherMessage.hasCertId &&
      (!self.hasCertId || [self.certId isEqual:otherMessage.certId]) &&
      self.hasRecommendId == otherMessage.hasRecommendId &&
      (!self.hasRecommendId || [self.recommendId isEqual:otherMessage.recommendId]) &&
      self.hasOrderCode == otherMessage.hasOrderCode &&
      (!self.hasOrderCode || [self.orderCode isEqual:otherMessage.orderCode]) &&
      self.hasMax == otherMessage.hasMax &&
      (!self.hasMax || [self.max isEqual:otherMessage.max]) &&
      self.hasStatusSet == otherMessage.hasStatusSet &&
      (!self.hasStatusSet || [self.statusSet isEqual:otherMessage.statusSet]) &&
      self.hasOutTradeNo == otherMessage.hasOutTradeNo &&
      (!self.hasOutTradeNo || [self.outTradeNo isEqual:otherMessage.outTradeNo]) &&
      self.hasAppInfo == otherMessage.hasAppInfo &&
      (!self.hasAppInfo || [self.appInfo isEqual:otherMessage.appInfo]) &&
      [self.bankArray isEqualToArray:otherMessage.bankArray] &&
      self.hasMember == otherMessage.hasMember &&
      (!self.hasMember || [self.member isEqual:otherMessage.member]) &&
      [self.memberIdentityArray isEqualToArray:otherMessage.memberIdentityArray] &&
      [self.safeProblemArray isEqualToArray:otherMessage.safeProblemArray] &&
      [self.queryWalletBill99BillResponseArray isEqualToArray:otherMessage.queryWalletBill99BillResponseArray] &&
      [self.atpProdArray isEqualToArray:otherMessage.atpProdArray] &&
      self.hasTradeId == otherMessage.hasTradeId &&
      (!self.hasTradeId || [self.tradeId isEqual:otherMessage.tradeId]) &&
      self.hasEndTime == otherMessage.hasEndTime &&
      (!self.hasEndTime || [self.endTime isEqual:otherMessage.endTime]) &&
      [self.solidCardArray isEqualToArray:otherMessage.solidCardArray] &&
      self.hasUserFlag == otherMessage.hasUserFlag &&
      (!self.hasUserFlag || [self.userFlag isEqual:otherMessage.userFlag]) &&
      self.hasIdCardNo == otherMessage.hasIdCardNo &&
      (!self.hasIdCardNo || [self.idCardNo isEqual:otherMessage.idCardNo]) &&
      self.hasIdCardImg == otherMessage.hasIdCardImg &&
      (!self.hasIdCardImg || [self.idCardImg isEqual:otherMessage.idCardImg]) &&
      self.hasPhoto == otherMessage.hasPhoto &&
      (!self.hasPhoto || [self.photo isEqual:otherMessage.photo]) &&
      self.hasIsDisplay == otherMessage.hasIsDisplay &&
      (!self.hasIsDisplay || [self.isDisplay isEqual:otherMessage.isDisplay]) &&
      self.hasShortPhones == otherMessage.hasShortPhones &&
      (!self.hasShortPhones || [self.shortPhones isEqual:otherMessage.shortPhones]) &&
      self.hasRipAmount == otherMessage.hasRipAmount &&
      (!self.hasRipAmount || [self.ripAmount isEqual:otherMessage.ripAmount]) &&
      self.hasMemberAuthDto == otherMessage.hasMemberAuthDto &&
      (!self.hasMemberAuthDto || [self.memberAuthDto isEqual:otherMessage.memberAuthDto]) &&
      [self.bankLimitAmountDtoArray isEqualToArray:otherMessage.bankLimitAmountDtoArray] &&
      self.hasOccupation == otherMessage.hasOccupation &&
      (!self.hasOccupation || [self.occupation isEqual:otherMessage.occupation]) &&
      self.hasPartnerUserId == otherMessage.hasPartnerUserId &&
      (!self.hasPartnerUserId || [self.partnerUserId isEqual:otherMessage.partnerUserId]) &&
      self.hasMemberBankAcctId == otherMessage.hasMemberBankAcctId &&
      (!self.hasMemberBankAcctId || [self.memberBankAcctId isEqual:otherMessage.memberBankAcctId]) &&
      self.hasExpiresIn == otherMessage.hasExpiresIn &&
      (!self.hasExpiresIn || [self.expiresIn isEqual:otherMessage.expiresIn]) &&
      self.hasAppUpInfo == otherMessage.hasAppUpInfo &&
      (!self.hasAppUpInfo || [self.appUpInfo isEqual:otherMessage.appUpInfo]) &&
      self.hasKeyboardSeq == otherMessage.hasKeyboardSeq &&
      (!self.hasKeyboardSeq || [self.keyboardSeq isEqual:otherMessage.keyboardSeq]) &&
      self.hasImgCode == otherMessage.hasImgCode &&
      (!self.hasImgCode || [self.imgCode isEqual:otherMessage.imgCode]) &&
      self.hasImgToken == otherMessage.hasImgToken &&
      (!self.hasImgToken || [self.imgToken isEqual:otherMessage.imgToken]) &&
      self.hasValidateToken == otherMessage.hasValidateToken &&
      (!self.hasValidateToken || [self.validateToken isEqual:otherMessage.validateToken]) &&
      self.hasErrorType == otherMessage.hasErrorType &&
      (!self.hasErrorType || [self.errorType isEqual:otherMessage.errorType]) &&
      self.hasFlag == otherMessage.hasFlag &&
      (!self.hasFlag || [self.flag isEqual:otherMessage.flag]) &&
      [self.queryAllFinaprodResponseArray isEqualToArray:otherMessage.queryAllFinaprodResponseArray] &&
      self.hasFinProdType == otherMessage.hasFinProdType &&
      (!self.hasFinProdType || [self.finProdType isEqual:otherMessage.finProdType]) &&
      self.hasTradeType == otherMessage.hasTradeType &&
      (!self.hasTradeType || [self.tradeType isEqual:otherMessage.tradeType]) &&
      self.hasProdStatus == otherMessage.hasProdStatus &&
      (!self.hasProdStatus || [self.prodStatus isEqual:otherMessage.prodStatus]) &&
      self.hasQueryOrders == otherMessage.hasQueryOrders &&
      (!self.hasQueryOrders || [self.queryOrders isEqual:otherMessage.queryOrders]) &&
      self.hasHorizonTo == otherMessage.hasHorizonTo &&
      (!self.hasHorizonTo || [self.horizonTo isEqual:otherMessage.horizonTo]) &&
      self.hasReturnRateExp == otherMessage.hasReturnRateExp &&
      (!self.hasReturnRateExp || [self.returnRateExp isEqual:otherMessage.returnRateExp]) &&
      [self.atpTradeOrderArray isEqualToArray:otherMessage.atpTradeOrderArray] &&
      self.hasTotalFrozenAmt == otherMessage.hasTotalFrozenAmt &&
      (!self.hasTotalFrozenAmt || [self.totalFrozenAmt isEqual:otherMessage.totalFrozenAmt]) &&
      self.hasFee == otherMessage.hasFee &&
      (!self.hasFee || [self.fee isEqual:otherMessage.fee]) &&
      self.hasTransFeeRate == otherMessage.hasTransFeeRate &&
      (!self.hasTransFeeRate || [self.transFeeRate isEqual:otherMessage.transFeeRate]) &&
      self.hasBankNameId == otherMessage.hasBankNameId &&
      (!self.hasBankNameId || [self.bankNameId isEqual:otherMessage.bankNameId]) &&
      self.hasFinancialInfo == otherMessage.hasFinancialInfo &&
      (!self.hasFinancialInfo || [self.financialInfo isEqual:otherMessage.financialInfo]) &&
      [self.prodAccountInfoArray isEqualToArray:otherMessage.prodAccountInfoArray] &&
      self.hasIsMainOrder == otherMessage.hasIsMainOrder &&
      (!self.hasIsMainOrder || [self.isMainOrder isEqual:otherMessage.isMainOrder]) &&
      self.hasMerchantId == otherMessage.hasMerchantId &&
      (!self.hasMerchantId || [self.merchantId isEqual:otherMessage.merchantId]) &&
      self.hasMerchantName == otherMessage.hasMerchantName &&
      (!self.hasMerchantName || [self.merchantName isEqual:otherMessage.merchantName]) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || [self.osVersion isEqual:otherMessage.osVersion]) &&
      self.hasIsRoot == otherMessage.hasIsRoot &&
      (!self.hasIsRoot || [self.isRoot isEqual:otherMessage.isRoot]) &&
      self.hasSize == otherMessage.hasSize &&
      (!self.hasSize || [self.size isEqual:otherMessage.size]) &&
      self.hasPhoneModel == otherMessage.hasPhoneModel &&
      (!self.hasPhoneModel || [self.phoneModel isEqual:otherMessage.phoneModel]) &&
      self.hasWifiName == otherMessage.hasWifiName &&
      (!self.hasWifiName || [self.wifiName isEqual:otherMessage.wifiName]) &&
      self.hasWifiMac == otherMessage.hasWifiMac &&
      (!self.hasWifiMac || [self.wifiMac isEqual:otherMessage.wifiMac]) &&
      self.hasAppId == otherMessage.hasAppId &&
      (!self.hasAppId || [self.appId isEqual:otherMessage.appId]) &&
      self.hasMerchantCode == otherMessage.hasMerchantCode &&
      (!self.hasMerchantCode || [self.merchantCode isEqual:otherMessage.merchantCode]) &&
      self.hasBillOrderNo == otherMessage.hasBillOrderNo &&
      (!self.hasBillOrderNo || [self.billOrderNo isEqual:otherMessage.billOrderNo]) &&
      self.hasChannelType == otherMessage.hasChannelType &&
      (!self.hasChannelType || [self.channelType isEqual:otherMessage.channelType]) &&
      self.hasOrderAmount == otherMessage.hasOrderAmount &&
      (!self.hasOrderAmount || [self.orderAmount isEqual:otherMessage.orderAmount]) &&
      self.hasPayMode == otherMessage.hasPayMode &&
      (!self.hasPayMode || [self.payMode isEqual:otherMessage.payMode]) &&
      self.hasPayAmount == otherMessage.hasPayAmount &&
      (!self.hasPayAmount || [self.payAmount isEqual:otherMessage.payAmount]) &&
      self.hasOrderStatus == otherMessage.hasOrderStatus &&
      (!self.hasOrderStatus || [self.orderStatus isEqual:otherMessage.orderStatus]) &&
      self.hasOutOrderType == otherMessage.hasOutOrderType &&
      (!self.hasOutOrderType || [self.outOrderType isEqual:otherMessage.outOrderType]) &&
      self.hasTxnTimeStart == otherMessage.hasTxnTimeStart &&
      (!self.hasTxnTimeStart || [self.txnTimeStart isEqual:otherMessage.txnTimeStart]) &&
      self.hasTxnTimeExpire == otherMessage.hasTxnTimeExpire &&
      (!self.hasTxnTimeExpire || [self.txnTimeExpire isEqual:otherMessage.txnTimeExpire]) &&
      self.hasPayStatus == otherMessage.hasPayStatus &&
      (!self.hasPayStatus || [self.payStatus isEqual:otherMessage.payStatus]) &&
      self.hasProductInfo == otherMessage.hasProductInfo &&
      (!self.hasProductInfo || [self.productInfo isEqual:otherMessage.productInfo]) &&
      [self.payMethodArray isEqualToArray:otherMessage.payMethodArray] &&
      self.hasOutEquityCode == otherMessage.hasOutEquityCode &&
      (!self.hasOutEquityCode || [self.outEquityCode isEqual:otherMessage.outEquityCode]) &&
      self.hasOutEquityAmount == otherMessage.hasOutEquityAmount &&
      (!self.hasOutEquityAmount || [self.outEquityAmount isEqual:otherMessage.outEquityAmount]) &&
      self.hasPayMethodId == otherMessage.hasPayMethodId &&
      (!self.hasPayMethodId || [self.payMethodId isEqual:otherMessage.payMethodId]) &&
      [self.instalmentArray isEqualToArray:otherMessage.instalmentArray] &&
      self.hasInstalmentId == otherMessage.hasInstalmentId &&
      (!self.hasInstalmentId || [self.instalmentId isEqual:otherMessage.instalmentId]) &&
      self.hasTxnEndTime == otherMessage.hasTxnEndTime &&
      (!self.hasTxnEndTime || [self.txnEndTime isEqual:otherMessage.txnEndTime]) &&
      self.hasValidateElement == otherMessage.hasValidateElement &&
      (!self.hasValidateElement || [self.validateElement isEqual:otherMessage.validateElement]) &&
      self.hasSMsCode == otherMessage.hasSMsCode &&
      (!self.hasSMsCode || [self.sMsCode isEqual:otherMessage.sMsCode]) &&
      [self.voucherArray isEqualToArray:otherMessage.voucherArray] &&
      [self.ateTradeOrderArray isEqualToArray:otherMessage.ateTradeOrderArray] &&
      self.hasEquityAmount == otherMessage.hasEquityAmount &&
      (!self.hasEquityAmount || [self.equityAmount isEqual:otherMessage.equityAmount]) &&
      self.hasSupportFinger == otherMessage.hasSupportFinger &&
      (!self.hasSupportFinger || [self.supportFinger isEqual:otherMessage.supportFinger]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasTradeStatus == otherMessage.hasTradeStatus &&
      (!self.hasTradeStatus || [self.tradeStatus isEqual:otherMessage.tradeStatus]) &&
      self.hasProductDesc == otherMessage.hasProductDesc &&
      (!self.hasProductDesc || [self.productDesc isEqual:otherMessage.productDesc]) &&
      self.hasSubMerchantName == otherMessage.hasSubMerchantName &&
      (!self.hasSubMerchantName || [self.subMerchantName isEqual:otherMessage.subMerchantName]) &&
      self.hasMemo == otherMessage.hasMemo &&
      (!self.hasMemo || [self.memo isEqual:otherMessage.memo]) &&
      self.hasNotifyMode == otherMessage.hasNotifyMode &&
      (!self.hasNotifyMode || [self.notifyMode isEqual:otherMessage.notifyMode]) &&
      [self.memberListArray isEqualToArray:otherMessage.memberListArray] &&
      self.hasGpsInfo == otherMessage.hasGpsInfo &&
      (!self.hasGpsInfo || [self.gpsInfo isEqual:otherMessage.gpsInfo]) &&
      self.hasPublishNo == otherMessage.hasPublishNo &&
      (!self.hasPublishNo || [self.publishNo isEqual:otherMessage.publishNo]) &&
      self.hasResolution == otherMessage.hasResolution &&
      (!self.hasResolution || [self.resolution isEqual:otherMessage.resolution]) &&
      self.hasMsgTypeId == otherMessage.hasMsgTypeId &&
      (!self.hasMsgTypeId || [self.msgTypeId isEqual:otherMessage.msgTypeId]) &&
      self.hasLastRecordId == otherMessage.hasLastRecordId &&
      (!self.hasLastRecordId || [self.lastRecordId isEqual:otherMessage.lastRecordId]) &&
      self.hasScollUp == otherMessage.hasScollUp &&
      (!self.hasScollUp || [self.scollUp isEqual:otherMessage.scollUp]) &&
      self.hasJsonCallBack == otherMessage.hasJsonCallBack &&
      (!self.hasJsonCallBack || [self.jsonCallBack isEqual:otherMessage.jsonCallBack]) &&
      [self.msgTypeInfoArray isEqualToArray:otherMessage.msgTypeInfoArray] &&
      [self.msgInfoArray isEqualToArray:otherMessage.msgInfoArray] &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || [self.msgId isEqual:otherMessage.msgId]) &&
      [self.resourceInfoArray isEqualToArray:otherMessage.resourceInfoArray] &&
      [self.commonZipInfoArray isEqualToArray:otherMessage.commonZipInfoArray] &&
      [self.shareInfoArray isEqualToArray:otherMessage.shareInfoArray] &&
      self.hasResourceId == otherMessage.hasResourceId &&
      (!self.hasResourceId || [self.resourceId isEqual:otherMessage.resourceId]) &&
      self.hasVcsBizType == otherMessage.hasVcsBizType &&
      (!self.hasVcsBizType || [self.vcsBizType isEqual:otherMessage.vcsBizType]) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasRepayCode == otherMessage.hasRepayCode &&
      (!self.hasRepayCode || [self.repayCode isEqual:otherMessage.repayCode]) &&
      [self.userAppLoginInfoArray isEqualToArray:otherMessage.userAppLoginInfoArray] &&
      self.hasResultType == otherMessage.hasResultType &&
      (!self.hasResultType || [self.resultType isEqual:otherMessage.resultType]) &&
      [self.conflictAccArray isEqualToArray:otherMessage.conflictAccArray] &&
      self.hasSysFrom == otherMessage.hasSysFrom &&
      (!self.hasSysFrom || [self.sysFrom isEqual:otherMessage.sysFrom]) &&
      self.hasLoginPin == otherMessage.hasLoginPin &&
      (!self.hasLoginPin || [self.loginPin isEqual:otherMessage.loginPin]) &&
      self.hasNewLoginPin == otherMessage.hasNewLoginPin &&
      (!self.hasNewLoginPin || [self.newLoginPin isEqual:otherMessage.newLoginPin]) &&
      self.hasPayPwd == otherMessage.hasPayPwd &&
      (!self.hasPayPwd || [self.payPwd isEqual:otherMessage.payPwd]) &&
      self.hasNewPayPwd == otherMessage.hasNewPayPwd &&
      (!self.hasNewPayPwd || [self.newPayPwd isEqual:otherMessage.newPayPwd]) &&
      self.hasPayPwdResetFlag == otherMessage.hasPayPwdResetFlag &&
      (!self.hasPayPwdResetFlag || [self.payPwdResetFlag isEqual:otherMessage.payPwdResetFlag]) &&
      self.hasSex == otherMessage.hasSex &&
      (!self.hasSex || [self.sex isEqual:otherMessage.sex]) &&
      self.hasBirthday == otherMessage.hasBirthday &&
      (!self.hasBirthday || [self.birthday isEqual:otherMessage.birthday]) &&
      self.hasNationality == otherMessage.hasNationality &&
      (!self.hasNationality || [self.nationality isEqual:otherMessage.nationality]) &&
      self.hasIssuingAuthority == otherMessage.hasIssuingAuthority &&
      (!self.hasIssuingAuthority || [self.issuingAuthority isEqual:otherMessage.issuingAuthority]) &&
      [self.cardInfoArray isEqualToArray:otherMessage.cardInfoArray] &&
      self.hasSummarizeInfo == otherMessage.hasSummarizeInfo &&
      (!self.hasSummarizeInfo || [self.summarizeInfo isEqual:otherMessage.summarizeInfo]) &&
      self.hasCurrentPage == otherMessage.hasCurrentPage &&
      (!self.hasCurrentPage || [self.currentPage isEqual:otherMessage.currentPage]) &&
      self.hasPageSize == otherMessage.hasPageSize &&
      (!self.hasPageSize || [self.pageSize isEqual:otherMessage.pageSize]) &&
      [self.txnInfoArray isEqualToArray:otherMessage.txnInfoArray] &&
      self.hasApplyTime == otherMessage.hasApplyTime &&
      (!self.hasApplyTime || [self.applyTime isEqual:otherMessage.applyTime]) &&
      self.hasTotalFee == otherMessage.hasTotalFee &&
      (!self.hasTotalFee || [self.totalFee isEqual:otherMessage.totalFee]) &&
      self.hasTipInfo == otherMessage.hasTipInfo &&
      (!self.hasTipInfo || [self.tipInfo isEqual:otherMessage.tipInfo]) &&
      self.hasCheckCode == otherMessage.hasCheckCode &&
      (!self.hasCheckCode || [self.checkCode isEqual:otherMessage.checkCode]) &&
      self.hasTotal == otherMessage.hasTotal &&
      (!self.hasTotal || [self.total isEqual:otherMessage.total]) &&
      self.hasRepayAmt == otherMessage.hasRepayAmt &&
      (!self.hasRepayAmt || [self.repayAmt isEqual:otherMessage.repayAmt]) &&
      self.hasBillOrderId == otherMessage.hasBillOrderId &&
      (!self.hasBillOrderId || [self.billOrderId isEqual:otherMessage.billOrderId]) &&
      self.hasTxnAcctNo == otherMessage.hasTxnAcctNo &&
      (!self.hasTxnAcctNo || [self.txnAcctNo isEqual:otherMessage.txnAcctNo]) &&
      self.hasLastRowNum == otherMessage.hasLastRowNum &&
      (!self.hasLastRowNum || [self.lastRowNum isEqual:otherMessage.lastRowNum]) &&
      self.hasInfo == otherMessage.hasInfo &&
      (!self.hasInfo || [self.info isEqual:otherMessage.info]) &&
      [self.creditOrderArray isEqualToArray:otherMessage.creditOrderArray] &&
      self.hasRepayStatus == otherMessage.hasRepayStatus &&
      (!self.hasRepayStatus || [self.repayStatus isEqual:otherMessage.repayStatus]) &&
      self.hasInterest == otherMessage.hasInterest &&
      (!self.hasInterest || [self.interest isEqual:otherMessage.interest]) &&
      self.hasReturnAmt == otherMessage.hasReturnAmt &&
      (!self.hasReturnAmt || [self.returnAmt isEqual:otherMessage.returnAmt]) &&
      self.hasStages == otherMessage.hasStages &&
      (!self.hasStages || [self.stages isEqual:otherMessage.stages]) &&
      [self.divideArray isEqualToArray:otherMessage.divideArray] &&
      [self.repayOrderArray isEqualToArray:otherMessage.repayOrderArray] &&
      [self.payTypesArray isEqualToArray:otherMessage.payTypesArray] &&
      self.hasPayType == otherMessage.hasPayType &&
      (!self.hasPayType || [self.payType isEqual:otherMessage.payType]) &&
      [self.repayRecordArray isEqualToArray:otherMessage.repayRecordArray] &&
      self.hasAccountAmt == otherMessage.hasAccountAmt &&
      (!self.hasAccountAmt || [self.accountAmt isEqual:otherMessage.accountAmt]) &&
      self.hasStatusName == otherMessage.hasStatusName &&
      (!self.hasStatusName || [self.statusName isEqual:otherMessage.statusName]) &&
      self.hasForceFaceCheck == otherMessage.hasForceFaceCheck &&
      (!self.hasForceFaceCheck || [self.forceFaceCheck isEqual:otherMessage.forceFaceCheck]) &&
      self.hasAllowRepay == otherMessage.hasAllowRepay &&
      (!self.hasAllowRepay || [self.allowRepay isEqual:otherMessage.allowRepay]) &&
      self.hasLocationProvince == otherMessage.hasLocationProvince &&
      (!self.hasLocationProvince || [self.locationProvince isEqual:otherMessage.locationProvince]) &&
      self.hasLocationCity == otherMessage.hasLocationCity &&
      (!self.hasLocationCity || [self.locationCity isEqual:otherMessage.locationCity]) &&
      self.hasLocationDistrict == otherMessage.hasLocationDistrict &&
      (!self.hasLocationDistrict || [self.locationDistrict isEqual:otherMessage.locationDistrict]) &&
      self.hasLocationAddress == otherMessage.hasLocationAddress &&
      (!self.hasLocationAddress || [self.locationAddress isEqual:otherMessage.locationAddress]) &&
      self.hasKakaUrl == otherMessage.hasKakaUrl &&
      (!self.hasKakaUrl || [self.kakaUrl isEqual:otherMessage.kakaUrl]) &&
      self.hasDoudouUrl == otherMessage.hasDoudouUrl &&
      (!self.hasDoudouUrl || [self.doudouUrl isEqual:otherMessage.doudouUrl]) &&
      self.hasRepayId == otherMessage.hasRepayId &&
      (!self.hasRepayId || [self.repayId isEqual:otherMessage.repayId]) &&
      [self.contractArray isEqualToArray:otherMessage.contractArray] &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasFrozenInfo == otherMessage.hasFrozenInfo &&
      (!self.hasFrozenInfo || [self.frozenInfo isEqual:otherMessage.frozenInfo]) &&
      self.hasFcsCreditAmt == otherMessage.hasFcsCreditAmt &&
      (!self.hasFcsCreditAmt || [self.fcsCreditAmt isEqual:otherMessage.fcsCreditAmt]) &&
      self.hasLeftFcsCreditAmt == otherMessage.hasLeftFcsCreditAmt &&
      (!self.hasLeftFcsCreditAmt || [self.leftFcsCreditAmt isEqual:otherMessage.leftFcsCreditAmt]) &&
      self.hasFcsCreditAmtStatus == otherMessage.hasFcsCreditAmtStatus &&
      (!self.hasFcsCreditAmtStatus || [self.fcsCreditAmtStatus isEqual:otherMessage.fcsCreditAmtStatus]) &&
      self.hasFcsCreditAmtType == otherMessage.hasFcsCreditAmtType &&
      (!self.hasFcsCreditAmtType || [self.fcsCreditAmtType isEqual:otherMessage.fcsCreditAmtType]) &&
      self.hasFcsCreditUrl == otherMessage.hasFcsCreditUrl &&
      (!self.hasFcsCreditUrl || [self.fcsCreditUrl isEqual:otherMessage.fcsCreditUrl]) &&
      self.hasLeftCreditAmtName == otherMessage.hasLeftCreditAmtName &&
      (!self.hasLeftCreditAmtName || [self.leftCreditAmtName isEqual:otherMessage.leftCreditAmtName]) &&
      self.hasTotalCreditAmtName == otherMessage.hasTotalCreditAmtName &&
      (!self.hasTotalCreditAmtName || [self.totalCreditAmtName isEqual:otherMessage.totalCreditAmtName]) &&
      self.hasFcsCreditName == otherMessage.hasFcsCreditName &&
      (!self.hasFcsCreditName || [self.fcsCreditName isEqual:otherMessage.fcsCreditName]) &&
      self.hasFcsName == otherMessage.hasFcsName &&
      (!self.hasFcsName || [self.fcsName isEqual:otherMessage.fcsName]) &&
      self.hasQuotaShowType == otherMessage.hasQuotaShowType &&
      (!self.hasQuotaShowType || [self.quotaShowType isEqual:otherMessage.quotaShowType]) &&
      self.hasFcsMerchantName == otherMessage.hasFcsMerchantName &&
      (!self.hasFcsMerchantName || [self.fcsMerchantName isEqual:otherMessage.fcsMerchantName]) &&
      self.hasLeftFcsCreditName == otherMessage.hasLeftFcsCreditName &&
      (!self.hasLeftFcsCreditName || [self.leftFcsCreditName isEqual:otherMessage.leftFcsCreditName]) &&
      self.hasSupplementInfo == otherMessage.hasSupplementInfo &&
      (!self.hasSupplementInfo || [self.supplementInfo isEqual:otherMessage.supplementInfo]) &&
      self.hasExtInfo == otherMessage.hasExtInfo &&
      (!self.hasExtInfo || [self.extInfo isEqual:otherMessage.extInfo]) &&
      self.hasSort == otherMessage.hasSort &&
      (!self.hasSort || [self.sort isEqual:otherMessage.sort]) &&
      [self.quotaListArray isEqualToArray:otherMessage.quotaListArray] &&
      self.hasIsShowPreQuotaAmt == otherMessage.hasIsShowPreQuotaAmt &&
      (!self.hasIsShowPreQuotaAmt || [self.isShowPreQuotaAmt isEqual:otherMessage.isShowPreQuotaAmt]) &&
      self.hasPreFcsAmt == otherMessage.hasPreFcsAmt &&
      (!self.hasPreFcsAmt || [self.preFcsAmt isEqual:otherMessage.preFcsAmt]) &&
      self.hasPreFcsUrl == otherMessage.hasPreFcsUrl &&
      (!self.hasPreFcsUrl || [self.preFcsUrl isEqual:otherMessage.preFcsUrl]) &&
      [self.freeListArray isEqualToArray:otherMessage.freeListArray] &&
      self.hasUserGrade == otherMessage.hasUserGrade &&
      (!self.hasUserGrade || [self.userGrade isEqual:otherMessage.userGrade]) &&
      self.hasMemberTwo == otherMessage.hasMemberTwo &&
      (!self.hasMemberTwo || [self.memberTwo isEqual:otherMessage.memberTwo]) &&
      self.hasMebCode == otherMessage.hasMebCode &&
      (!self.hasMebCode || [self.mebCode isEqual:otherMessage.mebCode]) &&
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasLastRequestTime == otherMessage.hasLastRequestTime &&
      (!self.hasLastRequestTime || [self.lastRequestTime isEqual:otherMessage.lastRequestTime]) &&
      self.hasCardInfoObject == otherMessage.hasCardInfoObject &&
      (!self.hasCardInfoObject || [self.cardInfoObject isEqual:otherMessage.cardInfoObject]) &&
      self.hasOrderInfo == otherMessage.hasOrderInfo &&
      (!self.hasOrderInfo || [self.orderInfo isEqual:otherMessage.orderInfo]) &&
      [self.productGroupArray isEqualToArray:otherMessage.productGroupArray] &&
      self.hasAmtType == otherMessage.hasAmtType &&
      (!self.hasAmtType || [self.amtType isEqual:otherMessage.amtType]) &&
      [self.withdrawLimitArray isEqualToArray:otherMessage.withdrawLimitArray] &&
      self.hasEquityCode == otherMessage.hasEquityCode &&
      (!self.hasEquityCode || [self.equityCode isEqual:otherMessage.equityCode]) &&
      self.hasFunctionCode == otherMessage.hasFunctionCode &&
      (!self.hasFunctionCode || [self.functionCode isEqual:otherMessage.functionCode]) &&
      self.hasTwSign == otherMessage.hasTwSign &&
      (!self.hasTwSign || [self.twSign isEqual:otherMessage.twSign]) &&
      self.hasLeftSumAmt == otherMessage.hasLeftSumAmt &&
      (!self.hasLeftSumAmt || [self.leftSumAmt isEqual:otherMessage.leftSumAmt]) &&
      self.hasVirtualOrderAmt == otherMessage.hasVirtualOrderAmt &&
      (!self.hasVirtualOrderAmt || [self.virtualOrderAmt isEqual:otherMessage.virtualOrderAmt]) &&
      self.hasSumCreditAmt == otherMessage.hasSumCreditAmt &&
      (!self.hasSumCreditAmt || [self.sumCreditAmt isEqual:otherMessage.sumCreditAmt]) &&
      self.hasShowVoucher == otherMessage.hasShowVoucher &&
      (!self.hasShowVoucher || [self.showVoucher isEqual:otherMessage.showVoucher]) &&
      [self.equityInfoArray isEqualToArray:otherMessage.equityInfoArray] &&
      [self.activityArray isEqualToArray:otherMessage.activityArray] &&
      self.hasBillId == otherMessage.hasBillId &&
      (!self.hasBillId || [self.billId isEqual:otherMessage.billId]) &&
      self.hasSiedc == otherMessage.hasSiedc &&
      (!self.hasSiedc || [self.siedc isEqual:otherMessage.siedc]) &&
      [self.interestsArray isEqualToArray:otherMessage.interestsArray] &&
      self.hasQueryInterval == otherMessage.hasQueryInterval &&
      (!self.hasQueryInterval || [self.queryInterval isEqual:otherMessage.queryInterval]) &&
      self.hasQueryTimes == otherMessage.hasQueryTimes &&
      (!self.hasQueryTimes || [self.queryTimes isEqual:otherMessage.queryTimes]) &&
      self.hasStlMerchantCode == otherMessage.hasStlMerchantCode &&
      (!self.hasStlMerchantCode || [self.stlMerchantCode isEqual:otherMessage.stlMerchantCode]) &&
      self.hasEquityMessage == otherMessage.hasEquityMessage &&
      (!self.hasEquityMessage || [self.equityMessage isEqual:otherMessage.equityMessage]) &&
      self.hasOutEquityMessage == otherMessage.hasOutEquityMessage &&
      (!self.hasOutEquityMessage || [self.outEquityMessage isEqual:otherMessage.outEquityMessage]) &&
      [self.seedDataArray isEqualToArray:otherMessage.seedDataArray] &&
      [self.extMapArray isEqualToArray:otherMessage.extMapArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasBusinessType) {
    hashCode = hashCode * 31 + [self.businessType hash];
  }
  if (self.hasTermId) {
    hashCode = hashCode * 31 + [self.termId hash];
  }
  if (self.hasPayPassword) {
    hashCode = hashCode * 31 + [self.payPassword hash];
  }
  if (self.hasBankId) {
    hashCode = hashCode * 31 + [self.bankId hash];
  }
  if (self.hasBankName) {
    hashCode = hashCode * 31 + [self.bankName hash];
  }
  if (self.hasOrderId) {
    hashCode = hashCode * 31 + [self.orderId hash];
  }
  if (self.hasAmt) {
    hashCode = hashCode * 31 + [self.amt hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  if (self.hasValidateCode) {
    hashCode = hashCode * 31 + [self.validateCode hash];
  }
  if (self.hasTermTxnTime) {
    hashCode = hashCode * 31 + [self.termTxnTime hash];
  }
  if (self.hasIdType) {
    hashCode = hashCode * 31 + [self.idType hash];
  }
  if (self.hasHolderName) {
    hashCode = hashCode * 31 + [self.holderName hash];
  }
  if (self.hasExpireDate) {
    hashCode = hashCode * 31 + [self.expireDate hash];
  }
  if (self.hasVaType) {
    hashCode = hashCode * 31 + [self.vaType hash];
  }
  if (self.hasPan) {
    hashCode = hashCode * 31 + [self.pan hash];
  }
  if (self.hasShortPan) {
    hashCode = hashCode * 31 + [self.shortPan hash];
  }
  if (self.hasPhoneNo) {
    hashCode = hashCode * 31 + [self.phoneNo hash];
  }
  if (self.hasAuthDebitBankNames) {
    hashCode = hashCode * 31 + [self.authDebitBankNames hash];
  }
  if (self.hasCardId) {
    hashCode = hashCode * 31 + [self.cardId hash];
  }
  if (self.hasTxnType) {
    hashCode = hashCode * 31 + [self.txnType hash];
  }
  if (self.hasProductCode) {
    hashCode = hashCode * 31 + [self.productCode hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasProvince) {
    hashCode = hashCode * 31 + [self.province hash];
  }
  if (self.hasCity) {
    hashCode = hashCode * 31 + [self.city hash];
  }
  if (self.hasPageNo) {
    hashCode = hashCode * 31 + [self.pageNo hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasOptionType) {
    hashCode = hashCode * 31 + [self.optionType hash];
  }
  if (self.hasSecurityQuestion) {
    hashCode = hashCode * 31 + [self.securityQuestion hash];
  }
  if (self.hasSecurityAnswer) {
    hashCode = hashCode * 31 + [self.securityAnswer hash];
  }
  if (self.hasCardType) {
    hashCode = hashCode * 31 + [self.cardType hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasUniQrCode) {
    hashCode = hashCode * 31 + [self.uniQrCode hash];
  }
  if (self.hasProductType) {
    hashCode = hashCode * 31 + [self.productType hash];
  }
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasResendFlag) {
    hashCode = hashCode * 31 + [self.resendFlag hash];
  }
  if (self.hasPasswordType) {
    hashCode = hashCode * 31 + [self.passwordType hash];
  }
  if (self.hasCvv2) {
    hashCode = hashCode * 31 + [self.cvv2 hash];
  }
  if (self.hasRefreshToken) {
    hashCode = hashCode * 31 + [self.refreshToken hash];
  }
  if (self.hasIdTxnCtrl) {
    hashCode = hashCode * 31 + [self.idTxnCtrl hash];
  }
  if (self.hasExtData1) {
    hashCode = hashCode * 31 + [self.extData1 hash];
  }
  if (self.hasAuthBankIds) {
    hashCode = hashCode * 31 + [self.authBankIds hash];
  }
  if (self.hasAuthDebitBankIds) {
    hashCode = hashCode * 31 + [self.authDebitBankIds hash];
  }
  if (self.hasAuthBankNames) {
    hashCode = hashCode * 31 + [self.authBankNames hash];
  }
  if (self.hasBranchBank) {
    hashCode = hashCode * 31 + [self.branchBank hash];
  }
  if (self.hasTxnFlag) {
    hashCode = hashCode * 31 + [self.txnFlag hash];
  }
  if (self.hasAuthCode) {
    hashCode = hashCode * 31 + [self.authCode hash];
  }
  if (self.hasTxnTime) {
    hashCode = hashCode * 31 + [self.txnTime hash];
  }
  if (self.hasSignFlag) {
    hashCode = hashCode * 31 + [self.signFlag hash];
  }
  if (self.hasProductName) {
    hashCode = hashCode * 31 + [self.productName hash];
  }
  if (self.hasZoneType) {
    hashCode = hashCode * 31 + [self.zoneType hash];
  }
  if (self.hasPin) {
    hashCode = hashCode * 31 + [self.pin hash];
  }
  if (self.hasOrigOrderId) {
    hashCode = hashCode * 31 + [self.origOrderId hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [self.count hash];
  }
  if (self.hasRemark) {
    hashCode = hashCode * 31 + [self.remark hash];
  }
  if (self.hasMemAcctcodeName) {
    hashCode = hashCode * 31 + [self.memAcctcodeName hash];
  }
  if (self.hasMemAcctcodeBalance) {
    hashCode = hashCode * 31 + [self.memAcctcodeBalance hash];
  }
  if (self.hasExistFlg) {
    hashCode = hashCode * 31 + [self.existFlg hash];
  }
  if (self.hasPayeeNotes) {
    hashCode = hashCode * 31 + [self.payeeNotes hash];
  }
  if (self.hasRealNameFlg) {
    hashCode = hashCode * 31 + [self.realNameFlg hash];
  }
  if (self.hasBindPhoneFlg) {
    hashCode = hashCode * 31 + [self.bindPhoneFlg hash];
  }
  if (self.hasFirstLoginFlg) {
    hashCode = hashCode * 31 + [self.firstLoginFlg hash];
  }
  if (self.hasTotalAmt) {
    hashCode = hashCode * 31 + [self.totalAmt hash];
  }
  if (self.hasTotalCount) {
    hashCode = hashCode * 31 + [self.totalCount hash];
  }
  if (self.hasOrderType) {
    hashCode = hashCode * 31 + [self.orderType hash];
  }
  if (self.hasCertId) {
    hashCode = hashCode * 31 + [self.certId hash];
  }
  if (self.hasRecommendId) {
    hashCode = hashCode * 31 + [self.recommendId hash];
  }
  if (self.hasOrderCode) {
    hashCode = hashCode * 31 + [self.orderCode hash];
  }
  if (self.hasMax) {
    hashCode = hashCode * 31 + [self.max hash];
  }
  if (self.hasStatusSet) {
    hashCode = hashCode * 31 + [self.statusSet hash];
  }
  if (self.hasOutTradeNo) {
    hashCode = hashCode * 31 + [self.outTradeNo hash];
  }
  if (self.hasAppInfo) {
    hashCode = hashCode * 31 + [self.appInfo hash];
  }
  [self.bankArray enumerateObjectsUsingBlock:^(ContentBank *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasMember) {
    hashCode = hashCode * 31 + [self.member hash];
  }
  [self.memberIdentityArray enumerateObjectsUsingBlock:^(ContentMemberIdentity *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.safeProblemArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.queryWalletBill99BillResponseArray enumerateObjectsUsingBlock:^(ContentQueryWalletBill99BillResponse *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.atpProdArray enumerateObjectsUsingBlock:^(ContentAtpProd *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTradeId) {
    hashCode = hashCode * 31 + [self.tradeId hash];
  }
  if (self.hasEndTime) {
    hashCode = hashCode * 31 + [self.endTime hash];
  }
  [self.solidCardArray enumerateObjectsUsingBlock:^(ContentSolidCard *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUserFlag) {
    hashCode = hashCode * 31 + [self.userFlag hash];
  }
  if (self.hasIdCardNo) {
    hashCode = hashCode * 31 + [self.idCardNo hash];
  }
  if (self.hasIdCardImg) {
    hashCode = hashCode * 31 + [self.idCardImg hash];
  }
  if (self.hasPhoto) {
    hashCode = hashCode * 31 + [self.photo hash];
  }
  if (self.hasIsDisplay) {
    hashCode = hashCode * 31 + [self.isDisplay hash];
  }
  if (self.hasShortPhones) {
    hashCode = hashCode * 31 + [self.shortPhones hash];
  }
  if (self.hasRipAmount) {
    hashCode = hashCode * 31 + [self.ripAmount hash];
  }
  if (self.hasMemberAuthDto) {
    hashCode = hashCode * 31 + [self.memberAuthDto hash];
  }
  [self.bankLimitAmountDtoArray enumerateObjectsUsingBlock:^(ContentBankLimitAmountDto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOccupation) {
    hashCode = hashCode * 31 + [self.occupation hash];
  }
  if (self.hasPartnerUserId) {
    hashCode = hashCode * 31 + [self.partnerUserId hash];
  }
  if (self.hasMemberBankAcctId) {
    hashCode = hashCode * 31 + [self.memberBankAcctId hash];
  }
  if (self.hasExpiresIn) {
    hashCode = hashCode * 31 + [self.expiresIn hash];
  }
  if (self.hasAppUpInfo) {
    hashCode = hashCode * 31 + [self.appUpInfo hash];
  }
  if (self.hasKeyboardSeq) {
    hashCode = hashCode * 31 + [self.keyboardSeq hash];
  }
  if (self.hasImgCode) {
    hashCode = hashCode * 31 + [self.imgCode hash];
  }
  if (self.hasImgToken) {
    hashCode = hashCode * 31 + [self.imgToken hash];
  }
  if (self.hasValidateToken) {
    hashCode = hashCode * 31 + [self.validateToken hash];
  }
  if (self.hasErrorType) {
    hashCode = hashCode * 31 + [self.errorType hash];
  }
  if (self.hasFlag) {
    hashCode = hashCode * 31 + [self.flag hash];
  }
  [self.queryAllFinaprodResponseArray enumerateObjectsUsingBlock:^(ContentQueryAllFinaprodResponse *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasFinProdType) {
    hashCode = hashCode * 31 + [self.finProdType hash];
  }
  if (self.hasTradeType) {
    hashCode = hashCode * 31 + [self.tradeType hash];
  }
  if (self.hasProdStatus) {
    hashCode = hashCode * 31 + [self.prodStatus hash];
  }
  if (self.hasQueryOrders) {
    hashCode = hashCode * 31 + [self.queryOrders hash];
  }
  if (self.hasHorizonTo) {
    hashCode = hashCode * 31 + [self.horizonTo hash];
  }
  if (self.hasReturnRateExp) {
    hashCode = hashCode * 31 + [self.returnRateExp hash];
  }
  [self.atpTradeOrderArray enumerateObjectsUsingBlock:^(ContentAtpTradeOrder *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTotalFrozenAmt) {
    hashCode = hashCode * 31 + [self.totalFrozenAmt hash];
  }
  if (self.hasFee) {
    hashCode = hashCode * 31 + [self.fee hash];
  }
  if (self.hasTransFeeRate) {
    hashCode = hashCode * 31 + [self.transFeeRate hash];
  }
  if (self.hasBankNameId) {
    hashCode = hashCode * 31 + [self.bankNameId hash];
  }
  if (self.hasFinancialInfo) {
    hashCode = hashCode * 31 + [self.financialInfo hash];
  }
  [self.prodAccountInfoArray enumerateObjectsUsingBlock:^(ContentProdAccountInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasIsMainOrder) {
    hashCode = hashCode * 31 + [self.isMainOrder hash];
  }
  if (self.hasMerchantId) {
    hashCode = hashCode * 31 + [self.merchantId hash];
  }
  if (self.hasMerchantName) {
    hashCode = hashCode * 31 + [self.merchantName hash];
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [self.osVersion hash];
  }
  if (self.hasIsRoot) {
    hashCode = hashCode * 31 + [self.isRoot hash];
  }
  if (self.hasSize) {
    hashCode = hashCode * 31 + [self.size hash];
  }
  if (self.hasPhoneModel) {
    hashCode = hashCode * 31 + [self.phoneModel hash];
  }
  if (self.hasWifiName) {
    hashCode = hashCode * 31 + [self.wifiName hash];
  }
  if (self.hasWifiMac) {
    hashCode = hashCode * 31 + [self.wifiMac hash];
  }
  if (self.hasAppId) {
    hashCode = hashCode * 31 + [self.appId hash];
  }
  if (self.hasMerchantCode) {
    hashCode = hashCode * 31 + [self.merchantCode hash];
  }
  if (self.hasBillOrderNo) {
    hashCode = hashCode * 31 + [self.billOrderNo hash];
  }
  if (self.hasChannelType) {
    hashCode = hashCode * 31 + [self.channelType hash];
  }
  if (self.hasOrderAmount) {
    hashCode = hashCode * 31 + [self.orderAmount hash];
  }
  if (self.hasPayMode) {
    hashCode = hashCode * 31 + [self.payMode hash];
  }
  if (self.hasPayAmount) {
    hashCode = hashCode * 31 + [self.payAmount hash];
  }
  if (self.hasOrderStatus) {
    hashCode = hashCode * 31 + [self.orderStatus hash];
  }
  if (self.hasOutOrderType) {
    hashCode = hashCode * 31 + [self.outOrderType hash];
  }
  if (self.hasTxnTimeStart) {
    hashCode = hashCode * 31 + [self.txnTimeStart hash];
  }
  if (self.hasTxnTimeExpire) {
    hashCode = hashCode * 31 + [self.txnTimeExpire hash];
  }
  if (self.hasPayStatus) {
    hashCode = hashCode * 31 + [self.payStatus hash];
  }
  if (self.hasProductInfo) {
    hashCode = hashCode * 31 + [self.productInfo hash];
  }
  [self.payMethodArray enumerateObjectsUsingBlock:^(ContentPayMethod *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOutEquityCode) {
    hashCode = hashCode * 31 + [self.outEquityCode hash];
  }
  if (self.hasOutEquityAmount) {
    hashCode = hashCode * 31 + [self.outEquityAmount hash];
  }
  if (self.hasPayMethodId) {
    hashCode = hashCode * 31 + [self.payMethodId hash];
  }
  [self.instalmentArray enumerateObjectsUsingBlock:^(ContentInstalment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasInstalmentId) {
    hashCode = hashCode * 31 + [self.instalmentId hash];
  }
  if (self.hasTxnEndTime) {
    hashCode = hashCode * 31 + [self.txnEndTime hash];
  }
  if (self.hasValidateElement) {
    hashCode = hashCode * 31 + [self.validateElement hash];
  }
  if (self.hasSMsCode) {
    hashCode = hashCode * 31 + [self.sMsCode hash];
  }
  [self.voucherArray enumerateObjectsUsingBlock:^(ContentVoucher *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.ateTradeOrderArray enumerateObjectsUsingBlock:^(ContentAteTradeOrder *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasEquityAmount) {
    hashCode = hashCode * 31 + [self.equityAmount hash];
  }
  if (self.hasSupportFinger) {
    hashCode = hashCode * 31 + [self.supportFinger hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasTradeStatus) {
    hashCode = hashCode * 31 + [self.tradeStatus hash];
  }
  if (self.hasProductDesc) {
    hashCode = hashCode * 31 + [self.productDesc hash];
  }
  if (self.hasSubMerchantName) {
    hashCode = hashCode * 31 + [self.subMerchantName hash];
  }
  if (self.hasMemo) {
    hashCode = hashCode * 31 + [self.memo hash];
  }
  if (self.hasNotifyMode) {
    hashCode = hashCode * 31 + [self.notifyMode hash];
  }
  [self.memberListArray enumerateObjectsUsingBlock:^(ContentMemberTwo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasGpsInfo) {
    hashCode = hashCode * 31 + [self.gpsInfo hash];
  }
  if (self.hasPublishNo) {
    hashCode = hashCode * 31 + [self.publishNo hash];
  }
  if (self.hasResolution) {
    hashCode = hashCode * 31 + [self.resolution hash];
  }
  if (self.hasMsgTypeId) {
    hashCode = hashCode * 31 + [self.msgTypeId hash];
  }
  if (self.hasLastRecordId) {
    hashCode = hashCode * 31 + [self.lastRecordId hash];
  }
  if (self.hasScollUp) {
    hashCode = hashCode * 31 + [self.scollUp hash];
  }
  if (self.hasJsonCallBack) {
    hashCode = hashCode * 31 + [self.jsonCallBack hash];
  }
  [self.msgTypeInfoArray enumerateObjectsUsingBlock:^(ContentMsgTypeInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.msgInfoArray enumerateObjectsUsingBlock:^(ContentMsgInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [self.msgId hash];
  }
  [self.resourceInfoArray enumerateObjectsUsingBlock:^(ContentResourceInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.commonZipInfoArray enumerateObjectsUsingBlock:^(ContentCommonZipInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.shareInfoArray enumerateObjectsUsingBlock:^(ContentShareInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasResourceId) {
    hashCode = hashCode * 31 + [self.resourceId hash];
  }
  if (self.hasVcsBizType) {
    hashCode = hashCode * 31 + [self.vcsBizType hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasRepayCode) {
    hashCode = hashCode * 31 + [self.repayCode hash];
  }
  [self.userAppLoginInfoArray enumerateObjectsUsingBlock:^(ContentUserAppLoginInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasResultType) {
    hashCode = hashCode * 31 + [self.resultType hash];
  }
  [self.conflictAccArray enumerateObjectsUsingBlock:^(ContentConflictAcc *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSysFrom) {
    hashCode = hashCode * 31 + [self.sysFrom hash];
  }
  if (self.hasLoginPin) {
    hashCode = hashCode * 31 + [self.loginPin hash];
  }
  if (self.hasNewLoginPin) {
    hashCode = hashCode * 31 + [self.newLoginPin hash];
  }
  if (self.hasPayPwd) {
    hashCode = hashCode * 31 + [self.payPwd hash];
  }
  if (self.hasNewPayPwd) {
    hashCode = hashCode * 31 + [self.newPayPwd hash];
  }
  if (self.hasPayPwdResetFlag) {
    hashCode = hashCode * 31 + [self.payPwdResetFlag hash];
  }
  if (self.hasSex) {
    hashCode = hashCode * 31 + [self.sex hash];
  }
  if (self.hasBirthday) {
    hashCode = hashCode * 31 + [self.birthday hash];
  }
  if (self.hasNationality) {
    hashCode = hashCode * 31 + [self.nationality hash];
  }
  if (self.hasIssuingAuthority) {
    hashCode = hashCode * 31 + [self.issuingAuthority hash];
  }
  [self.cardInfoArray enumerateObjectsUsingBlock:^(ContentCardInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSummarizeInfo) {
    hashCode = hashCode * 31 + [self.summarizeInfo hash];
  }
  if (self.hasCurrentPage) {
    hashCode = hashCode * 31 + [self.currentPage hash];
  }
  if (self.hasPageSize) {
    hashCode = hashCode * 31 + [self.pageSize hash];
  }
  [self.txnInfoArray enumerateObjectsUsingBlock:^(ContentTxnInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasApplyTime) {
    hashCode = hashCode * 31 + [self.applyTime hash];
  }
  if (self.hasTotalFee) {
    hashCode = hashCode * 31 + [self.totalFee hash];
  }
  if (self.hasTipInfo) {
    hashCode = hashCode * 31 + [self.tipInfo hash];
  }
  if (self.hasCheckCode) {
    hashCode = hashCode * 31 + [self.checkCode hash];
  }
  if (self.hasTotal) {
    hashCode = hashCode * 31 + [self.total hash];
  }
  if (self.hasRepayAmt) {
    hashCode = hashCode * 31 + [self.repayAmt hash];
  }
  if (self.hasBillOrderId) {
    hashCode = hashCode * 31 + [self.billOrderId hash];
  }
  if (self.hasTxnAcctNo) {
    hashCode = hashCode * 31 + [self.txnAcctNo hash];
  }
  if (self.hasLastRowNum) {
    hashCode = hashCode * 31 + [self.lastRowNum hash];
  }
  if (self.hasInfo) {
    hashCode = hashCode * 31 + [self.info hash];
  }
  [self.creditOrderArray enumerateObjectsUsingBlock:^(ContentCreditOrder *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasRepayStatus) {
    hashCode = hashCode * 31 + [self.repayStatus hash];
  }
  if (self.hasInterest) {
    hashCode = hashCode * 31 + [self.interest hash];
  }
  if (self.hasReturnAmt) {
    hashCode = hashCode * 31 + [self.returnAmt hash];
  }
  if (self.hasStages) {
    hashCode = hashCode * 31 + [self.stages hash];
  }
  [self.divideArray enumerateObjectsUsingBlock:^(ContentDivide *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repayOrderArray enumerateObjectsUsingBlock:^(ContentRepayOrder *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.payTypesArray enumerateObjectsUsingBlock:^(ContentPayType *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasPayType) {
    hashCode = hashCode * 31 + [self.payType hash];
  }
  [self.repayRecordArray enumerateObjectsUsingBlock:^(ContentRepayRecord *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAccountAmt) {
    hashCode = hashCode * 31 + [self.accountAmt hash];
  }
  if (self.hasStatusName) {
    hashCode = hashCode * 31 + [self.statusName hash];
  }
  if (self.hasForceFaceCheck) {
    hashCode = hashCode * 31 + [self.forceFaceCheck hash];
  }
  if (self.hasAllowRepay) {
    hashCode = hashCode * 31 + [self.allowRepay hash];
  }
  if (self.hasLocationProvince) {
    hashCode = hashCode * 31 + [self.locationProvince hash];
  }
  if (self.hasLocationCity) {
    hashCode = hashCode * 31 + [self.locationCity hash];
  }
  if (self.hasLocationDistrict) {
    hashCode = hashCode * 31 + [self.locationDistrict hash];
  }
  if (self.hasLocationAddress) {
    hashCode = hashCode * 31 + [self.locationAddress hash];
  }
  if (self.hasKakaUrl) {
    hashCode = hashCode * 31 + [self.kakaUrl hash];
  }
  if (self.hasDoudouUrl) {
    hashCode = hashCode * 31 + [self.doudouUrl hash];
  }
  if (self.hasRepayId) {
    hashCode = hashCode * 31 + [self.repayId hash];
  }
  [self.contractArray enumerateObjectsUsingBlock:^(ContentContract *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasFrozenInfo) {
    hashCode = hashCode * 31 + [self.frozenInfo hash];
  }
  if (self.hasFcsCreditAmt) {
    hashCode = hashCode * 31 + [self.fcsCreditAmt hash];
  }
  if (self.hasLeftFcsCreditAmt) {
    hashCode = hashCode * 31 + [self.leftFcsCreditAmt hash];
  }
  if (self.hasFcsCreditAmtStatus) {
    hashCode = hashCode * 31 + [self.fcsCreditAmtStatus hash];
  }
  if (self.hasFcsCreditAmtType) {
    hashCode = hashCode * 31 + [self.fcsCreditAmtType hash];
  }
  if (self.hasFcsCreditUrl) {
    hashCode = hashCode * 31 + [self.fcsCreditUrl hash];
  }
  if (self.hasLeftCreditAmtName) {
    hashCode = hashCode * 31 + [self.leftCreditAmtName hash];
  }
  if (self.hasTotalCreditAmtName) {
    hashCode = hashCode * 31 + [self.totalCreditAmtName hash];
  }
  if (self.hasFcsCreditName) {
    hashCode = hashCode * 31 + [self.fcsCreditName hash];
  }
  if (self.hasFcsName) {
    hashCode = hashCode * 31 + [self.fcsName hash];
  }
  if (self.hasQuotaShowType) {
    hashCode = hashCode * 31 + [self.quotaShowType hash];
  }
  if (self.hasFcsMerchantName) {
    hashCode = hashCode * 31 + [self.fcsMerchantName hash];
  }
  if (self.hasLeftFcsCreditName) {
    hashCode = hashCode * 31 + [self.leftFcsCreditName hash];
  }
  if (self.hasSupplementInfo) {
    hashCode = hashCode * 31 + [self.supplementInfo hash];
  }
  if (self.hasExtInfo) {
    hashCode = hashCode * 31 + [self.extInfo hash];
  }
  if (self.hasSort) {
    hashCode = hashCode * 31 + [self.sort hash];
  }
  [self.quotaListArray enumerateObjectsUsingBlock:^(ContentResult *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasIsShowPreQuotaAmt) {
    hashCode = hashCode * 31 + [self.isShowPreQuotaAmt hash];
  }
  if (self.hasPreFcsAmt) {
    hashCode = hashCode * 31 + [self.preFcsAmt hash];
  }
  if (self.hasPreFcsUrl) {
    hashCode = hashCode * 31 + [self.preFcsUrl hash];
  }
  [self.freeListArray enumerateObjectsUsingBlock:^(ContentResult *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUserGrade) {
    hashCode = hashCode * 31 + [self.userGrade hash];
  }
  if (self.hasMemberTwo) {
    hashCode = hashCode * 31 + [self.memberTwo hash];
  }
  if (self.hasMebCode) {
    hashCode = hashCode * 31 + [self.mebCode hash];
  }
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasLastRequestTime) {
    hashCode = hashCode * 31 + [self.lastRequestTime hash];
  }
  if (self.hasCardInfoObject) {
    hashCode = hashCode * 31 + [self.cardInfoObject hash];
  }
  if (self.hasOrderInfo) {
    hashCode = hashCode * 31 + [self.orderInfo hash];
  }
  [self.productGroupArray enumerateObjectsUsingBlock:^(ContentProductGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAmtType) {
    hashCode = hashCode * 31 + [self.amtType hash];
  }
  [self.withdrawLimitArray enumerateObjectsUsingBlock:^(ContentWithdrawLimit *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasEquityCode) {
    hashCode = hashCode * 31 + [self.equityCode hash];
  }
  if (self.hasFunctionCode) {
    hashCode = hashCode * 31 + [self.functionCode hash];
  }
  if (self.hasTwSign) {
    hashCode = hashCode * 31 + [self.twSign hash];
  }
  if (self.hasLeftSumAmt) {
    hashCode = hashCode * 31 + [self.leftSumAmt hash];
  }
  if (self.hasVirtualOrderAmt) {
    hashCode = hashCode * 31 + [self.virtualOrderAmt hash];
  }
  if (self.hasSumCreditAmt) {
    hashCode = hashCode * 31 + [self.sumCreditAmt hash];
  }
  if (self.hasShowVoucher) {
    hashCode = hashCode * 31 + [self.showVoucher hash];
  }
  [self.equityInfoArray enumerateObjectsUsingBlock:^(ContentEquityInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.activityArray enumerateObjectsUsingBlock:^(ContentActivity *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBillId) {
    hashCode = hashCode * 31 + [self.billId hash];
  }
  if (self.hasSiedc) {
    hashCode = hashCode * 31 + [self.siedc hash];
  }
  [self.interestsArray enumerateObjectsUsingBlock:^(ContentInterest *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasQueryInterval) {
    hashCode = hashCode * 31 + [self.queryInterval hash];
  }
  if (self.hasQueryTimes) {
    hashCode = hashCode * 31 + [self.queryTimes hash];
  }
  if (self.hasStlMerchantCode) {
    hashCode = hashCode * 31 + [self.stlMerchantCode hash];
  }
  if (self.hasEquityMessage) {
    hashCode = hashCode * 31 + [self.equityMessage hash];
  }
  if (self.hasOutEquityMessage) {
    hashCode = hashCode * 31 + [self.outEquityMessage hash];
  }
  [self.seedDataArray enumerateObjectsUsingBlock:^(ContentSeedData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.extMapArray enumerateObjectsUsingBlock:^(ContentExtMap *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentProductGroup ()
@property (strong) NSString* name;
@property (strong) NSString* icon;
@property (strong) NSMutableArray * productItemListArray;
@end

@implementation ContentProductGroup

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) _value_ {
  hasIcon_ = !!_value_;
}
@synthesize icon;
@synthesize productItemListArray;
@dynamic productItemList;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.icon = @"";
  }
  return self;
}
static ContentProductGroup* defaultContentProductGroupInstance = nil;
+ (void) initialize {
  if (self == [ContentProductGroup class]) {
    defaultContentProductGroupInstance = [[ContentProductGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentProductGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultContentProductGroupInstance;
}
- (NSArray *)productItemList {
  return productItemListArray;
}
- (ContentProductItem*)productItemListAtIndex:(NSUInteger)index {
  return [productItemListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasIcon) {
    [output writeString:2 value:self.icon];
  }
  [self.productItemListArray enumerateObjectsUsingBlock:^(ContentProductItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasIcon) {
    size_ += computeStringSize(2, self.icon);
  }
  [self.productItemListArray enumerateObjectsUsingBlock:^(ContentProductItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentProductGroup*) parseFromData:(NSData*) data {
  return (ContentProductGroup*)[[[ContentProductGroup builder] mergeFromData:data] build];
}
+ (ContentProductGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductGroup*)[[[ContentProductGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentProductGroup*) parseFromInputStream:(NSInputStream*) input {
  return (ContentProductGroup*)[[[ContentProductGroup builder] mergeFromInputStream:input] build];
}
+ (ContentProductGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductGroup*)[[[ContentProductGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentProductGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentProductGroup*)[[[ContentProductGroup builder] mergeFromCodedInputStream:input] build];
}
+ (ContentProductGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductGroup*)[[[ContentProductGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentProductGroupBuilder*) builder {
  return [[ContentProductGroupBuilder alloc] init];
}
+ (ContentProductGroupBuilder*) builderWithPrototype:(ContentProductGroup*) prototype {
  return [[ContentProductGroup builder] mergeFrom:prototype];
}
- (ContentProductGroupBuilder*) builder {
  return [ContentProductGroup builder];
}
- (ContentProductGroupBuilder*) toBuilder {
  return [ContentProductGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"icon", self.icon];
  }
  [self.productItemListArray enumerateObjectsUsingBlock:^(ContentProductItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"productItemList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasIcon) {
    [dictionary setObject: self.icon forKey: @"icon"];
  }
  for (ContentProductItem* element in self.productItemListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"productItemList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentProductGroup class]]) {
    return NO;
  }
  ContentProductGroup *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasIcon == otherMessage.hasIcon &&
      (!self.hasIcon || [self.icon isEqual:otherMessage.icon]) &&
      [self.productItemListArray isEqualToArray:otherMessage.productItemListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasIcon) {
    hashCode = hashCode * 31 + [self.icon hash];
  }
  [self.productItemListArray enumerateObjectsUsingBlock:^(ContentProductItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentProductGroupBuilder()
@property (strong) ContentProductGroup* resultProductGroup;
@end

@implementation ContentProductGroupBuilder
@synthesize resultProductGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProductGroup = [[ContentProductGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProductGroup;
}
- (ContentProductGroupBuilder*) clear {
  self.resultProductGroup = [[ContentProductGroup alloc] init];
  return self;
}
- (ContentProductGroupBuilder*) clone {
  return [ContentProductGroup builderWithPrototype:resultProductGroup];
}
- (ContentProductGroup*) defaultInstance {
  return [ContentProductGroup defaultInstance];
}
- (ContentProductGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentProductGroup*) buildPartial {
  ContentProductGroup* returnMe = resultProductGroup;
  self.resultProductGroup = nil;
  return returnMe;
}
- (ContentProductGroupBuilder*) mergeFrom:(ContentProductGroup*) other {
  if (other == [ContentProductGroup defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  if (other.productItemListArray.count > 0) {
    if (resultProductGroup.productItemListArray == nil) {
      resultProductGroup.productItemListArray = [[NSMutableArray alloc] initWithArray:other.productItemListArray];
    } else {
      [resultProductGroup.productItemListArray addObjectsFromArray:other.productItemListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentProductGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentProductGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setIcon:[input readString]];
        break;
      }
      case 26: {
        ContentProductItemBuilder* subBuilder = [ContentProductItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProductItemList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultProductGroup.hasName;
}
- (NSString*) name {
  return resultProductGroup.name;
}
- (ContentProductGroupBuilder*) setName:(NSString*) value {
  resultProductGroup.hasName = YES;
  resultProductGroup.name = value;
  return self;
}
- (ContentProductGroupBuilder*) clearName {
  resultProductGroup.hasName = NO;
  resultProductGroup.name = @"";
  return self;
}
- (BOOL) hasIcon {
  return resultProductGroup.hasIcon;
}
- (NSString*) icon {
  return resultProductGroup.icon;
}
- (ContentProductGroupBuilder*) setIcon:(NSString*) value {
  resultProductGroup.hasIcon = YES;
  resultProductGroup.icon = value;
  return self;
}
- (ContentProductGroupBuilder*) clearIcon {
  resultProductGroup.hasIcon = NO;
  resultProductGroup.icon = @"";
  return self;
}
- (NSMutableArray *)productItemList {
  return resultProductGroup.productItemListArray;
}
- (ContentProductItem*)productItemListAtIndex:(NSUInteger)index {
  return [resultProductGroup productItemListAtIndex:index];
}
- (ContentProductGroupBuilder *)addProductItemList:(ContentProductItem*)value {
  if (resultProductGroup.productItemListArray == nil) {
    resultProductGroup.productItemListArray = [[NSMutableArray alloc]init];
  }
  [resultProductGroup.productItemListArray addObject:value];
  return self;
}
- (ContentProductGroupBuilder *)setProductItemListArray:(NSArray *)array {
  resultProductGroup.productItemListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentProductGroupBuilder *)clearProductItemList {
  resultProductGroup.productItemListArray = nil;
  return self;
}
@end

@interface ContentProductItem ()
@property (strong) NSString* productCode;
@property (strong) NSString* logoImage;
@property (strong) NSString* title;
@property (strong) NSString* subTitle;
@property (strong) NSString* labelInfo;
@property (strong) NSString* status;
@property (strong) NSString* labelColor;
@property (strong) NSString* itemUrl;
@property (strong) NSString* amountDesc;
@end

@implementation ContentProductItem

- (BOOL) hasProductCode {
  return !!hasProductCode_;
}
- (void) setHasProductCode:(BOOL) _value_ {
  hasProductCode_ = !!_value_;
}
@synthesize productCode;
- (BOOL) hasLogoImage {
  return !!hasLogoImage_;
}
- (void) setHasLogoImage:(BOOL) _value_ {
  hasLogoImage_ = !!_value_;
}
@synthesize logoImage;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasSubTitle {
  return !!hasSubTitle_;
}
- (void) setHasSubTitle:(BOOL) _value_ {
  hasSubTitle_ = !!_value_;
}
@synthesize subTitle;
- (BOOL) hasLabelInfo {
  return !!hasLabelInfo_;
}
- (void) setHasLabelInfo:(BOOL) _value_ {
  hasLabelInfo_ = !!_value_;
}
@synthesize labelInfo;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasLabelColor {
  return !!hasLabelColor_;
}
- (void) setHasLabelColor:(BOOL) _value_ {
  hasLabelColor_ = !!_value_;
}
@synthesize labelColor;
- (BOOL) hasItemUrl {
  return !!hasItemUrl_;
}
- (void) setHasItemUrl:(BOOL) _value_ {
  hasItemUrl_ = !!_value_;
}
@synthesize itemUrl;
- (BOOL) hasAmountDesc {
  return !!hasAmountDesc_;
}
- (void) setHasAmountDesc:(BOOL) _value_ {
  hasAmountDesc_ = !!_value_;
}
@synthesize amountDesc;
- (instancetype) init {
  if ((self = [super init])) {
    self.productCode = @"";
    self.logoImage = @"";
    self.title = @"";
    self.subTitle = @"";
    self.labelInfo = @"";
    self.status = @"";
    self.labelColor = @"";
    self.itemUrl = @"";
    self.amountDesc = @"";
  }
  return self;
}
static ContentProductItem* defaultContentProductItemInstance = nil;
+ (void) initialize {
  if (self == [ContentProductItem class]) {
    defaultContentProductItemInstance = [[ContentProductItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentProductItemInstance;
}
- (instancetype) defaultInstance {
  return defaultContentProductItemInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductCode) {
    [output writeString:1 value:self.productCode];
  }
  if (self.hasLogoImage) {
    [output writeString:2 value:self.logoImage];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasSubTitle) {
    [output writeString:4 value:self.subTitle];
  }
  if (self.hasLabelInfo) {
    [output writeString:5 value:self.labelInfo];
  }
  if (self.hasStatus) {
    [output writeString:6 value:self.status];
  }
  if (self.hasLabelColor) {
    [output writeString:7 value:self.labelColor];
  }
  if (self.hasItemUrl) {
    [output writeString:8 value:self.itemUrl];
  }
  if (self.hasAmountDesc) {
    [output writeString:9 value:self.amountDesc];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProductCode) {
    size_ += computeStringSize(1, self.productCode);
  }
  if (self.hasLogoImage) {
    size_ += computeStringSize(2, self.logoImage);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasSubTitle) {
    size_ += computeStringSize(4, self.subTitle);
  }
  if (self.hasLabelInfo) {
    size_ += computeStringSize(5, self.labelInfo);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(6, self.status);
  }
  if (self.hasLabelColor) {
    size_ += computeStringSize(7, self.labelColor);
  }
  if (self.hasItemUrl) {
    size_ += computeStringSize(8, self.itemUrl);
  }
  if (self.hasAmountDesc) {
    size_ += computeStringSize(9, self.amountDesc);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentProductItem*) parseFromData:(NSData*) data {
  return (ContentProductItem*)[[[ContentProductItem builder] mergeFromData:data] build];
}
+ (ContentProductItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductItem*)[[[ContentProductItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentProductItem*) parseFromInputStream:(NSInputStream*) input {
  return (ContentProductItem*)[[[ContentProductItem builder] mergeFromInputStream:input] build];
}
+ (ContentProductItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductItem*)[[[ContentProductItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentProductItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentProductItem*)[[[ContentProductItem builder] mergeFromCodedInputStream:input] build];
}
+ (ContentProductItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductItem*)[[[ContentProductItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentProductItemBuilder*) builder {
  return [[ContentProductItemBuilder alloc] init];
}
+ (ContentProductItemBuilder*) builderWithPrototype:(ContentProductItem*) prototype {
  return [[ContentProductItem builder] mergeFrom:prototype];
}
- (ContentProductItemBuilder*) builder {
  return [ContentProductItem builder];
}
- (ContentProductItemBuilder*) toBuilder {
  return [ContentProductItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productCode", self.productCode];
  }
  if (self.hasLogoImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logoImage", self.logoImage];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasSubTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subTitle", self.subTitle];
  }
  if (self.hasLabelInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"labelInfo", self.labelInfo];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasLabelColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"labelColor", self.labelColor];
  }
  if (self.hasItemUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemUrl", self.itemUrl];
  }
  if (self.hasAmountDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amountDesc", self.amountDesc];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProductCode) {
    [dictionary setObject: self.productCode forKey: @"productCode"];
  }
  if (self.hasLogoImage) {
    [dictionary setObject: self.logoImage forKey: @"logoImage"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasSubTitle) {
    [dictionary setObject: self.subTitle forKey: @"subTitle"];
  }
  if (self.hasLabelInfo) {
    [dictionary setObject: self.labelInfo forKey: @"labelInfo"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  if (self.hasLabelColor) {
    [dictionary setObject: self.labelColor forKey: @"labelColor"];
  }
  if (self.hasItemUrl) {
    [dictionary setObject: self.itemUrl forKey: @"itemUrl"];
  }
  if (self.hasAmountDesc) {
    [dictionary setObject: self.amountDesc forKey: @"amountDesc"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentProductItem class]]) {
    return NO;
  }
  ContentProductItem *otherMessage = other;
  return
      self.hasProductCode == otherMessage.hasProductCode &&
      (!self.hasProductCode || [self.productCode isEqual:otherMessage.productCode]) &&
      self.hasLogoImage == otherMessage.hasLogoImage &&
      (!self.hasLogoImage || [self.logoImage isEqual:otherMessage.logoImage]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasSubTitle == otherMessage.hasSubTitle &&
      (!self.hasSubTitle || [self.subTitle isEqual:otherMessage.subTitle]) &&
      self.hasLabelInfo == otherMessage.hasLabelInfo &&
      (!self.hasLabelInfo || [self.labelInfo isEqual:otherMessage.labelInfo]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasLabelColor == otherMessage.hasLabelColor &&
      (!self.hasLabelColor || [self.labelColor isEqual:otherMessage.labelColor]) &&
      self.hasItemUrl == otherMessage.hasItemUrl &&
      (!self.hasItemUrl || [self.itemUrl isEqual:otherMessage.itemUrl]) &&
      self.hasAmountDesc == otherMessage.hasAmountDesc &&
      (!self.hasAmountDesc || [self.amountDesc isEqual:otherMessage.amountDesc]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProductCode) {
    hashCode = hashCode * 31 + [self.productCode hash];
  }
  if (self.hasLogoImage) {
    hashCode = hashCode * 31 + [self.logoImage hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasSubTitle) {
    hashCode = hashCode * 31 + [self.subTitle hash];
  }
  if (self.hasLabelInfo) {
    hashCode = hashCode * 31 + [self.labelInfo hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasLabelColor) {
    hashCode = hashCode * 31 + [self.labelColor hash];
  }
  if (self.hasItemUrl) {
    hashCode = hashCode * 31 + [self.itemUrl hash];
  }
  if (self.hasAmountDesc) {
    hashCode = hashCode * 31 + [self.amountDesc hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentProductItemBuilder()
@property (strong) ContentProductItem* resultProductItem;
@end

@implementation ContentProductItemBuilder
@synthesize resultProductItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProductItem = [[ContentProductItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProductItem;
}
- (ContentProductItemBuilder*) clear {
  self.resultProductItem = [[ContentProductItem alloc] init];
  return self;
}
- (ContentProductItemBuilder*) clone {
  return [ContentProductItem builderWithPrototype:resultProductItem];
}
- (ContentProductItem*) defaultInstance {
  return [ContentProductItem defaultInstance];
}
- (ContentProductItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentProductItem*) buildPartial {
  ContentProductItem* returnMe = resultProductItem;
  self.resultProductItem = nil;
  return returnMe;
}
- (ContentProductItemBuilder*) mergeFrom:(ContentProductItem*) other {
  if (other == [ContentProductItem defaultInstance]) {
    return self;
  }
  if (other.hasProductCode) {
    [self setProductCode:other.productCode];
  }
  if (other.hasLogoImage) {
    [self setLogoImage:other.logoImage];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasSubTitle) {
    [self setSubTitle:other.subTitle];
  }
  if (other.hasLabelInfo) {
    [self setLabelInfo:other.labelInfo];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasLabelColor) {
    [self setLabelColor:other.labelColor];
  }
  if (other.hasItemUrl) {
    [self setItemUrl:other.itemUrl];
  }
  if (other.hasAmountDesc) {
    [self setAmountDesc:other.amountDesc];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentProductItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentProductItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setProductCode:[input readString]];
        break;
      }
      case 18: {
        [self setLogoImage:[input readString]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 34: {
        [self setSubTitle:[input readString]];
        break;
      }
      case 42: {
        [self setLabelInfo:[input readString]];
        break;
      }
      case 50: {
        [self setStatus:[input readString]];
        break;
      }
      case 58: {
        [self setLabelColor:[input readString]];
        break;
      }
      case 66: {
        [self setItemUrl:[input readString]];
        break;
      }
      case 74: {
        [self setAmountDesc:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasProductCode {
  return resultProductItem.hasProductCode;
}
- (NSString*) productCode {
  return resultProductItem.productCode;
}
- (ContentProductItemBuilder*) setProductCode:(NSString*) value {
  resultProductItem.hasProductCode = YES;
  resultProductItem.productCode = value;
  return self;
}
- (ContentProductItemBuilder*) clearProductCode {
  resultProductItem.hasProductCode = NO;
  resultProductItem.productCode = @"";
  return self;
}
- (BOOL) hasLogoImage {
  return resultProductItem.hasLogoImage;
}
- (NSString*) logoImage {
  return resultProductItem.logoImage;
}
- (ContentProductItemBuilder*) setLogoImage:(NSString*) value {
  resultProductItem.hasLogoImage = YES;
  resultProductItem.logoImage = value;
  return self;
}
- (ContentProductItemBuilder*) clearLogoImage {
  resultProductItem.hasLogoImage = NO;
  resultProductItem.logoImage = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultProductItem.hasTitle;
}
- (NSString*) title {
  return resultProductItem.title;
}
- (ContentProductItemBuilder*) setTitle:(NSString*) value {
  resultProductItem.hasTitle = YES;
  resultProductItem.title = value;
  return self;
}
- (ContentProductItemBuilder*) clearTitle {
  resultProductItem.hasTitle = NO;
  resultProductItem.title = @"";
  return self;
}
- (BOOL) hasSubTitle {
  return resultProductItem.hasSubTitle;
}
- (NSString*) subTitle {
  return resultProductItem.subTitle;
}
- (ContentProductItemBuilder*) setSubTitle:(NSString*) value {
  resultProductItem.hasSubTitle = YES;
  resultProductItem.subTitle = value;
  return self;
}
- (ContentProductItemBuilder*) clearSubTitle {
  resultProductItem.hasSubTitle = NO;
  resultProductItem.subTitle = @"";
  return self;
}
- (BOOL) hasLabelInfo {
  return resultProductItem.hasLabelInfo;
}
- (NSString*) labelInfo {
  return resultProductItem.labelInfo;
}
- (ContentProductItemBuilder*) setLabelInfo:(NSString*) value {
  resultProductItem.hasLabelInfo = YES;
  resultProductItem.labelInfo = value;
  return self;
}
- (ContentProductItemBuilder*) clearLabelInfo {
  resultProductItem.hasLabelInfo = NO;
  resultProductItem.labelInfo = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultProductItem.hasStatus;
}
- (NSString*) status {
  return resultProductItem.status;
}
- (ContentProductItemBuilder*) setStatus:(NSString*) value {
  resultProductItem.hasStatus = YES;
  resultProductItem.status = value;
  return self;
}
- (ContentProductItemBuilder*) clearStatus {
  resultProductItem.hasStatus = NO;
  resultProductItem.status = @"";
  return self;
}
- (BOOL) hasLabelColor {
  return resultProductItem.hasLabelColor;
}
- (NSString*) labelColor {
  return resultProductItem.labelColor;
}
- (ContentProductItemBuilder*) setLabelColor:(NSString*) value {
  resultProductItem.hasLabelColor = YES;
  resultProductItem.labelColor = value;
  return self;
}
- (ContentProductItemBuilder*) clearLabelColor {
  resultProductItem.hasLabelColor = NO;
  resultProductItem.labelColor = @"";
  return self;
}
- (BOOL) hasItemUrl {
  return resultProductItem.hasItemUrl;
}
- (NSString*) itemUrl {
  return resultProductItem.itemUrl;
}
- (ContentProductItemBuilder*) setItemUrl:(NSString*) value {
  resultProductItem.hasItemUrl = YES;
  resultProductItem.itemUrl = value;
  return self;
}
- (ContentProductItemBuilder*) clearItemUrl {
  resultProductItem.hasItemUrl = NO;
  resultProductItem.itemUrl = @"";
  return self;
}
- (BOOL) hasAmountDesc {
  return resultProductItem.hasAmountDesc;
}
- (NSString*) amountDesc {
  return resultProductItem.amountDesc;
}
- (ContentProductItemBuilder*) setAmountDesc:(NSString*) value {
  resultProductItem.hasAmountDesc = YES;
  resultProductItem.amountDesc = value;
  return self;
}
- (ContentProductItemBuilder*) clearAmountDesc {
  resultProductItem.hasAmountDesc = NO;
  resultProductItem.amountDesc = @"";
  return self;
}
@end

@interface ContentAtpProd ()
@property (strong) NSString* finProdType;
@property (strong) NSString* category;
@property (strong) NSString* status;
@end

@implementation ContentAtpProd

- (BOOL) hasFinProdType {
  return !!hasFinProdType_;
}
- (void) setHasFinProdType:(BOOL) _value_ {
  hasFinProdType_ = !!_value_;
}
@synthesize finProdType;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) _value_ {
  hasCategory_ = !!_value_;
}
@synthesize category;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.finProdType = @"";
    self.category = @"";
    self.status = @"";
  }
  return self;
}
static ContentAtpProd* defaultContentAtpProdInstance = nil;
+ (void) initialize {
  if (self == [ContentAtpProd class]) {
    defaultContentAtpProdInstance = [[ContentAtpProd alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentAtpProdInstance;
}
- (instancetype) defaultInstance {
  return defaultContentAtpProdInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFinProdType) {
    [output writeString:1 value:self.finProdType];
  }
  if (self.hasCategory) {
    [output writeString:2 value:self.category];
  }
  if (self.hasStatus) {
    [output writeString:3 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFinProdType) {
    size_ += computeStringSize(1, self.finProdType);
  }
  if (self.hasCategory) {
    size_ += computeStringSize(2, self.category);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(3, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentAtpProd*) parseFromData:(NSData*) data {
  return (ContentAtpProd*)[[[ContentAtpProd builder] mergeFromData:data] build];
}
+ (ContentAtpProd*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAtpProd*)[[[ContentAtpProd builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentAtpProd*) parseFromInputStream:(NSInputStream*) input {
  return (ContentAtpProd*)[[[ContentAtpProd builder] mergeFromInputStream:input] build];
}
+ (ContentAtpProd*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAtpProd*)[[[ContentAtpProd builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAtpProd*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentAtpProd*)[[[ContentAtpProd builder] mergeFromCodedInputStream:input] build];
}
+ (ContentAtpProd*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAtpProd*)[[[ContentAtpProd builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAtpProdBuilder*) builder {
  return [[ContentAtpProdBuilder alloc] init];
}
+ (ContentAtpProdBuilder*) builderWithPrototype:(ContentAtpProd*) prototype {
  return [[ContentAtpProd builder] mergeFrom:prototype];
}
- (ContentAtpProdBuilder*) builder {
  return [ContentAtpProd builder];
}
- (ContentAtpProdBuilder*) toBuilder {
  return [ContentAtpProd builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFinProdType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finProdType", self.finProdType];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"category", self.category];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFinProdType) {
    [dictionary setObject: self.finProdType forKey: @"finProdType"];
  }
  if (self.hasCategory) {
    [dictionary setObject: self.category forKey: @"category"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentAtpProd class]]) {
    return NO;
  }
  ContentAtpProd *otherMessage = other;
  return
      self.hasFinProdType == otherMessage.hasFinProdType &&
      (!self.hasFinProdType || [self.finProdType isEqual:otherMessage.finProdType]) &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFinProdType) {
    hashCode = hashCode * 31 + [self.finProdType hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentAtpProdBuilder()
@property (strong) ContentAtpProd* resultAtpProd;
@end

@implementation ContentAtpProdBuilder
@synthesize resultAtpProd;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAtpProd = [[ContentAtpProd alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAtpProd;
}
- (ContentAtpProdBuilder*) clear {
  self.resultAtpProd = [[ContentAtpProd alloc] init];
  return self;
}
- (ContentAtpProdBuilder*) clone {
  return [ContentAtpProd builderWithPrototype:resultAtpProd];
}
- (ContentAtpProd*) defaultInstance {
  return [ContentAtpProd defaultInstance];
}
- (ContentAtpProd*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentAtpProd*) buildPartial {
  ContentAtpProd* returnMe = resultAtpProd;
  self.resultAtpProd = nil;
  return returnMe;
}
- (ContentAtpProdBuilder*) mergeFrom:(ContentAtpProd*) other {
  if (other == [ContentAtpProd defaultInstance]) {
    return self;
  }
  if (other.hasFinProdType) {
    [self setFinProdType:other.finProdType];
  }
  if (other.hasCategory) {
    [self setCategory:other.category];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentAtpProdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentAtpProdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFinProdType:[input readString]];
        break;
      }
      case 18: {
        [self setCategory:[input readString]];
        break;
      }
      case 26: {
        [self setStatus:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFinProdType {
  return resultAtpProd.hasFinProdType;
}
- (NSString*) finProdType {
  return resultAtpProd.finProdType;
}
- (ContentAtpProdBuilder*) setFinProdType:(NSString*) value {
  resultAtpProd.hasFinProdType = YES;
  resultAtpProd.finProdType = value;
  return self;
}
- (ContentAtpProdBuilder*) clearFinProdType {
  resultAtpProd.hasFinProdType = NO;
  resultAtpProd.finProdType = @"";
  return self;
}
- (BOOL) hasCategory {
  return resultAtpProd.hasCategory;
}
- (NSString*) category {
  return resultAtpProd.category;
}
- (ContentAtpProdBuilder*) setCategory:(NSString*) value {
  resultAtpProd.hasCategory = YES;
  resultAtpProd.category = value;
  return self;
}
- (ContentAtpProdBuilder*) clearCategory {
  resultAtpProd.hasCategory = NO;
  resultAtpProd.category = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultAtpProd.hasStatus;
}
- (NSString*) status {
  return resultAtpProd.status;
}
- (ContentAtpProdBuilder*) setStatus:(NSString*) value {
  resultAtpProd.hasStatus = YES;
  resultAtpProd.status = value;
  return self;
}
- (ContentAtpProdBuilder*) clearStatus {
  resultAtpProd.hasStatus = NO;
  resultAtpProd.status = @"";
  return self;
}
@end

@interface ContentAppInfo ()
@property (strong) NSString* appType;
@property (strong) NSString* latestAppVersion;
@property (strong) NSString* latestAppVersionUrl;
@property (strong) NSString* appFlag;
@property (strong) NSString* gradientLaunchMessageTitle;
@property (strong) NSString* gradientLaunchMessageContent;
@property (strong) NSString* md5;
@end

@implementation ContentAppInfo

- (BOOL) hasAppType {
  return !!hasAppType_;
}
- (void) setHasAppType:(BOOL) _value_ {
  hasAppType_ = !!_value_;
}
@synthesize appType;
- (BOOL) hasLatestAppVersion {
  return !!hasLatestAppVersion_;
}
- (void) setHasLatestAppVersion:(BOOL) _value_ {
  hasLatestAppVersion_ = !!_value_;
}
@synthesize latestAppVersion;
- (BOOL) hasLatestAppVersionUrl {
  return !!hasLatestAppVersionUrl_;
}
- (void) setHasLatestAppVersionUrl:(BOOL) _value_ {
  hasLatestAppVersionUrl_ = !!_value_;
}
@synthesize latestAppVersionUrl;
- (BOOL) hasAppFlag {
  return !!hasAppFlag_;
}
- (void) setHasAppFlag:(BOOL) _value_ {
  hasAppFlag_ = !!_value_;
}
@synthesize appFlag;
- (BOOL) hasGradientLaunchMessageTitle {
  return !!hasGradientLaunchMessageTitle_;
}
- (void) setHasGradientLaunchMessageTitle:(BOOL) _value_ {
  hasGradientLaunchMessageTitle_ = !!_value_;
}
@synthesize gradientLaunchMessageTitle;
- (BOOL) hasGradientLaunchMessageContent {
  return !!hasGradientLaunchMessageContent_;
}
- (void) setHasGradientLaunchMessageContent:(BOOL) _value_ {
  hasGradientLaunchMessageContent_ = !!_value_;
}
@synthesize gradientLaunchMessageContent;
- (BOOL) hasMd5 {
  return !!hasMd5_;
}
- (void) setHasMd5:(BOOL) _value_ {
  hasMd5_ = !!_value_;
}
@synthesize md5;
- (instancetype) init {
  if ((self = [super init])) {
    self.appType = @"";
    self.latestAppVersion = @"";
    self.latestAppVersionUrl = @"";
    self.appFlag = @"";
    self.gradientLaunchMessageTitle = @"";
    self.gradientLaunchMessageContent = @"";
    self.md5 = @"";
  }
  return self;
}
static ContentAppInfo* defaultContentAppInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentAppInfo class]) {
    defaultContentAppInfoInstance = [[ContentAppInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentAppInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentAppInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAppType) {
    [output writeString:1 value:self.appType];
  }
  if (self.hasLatestAppVersion) {
    [output writeString:2 value:self.latestAppVersion];
  }
  if (self.hasLatestAppVersionUrl) {
    [output writeString:3 value:self.latestAppVersionUrl];
  }
  if (self.hasAppFlag) {
    [output writeString:4 value:self.appFlag];
  }
  if (self.hasGradientLaunchMessageTitle) {
    [output writeString:5 value:self.gradientLaunchMessageTitle];
  }
  if (self.hasGradientLaunchMessageContent) {
    [output writeString:6 value:self.gradientLaunchMessageContent];
  }
  if (self.hasMd5) {
    [output writeString:7 value:self.md5];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAppType) {
    size_ += computeStringSize(1, self.appType);
  }
  if (self.hasLatestAppVersion) {
    size_ += computeStringSize(2, self.latestAppVersion);
  }
  if (self.hasLatestAppVersionUrl) {
    size_ += computeStringSize(3, self.latestAppVersionUrl);
  }
  if (self.hasAppFlag) {
    size_ += computeStringSize(4, self.appFlag);
  }
  if (self.hasGradientLaunchMessageTitle) {
    size_ += computeStringSize(5, self.gradientLaunchMessageTitle);
  }
  if (self.hasGradientLaunchMessageContent) {
    size_ += computeStringSize(6, self.gradientLaunchMessageContent);
  }
  if (self.hasMd5) {
    size_ += computeStringSize(7, self.md5);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentAppInfo*) parseFromData:(NSData*) data {
  return (ContentAppInfo*)[[[ContentAppInfo builder] mergeFromData:data] build];
}
+ (ContentAppInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAppInfo*)[[[ContentAppInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentAppInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentAppInfo*)[[[ContentAppInfo builder] mergeFromInputStream:input] build];
}
+ (ContentAppInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAppInfo*)[[[ContentAppInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAppInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentAppInfo*)[[[ContentAppInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentAppInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAppInfo*)[[[ContentAppInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAppInfoBuilder*) builder {
  return [[ContentAppInfoBuilder alloc] init];
}
+ (ContentAppInfoBuilder*) builderWithPrototype:(ContentAppInfo*) prototype {
  return [[ContentAppInfo builder] mergeFrom:prototype];
}
- (ContentAppInfoBuilder*) builder {
  return [ContentAppInfo builder];
}
- (ContentAppInfoBuilder*) toBuilder {
  return [ContentAppInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAppType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appType", self.appType];
  }
  if (self.hasLatestAppVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestAppVersion", self.latestAppVersion];
  }
  if (self.hasLatestAppVersionUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestAppVersionUrl", self.latestAppVersionUrl];
  }
  if (self.hasAppFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appFlag", self.appFlag];
  }
  if (self.hasGradientLaunchMessageTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gradientLaunchMessageTitle", self.gradientLaunchMessageTitle];
  }
  if (self.hasGradientLaunchMessageContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gradientLaunchMessageContent", self.gradientLaunchMessageContent];
  }
  if (self.hasMd5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"md5", self.md5];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAppType) {
    [dictionary setObject: self.appType forKey: @"appType"];
  }
  if (self.hasLatestAppVersion) {
    [dictionary setObject: self.latestAppVersion forKey: @"latestAppVersion"];
  }
  if (self.hasLatestAppVersionUrl) {
    [dictionary setObject: self.latestAppVersionUrl forKey: @"latestAppVersionUrl"];
  }
  if (self.hasAppFlag) {
    [dictionary setObject: self.appFlag forKey: @"appFlag"];
  }
  if (self.hasGradientLaunchMessageTitle) {
    [dictionary setObject: self.gradientLaunchMessageTitle forKey: @"gradientLaunchMessageTitle"];
  }
  if (self.hasGradientLaunchMessageContent) {
    [dictionary setObject: self.gradientLaunchMessageContent forKey: @"gradientLaunchMessageContent"];
  }
  if (self.hasMd5) {
    [dictionary setObject: self.md5 forKey: @"md5"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentAppInfo class]]) {
    return NO;
  }
  ContentAppInfo *otherMessage = other;
  return
      self.hasAppType == otherMessage.hasAppType &&
      (!self.hasAppType || [self.appType isEqual:otherMessage.appType]) &&
      self.hasLatestAppVersion == otherMessage.hasLatestAppVersion &&
      (!self.hasLatestAppVersion || [self.latestAppVersion isEqual:otherMessage.latestAppVersion]) &&
      self.hasLatestAppVersionUrl == otherMessage.hasLatestAppVersionUrl &&
      (!self.hasLatestAppVersionUrl || [self.latestAppVersionUrl isEqual:otherMessage.latestAppVersionUrl]) &&
      self.hasAppFlag == otherMessage.hasAppFlag &&
      (!self.hasAppFlag || [self.appFlag isEqual:otherMessage.appFlag]) &&
      self.hasGradientLaunchMessageTitle == otherMessage.hasGradientLaunchMessageTitle &&
      (!self.hasGradientLaunchMessageTitle || [self.gradientLaunchMessageTitle isEqual:otherMessage.gradientLaunchMessageTitle]) &&
      self.hasGradientLaunchMessageContent == otherMessage.hasGradientLaunchMessageContent &&
      (!self.hasGradientLaunchMessageContent || [self.gradientLaunchMessageContent isEqual:otherMessage.gradientLaunchMessageContent]) &&
      self.hasMd5 == otherMessage.hasMd5 &&
      (!self.hasMd5 || [self.md5 isEqual:otherMessage.md5]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAppType) {
    hashCode = hashCode * 31 + [self.appType hash];
  }
  if (self.hasLatestAppVersion) {
    hashCode = hashCode * 31 + [self.latestAppVersion hash];
  }
  if (self.hasLatestAppVersionUrl) {
    hashCode = hashCode * 31 + [self.latestAppVersionUrl hash];
  }
  if (self.hasAppFlag) {
    hashCode = hashCode * 31 + [self.appFlag hash];
  }
  if (self.hasGradientLaunchMessageTitle) {
    hashCode = hashCode * 31 + [self.gradientLaunchMessageTitle hash];
  }
  if (self.hasGradientLaunchMessageContent) {
    hashCode = hashCode * 31 + [self.gradientLaunchMessageContent hash];
  }
  if (self.hasMd5) {
    hashCode = hashCode * 31 + [self.md5 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentAppInfoBuilder()
@property (strong) ContentAppInfo* resultAppInfo;
@end

@implementation ContentAppInfoBuilder
@synthesize resultAppInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppInfo = [[ContentAppInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppInfo;
}
- (ContentAppInfoBuilder*) clear {
  self.resultAppInfo = [[ContentAppInfo alloc] init];
  return self;
}
- (ContentAppInfoBuilder*) clone {
  return [ContentAppInfo builderWithPrototype:resultAppInfo];
}
- (ContentAppInfo*) defaultInstance {
  return [ContentAppInfo defaultInstance];
}
- (ContentAppInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentAppInfo*) buildPartial {
  ContentAppInfo* returnMe = resultAppInfo;
  self.resultAppInfo = nil;
  return returnMe;
}
- (ContentAppInfoBuilder*) mergeFrom:(ContentAppInfo*) other {
  if (other == [ContentAppInfo defaultInstance]) {
    return self;
  }
  if (other.hasAppType) {
    [self setAppType:other.appType];
  }
  if (other.hasLatestAppVersion) {
    [self setLatestAppVersion:other.latestAppVersion];
  }
  if (other.hasLatestAppVersionUrl) {
    [self setLatestAppVersionUrl:other.latestAppVersionUrl];
  }
  if (other.hasAppFlag) {
    [self setAppFlag:other.appFlag];
  }
  if (other.hasGradientLaunchMessageTitle) {
    [self setGradientLaunchMessageTitle:other.gradientLaunchMessageTitle];
  }
  if (other.hasGradientLaunchMessageContent) {
    [self setGradientLaunchMessageContent:other.gradientLaunchMessageContent];
  }
  if (other.hasMd5) {
    [self setMd5:other.md5];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentAppInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentAppInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAppType:[input readString]];
        break;
      }
      case 18: {
        [self setLatestAppVersion:[input readString]];
        break;
      }
      case 26: {
        [self setLatestAppVersionUrl:[input readString]];
        break;
      }
      case 34: {
        [self setAppFlag:[input readString]];
        break;
      }
      case 42: {
        [self setGradientLaunchMessageTitle:[input readString]];
        break;
      }
      case 50: {
        [self setGradientLaunchMessageContent:[input readString]];
        break;
      }
      case 58: {
        [self setMd5:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAppType {
  return resultAppInfo.hasAppType;
}
- (NSString*) appType {
  return resultAppInfo.appType;
}
- (ContentAppInfoBuilder*) setAppType:(NSString*) value {
  resultAppInfo.hasAppType = YES;
  resultAppInfo.appType = value;
  return self;
}
- (ContentAppInfoBuilder*) clearAppType {
  resultAppInfo.hasAppType = NO;
  resultAppInfo.appType = @"";
  return self;
}
- (BOOL) hasLatestAppVersion {
  return resultAppInfo.hasLatestAppVersion;
}
- (NSString*) latestAppVersion {
  return resultAppInfo.latestAppVersion;
}
- (ContentAppInfoBuilder*) setLatestAppVersion:(NSString*) value {
  resultAppInfo.hasLatestAppVersion = YES;
  resultAppInfo.latestAppVersion = value;
  return self;
}
- (ContentAppInfoBuilder*) clearLatestAppVersion {
  resultAppInfo.hasLatestAppVersion = NO;
  resultAppInfo.latestAppVersion = @"";
  return self;
}
- (BOOL) hasLatestAppVersionUrl {
  return resultAppInfo.hasLatestAppVersionUrl;
}
- (NSString*) latestAppVersionUrl {
  return resultAppInfo.latestAppVersionUrl;
}
- (ContentAppInfoBuilder*) setLatestAppVersionUrl:(NSString*) value {
  resultAppInfo.hasLatestAppVersionUrl = YES;
  resultAppInfo.latestAppVersionUrl = value;
  return self;
}
- (ContentAppInfoBuilder*) clearLatestAppVersionUrl {
  resultAppInfo.hasLatestAppVersionUrl = NO;
  resultAppInfo.latestAppVersionUrl = @"";
  return self;
}
- (BOOL) hasAppFlag {
  return resultAppInfo.hasAppFlag;
}
- (NSString*) appFlag {
  return resultAppInfo.appFlag;
}
- (ContentAppInfoBuilder*) setAppFlag:(NSString*) value {
  resultAppInfo.hasAppFlag = YES;
  resultAppInfo.appFlag = value;
  return self;
}
- (ContentAppInfoBuilder*) clearAppFlag {
  resultAppInfo.hasAppFlag = NO;
  resultAppInfo.appFlag = @"";
  return self;
}
- (BOOL) hasGradientLaunchMessageTitle {
  return resultAppInfo.hasGradientLaunchMessageTitle;
}
- (NSString*) gradientLaunchMessageTitle {
  return resultAppInfo.gradientLaunchMessageTitle;
}
- (ContentAppInfoBuilder*) setGradientLaunchMessageTitle:(NSString*) value {
  resultAppInfo.hasGradientLaunchMessageTitle = YES;
  resultAppInfo.gradientLaunchMessageTitle = value;
  return self;
}
- (ContentAppInfoBuilder*) clearGradientLaunchMessageTitle {
  resultAppInfo.hasGradientLaunchMessageTitle = NO;
  resultAppInfo.gradientLaunchMessageTitle = @"";
  return self;
}
- (BOOL) hasGradientLaunchMessageContent {
  return resultAppInfo.hasGradientLaunchMessageContent;
}
- (NSString*) gradientLaunchMessageContent {
  return resultAppInfo.gradientLaunchMessageContent;
}
- (ContentAppInfoBuilder*) setGradientLaunchMessageContent:(NSString*) value {
  resultAppInfo.hasGradientLaunchMessageContent = YES;
  resultAppInfo.gradientLaunchMessageContent = value;
  return self;
}
- (ContentAppInfoBuilder*) clearGradientLaunchMessageContent {
  resultAppInfo.hasGradientLaunchMessageContent = NO;
  resultAppInfo.gradientLaunchMessageContent = @"";
  return self;
}
- (BOOL) hasMd5 {
  return resultAppInfo.hasMd5;
}
- (NSString*) md5 {
  return resultAppInfo.md5;
}
- (ContentAppInfoBuilder*) setMd5:(NSString*) value {
  resultAppInfo.hasMd5 = YES;
  resultAppInfo.md5 = value;
  return self;
}
- (ContentAppInfoBuilder*) clearMd5 {
  resultAppInfo.hasMd5 = NO;
  resultAppInfo.md5 = @"";
  return self;
}
@end

@interface ContentBank ()
@property (strong) NSString* pan;
@property (strong) NSString* bankId;
@property (strong) NSString* bankName;
@property (strong) NSString* cardType;
@property (strong) NSString* bindStatus;
@property (strong) NSString* phoneNo;
@property (strong) NSString* prefix;
@property (strong) NSString* isSafeCard;
@property (strong) NSString* branchBank;
@property (strong) NSString* province;
@property (strong) NSString* city;
@property (strong) NSString* bankNameId;
@property (strong) NSString* name;
@property (strong) NSString* payType;
@property (strong) NSString* memberBankAcctId;
@property (strong) NSString* displayName;
@property (strong) NSString* shortPan;
@property (strong) NSString* icon;
@property (strong) NSString* bankType;
@end

@implementation ContentBank

- (BOOL) hasPan {
  return !!hasPan_;
}
- (void) setHasPan:(BOOL) _value_ {
  hasPan_ = !!_value_;
}
@synthesize pan;
- (BOOL) hasBankId {
  return !!hasBankId_;
}
- (void) setHasBankId:(BOOL) _value_ {
  hasBankId_ = !!_value_;
}
@synthesize bankId;
- (BOOL) hasBankName {
  return !!hasBankName_;
}
- (void) setHasBankName:(BOOL) _value_ {
  hasBankName_ = !!_value_;
}
@synthesize bankName;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) _value_ {
  hasCardType_ = !!_value_;
}
@synthesize cardType;
- (BOOL) hasBindStatus {
  return !!hasBindStatus_;
}
- (void) setHasBindStatus:(BOOL) _value_ {
  hasBindStatus_ = !!_value_;
}
@synthesize bindStatus;
- (BOOL) hasPhoneNo {
  return !!hasPhoneNo_;
}
- (void) setHasPhoneNo:(BOOL) _value_ {
  hasPhoneNo_ = !!_value_;
}
@synthesize phoneNo;
- (BOOL) hasPrefix {
  return !!hasPrefix_;
}
- (void) setHasPrefix:(BOOL) _value_ {
  hasPrefix_ = !!_value_;
}
@synthesize prefix;
- (BOOL) hasIsSafeCard {
  return !!hasIsSafeCard_;
}
- (void) setHasIsSafeCard:(BOOL) _value_ {
  hasIsSafeCard_ = !!_value_;
}
@synthesize isSafeCard;
- (BOOL) hasBranchBank {
  return !!hasBranchBank_;
}
- (void) setHasBranchBank:(BOOL) _value_ {
  hasBranchBank_ = !!_value_;
}
@synthesize branchBank;
- (BOOL) hasProvince {
  return !!hasProvince_;
}
- (void) setHasProvince:(BOOL) _value_ {
  hasProvince_ = !!_value_;
}
@synthesize province;
- (BOOL) hasCity {
  return !!hasCity_;
}
- (void) setHasCity:(BOOL) _value_ {
  hasCity_ = !!_value_;
}
@synthesize city;
- (BOOL) hasBankNameId {
  return !!hasBankNameId_;
}
- (void) setHasBankNameId:(BOOL) _value_ {
  hasBankNameId_ = !!_value_;
}
@synthesize bankNameId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasPayType {
  return !!hasPayType_;
}
- (void) setHasPayType:(BOOL) _value_ {
  hasPayType_ = !!_value_;
}
@synthesize payType;
- (BOOL) hasMemberBankAcctId {
  return !!hasMemberBankAcctId_;
}
- (void) setHasMemberBankAcctId:(BOOL) _value_ {
  hasMemberBankAcctId_ = !!_value_;
}
@synthesize memberBankAcctId;
- (BOOL) hasDisplayName {
  return !!hasDisplayName_;
}
- (void) setHasDisplayName:(BOOL) _value_ {
  hasDisplayName_ = !!_value_;
}
@synthesize displayName;
- (BOOL) hasShortPan {
  return !!hasShortPan_;
}
- (void) setHasShortPan:(BOOL) _value_ {
  hasShortPan_ = !!_value_;
}
@synthesize shortPan;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) _value_ {
  hasIcon_ = !!_value_;
}
@synthesize icon;
- (BOOL) hasBankType {
  return !!hasBankType_;
}
- (void) setHasBankType:(BOOL) _value_ {
  hasBankType_ = !!_value_;
}
@synthesize bankType;
- (instancetype) init {
  if ((self = [super init])) {
    self.pan = @"";
    self.bankId = @"";
    self.bankName = @"";
    self.cardType = @"";
    self.bindStatus = @"";
    self.phoneNo = @"";
    self.prefix = @"";
    self.isSafeCard = @"";
    self.branchBank = @"";
    self.province = @"";
    self.city = @"";
    self.bankNameId = @"";
    self.name = @"";
    self.payType = @"";
    self.memberBankAcctId = @"";
    self.displayName = @"";
    self.shortPan = @"";
    self.icon = @"";
    self.bankType = @"";
  }
  return self;
}
static ContentBank* defaultContentBankInstance = nil;
+ (void) initialize {
  if (self == [ContentBank class]) {
    defaultContentBankInstance = [[ContentBank alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentBankInstance;
}
- (instancetype) defaultInstance {
  return defaultContentBankInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPan) {
    [output writeString:1 value:self.pan];
  }
  if (self.hasBankId) {
    [output writeString:2 value:self.bankId];
  }
  if (self.hasBankName) {
    [output writeString:3 value:self.bankName];
  }
  if (self.hasCardType) {
    [output writeString:4 value:self.cardType];
  }
  if (self.hasBindStatus) {
    [output writeString:5 value:self.bindStatus];
  }
  if (self.hasPhoneNo) {
    [output writeString:6 value:self.phoneNo];
  }
  if (self.hasPrefix) {
    [output writeString:7 value:self.prefix];
  }
  if (self.hasIsSafeCard) {
    [output writeString:8 value:self.isSafeCard];
  }
  if (self.hasBranchBank) {
    [output writeString:9 value:self.branchBank];
  }
  if (self.hasProvince) {
    [output writeString:10 value:self.province];
  }
  if (self.hasCity) {
    [output writeString:11 value:self.city];
  }
  if (self.hasBankNameId) {
    [output writeString:12 value:self.bankNameId];
  }
  if (self.hasName) {
    [output writeString:13 value:self.name];
  }
  if (self.hasPayType) {
    [output writeString:14 value:self.payType];
  }
  if (self.hasMemberBankAcctId) {
    [output writeString:15 value:self.memberBankAcctId];
  }
  if (self.hasDisplayName) {
    [output writeString:16 value:self.displayName];
  }
  if (self.hasShortPan) {
    [output writeString:17 value:self.shortPan];
  }
  if (self.hasIcon) {
    [output writeString:18 value:self.icon];
  }
  if (self.hasBankType) {
    [output writeString:19 value:self.bankType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPan) {
    size_ += computeStringSize(1, self.pan);
  }
  if (self.hasBankId) {
    size_ += computeStringSize(2, self.bankId);
  }
  if (self.hasBankName) {
    size_ += computeStringSize(3, self.bankName);
  }
  if (self.hasCardType) {
    size_ += computeStringSize(4, self.cardType);
  }
  if (self.hasBindStatus) {
    size_ += computeStringSize(5, self.bindStatus);
  }
  if (self.hasPhoneNo) {
    size_ += computeStringSize(6, self.phoneNo);
  }
  if (self.hasPrefix) {
    size_ += computeStringSize(7, self.prefix);
  }
  if (self.hasIsSafeCard) {
    size_ += computeStringSize(8, self.isSafeCard);
  }
  if (self.hasBranchBank) {
    size_ += computeStringSize(9, self.branchBank);
  }
  if (self.hasProvince) {
    size_ += computeStringSize(10, self.province);
  }
  if (self.hasCity) {
    size_ += computeStringSize(11, self.city);
  }
  if (self.hasBankNameId) {
    size_ += computeStringSize(12, self.bankNameId);
  }
  if (self.hasName) {
    size_ += computeStringSize(13, self.name);
  }
  if (self.hasPayType) {
    size_ += computeStringSize(14, self.payType);
  }
  if (self.hasMemberBankAcctId) {
    size_ += computeStringSize(15, self.memberBankAcctId);
  }
  if (self.hasDisplayName) {
    size_ += computeStringSize(16, self.displayName);
  }
  if (self.hasShortPan) {
    size_ += computeStringSize(17, self.shortPan);
  }
  if (self.hasIcon) {
    size_ += computeStringSize(18, self.icon);
  }
  if (self.hasBankType) {
    size_ += computeStringSize(19, self.bankType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentBank*) parseFromData:(NSData*) data {
  return (ContentBank*)[[[ContentBank builder] mergeFromData:data] build];
}
+ (ContentBank*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBank*)[[[ContentBank builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentBank*) parseFromInputStream:(NSInputStream*) input {
  return (ContentBank*)[[[ContentBank builder] mergeFromInputStream:input] build];
}
+ (ContentBank*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBank*)[[[ContentBank builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentBank*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentBank*)[[[ContentBank builder] mergeFromCodedInputStream:input] build];
}
+ (ContentBank*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBank*)[[[ContentBank builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentBankBuilder*) builder {
  return [[ContentBankBuilder alloc] init];
}
+ (ContentBankBuilder*) builderWithPrototype:(ContentBank*) prototype {
  return [[ContentBank builder] mergeFrom:prototype];
}
- (ContentBankBuilder*) builder {
  return [ContentBank builder];
}
- (ContentBankBuilder*) toBuilder {
  return [ContentBank builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pan", self.pan];
  }
  if (self.hasBankId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankId", self.bankId];
  }
  if (self.hasBankName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankName", self.bankName];
  }
  if (self.hasCardType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardType", self.cardType];
  }
  if (self.hasBindStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bindStatus", self.bindStatus];
  }
  if (self.hasPhoneNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNo", self.phoneNo];
  }
  if (self.hasPrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prefix", self.prefix];
  }
  if (self.hasIsSafeCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isSafeCard", self.isSafeCard];
  }
  if (self.hasBranchBank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"branchBank", self.branchBank];
  }
  if (self.hasProvince) {
    [output appendFormat:@"%@%@: %@\n", indent, @"province", self.province];
  }
  if (self.hasCity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"city", self.city];
  }
  if (self.hasBankNameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankNameId", self.bankNameId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasPayType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payType", self.payType];
  }
  if (self.hasMemberBankAcctId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberBankAcctId", self.memberBankAcctId];
  }
  if (self.hasDisplayName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"displayName", self.displayName];
  }
  if (self.hasShortPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shortPan", self.shortPan];
  }
  if (self.hasIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"icon", self.icon];
  }
  if (self.hasBankType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankType", self.bankType];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPan) {
    [dictionary setObject: self.pan forKey: @"pan"];
  }
  if (self.hasBankId) {
    [dictionary setObject: self.bankId forKey: @"bankId"];
  }
  if (self.hasBankName) {
    [dictionary setObject: self.bankName forKey: @"bankName"];
  }
  if (self.hasCardType) {
    [dictionary setObject: self.cardType forKey: @"cardType"];
  }
  if (self.hasBindStatus) {
    [dictionary setObject: self.bindStatus forKey: @"bindStatus"];
  }
  if (self.hasPhoneNo) {
    [dictionary setObject: self.phoneNo forKey: @"phoneNo"];
  }
  if (self.hasPrefix) {
    [dictionary setObject: self.prefix forKey: @"prefix"];
  }
  if (self.hasIsSafeCard) {
    [dictionary setObject: self.isSafeCard forKey: @"isSafeCard"];
  }
  if (self.hasBranchBank) {
    [dictionary setObject: self.branchBank forKey: @"branchBank"];
  }
  if (self.hasProvince) {
    [dictionary setObject: self.province forKey: @"province"];
  }
  if (self.hasCity) {
    [dictionary setObject: self.city forKey: @"city"];
  }
  if (self.hasBankNameId) {
    [dictionary setObject: self.bankNameId forKey: @"bankNameId"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasPayType) {
    [dictionary setObject: self.payType forKey: @"payType"];
  }
  if (self.hasMemberBankAcctId) {
    [dictionary setObject: self.memberBankAcctId forKey: @"memberBankAcctId"];
  }
  if (self.hasDisplayName) {
    [dictionary setObject: self.displayName forKey: @"displayName"];
  }
  if (self.hasShortPan) {
    [dictionary setObject: self.shortPan forKey: @"shortPan"];
  }
  if (self.hasIcon) {
    [dictionary setObject: self.icon forKey: @"icon"];
  }
  if (self.hasBankType) {
    [dictionary setObject: self.bankType forKey: @"bankType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentBank class]]) {
    return NO;
  }
  ContentBank *otherMessage = other;
  return
      self.hasPan == otherMessage.hasPan &&
      (!self.hasPan || [self.pan isEqual:otherMessage.pan]) &&
      self.hasBankId == otherMessage.hasBankId &&
      (!self.hasBankId || [self.bankId isEqual:otherMessage.bankId]) &&
      self.hasBankName == otherMessage.hasBankName &&
      (!self.hasBankName || [self.bankName isEqual:otherMessage.bankName]) &&
      self.hasCardType == otherMessage.hasCardType &&
      (!self.hasCardType || [self.cardType isEqual:otherMessage.cardType]) &&
      self.hasBindStatus == otherMessage.hasBindStatus &&
      (!self.hasBindStatus || [self.bindStatus isEqual:otherMessage.bindStatus]) &&
      self.hasPhoneNo == otherMessage.hasPhoneNo &&
      (!self.hasPhoneNo || [self.phoneNo isEqual:otherMessage.phoneNo]) &&
      self.hasPrefix == otherMessage.hasPrefix &&
      (!self.hasPrefix || [self.prefix isEqual:otherMessage.prefix]) &&
      self.hasIsSafeCard == otherMessage.hasIsSafeCard &&
      (!self.hasIsSafeCard || [self.isSafeCard isEqual:otherMessage.isSafeCard]) &&
      self.hasBranchBank == otherMessage.hasBranchBank &&
      (!self.hasBranchBank || [self.branchBank isEqual:otherMessage.branchBank]) &&
      self.hasProvince == otherMessage.hasProvince &&
      (!self.hasProvince || [self.province isEqual:otherMessage.province]) &&
      self.hasCity == otherMessage.hasCity &&
      (!self.hasCity || [self.city isEqual:otherMessage.city]) &&
      self.hasBankNameId == otherMessage.hasBankNameId &&
      (!self.hasBankNameId || [self.bankNameId isEqual:otherMessage.bankNameId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasPayType == otherMessage.hasPayType &&
      (!self.hasPayType || [self.payType isEqual:otherMessage.payType]) &&
      self.hasMemberBankAcctId == otherMessage.hasMemberBankAcctId &&
      (!self.hasMemberBankAcctId || [self.memberBankAcctId isEqual:otherMessage.memberBankAcctId]) &&
      self.hasDisplayName == otherMessage.hasDisplayName &&
      (!self.hasDisplayName || [self.displayName isEqual:otherMessage.displayName]) &&
      self.hasShortPan == otherMessage.hasShortPan &&
      (!self.hasShortPan || [self.shortPan isEqual:otherMessage.shortPan]) &&
      self.hasIcon == otherMessage.hasIcon &&
      (!self.hasIcon || [self.icon isEqual:otherMessage.icon]) &&
      self.hasBankType == otherMessage.hasBankType &&
      (!self.hasBankType || [self.bankType isEqual:otherMessage.bankType]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPan) {
    hashCode = hashCode * 31 + [self.pan hash];
  }
  if (self.hasBankId) {
    hashCode = hashCode * 31 + [self.bankId hash];
  }
  if (self.hasBankName) {
    hashCode = hashCode * 31 + [self.bankName hash];
  }
  if (self.hasCardType) {
    hashCode = hashCode * 31 + [self.cardType hash];
  }
  if (self.hasBindStatus) {
    hashCode = hashCode * 31 + [self.bindStatus hash];
  }
  if (self.hasPhoneNo) {
    hashCode = hashCode * 31 + [self.phoneNo hash];
  }
  if (self.hasPrefix) {
    hashCode = hashCode * 31 + [self.prefix hash];
  }
  if (self.hasIsSafeCard) {
    hashCode = hashCode * 31 + [self.isSafeCard hash];
  }
  if (self.hasBranchBank) {
    hashCode = hashCode * 31 + [self.branchBank hash];
  }
  if (self.hasProvince) {
    hashCode = hashCode * 31 + [self.province hash];
  }
  if (self.hasCity) {
    hashCode = hashCode * 31 + [self.city hash];
  }
  if (self.hasBankNameId) {
    hashCode = hashCode * 31 + [self.bankNameId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasPayType) {
    hashCode = hashCode * 31 + [self.payType hash];
  }
  if (self.hasMemberBankAcctId) {
    hashCode = hashCode * 31 + [self.memberBankAcctId hash];
  }
  if (self.hasDisplayName) {
    hashCode = hashCode * 31 + [self.displayName hash];
  }
  if (self.hasShortPan) {
    hashCode = hashCode * 31 + [self.shortPan hash];
  }
  if (self.hasIcon) {
    hashCode = hashCode * 31 + [self.icon hash];
  }
  if (self.hasBankType) {
    hashCode = hashCode * 31 + [self.bankType hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentBankBuilder()
@property (strong) ContentBank* resultBank;
@end

@implementation ContentBankBuilder
@synthesize resultBank;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBank = [[ContentBank alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBank;
}
- (ContentBankBuilder*) clear {
  self.resultBank = [[ContentBank alloc] init];
  return self;
}
- (ContentBankBuilder*) clone {
  return [ContentBank builderWithPrototype:resultBank];
}
- (ContentBank*) defaultInstance {
  return [ContentBank defaultInstance];
}
- (ContentBank*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentBank*) buildPartial {
  ContentBank* returnMe = resultBank;
  self.resultBank = nil;
  return returnMe;
}
- (ContentBankBuilder*) mergeFrom:(ContentBank*) other {
  if (other == [ContentBank defaultInstance]) {
    return self;
  }
  if (other.hasPan) {
    [self setPan:other.pan];
  }
  if (other.hasBankId) {
    [self setBankId:other.bankId];
  }
  if (other.hasBankName) {
    [self setBankName:other.bankName];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  if (other.hasBindStatus) {
    [self setBindStatus:other.bindStatus];
  }
  if (other.hasPhoneNo) {
    [self setPhoneNo:other.phoneNo];
  }
  if (other.hasPrefix) {
    [self setPrefix:other.prefix];
  }
  if (other.hasIsSafeCard) {
    [self setIsSafeCard:other.isSafeCard];
  }
  if (other.hasBranchBank) {
    [self setBranchBank:other.branchBank];
  }
  if (other.hasProvince) {
    [self setProvince:other.province];
  }
  if (other.hasCity) {
    [self setCity:other.city];
  }
  if (other.hasBankNameId) {
    [self setBankNameId:other.bankNameId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPayType) {
    [self setPayType:other.payType];
  }
  if (other.hasMemberBankAcctId) {
    [self setMemberBankAcctId:other.memberBankAcctId];
  }
  if (other.hasDisplayName) {
    [self setDisplayName:other.displayName];
  }
  if (other.hasShortPan) {
    [self setShortPan:other.shortPan];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  if (other.hasBankType) {
    [self setBankType:other.bankType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentBankBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentBankBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPan:[input readString]];
        break;
      }
      case 18: {
        [self setBankId:[input readString]];
        break;
      }
      case 26: {
        [self setBankName:[input readString]];
        break;
      }
      case 34: {
        [self setCardType:[input readString]];
        break;
      }
      case 42: {
        [self setBindStatus:[input readString]];
        break;
      }
      case 50: {
        [self setPhoneNo:[input readString]];
        break;
      }
      case 58: {
        [self setPrefix:[input readString]];
        break;
      }
      case 66: {
        [self setIsSafeCard:[input readString]];
        break;
      }
      case 74: {
        [self setBranchBank:[input readString]];
        break;
      }
      case 82: {
        [self setProvince:[input readString]];
        break;
      }
      case 90: {
        [self setCity:[input readString]];
        break;
      }
      case 98: {
        [self setBankNameId:[input readString]];
        break;
      }
      case 106: {
        [self setName:[input readString]];
        break;
      }
      case 114: {
        [self setPayType:[input readString]];
        break;
      }
      case 122: {
        [self setMemberBankAcctId:[input readString]];
        break;
      }
      case 130: {
        [self setDisplayName:[input readString]];
        break;
      }
      case 138: {
        [self setShortPan:[input readString]];
        break;
      }
      case 146: {
        [self setIcon:[input readString]];
        break;
      }
      case 154: {
        [self setBankType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPan {
  return resultBank.hasPan;
}
- (NSString*) pan {
  return resultBank.pan;
}
- (ContentBankBuilder*) setPan:(NSString*) value {
  resultBank.hasPan = YES;
  resultBank.pan = value;
  return self;
}
- (ContentBankBuilder*) clearPan {
  resultBank.hasPan = NO;
  resultBank.pan = @"";
  return self;
}
- (BOOL) hasBankId {
  return resultBank.hasBankId;
}
- (NSString*) bankId {
  return resultBank.bankId;
}
- (ContentBankBuilder*) setBankId:(NSString*) value {
  resultBank.hasBankId = YES;
  resultBank.bankId = value;
  return self;
}
- (ContentBankBuilder*) clearBankId {
  resultBank.hasBankId = NO;
  resultBank.bankId = @"";
  return self;
}
- (BOOL) hasBankName {
  return resultBank.hasBankName;
}
- (NSString*) bankName {
  return resultBank.bankName;
}
- (ContentBankBuilder*) setBankName:(NSString*) value {
  resultBank.hasBankName = YES;
  resultBank.bankName = value;
  return self;
}
- (ContentBankBuilder*) clearBankName {
  resultBank.hasBankName = NO;
  resultBank.bankName = @"";
  return self;
}
- (BOOL) hasCardType {
  return resultBank.hasCardType;
}
- (NSString*) cardType {
  return resultBank.cardType;
}
- (ContentBankBuilder*) setCardType:(NSString*) value {
  resultBank.hasCardType = YES;
  resultBank.cardType = value;
  return self;
}
- (ContentBankBuilder*) clearCardType {
  resultBank.hasCardType = NO;
  resultBank.cardType = @"";
  return self;
}
- (BOOL) hasBindStatus {
  return resultBank.hasBindStatus;
}
- (NSString*) bindStatus {
  return resultBank.bindStatus;
}
- (ContentBankBuilder*) setBindStatus:(NSString*) value {
  resultBank.hasBindStatus = YES;
  resultBank.bindStatus = value;
  return self;
}
- (ContentBankBuilder*) clearBindStatus {
  resultBank.hasBindStatus = NO;
  resultBank.bindStatus = @"";
  return self;
}
- (BOOL) hasPhoneNo {
  return resultBank.hasPhoneNo;
}
- (NSString*) phoneNo {
  return resultBank.phoneNo;
}
- (ContentBankBuilder*) setPhoneNo:(NSString*) value {
  resultBank.hasPhoneNo = YES;
  resultBank.phoneNo = value;
  return self;
}
- (ContentBankBuilder*) clearPhoneNo {
  resultBank.hasPhoneNo = NO;
  resultBank.phoneNo = @"";
  return self;
}
- (BOOL) hasPrefix {
  return resultBank.hasPrefix;
}
- (NSString*) prefix {
  return resultBank.prefix;
}
- (ContentBankBuilder*) setPrefix:(NSString*) value {
  resultBank.hasPrefix = YES;
  resultBank.prefix = value;
  return self;
}
- (ContentBankBuilder*) clearPrefix {
  resultBank.hasPrefix = NO;
  resultBank.prefix = @"";
  return self;
}
- (BOOL) hasIsSafeCard {
  return resultBank.hasIsSafeCard;
}
- (NSString*) isSafeCard {
  return resultBank.isSafeCard;
}
- (ContentBankBuilder*) setIsSafeCard:(NSString*) value {
  resultBank.hasIsSafeCard = YES;
  resultBank.isSafeCard = value;
  return self;
}
- (ContentBankBuilder*) clearIsSafeCard {
  resultBank.hasIsSafeCard = NO;
  resultBank.isSafeCard = @"";
  return self;
}
- (BOOL) hasBranchBank {
  return resultBank.hasBranchBank;
}
- (NSString*) branchBank {
  return resultBank.branchBank;
}
- (ContentBankBuilder*) setBranchBank:(NSString*) value {
  resultBank.hasBranchBank = YES;
  resultBank.branchBank = value;
  return self;
}
- (ContentBankBuilder*) clearBranchBank {
  resultBank.hasBranchBank = NO;
  resultBank.branchBank = @"";
  return self;
}
- (BOOL) hasProvince {
  return resultBank.hasProvince;
}
- (NSString*) province {
  return resultBank.province;
}
- (ContentBankBuilder*) setProvince:(NSString*) value {
  resultBank.hasProvince = YES;
  resultBank.province = value;
  return self;
}
- (ContentBankBuilder*) clearProvince {
  resultBank.hasProvince = NO;
  resultBank.province = @"";
  return self;
}
- (BOOL) hasCity {
  return resultBank.hasCity;
}
- (NSString*) city {
  return resultBank.city;
}
- (ContentBankBuilder*) setCity:(NSString*) value {
  resultBank.hasCity = YES;
  resultBank.city = value;
  return self;
}
- (ContentBankBuilder*) clearCity {
  resultBank.hasCity = NO;
  resultBank.city = @"";
  return self;
}
- (BOOL) hasBankNameId {
  return resultBank.hasBankNameId;
}
- (NSString*) bankNameId {
  return resultBank.bankNameId;
}
- (ContentBankBuilder*) setBankNameId:(NSString*) value {
  resultBank.hasBankNameId = YES;
  resultBank.bankNameId = value;
  return self;
}
- (ContentBankBuilder*) clearBankNameId {
  resultBank.hasBankNameId = NO;
  resultBank.bankNameId = @"";
  return self;
}
- (BOOL) hasName {
  return resultBank.hasName;
}
- (NSString*) name {
  return resultBank.name;
}
- (ContentBankBuilder*) setName:(NSString*) value {
  resultBank.hasName = YES;
  resultBank.name = value;
  return self;
}
- (ContentBankBuilder*) clearName {
  resultBank.hasName = NO;
  resultBank.name = @"";
  return self;
}
- (BOOL) hasPayType {
  return resultBank.hasPayType;
}
- (NSString*) payType {
  return resultBank.payType;
}
- (ContentBankBuilder*) setPayType:(NSString*) value {
  resultBank.hasPayType = YES;
  resultBank.payType = value;
  return self;
}
- (ContentBankBuilder*) clearPayType {
  resultBank.hasPayType = NO;
  resultBank.payType = @"";
  return self;
}
- (BOOL) hasMemberBankAcctId {
  return resultBank.hasMemberBankAcctId;
}
- (NSString*) memberBankAcctId {
  return resultBank.memberBankAcctId;
}
- (ContentBankBuilder*) setMemberBankAcctId:(NSString*) value {
  resultBank.hasMemberBankAcctId = YES;
  resultBank.memberBankAcctId = value;
  return self;
}
- (ContentBankBuilder*) clearMemberBankAcctId {
  resultBank.hasMemberBankAcctId = NO;
  resultBank.memberBankAcctId = @"";
  return self;
}
- (BOOL) hasDisplayName {
  return resultBank.hasDisplayName;
}
- (NSString*) displayName {
  return resultBank.displayName;
}
- (ContentBankBuilder*) setDisplayName:(NSString*) value {
  resultBank.hasDisplayName = YES;
  resultBank.displayName = value;
  return self;
}
- (ContentBankBuilder*) clearDisplayName {
  resultBank.hasDisplayName = NO;
  resultBank.displayName = @"";
  return self;
}
- (BOOL) hasShortPan {
  return resultBank.hasShortPan;
}
- (NSString*) shortPan {
  return resultBank.shortPan;
}
- (ContentBankBuilder*) setShortPan:(NSString*) value {
  resultBank.hasShortPan = YES;
  resultBank.shortPan = value;
  return self;
}
- (ContentBankBuilder*) clearShortPan {
  resultBank.hasShortPan = NO;
  resultBank.shortPan = @"";
  return self;
}
- (BOOL) hasIcon {
  return resultBank.hasIcon;
}
- (NSString*) icon {
  return resultBank.icon;
}
- (ContentBankBuilder*) setIcon:(NSString*) value {
  resultBank.hasIcon = YES;
  resultBank.icon = value;
  return self;
}
- (ContentBankBuilder*) clearIcon {
  resultBank.hasIcon = NO;
  resultBank.icon = @"";
  return self;
}
- (BOOL) hasBankType {
  return resultBank.hasBankType;
}
- (NSString*) bankType {
  return resultBank.bankType;
}
- (ContentBankBuilder*) setBankType:(NSString*) value {
  resultBank.hasBankType = YES;
  resultBank.bankType = value;
  return self;
}
- (ContentBankBuilder*) clearBankType {
  resultBank.hasBankType = NO;
  resultBank.bankType = @"";
  return self;
}
@end

@interface ContentMember ()
@property (strong) NSString* serviceLevelCode;
@property (strong) NSString* userMebCode;
@property (strong) NSString* memberType;
@property (strong) NSString* name;
@property (strong) NSString* identitycardid;
@property (strong) NSString* creationDate;
@property (strong) NSString* mergeConflictFlag;
@property (strong) NSString* payPwdResetFlag;
@property (strong) NSString* payPwdValidateFlag;
@property (strong) NSString* idCardValidateFlag;
@property (strong) NSMutableArray * conflictAccArray;
@property (strong) NSString* openId;
@end

@implementation ContentMember

- (BOOL) hasServiceLevelCode {
  return !!hasServiceLevelCode_;
}
- (void) setHasServiceLevelCode:(BOOL) _value_ {
  hasServiceLevelCode_ = !!_value_;
}
@synthesize serviceLevelCode;
- (BOOL) hasUserMebCode {
  return !!hasUserMebCode_;
}
- (void) setHasUserMebCode:(BOOL) _value_ {
  hasUserMebCode_ = !!_value_;
}
@synthesize userMebCode;
- (BOOL) hasMemberType {
  return !!hasMemberType_;
}
- (void) setHasMemberType:(BOOL) _value_ {
  hasMemberType_ = !!_value_;
}
@synthesize memberType;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasIdentitycardid {
  return !!hasIdentitycardid_;
}
- (void) setHasIdentitycardid:(BOOL) _value_ {
  hasIdentitycardid_ = !!_value_;
}
@synthesize identitycardid;
- (BOOL) hasCreationDate {
  return !!hasCreationDate_;
}
- (void) setHasCreationDate:(BOOL) _value_ {
  hasCreationDate_ = !!_value_;
}
@synthesize creationDate;
- (BOOL) hasMergeConflictFlag {
  return !!hasMergeConflictFlag_;
}
- (void) setHasMergeConflictFlag:(BOOL) _value_ {
  hasMergeConflictFlag_ = !!_value_;
}
@synthesize mergeConflictFlag;
- (BOOL) hasPayPwdResetFlag {
  return !!hasPayPwdResetFlag_;
}
- (void) setHasPayPwdResetFlag:(BOOL) _value_ {
  hasPayPwdResetFlag_ = !!_value_;
}
@synthesize payPwdResetFlag;
- (BOOL) hasPayPwdValidateFlag {
  return !!hasPayPwdValidateFlag_;
}
- (void) setHasPayPwdValidateFlag:(BOOL) _value_ {
  hasPayPwdValidateFlag_ = !!_value_;
}
@synthesize payPwdValidateFlag;
- (BOOL) hasIdCardValidateFlag {
  return !!hasIdCardValidateFlag_;
}
- (void) setHasIdCardValidateFlag:(BOOL) _value_ {
  hasIdCardValidateFlag_ = !!_value_;
}
@synthesize idCardValidateFlag;
@synthesize conflictAccArray;
@dynamic conflictAcc;
- (BOOL) hasOpenId {
  return !!hasOpenId_;
}
- (void) setHasOpenId:(BOOL) _value_ {
  hasOpenId_ = !!_value_;
}
@synthesize openId;
- (instancetype) init {
  if ((self = [super init])) {
    self.serviceLevelCode = @"";
    self.userMebCode = @"";
    self.memberType = @"";
    self.name = @"";
    self.identitycardid = @"";
    self.creationDate = @"";
    self.mergeConflictFlag = @"";
    self.payPwdResetFlag = @"";
    self.payPwdValidateFlag = @"";
    self.idCardValidateFlag = @"";
    self.openId = @"";
  }
  return self;
}
static ContentMember* defaultContentMemberInstance = nil;
+ (void) initialize {
  if (self == [ContentMember class]) {
    defaultContentMemberInstance = [[ContentMember alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentMemberInstance;
}
- (instancetype) defaultInstance {
  return defaultContentMemberInstance;
}
- (NSArray *)conflictAcc {
  return conflictAccArray;
}
- (ContentConflictAcc*)conflictAccAtIndex:(NSUInteger)index {
  return [conflictAccArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasServiceLevelCode) {
    [output writeString:1 value:self.serviceLevelCode];
  }
  if (self.hasUserMebCode) {
    [output writeString:2 value:self.userMebCode];
  }
  if (self.hasMemberType) {
    [output writeString:3 value:self.memberType];
  }
  if (self.hasName) {
    [output writeString:4 value:self.name];
  }
  if (self.hasIdentitycardid) {
    [output writeString:5 value:self.identitycardid];
  }
  if (self.hasCreationDate) {
    [output writeString:7 value:self.creationDate];
  }
  if (self.hasMergeConflictFlag) {
    [output writeString:8 value:self.mergeConflictFlag];
  }
  if (self.hasPayPwdResetFlag) {
    [output writeString:9 value:self.payPwdResetFlag];
  }
  if (self.hasPayPwdValidateFlag) {
    [output writeString:10 value:self.payPwdValidateFlag];
  }
  if (self.hasIdCardValidateFlag) {
    [output writeString:11 value:self.idCardValidateFlag];
  }
  [self.conflictAccArray enumerateObjectsUsingBlock:^(ContentConflictAcc *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  if (self.hasOpenId) {
    [output writeString:13 value:self.openId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasServiceLevelCode) {
    size_ += computeStringSize(1, self.serviceLevelCode);
  }
  if (self.hasUserMebCode) {
    size_ += computeStringSize(2, self.userMebCode);
  }
  if (self.hasMemberType) {
    size_ += computeStringSize(3, self.memberType);
  }
  if (self.hasName) {
    size_ += computeStringSize(4, self.name);
  }
  if (self.hasIdentitycardid) {
    size_ += computeStringSize(5, self.identitycardid);
  }
  if (self.hasCreationDate) {
    size_ += computeStringSize(7, self.creationDate);
  }
  if (self.hasMergeConflictFlag) {
    size_ += computeStringSize(8, self.mergeConflictFlag);
  }
  if (self.hasPayPwdResetFlag) {
    size_ += computeStringSize(9, self.payPwdResetFlag);
  }
  if (self.hasPayPwdValidateFlag) {
    size_ += computeStringSize(10, self.payPwdValidateFlag);
  }
  if (self.hasIdCardValidateFlag) {
    size_ += computeStringSize(11, self.idCardValidateFlag);
  }
  [self.conflictAccArray enumerateObjectsUsingBlock:^(ContentConflictAcc *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  if (self.hasOpenId) {
    size_ += computeStringSize(13, self.openId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentMember*) parseFromData:(NSData*) data {
  return (ContentMember*)[[[ContentMember builder] mergeFromData:data] build];
}
+ (ContentMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMember*)[[[ContentMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentMember*) parseFromInputStream:(NSInputStream*) input {
  return (ContentMember*)[[[ContentMember builder] mergeFromInputStream:input] build];
}
+ (ContentMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMember*)[[[ContentMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentMember*)[[[ContentMember builder] mergeFromCodedInputStream:input] build];
}
+ (ContentMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMember*)[[[ContentMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberBuilder*) builder {
  return [[ContentMemberBuilder alloc] init];
}
+ (ContentMemberBuilder*) builderWithPrototype:(ContentMember*) prototype {
  return [[ContentMember builder] mergeFrom:prototype];
}
- (ContentMemberBuilder*) builder {
  return [ContentMember builder];
}
- (ContentMemberBuilder*) toBuilder {
  return [ContentMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasServiceLevelCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serviceLevelCode", self.serviceLevelCode];
  }
  if (self.hasUserMebCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMebCode", self.userMebCode];
  }
  if (self.hasMemberType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberType", self.memberType];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasIdentitycardid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"identitycardid", self.identitycardid];
  }
  if (self.hasCreationDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"creationDate", self.creationDate];
  }
  if (self.hasMergeConflictFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mergeConflictFlag", self.mergeConflictFlag];
  }
  if (self.hasPayPwdResetFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payPwdResetFlag", self.payPwdResetFlag];
  }
  if (self.hasPayPwdValidateFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payPwdValidateFlag", self.payPwdValidateFlag];
  }
  if (self.hasIdCardValidateFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idCardValidateFlag", self.idCardValidateFlag];
  }
  [self.conflictAccArray enumerateObjectsUsingBlock:^(ContentConflictAcc *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"conflictAcc"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOpenId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openId", self.openId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasServiceLevelCode) {
    [dictionary setObject: self.serviceLevelCode forKey: @"serviceLevelCode"];
  }
  if (self.hasUserMebCode) {
    [dictionary setObject: self.userMebCode forKey: @"userMebCode"];
  }
  if (self.hasMemberType) {
    [dictionary setObject: self.memberType forKey: @"memberType"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasIdentitycardid) {
    [dictionary setObject: self.identitycardid forKey: @"identitycardid"];
  }
  if (self.hasCreationDate) {
    [dictionary setObject: self.creationDate forKey: @"creationDate"];
  }
  if (self.hasMergeConflictFlag) {
    [dictionary setObject: self.mergeConflictFlag forKey: @"mergeConflictFlag"];
  }
  if (self.hasPayPwdResetFlag) {
    [dictionary setObject: self.payPwdResetFlag forKey: @"payPwdResetFlag"];
  }
  if (self.hasPayPwdValidateFlag) {
    [dictionary setObject: self.payPwdValidateFlag forKey: @"payPwdValidateFlag"];
  }
  if (self.hasIdCardValidateFlag) {
    [dictionary setObject: self.idCardValidateFlag forKey: @"idCardValidateFlag"];
  }
  for (ContentConflictAcc* element in self.conflictAccArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"conflictAcc"];
  }
  if (self.hasOpenId) {
    [dictionary setObject: self.openId forKey: @"openId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentMember class]]) {
    return NO;
  }
  ContentMember *otherMessage = other;
  return
      self.hasServiceLevelCode == otherMessage.hasServiceLevelCode &&
      (!self.hasServiceLevelCode || [self.serviceLevelCode isEqual:otherMessage.serviceLevelCode]) &&
      self.hasUserMebCode == otherMessage.hasUserMebCode &&
      (!self.hasUserMebCode || [self.userMebCode isEqual:otherMessage.userMebCode]) &&
      self.hasMemberType == otherMessage.hasMemberType &&
      (!self.hasMemberType || [self.memberType isEqual:otherMessage.memberType]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasIdentitycardid == otherMessage.hasIdentitycardid &&
      (!self.hasIdentitycardid || [self.identitycardid isEqual:otherMessage.identitycardid]) &&
      self.hasCreationDate == otherMessage.hasCreationDate &&
      (!self.hasCreationDate || [self.creationDate isEqual:otherMessage.creationDate]) &&
      self.hasMergeConflictFlag == otherMessage.hasMergeConflictFlag &&
      (!self.hasMergeConflictFlag || [self.mergeConflictFlag isEqual:otherMessage.mergeConflictFlag]) &&
      self.hasPayPwdResetFlag == otherMessage.hasPayPwdResetFlag &&
      (!self.hasPayPwdResetFlag || [self.payPwdResetFlag isEqual:otherMessage.payPwdResetFlag]) &&
      self.hasPayPwdValidateFlag == otherMessage.hasPayPwdValidateFlag &&
      (!self.hasPayPwdValidateFlag || [self.payPwdValidateFlag isEqual:otherMessage.payPwdValidateFlag]) &&
      self.hasIdCardValidateFlag == otherMessage.hasIdCardValidateFlag &&
      (!self.hasIdCardValidateFlag || [self.idCardValidateFlag isEqual:otherMessage.idCardValidateFlag]) &&
      [self.conflictAccArray isEqualToArray:otherMessage.conflictAccArray] &&
      self.hasOpenId == otherMessage.hasOpenId &&
      (!self.hasOpenId || [self.openId isEqual:otherMessage.openId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasServiceLevelCode) {
    hashCode = hashCode * 31 + [self.serviceLevelCode hash];
  }
  if (self.hasUserMebCode) {
    hashCode = hashCode * 31 + [self.userMebCode hash];
  }
  if (self.hasMemberType) {
    hashCode = hashCode * 31 + [self.memberType hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasIdentitycardid) {
    hashCode = hashCode * 31 + [self.identitycardid hash];
  }
  if (self.hasCreationDate) {
    hashCode = hashCode * 31 + [self.creationDate hash];
  }
  if (self.hasMergeConflictFlag) {
    hashCode = hashCode * 31 + [self.mergeConflictFlag hash];
  }
  if (self.hasPayPwdResetFlag) {
    hashCode = hashCode * 31 + [self.payPwdResetFlag hash];
  }
  if (self.hasPayPwdValidateFlag) {
    hashCode = hashCode * 31 + [self.payPwdValidateFlag hash];
  }
  if (self.hasIdCardValidateFlag) {
    hashCode = hashCode * 31 + [self.idCardValidateFlag hash];
  }
  [self.conflictAccArray enumerateObjectsUsingBlock:^(ContentConflictAcc *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOpenId) {
    hashCode = hashCode * 31 + [self.openId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentMemberBuilder()
@property (strong) ContentMember* resultMember;
@end

@implementation ContentMemberBuilder
@synthesize resultMember;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMember = [[ContentMember alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMember;
}
- (ContentMemberBuilder*) clear {
  self.resultMember = [[ContentMember alloc] init];
  return self;
}
- (ContentMemberBuilder*) clone {
  return [ContentMember builderWithPrototype:resultMember];
}
- (ContentMember*) defaultInstance {
  return [ContentMember defaultInstance];
}
- (ContentMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentMember*) buildPartial {
  ContentMember* returnMe = resultMember;
  self.resultMember = nil;
  return returnMe;
}
- (ContentMemberBuilder*) mergeFrom:(ContentMember*) other {
  if (other == [ContentMember defaultInstance]) {
    return self;
  }
  if (other.hasServiceLevelCode) {
    [self setServiceLevelCode:other.serviceLevelCode];
  }
  if (other.hasUserMebCode) {
    [self setUserMebCode:other.userMebCode];
  }
  if (other.hasMemberType) {
    [self setMemberType:other.memberType];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasIdentitycardid) {
    [self setIdentitycardid:other.identitycardid];
  }
  if (other.hasCreationDate) {
    [self setCreationDate:other.creationDate];
  }
  if (other.hasMergeConflictFlag) {
    [self setMergeConflictFlag:other.mergeConflictFlag];
  }
  if (other.hasPayPwdResetFlag) {
    [self setPayPwdResetFlag:other.payPwdResetFlag];
  }
  if (other.hasPayPwdValidateFlag) {
    [self setPayPwdValidateFlag:other.payPwdValidateFlag];
  }
  if (other.hasIdCardValidateFlag) {
    [self setIdCardValidateFlag:other.idCardValidateFlag];
  }
  if (other.conflictAccArray.count > 0) {
    if (resultMember.conflictAccArray == nil) {
      resultMember.conflictAccArray = [[NSMutableArray alloc] initWithArray:other.conflictAccArray];
    } else {
      [resultMember.conflictAccArray addObjectsFromArray:other.conflictAccArray];
    }
  }
  if (other.hasOpenId) {
    [self setOpenId:other.openId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentMemberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentMemberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setServiceLevelCode:[input readString]];
        break;
      }
      case 18: {
        [self setUserMebCode:[input readString]];
        break;
      }
      case 26: {
        [self setMemberType:[input readString]];
        break;
      }
      case 34: {
        [self setName:[input readString]];
        break;
      }
      case 42: {
        [self setIdentitycardid:[input readString]];
        break;
      }
      case 58: {
        [self setCreationDate:[input readString]];
        break;
      }
      case 66: {
        [self setMergeConflictFlag:[input readString]];
        break;
      }
      case 74: {
        [self setPayPwdResetFlag:[input readString]];
        break;
      }
      case 82: {
        [self setPayPwdValidateFlag:[input readString]];
        break;
      }
      case 90: {
        [self setIdCardValidateFlag:[input readString]];
        break;
      }
      case 98: {
        ContentConflictAccBuilder* subBuilder = [ContentConflictAcc builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConflictAcc:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        [self setOpenId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasServiceLevelCode {
  return resultMember.hasServiceLevelCode;
}
- (NSString*) serviceLevelCode {
  return resultMember.serviceLevelCode;
}
- (ContentMemberBuilder*) setServiceLevelCode:(NSString*) value {
  resultMember.hasServiceLevelCode = YES;
  resultMember.serviceLevelCode = value;
  return self;
}
- (ContentMemberBuilder*) clearServiceLevelCode {
  resultMember.hasServiceLevelCode = NO;
  resultMember.serviceLevelCode = @"";
  return self;
}
- (BOOL) hasUserMebCode {
  return resultMember.hasUserMebCode;
}
- (NSString*) userMebCode {
  return resultMember.userMebCode;
}
- (ContentMemberBuilder*) setUserMebCode:(NSString*) value {
  resultMember.hasUserMebCode = YES;
  resultMember.userMebCode = value;
  return self;
}
- (ContentMemberBuilder*) clearUserMebCode {
  resultMember.hasUserMebCode = NO;
  resultMember.userMebCode = @"";
  return self;
}
- (BOOL) hasMemberType {
  return resultMember.hasMemberType;
}
- (NSString*) memberType {
  return resultMember.memberType;
}
- (ContentMemberBuilder*) setMemberType:(NSString*) value {
  resultMember.hasMemberType = YES;
  resultMember.memberType = value;
  return self;
}
- (ContentMemberBuilder*) clearMemberType {
  resultMember.hasMemberType = NO;
  resultMember.memberType = @"";
  return self;
}
- (BOOL) hasName {
  return resultMember.hasName;
}
- (NSString*) name {
  return resultMember.name;
}
- (ContentMemberBuilder*) setName:(NSString*) value {
  resultMember.hasName = YES;
  resultMember.name = value;
  return self;
}
- (ContentMemberBuilder*) clearName {
  resultMember.hasName = NO;
  resultMember.name = @"";
  return self;
}
- (BOOL) hasIdentitycardid {
  return resultMember.hasIdentitycardid;
}
- (NSString*) identitycardid {
  return resultMember.identitycardid;
}
- (ContentMemberBuilder*) setIdentitycardid:(NSString*) value {
  resultMember.hasIdentitycardid = YES;
  resultMember.identitycardid = value;
  return self;
}
- (ContentMemberBuilder*) clearIdentitycardid {
  resultMember.hasIdentitycardid = NO;
  resultMember.identitycardid = @"";
  return self;
}
- (BOOL) hasCreationDate {
  return resultMember.hasCreationDate;
}
- (NSString*) creationDate {
  return resultMember.creationDate;
}
- (ContentMemberBuilder*) setCreationDate:(NSString*) value {
  resultMember.hasCreationDate = YES;
  resultMember.creationDate = value;
  return self;
}
- (ContentMemberBuilder*) clearCreationDate {
  resultMember.hasCreationDate = NO;
  resultMember.creationDate = @"";
  return self;
}
- (BOOL) hasMergeConflictFlag {
  return resultMember.hasMergeConflictFlag;
}
- (NSString*) mergeConflictFlag {
  return resultMember.mergeConflictFlag;
}
- (ContentMemberBuilder*) setMergeConflictFlag:(NSString*) value {
  resultMember.hasMergeConflictFlag = YES;
  resultMember.mergeConflictFlag = value;
  return self;
}
- (ContentMemberBuilder*) clearMergeConflictFlag {
  resultMember.hasMergeConflictFlag = NO;
  resultMember.mergeConflictFlag = @"";
  return self;
}
- (BOOL) hasPayPwdResetFlag {
  return resultMember.hasPayPwdResetFlag;
}
- (NSString*) payPwdResetFlag {
  return resultMember.payPwdResetFlag;
}
- (ContentMemberBuilder*) setPayPwdResetFlag:(NSString*) value {
  resultMember.hasPayPwdResetFlag = YES;
  resultMember.payPwdResetFlag = value;
  return self;
}
- (ContentMemberBuilder*) clearPayPwdResetFlag {
  resultMember.hasPayPwdResetFlag = NO;
  resultMember.payPwdResetFlag = @"";
  return self;
}
- (BOOL) hasPayPwdValidateFlag {
  return resultMember.hasPayPwdValidateFlag;
}
- (NSString*) payPwdValidateFlag {
  return resultMember.payPwdValidateFlag;
}
- (ContentMemberBuilder*) setPayPwdValidateFlag:(NSString*) value {
  resultMember.hasPayPwdValidateFlag = YES;
  resultMember.payPwdValidateFlag = value;
  return self;
}
- (ContentMemberBuilder*) clearPayPwdValidateFlag {
  resultMember.hasPayPwdValidateFlag = NO;
  resultMember.payPwdValidateFlag = @"";
  return self;
}
- (BOOL) hasIdCardValidateFlag {
  return resultMember.hasIdCardValidateFlag;
}
- (NSString*) idCardValidateFlag {
  return resultMember.idCardValidateFlag;
}
- (ContentMemberBuilder*) setIdCardValidateFlag:(NSString*) value {
  resultMember.hasIdCardValidateFlag = YES;
  resultMember.idCardValidateFlag = value;
  return self;
}
- (ContentMemberBuilder*) clearIdCardValidateFlag {
  resultMember.hasIdCardValidateFlag = NO;
  resultMember.idCardValidateFlag = @"";
  return self;
}
- (NSMutableArray *)conflictAcc {
  return resultMember.conflictAccArray;
}
- (ContentConflictAcc*)conflictAccAtIndex:(NSUInteger)index {
  return [resultMember conflictAccAtIndex:index];
}
- (ContentMemberBuilder *)addConflictAcc:(ContentConflictAcc*)value {
  if (resultMember.conflictAccArray == nil) {
    resultMember.conflictAccArray = [[NSMutableArray alloc]init];
  }
  [resultMember.conflictAccArray addObject:value];
  return self;
}
- (ContentMemberBuilder *)setConflictAccArray:(NSArray *)array {
  resultMember.conflictAccArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentMemberBuilder *)clearConflictAcc {
  resultMember.conflictAccArray = nil;
  return self;
}
- (BOOL) hasOpenId {
  return resultMember.hasOpenId;
}
- (NSString*) openId {
  return resultMember.openId;
}
- (ContentMemberBuilder*) setOpenId:(NSString*) value {
  resultMember.hasOpenId = YES;
  resultMember.openId = value;
  return self;
}
- (ContentMemberBuilder*) clearOpenId {
  resultMember.hasOpenId = NO;
  resultMember.openId = @"";
  return self;
}
@end

@interface ContentMemberTwo ()
@property (strong) NSString* userMebCode;
@property (strong) NSString* name;
@property (strong) NSString* realNameFlag;
@property (strong) NSString* memberType;
@property (strong) NSString* userFlag;
@property (strong) NSString* phoneNo;
@property (strong) NSString* userName;
@property (strong) NSString* openId;
@end

@implementation ContentMemberTwo

- (BOOL) hasUserMebCode {
  return !!hasUserMebCode_;
}
- (void) setHasUserMebCode:(BOOL) _value_ {
  hasUserMebCode_ = !!_value_;
}
@synthesize userMebCode;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasRealNameFlag {
  return !!hasRealNameFlag_;
}
- (void) setHasRealNameFlag:(BOOL) _value_ {
  hasRealNameFlag_ = !!_value_;
}
@synthesize realNameFlag;
- (BOOL) hasMemberType {
  return !!hasMemberType_;
}
- (void) setHasMemberType:(BOOL) _value_ {
  hasMemberType_ = !!_value_;
}
@synthesize memberType;
- (BOOL) hasUserFlag {
  return !!hasUserFlag_;
}
- (void) setHasUserFlag:(BOOL) _value_ {
  hasUserFlag_ = !!_value_;
}
@synthesize userFlag;
- (BOOL) hasPhoneNo {
  return !!hasPhoneNo_;
}
- (void) setHasPhoneNo:(BOOL) _value_ {
  hasPhoneNo_ = !!_value_;
}
@synthesize phoneNo;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasOpenId {
  return !!hasOpenId_;
}
- (void) setHasOpenId:(BOOL) _value_ {
  hasOpenId_ = !!_value_;
}
@synthesize openId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userMebCode = @"";
    self.name = @"";
    self.realNameFlag = @"";
    self.memberType = @"";
    self.userFlag = @"";
    self.phoneNo = @"";
    self.userName = @"";
    self.openId = @"";
  }
  return self;
}
static ContentMemberTwo* defaultContentMemberTwoInstance = nil;
+ (void) initialize {
  if (self == [ContentMemberTwo class]) {
    defaultContentMemberTwoInstance = [[ContentMemberTwo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentMemberTwoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentMemberTwoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMebCode) {
    [output writeString:1 value:self.userMebCode];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasRealNameFlag) {
    [output writeString:3 value:self.realNameFlag];
  }
  if (self.hasMemberType) {
    [output writeString:4 value:self.memberType];
  }
  if (self.hasUserFlag) {
    [output writeString:5 value:self.userFlag];
  }
  if (self.hasPhoneNo) {
    [output writeString:6 value:self.phoneNo];
  }
  if (self.hasUserName) {
    [output writeString:7 value:self.userName];
  }
  if (self.hasOpenId) {
    [output writeString:8 value:self.openId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserMebCode) {
    size_ += computeStringSize(1, self.userMebCode);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasRealNameFlag) {
    size_ += computeStringSize(3, self.realNameFlag);
  }
  if (self.hasMemberType) {
    size_ += computeStringSize(4, self.memberType);
  }
  if (self.hasUserFlag) {
    size_ += computeStringSize(5, self.userFlag);
  }
  if (self.hasPhoneNo) {
    size_ += computeStringSize(6, self.phoneNo);
  }
  if (self.hasUserName) {
    size_ += computeStringSize(7, self.userName);
  }
  if (self.hasOpenId) {
    size_ += computeStringSize(8, self.openId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentMemberTwo*) parseFromData:(NSData*) data {
  return (ContentMemberTwo*)[[[ContentMemberTwo builder] mergeFromData:data] build];
}
+ (ContentMemberTwo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberTwo*)[[[ContentMemberTwo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberTwo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentMemberTwo*)[[[ContentMemberTwo builder] mergeFromInputStream:input] build];
}
+ (ContentMemberTwo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberTwo*)[[[ContentMemberTwo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberTwo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentMemberTwo*)[[[ContentMemberTwo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentMemberTwo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberTwo*)[[[ContentMemberTwo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberTwoBuilder*) builder {
  return [[ContentMemberTwoBuilder alloc] init];
}
+ (ContentMemberTwoBuilder*) builderWithPrototype:(ContentMemberTwo*) prototype {
  return [[ContentMemberTwo builder] mergeFrom:prototype];
}
- (ContentMemberTwoBuilder*) builder {
  return [ContentMemberTwo builder];
}
- (ContentMemberTwoBuilder*) toBuilder {
  return [ContentMemberTwo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserMebCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMebCode", self.userMebCode];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasRealNameFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"realNameFlag", self.realNameFlag];
  }
  if (self.hasMemberType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberType", self.memberType];
  }
  if (self.hasUserFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userFlag", self.userFlag];
  }
  if (self.hasPhoneNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNo", self.phoneNo];
  }
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasOpenId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openId", self.openId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserMebCode) {
    [dictionary setObject: self.userMebCode forKey: @"userMebCode"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasRealNameFlag) {
    [dictionary setObject: self.realNameFlag forKey: @"realNameFlag"];
  }
  if (self.hasMemberType) {
    [dictionary setObject: self.memberType forKey: @"memberType"];
  }
  if (self.hasUserFlag) {
    [dictionary setObject: self.userFlag forKey: @"userFlag"];
  }
  if (self.hasPhoneNo) {
    [dictionary setObject: self.phoneNo forKey: @"phoneNo"];
  }
  if (self.hasUserName) {
    [dictionary setObject: self.userName forKey: @"userName"];
  }
  if (self.hasOpenId) {
    [dictionary setObject: self.openId forKey: @"openId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentMemberTwo class]]) {
    return NO;
  }
  ContentMemberTwo *otherMessage = other;
  return
      self.hasUserMebCode == otherMessage.hasUserMebCode &&
      (!self.hasUserMebCode || [self.userMebCode isEqual:otherMessage.userMebCode]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasRealNameFlag == otherMessage.hasRealNameFlag &&
      (!self.hasRealNameFlag || [self.realNameFlag isEqual:otherMessage.realNameFlag]) &&
      self.hasMemberType == otherMessage.hasMemberType &&
      (!self.hasMemberType || [self.memberType isEqual:otherMessage.memberType]) &&
      self.hasUserFlag == otherMessage.hasUserFlag &&
      (!self.hasUserFlag || [self.userFlag isEqual:otherMessage.userFlag]) &&
      self.hasPhoneNo == otherMessage.hasPhoneNo &&
      (!self.hasPhoneNo || [self.phoneNo isEqual:otherMessage.phoneNo]) &&
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasOpenId == otherMessage.hasOpenId &&
      (!self.hasOpenId || [self.openId isEqual:otherMessage.openId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserMebCode) {
    hashCode = hashCode * 31 + [self.userMebCode hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasRealNameFlag) {
    hashCode = hashCode * 31 + [self.realNameFlag hash];
  }
  if (self.hasMemberType) {
    hashCode = hashCode * 31 + [self.memberType hash];
  }
  if (self.hasUserFlag) {
    hashCode = hashCode * 31 + [self.userFlag hash];
  }
  if (self.hasPhoneNo) {
    hashCode = hashCode * 31 + [self.phoneNo hash];
  }
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasOpenId) {
    hashCode = hashCode * 31 + [self.openId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentMemberTwoBuilder()
@property (strong) ContentMemberTwo* resultMemberTwo;
@end

@implementation ContentMemberTwoBuilder
@synthesize resultMemberTwo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMemberTwo = [[ContentMemberTwo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMemberTwo;
}
- (ContentMemberTwoBuilder*) clear {
  self.resultMemberTwo = [[ContentMemberTwo alloc] init];
  return self;
}
- (ContentMemberTwoBuilder*) clone {
  return [ContentMemberTwo builderWithPrototype:resultMemberTwo];
}
- (ContentMemberTwo*) defaultInstance {
  return [ContentMemberTwo defaultInstance];
}
- (ContentMemberTwo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentMemberTwo*) buildPartial {
  ContentMemberTwo* returnMe = resultMemberTwo;
  self.resultMemberTwo = nil;
  return returnMe;
}
- (ContentMemberTwoBuilder*) mergeFrom:(ContentMemberTwo*) other {
  if (other == [ContentMemberTwo defaultInstance]) {
    return self;
  }
  if (other.hasUserMebCode) {
    [self setUserMebCode:other.userMebCode];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasRealNameFlag) {
    [self setRealNameFlag:other.realNameFlag];
  }
  if (other.hasMemberType) {
    [self setMemberType:other.memberType];
  }
  if (other.hasUserFlag) {
    [self setUserFlag:other.userFlag];
  }
  if (other.hasPhoneNo) {
    [self setPhoneNo:other.phoneNo];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasOpenId) {
    [self setOpenId:other.openId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentMemberTwoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentMemberTwoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserMebCode:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setRealNameFlag:[input readString]];
        break;
      }
      case 34: {
        [self setMemberType:[input readString]];
        break;
      }
      case 42: {
        [self setUserFlag:[input readString]];
        break;
      }
      case 50: {
        [self setPhoneNo:[input readString]];
        break;
      }
      case 58: {
        [self setUserName:[input readString]];
        break;
      }
      case 66: {
        [self setOpenId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMebCode {
  return resultMemberTwo.hasUserMebCode;
}
- (NSString*) userMebCode {
  return resultMemberTwo.userMebCode;
}
- (ContentMemberTwoBuilder*) setUserMebCode:(NSString*) value {
  resultMemberTwo.hasUserMebCode = YES;
  resultMemberTwo.userMebCode = value;
  return self;
}
- (ContentMemberTwoBuilder*) clearUserMebCode {
  resultMemberTwo.hasUserMebCode = NO;
  resultMemberTwo.userMebCode = @"";
  return self;
}
- (BOOL) hasName {
  return resultMemberTwo.hasName;
}
- (NSString*) name {
  return resultMemberTwo.name;
}
- (ContentMemberTwoBuilder*) setName:(NSString*) value {
  resultMemberTwo.hasName = YES;
  resultMemberTwo.name = value;
  return self;
}
- (ContentMemberTwoBuilder*) clearName {
  resultMemberTwo.hasName = NO;
  resultMemberTwo.name = @"";
  return self;
}
- (BOOL) hasRealNameFlag {
  return resultMemberTwo.hasRealNameFlag;
}
- (NSString*) realNameFlag {
  return resultMemberTwo.realNameFlag;
}
- (ContentMemberTwoBuilder*) setRealNameFlag:(NSString*) value {
  resultMemberTwo.hasRealNameFlag = YES;
  resultMemberTwo.realNameFlag = value;
  return self;
}
- (ContentMemberTwoBuilder*) clearRealNameFlag {
  resultMemberTwo.hasRealNameFlag = NO;
  resultMemberTwo.realNameFlag = @"";
  return self;
}
- (BOOL) hasMemberType {
  return resultMemberTwo.hasMemberType;
}
- (NSString*) memberType {
  return resultMemberTwo.memberType;
}
- (ContentMemberTwoBuilder*) setMemberType:(NSString*) value {
  resultMemberTwo.hasMemberType = YES;
  resultMemberTwo.memberType = value;
  return self;
}
- (ContentMemberTwoBuilder*) clearMemberType {
  resultMemberTwo.hasMemberType = NO;
  resultMemberTwo.memberType = @"";
  return self;
}
- (BOOL) hasUserFlag {
  return resultMemberTwo.hasUserFlag;
}
- (NSString*) userFlag {
  return resultMemberTwo.userFlag;
}
- (ContentMemberTwoBuilder*) setUserFlag:(NSString*) value {
  resultMemberTwo.hasUserFlag = YES;
  resultMemberTwo.userFlag = value;
  return self;
}
- (ContentMemberTwoBuilder*) clearUserFlag {
  resultMemberTwo.hasUserFlag = NO;
  resultMemberTwo.userFlag = @"";
  return self;
}
- (BOOL) hasPhoneNo {
  return resultMemberTwo.hasPhoneNo;
}
- (NSString*) phoneNo {
  return resultMemberTwo.phoneNo;
}
- (ContentMemberTwoBuilder*) setPhoneNo:(NSString*) value {
  resultMemberTwo.hasPhoneNo = YES;
  resultMemberTwo.phoneNo = value;
  return self;
}
- (ContentMemberTwoBuilder*) clearPhoneNo {
  resultMemberTwo.hasPhoneNo = NO;
  resultMemberTwo.phoneNo = @"";
  return self;
}
- (BOOL) hasUserName {
  return resultMemberTwo.hasUserName;
}
- (NSString*) userName {
  return resultMemberTwo.userName;
}
- (ContentMemberTwoBuilder*) setUserName:(NSString*) value {
  resultMemberTwo.hasUserName = YES;
  resultMemberTwo.userName = value;
  return self;
}
- (ContentMemberTwoBuilder*) clearUserName {
  resultMemberTwo.hasUserName = NO;
  resultMemberTwo.userName = @"";
  return self;
}
- (BOOL) hasOpenId {
  return resultMemberTwo.hasOpenId;
}
- (NSString*) openId {
  return resultMemberTwo.openId;
}
- (ContentMemberTwoBuilder*) setOpenId:(NSString*) value {
  resultMemberTwo.hasOpenId = YES;
  resultMemberTwo.openId = value;
  return self;
}
- (ContentMemberTwoBuilder*) clearOpenId {
  resultMemberTwo.hasOpenId = NO;
  resultMemberTwo.openId = @"";
  return self;
}
@end

@interface ContentMemberIdentity ()
@property (strong) NSString* idType;
@property (strong) NSString* idContent;
@property (strong) NSString* status;
@end

@implementation ContentMemberIdentity

- (BOOL) hasIdType {
  return !!hasIdType_;
}
- (void) setHasIdType:(BOOL) _value_ {
  hasIdType_ = !!_value_;
}
@synthesize idType;
- (BOOL) hasIdContent {
  return !!hasIdContent_;
}
- (void) setHasIdContent:(BOOL) _value_ {
  hasIdContent_ = !!_value_;
}
@synthesize idContent;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.idType = @"";
    self.idContent = @"";
    self.status = @"";
  }
  return self;
}
static ContentMemberIdentity* defaultContentMemberIdentityInstance = nil;
+ (void) initialize {
  if (self == [ContentMemberIdentity class]) {
    defaultContentMemberIdentityInstance = [[ContentMemberIdentity alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentMemberIdentityInstance;
}
- (instancetype) defaultInstance {
  return defaultContentMemberIdentityInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIdType) {
    [output writeString:1 value:self.idType];
  }
  if (self.hasIdContent) {
    [output writeString:2 value:self.idContent];
  }
  if (self.hasStatus) {
    [output writeString:3 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIdType) {
    size_ += computeStringSize(1, self.idType);
  }
  if (self.hasIdContent) {
    size_ += computeStringSize(2, self.idContent);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(3, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentMemberIdentity*) parseFromData:(NSData*) data {
  return (ContentMemberIdentity*)[[[ContentMemberIdentity builder] mergeFromData:data] build];
}
+ (ContentMemberIdentity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberIdentity*)[[[ContentMemberIdentity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberIdentity*) parseFromInputStream:(NSInputStream*) input {
  return (ContentMemberIdentity*)[[[ContentMemberIdentity builder] mergeFromInputStream:input] build];
}
+ (ContentMemberIdentity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberIdentity*)[[[ContentMemberIdentity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberIdentity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentMemberIdentity*)[[[ContentMemberIdentity builder] mergeFromCodedInputStream:input] build];
}
+ (ContentMemberIdentity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberIdentity*)[[[ContentMemberIdentity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberIdentityBuilder*) builder {
  return [[ContentMemberIdentityBuilder alloc] init];
}
+ (ContentMemberIdentityBuilder*) builderWithPrototype:(ContentMemberIdentity*) prototype {
  return [[ContentMemberIdentity builder] mergeFrom:prototype];
}
- (ContentMemberIdentityBuilder*) builder {
  return [ContentMemberIdentity builder];
}
- (ContentMemberIdentityBuilder*) toBuilder {
  return [ContentMemberIdentity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIdType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idType", self.idType];
  }
  if (self.hasIdContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idContent", self.idContent];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIdType) {
    [dictionary setObject: self.idType forKey: @"idType"];
  }
  if (self.hasIdContent) {
    [dictionary setObject: self.idContent forKey: @"idContent"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentMemberIdentity class]]) {
    return NO;
  }
  ContentMemberIdentity *otherMessage = other;
  return
      self.hasIdType == otherMessage.hasIdType &&
      (!self.hasIdType || [self.idType isEqual:otherMessage.idType]) &&
      self.hasIdContent == otherMessage.hasIdContent &&
      (!self.hasIdContent || [self.idContent isEqual:otherMessage.idContent]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIdType) {
    hashCode = hashCode * 31 + [self.idType hash];
  }
  if (self.hasIdContent) {
    hashCode = hashCode * 31 + [self.idContent hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentMemberIdentityBuilder()
@property (strong) ContentMemberIdentity* resultMemberIdentity;
@end

@implementation ContentMemberIdentityBuilder
@synthesize resultMemberIdentity;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMemberIdentity = [[ContentMemberIdentity alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMemberIdentity;
}
- (ContentMemberIdentityBuilder*) clear {
  self.resultMemberIdentity = [[ContentMemberIdentity alloc] init];
  return self;
}
- (ContentMemberIdentityBuilder*) clone {
  return [ContentMemberIdentity builderWithPrototype:resultMemberIdentity];
}
- (ContentMemberIdentity*) defaultInstance {
  return [ContentMemberIdentity defaultInstance];
}
- (ContentMemberIdentity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentMemberIdentity*) buildPartial {
  ContentMemberIdentity* returnMe = resultMemberIdentity;
  self.resultMemberIdentity = nil;
  return returnMe;
}
- (ContentMemberIdentityBuilder*) mergeFrom:(ContentMemberIdentity*) other {
  if (other == [ContentMemberIdentity defaultInstance]) {
    return self;
  }
  if (other.hasIdType) {
    [self setIdType:other.idType];
  }
  if (other.hasIdContent) {
    [self setIdContent:other.idContent];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentMemberIdentityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentMemberIdentityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIdType:[input readString]];
        break;
      }
      case 18: {
        [self setIdContent:[input readString]];
        break;
      }
      case 26: {
        [self setStatus:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIdType {
  return resultMemberIdentity.hasIdType;
}
- (NSString*) idType {
  return resultMemberIdentity.idType;
}
- (ContentMemberIdentityBuilder*) setIdType:(NSString*) value {
  resultMemberIdentity.hasIdType = YES;
  resultMemberIdentity.idType = value;
  return self;
}
- (ContentMemberIdentityBuilder*) clearIdType {
  resultMemberIdentity.hasIdType = NO;
  resultMemberIdentity.idType = @"";
  return self;
}
- (BOOL) hasIdContent {
  return resultMemberIdentity.hasIdContent;
}
- (NSString*) idContent {
  return resultMemberIdentity.idContent;
}
- (ContentMemberIdentityBuilder*) setIdContent:(NSString*) value {
  resultMemberIdentity.hasIdContent = YES;
  resultMemberIdentity.idContent = value;
  return self;
}
- (ContentMemberIdentityBuilder*) clearIdContent {
  resultMemberIdentity.hasIdContent = NO;
  resultMemberIdentity.idContent = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultMemberIdentity.hasStatus;
}
- (NSString*) status {
  return resultMemberIdentity.status;
}
- (ContentMemberIdentityBuilder*) setStatus:(NSString*) value {
  resultMemberIdentity.hasStatus = YES;
  resultMemberIdentity.status = value;
  return self;
}
- (ContentMemberIdentityBuilder*) clearStatus {
  resultMemberIdentity.hasStatus = NO;
  resultMemberIdentity.status = @"";
  return self;
}
@end

@interface ContentQueryAllFinaprodResponse ()
@property (strong) NSString* businessType;
@property (strong) NSString* time;
@property (strong) NSString* balance;
@property (strong) NSString* status;
@property (strong) NSString* showStatus;
@property (strong) NSString* finishedTime;
@property (strong) NSString* acctNum;
@property (strong) NSString* depositBank;
@property (strong) NSString* acctHeaded;
@end

@implementation ContentQueryAllFinaprodResponse

- (BOOL) hasBusinessType {
  return !!hasBusinessType_;
}
- (void) setHasBusinessType:(BOOL) _value_ {
  hasBusinessType_ = !!_value_;
}
@synthesize businessType;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasBalance {
  return !!hasBalance_;
}
- (void) setHasBalance:(BOOL) _value_ {
  hasBalance_ = !!_value_;
}
@synthesize balance;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasShowStatus {
  return !!hasShowStatus_;
}
- (void) setHasShowStatus:(BOOL) _value_ {
  hasShowStatus_ = !!_value_;
}
@synthesize showStatus;
- (BOOL) hasFinishedTime {
  return !!hasFinishedTime_;
}
- (void) setHasFinishedTime:(BOOL) _value_ {
  hasFinishedTime_ = !!_value_;
}
@synthesize finishedTime;
- (BOOL) hasAcctNum {
  return !!hasAcctNum_;
}
- (void) setHasAcctNum:(BOOL) _value_ {
  hasAcctNum_ = !!_value_;
}
@synthesize acctNum;
- (BOOL) hasDepositBank {
  return !!hasDepositBank_;
}
- (void) setHasDepositBank:(BOOL) _value_ {
  hasDepositBank_ = !!_value_;
}
@synthesize depositBank;
- (BOOL) hasAcctHeaded {
  return !!hasAcctHeaded_;
}
- (void) setHasAcctHeaded:(BOOL) _value_ {
  hasAcctHeaded_ = !!_value_;
}
@synthesize acctHeaded;
- (instancetype) init {
  if ((self = [super init])) {
    self.businessType = @"";
    self.time = @"";
    self.balance = @"";
    self.status = @"";
    self.showStatus = @"";
    self.finishedTime = @"";
    self.acctNum = @"";
    self.depositBank = @"";
    self.acctHeaded = @"";
  }
  return self;
}
static ContentQueryAllFinaprodResponse* defaultContentQueryAllFinaprodResponseInstance = nil;
+ (void) initialize {
  if (self == [ContentQueryAllFinaprodResponse class]) {
    defaultContentQueryAllFinaprodResponseInstance = [[ContentQueryAllFinaprodResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentQueryAllFinaprodResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultContentQueryAllFinaprodResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBusinessType) {
    [output writeString:1 value:self.businessType];
  }
  if (self.hasTime) {
    [output writeString:2 value:self.time];
  }
  if (self.hasBalance) {
    [output writeString:3 value:self.balance];
  }
  if (self.hasStatus) {
    [output writeString:4 value:self.status];
  }
  if (self.hasShowStatus) {
    [output writeString:5 value:self.showStatus];
  }
  if (self.hasFinishedTime) {
    [output writeString:6 value:self.finishedTime];
  }
  if (self.hasAcctNum) {
    [output writeString:7 value:self.acctNum];
  }
  if (self.hasDepositBank) {
    [output writeString:8 value:self.depositBank];
  }
  if (self.hasAcctHeaded) {
    [output writeString:9 value:self.acctHeaded];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBusinessType) {
    size_ += computeStringSize(1, self.businessType);
  }
  if (self.hasTime) {
    size_ += computeStringSize(2, self.time);
  }
  if (self.hasBalance) {
    size_ += computeStringSize(3, self.balance);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(4, self.status);
  }
  if (self.hasShowStatus) {
    size_ += computeStringSize(5, self.showStatus);
  }
  if (self.hasFinishedTime) {
    size_ += computeStringSize(6, self.finishedTime);
  }
  if (self.hasAcctNum) {
    size_ += computeStringSize(7, self.acctNum);
  }
  if (self.hasDepositBank) {
    size_ += computeStringSize(8, self.depositBank);
  }
  if (self.hasAcctHeaded) {
    size_ += computeStringSize(9, self.acctHeaded);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentQueryAllFinaprodResponse*) parseFromData:(NSData*) data {
  return (ContentQueryAllFinaprodResponse*)[[[ContentQueryAllFinaprodResponse builder] mergeFromData:data] build];
}
+ (ContentQueryAllFinaprodResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentQueryAllFinaprodResponse*)[[[ContentQueryAllFinaprodResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentQueryAllFinaprodResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ContentQueryAllFinaprodResponse*)[[[ContentQueryAllFinaprodResponse builder] mergeFromInputStream:input] build];
}
+ (ContentQueryAllFinaprodResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentQueryAllFinaprodResponse*)[[[ContentQueryAllFinaprodResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentQueryAllFinaprodResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentQueryAllFinaprodResponse*)[[[ContentQueryAllFinaprodResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ContentQueryAllFinaprodResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentQueryAllFinaprodResponse*)[[[ContentQueryAllFinaprodResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentQueryAllFinaprodResponseBuilder*) builder {
  return [[ContentQueryAllFinaprodResponseBuilder alloc] init];
}
+ (ContentQueryAllFinaprodResponseBuilder*) builderWithPrototype:(ContentQueryAllFinaprodResponse*) prototype {
  return [[ContentQueryAllFinaprodResponse builder] mergeFrom:prototype];
}
- (ContentQueryAllFinaprodResponseBuilder*) builder {
  return [ContentQueryAllFinaprodResponse builder];
}
- (ContentQueryAllFinaprodResponseBuilder*) toBuilder {
  return [ContentQueryAllFinaprodResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBusinessType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"businessType", self.businessType];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", self.time];
  }
  if (self.hasBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"balance", self.balance];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasShowStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showStatus", self.showStatus];
  }
  if (self.hasFinishedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finishedTime", self.finishedTime];
  }
  if (self.hasAcctNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acctNum", self.acctNum];
  }
  if (self.hasDepositBank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"depositBank", self.depositBank];
  }
  if (self.hasAcctHeaded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acctHeaded", self.acctHeaded];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBusinessType) {
    [dictionary setObject: self.businessType forKey: @"businessType"];
  }
  if (self.hasTime) {
    [dictionary setObject: self.time forKey: @"time"];
  }
  if (self.hasBalance) {
    [dictionary setObject: self.balance forKey: @"balance"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  if (self.hasShowStatus) {
    [dictionary setObject: self.showStatus forKey: @"showStatus"];
  }
  if (self.hasFinishedTime) {
    [dictionary setObject: self.finishedTime forKey: @"finishedTime"];
  }
  if (self.hasAcctNum) {
    [dictionary setObject: self.acctNum forKey: @"acctNum"];
  }
  if (self.hasDepositBank) {
    [dictionary setObject: self.depositBank forKey: @"depositBank"];
  }
  if (self.hasAcctHeaded) {
    [dictionary setObject: self.acctHeaded forKey: @"acctHeaded"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentQueryAllFinaprodResponse class]]) {
    return NO;
  }
  ContentQueryAllFinaprodResponse *otherMessage = other;
  return
      self.hasBusinessType == otherMessage.hasBusinessType &&
      (!self.hasBusinessType || [self.businessType isEqual:otherMessage.businessType]) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || [self.time isEqual:otherMessage.time]) &&
      self.hasBalance == otherMessage.hasBalance &&
      (!self.hasBalance || [self.balance isEqual:otherMessage.balance]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasShowStatus == otherMessage.hasShowStatus &&
      (!self.hasShowStatus || [self.showStatus isEqual:otherMessage.showStatus]) &&
      self.hasFinishedTime == otherMessage.hasFinishedTime &&
      (!self.hasFinishedTime || [self.finishedTime isEqual:otherMessage.finishedTime]) &&
      self.hasAcctNum == otherMessage.hasAcctNum &&
      (!self.hasAcctNum || [self.acctNum isEqual:otherMessage.acctNum]) &&
      self.hasDepositBank == otherMessage.hasDepositBank &&
      (!self.hasDepositBank || [self.depositBank isEqual:otherMessage.depositBank]) &&
      self.hasAcctHeaded == otherMessage.hasAcctHeaded &&
      (!self.hasAcctHeaded || [self.acctHeaded isEqual:otherMessage.acctHeaded]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBusinessType) {
    hashCode = hashCode * 31 + [self.businessType hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [self.time hash];
  }
  if (self.hasBalance) {
    hashCode = hashCode * 31 + [self.balance hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasShowStatus) {
    hashCode = hashCode * 31 + [self.showStatus hash];
  }
  if (self.hasFinishedTime) {
    hashCode = hashCode * 31 + [self.finishedTime hash];
  }
  if (self.hasAcctNum) {
    hashCode = hashCode * 31 + [self.acctNum hash];
  }
  if (self.hasDepositBank) {
    hashCode = hashCode * 31 + [self.depositBank hash];
  }
  if (self.hasAcctHeaded) {
    hashCode = hashCode * 31 + [self.acctHeaded hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentQueryAllFinaprodResponseBuilder()
@property (strong) ContentQueryAllFinaprodResponse* resultQueryAllFinaprodResponse;
@end

@implementation ContentQueryAllFinaprodResponseBuilder
@synthesize resultQueryAllFinaprodResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQueryAllFinaprodResponse = [[ContentQueryAllFinaprodResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQueryAllFinaprodResponse;
}
- (ContentQueryAllFinaprodResponseBuilder*) clear {
  self.resultQueryAllFinaprodResponse = [[ContentQueryAllFinaprodResponse alloc] init];
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clone {
  return [ContentQueryAllFinaprodResponse builderWithPrototype:resultQueryAllFinaprodResponse];
}
- (ContentQueryAllFinaprodResponse*) defaultInstance {
  return [ContentQueryAllFinaprodResponse defaultInstance];
}
- (ContentQueryAllFinaprodResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentQueryAllFinaprodResponse*) buildPartial {
  ContentQueryAllFinaprodResponse* returnMe = resultQueryAllFinaprodResponse;
  self.resultQueryAllFinaprodResponse = nil;
  return returnMe;
}
- (ContentQueryAllFinaprodResponseBuilder*) mergeFrom:(ContentQueryAllFinaprodResponse*) other {
  if (other == [ContentQueryAllFinaprodResponse defaultInstance]) {
    return self;
  }
  if (other.hasBusinessType) {
    [self setBusinessType:other.businessType];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasBalance) {
    [self setBalance:other.balance];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasShowStatus) {
    [self setShowStatus:other.showStatus];
  }
  if (other.hasFinishedTime) {
    [self setFinishedTime:other.finishedTime];
  }
  if (other.hasAcctNum) {
    [self setAcctNum:other.acctNum];
  }
  if (other.hasDepositBank) {
    [self setDepositBank:other.depositBank];
  }
  if (other.hasAcctHeaded) {
    [self setAcctHeaded:other.acctHeaded];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentQueryAllFinaprodResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBusinessType:[input readString]];
        break;
      }
      case 18: {
        [self setTime:[input readString]];
        break;
      }
      case 26: {
        [self setBalance:[input readString]];
        break;
      }
      case 34: {
        [self setStatus:[input readString]];
        break;
      }
      case 42: {
        [self setShowStatus:[input readString]];
        break;
      }
      case 50: {
        [self setFinishedTime:[input readString]];
        break;
      }
      case 58: {
        [self setAcctNum:[input readString]];
        break;
      }
      case 66: {
        [self setDepositBank:[input readString]];
        break;
      }
      case 74: {
        [self setAcctHeaded:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBusinessType {
  return resultQueryAllFinaprodResponse.hasBusinessType;
}
- (NSString*) businessType {
  return resultQueryAllFinaprodResponse.businessType;
}
- (ContentQueryAllFinaprodResponseBuilder*) setBusinessType:(NSString*) value {
  resultQueryAllFinaprodResponse.hasBusinessType = YES;
  resultQueryAllFinaprodResponse.businessType = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearBusinessType {
  resultQueryAllFinaprodResponse.hasBusinessType = NO;
  resultQueryAllFinaprodResponse.businessType = @"";
  return self;
}
- (BOOL) hasTime {
  return resultQueryAllFinaprodResponse.hasTime;
}
- (NSString*) time {
  return resultQueryAllFinaprodResponse.time;
}
- (ContentQueryAllFinaprodResponseBuilder*) setTime:(NSString*) value {
  resultQueryAllFinaprodResponse.hasTime = YES;
  resultQueryAllFinaprodResponse.time = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearTime {
  resultQueryAllFinaprodResponse.hasTime = NO;
  resultQueryAllFinaprodResponse.time = @"";
  return self;
}
- (BOOL) hasBalance {
  return resultQueryAllFinaprodResponse.hasBalance;
}
- (NSString*) balance {
  return resultQueryAllFinaprodResponse.balance;
}
- (ContentQueryAllFinaprodResponseBuilder*) setBalance:(NSString*) value {
  resultQueryAllFinaprodResponse.hasBalance = YES;
  resultQueryAllFinaprodResponse.balance = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearBalance {
  resultQueryAllFinaprodResponse.hasBalance = NO;
  resultQueryAllFinaprodResponse.balance = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultQueryAllFinaprodResponse.hasStatus;
}
- (NSString*) status {
  return resultQueryAllFinaprodResponse.status;
}
- (ContentQueryAllFinaprodResponseBuilder*) setStatus:(NSString*) value {
  resultQueryAllFinaprodResponse.hasStatus = YES;
  resultQueryAllFinaprodResponse.status = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearStatus {
  resultQueryAllFinaprodResponse.hasStatus = NO;
  resultQueryAllFinaprodResponse.status = @"";
  return self;
}
- (BOOL) hasShowStatus {
  return resultQueryAllFinaprodResponse.hasShowStatus;
}
- (NSString*) showStatus {
  return resultQueryAllFinaprodResponse.showStatus;
}
- (ContentQueryAllFinaprodResponseBuilder*) setShowStatus:(NSString*) value {
  resultQueryAllFinaprodResponse.hasShowStatus = YES;
  resultQueryAllFinaprodResponse.showStatus = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearShowStatus {
  resultQueryAllFinaprodResponse.hasShowStatus = NO;
  resultQueryAllFinaprodResponse.showStatus = @"";
  return self;
}
- (BOOL) hasFinishedTime {
  return resultQueryAllFinaprodResponse.hasFinishedTime;
}
- (NSString*) finishedTime {
  return resultQueryAllFinaprodResponse.finishedTime;
}
- (ContentQueryAllFinaprodResponseBuilder*) setFinishedTime:(NSString*) value {
  resultQueryAllFinaprodResponse.hasFinishedTime = YES;
  resultQueryAllFinaprodResponse.finishedTime = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearFinishedTime {
  resultQueryAllFinaprodResponse.hasFinishedTime = NO;
  resultQueryAllFinaprodResponse.finishedTime = @"";
  return self;
}
- (BOOL) hasAcctNum {
  return resultQueryAllFinaprodResponse.hasAcctNum;
}
- (NSString*) acctNum {
  return resultQueryAllFinaprodResponse.acctNum;
}
- (ContentQueryAllFinaprodResponseBuilder*) setAcctNum:(NSString*) value {
  resultQueryAllFinaprodResponse.hasAcctNum = YES;
  resultQueryAllFinaprodResponse.acctNum = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearAcctNum {
  resultQueryAllFinaprodResponse.hasAcctNum = NO;
  resultQueryAllFinaprodResponse.acctNum = @"";
  return self;
}
- (BOOL) hasDepositBank {
  return resultQueryAllFinaprodResponse.hasDepositBank;
}
- (NSString*) depositBank {
  return resultQueryAllFinaprodResponse.depositBank;
}
- (ContentQueryAllFinaprodResponseBuilder*) setDepositBank:(NSString*) value {
  resultQueryAllFinaprodResponse.hasDepositBank = YES;
  resultQueryAllFinaprodResponse.depositBank = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearDepositBank {
  resultQueryAllFinaprodResponse.hasDepositBank = NO;
  resultQueryAllFinaprodResponse.depositBank = @"";
  return self;
}
- (BOOL) hasAcctHeaded {
  return resultQueryAllFinaprodResponse.hasAcctHeaded;
}
- (NSString*) acctHeaded {
  return resultQueryAllFinaprodResponse.acctHeaded;
}
- (ContentQueryAllFinaprodResponseBuilder*) setAcctHeaded:(NSString*) value {
  resultQueryAllFinaprodResponse.hasAcctHeaded = YES;
  resultQueryAllFinaprodResponse.acctHeaded = value;
  return self;
}
- (ContentQueryAllFinaprodResponseBuilder*) clearAcctHeaded {
  resultQueryAllFinaprodResponse.hasAcctHeaded = NO;
  resultQueryAllFinaprodResponse.acctHeaded = @"";
  return self;
}
@end

@interface ContentQueryWalletBill99BillResponse ()
@property (strong) NSString* payerAcctCode;
@property (strong) NSString* memo;
@property (strong) NSString* orderCode;
@property (strong) NSString* statusName;
@property (strong) NSString* lastUpdateTime;
@property (strong) NSString* payeeAcctCode;
@property (strong) NSString* orderTime;
@property (strong) NSString* orderStatus;
@property (strong) NSString* orderAmount;
@property (strong) NSString* sequenceId;
@property (strong) NSString* crDrName;
@property (strong) NSString* payTypeName;
@end

@implementation ContentQueryWalletBill99BillResponse

- (BOOL) hasPayerAcctCode {
  return !!hasPayerAcctCode_;
}
- (void) setHasPayerAcctCode:(BOOL) _value_ {
  hasPayerAcctCode_ = !!_value_;
}
@synthesize payerAcctCode;
- (BOOL) hasMemo {
  return !!hasMemo_;
}
- (void) setHasMemo:(BOOL) _value_ {
  hasMemo_ = !!_value_;
}
@synthesize memo;
- (BOOL) hasOrderCode {
  return !!hasOrderCode_;
}
- (void) setHasOrderCode:(BOOL) _value_ {
  hasOrderCode_ = !!_value_;
}
@synthesize orderCode;
- (BOOL) hasStatusName {
  return !!hasStatusName_;
}
- (void) setHasStatusName:(BOOL) _value_ {
  hasStatusName_ = !!_value_;
}
@synthesize statusName;
- (BOOL) hasLastUpdateTime {
  return !!hasLastUpdateTime_;
}
- (void) setHasLastUpdateTime:(BOOL) _value_ {
  hasLastUpdateTime_ = !!_value_;
}
@synthesize lastUpdateTime;
- (BOOL) hasPayeeAcctCode {
  return !!hasPayeeAcctCode_;
}
- (void) setHasPayeeAcctCode:(BOOL) _value_ {
  hasPayeeAcctCode_ = !!_value_;
}
@synthesize payeeAcctCode;
- (BOOL) hasOrderTime {
  return !!hasOrderTime_;
}
- (void) setHasOrderTime:(BOOL) _value_ {
  hasOrderTime_ = !!_value_;
}
@synthesize orderTime;
- (BOOL) hasOrderStatus {
  return !!hasOrderStatus_;
}
- (void) setHasOrderStatus:(BOOL) _value_ {
  hasOrderStatus_ = !!_value_;
}
@synthesize orderStatus;
- (BOOL) hasOrderAmount {
  return !!hasOrderAmount_;
}
- (void) setHasOrderAmount:(BOOL) _value_ {
  hasOrderAmount_ = !!_value_;
}
@synthesize orderAmount;
- (BOOL) hasSequenceId {
  return !!hasSequenceId_;
}
- (void) setHasSequenceId:(BOOL) _value_ {
  hasSequenceId_ = !!_value_;
}
@synthesize sequenceId;
- (BOOL) hasCrDrName {
  return !!hasCrDrName_;
}
- (void) setHasCrDrName:(BOOL) _value_ {
  hasCrDrName_ = !!_value_;
}
@synthesize crDrName;
- (BOOL) hasPayTypeName {
  return !!hasPayTypeName_;
}
- (void) setHasPayTypeName:(BOOL) _value_ {
  hasPayTypeName_ = !!_value_;
}
@synthesize payTypeName;
- (instancetype) init {
  if ((self = [super init])) {
    self.payerAcctCode = @"";
    self.memo = @"";
    self.orderCode = @"";
    self.statusName = @"";
    self.lastUpdateTime = @"";
    self.payeeAcctCode = @"";
    self.orderTime = @"";
    self.orderStatus = @"";
    self.orderAmount = @"";
    self.sequenceId = @"";
    self.crDrName = @"";
    self.payTypeName = @"";
  }
  return self;
}
static ContentQueryWalletBill99BillResponse* defaultContentQueryWalletBill99BillResponseInstance = nil;
+ (void) initialize {
  if (self == [ContentQueryWalletBill99BillResponse class]) {
    defaultContentQueryWalletBill99BillResponseInstance = [[ContentQueryWalletBill99BillResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentQueryWalletBill99BillResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultContentQueryWalletBill99BillResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPayerAcctCode) {
    [output writeString:1 value:self.payerAcctCode];
  }
  if (self.hasMemo) {
    [output writeString:2 value:self.memo];
  }
  if (self.hasOrderCode) {
    [output writeString:3 value:self.orderCode];
  }
  if (self.hasStatusName) {
    [output writeString:4 value:self.statusName];
  }
  if (self.hasLastUpdateTime) {
    [output writeString:5 value:self.lastUpdateTime];
  }
  if (self.hasPayeeAcctCode) {
    [output writeString:6 value:self.payeeAcctCode];
  }
  if (self.hasOrderTime) {
    [output writeString:7 value:self.orderTime];
  }
  if (self.hasOrderStatus) {
    [output writeString:8 value:self.orderStatus];
  }
  if (self.hasOrderAmount) {
    [output writeString:9 value:self.orderAmount];
  }
  if (self.hasSequenceId) {
    [output writeString:10 value:self.sequenceId];
  }
  if (self.hasCrDrName) {
    [output writeString:11 value:self.crDrName];
  }
  if (self.hasPayTypeName) {
    [output writeString:12 value:self.payTypeName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPayerAcctCode) {
    size_ += computeStringSize(1, self.payerAcctCode);
  }
  if (self.hasMemo) {
    size_ += computeStringSize(2, self.memo);
  }
  if (self.hasOrderCode) {
    size_ += computeStringSize(3, self.orderCode);
  }
  if (self.hasStatusName) {
    size_ += computeStringSize(4, self.statusName);
  }
  if (self.hasLastUpdateTime) {
    size_ += computeStringSize(5, self.lastUpdateTime);
  }
  if (self.hasPayeeAcctCode) {
    size_ += computeStringSize(6, self.payeeAcctCode);
  }
  if (self.hasOrderTime) {
    size_ += computeStringSize(7, self.orderTime);
  }
  if (self.hasOrderStatus) {
    size_ += computeStringSize(8, self.orderStatus);
  }
  if (self.hasOrderAmount) {
    size_ += computeStringSize(9, self.orderAmount);
  }
  if (self.hasSequenceId) {
    size_ += computeStringSize(10, self.sequenceId);
  }
  if (self.hasCrDrName) {
    size_ += computeStringSize(11, self.crDrName);
  }
  if (self.hasPayTypeName) {
    size_ += computeStringSize(12, self.payTypeName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentQueryWalletBill99BillResponse*) parseFromData:(NSData*) data {
  return (ContentQueryWalletBill99BillResponse*)[[[ContentQueryWalletBill99BillResponse builder] mergeFromData:data] build];
}
+ (ContentQueryWalletBill99BillResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentQueryWalletBill99BillResponse*)[[[ContentQueryWalletBill99BillResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentQueryWalletBill99BillResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ContentQueryWalletBill99BillResponse*)[[[ContentQueryWalletBill99BillResponse builder] mergeFromInputStream:input] build];
}
+ (ContentQueryWalletBill99BillResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentQueryWalletBill99BillResponse*)[[[ContentQueryWalletBill99BillResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentQueryWalletBill99BillResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentQueryWalletBill99BillResponse*)[[[ContentQueryWalletBill99BillResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ContentQueryWalletBill99BillResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentQueryWalletBill99BillResponse*)[[[ContentQueryWalletBill99BillResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentQueryWalletBill99BillResponseBuilder*) builder {
  return [[ContentQueryWalletBill99BillResponseBuilder alloc] init];
}
+ (ContentQueryWalletBill99BillResponseBuilder*) builderWithPrototype:(ContentQueryWalletBill99BillResponse*) prototype {
  return [[ContentQueryWalletBill99BillResponse builder] mergeFrom:prototype];
}
- (ContentQueryWalletBill99BillResponseBuilder*) builder {
  return [ContentQueryWalletBill99BillResponse builder];
}
- (ContentQueryWalletBill99BillResponseBuilder*) toBuilder {
  return [ContentQueryWalletBill99BillResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPayerAcctCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payerAcctCode", self.payerAcctCode];
  }
  if (self.hasMemo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memo", self.memo];
  }
  if (self.hasOrderCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderCode", self.orderCode];
  }
  if (self.hasStatusName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusName", self.statusName];
  }
  if (self.hasLastUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastUpdateTime", self.lastUpdateTime];
  }
  if (self.hasPayeeAcctCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payeeAcctCode", self.payeeAcctCode];
  }
  if (self.hasOrderTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderTime", self.orderTime];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderStatus", self.orderStatus];
  }
  if (self.hasOrderAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderAmount", self.orderAmount];
  }
  if (self.hasSequenceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceId", self.sequenceId];
  }
  if (self.hasCrDrName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"crDrName", self.crDrName];
  }
  if (self.hasPayTypeName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payTypeName", self.payTypeName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPayerAcctCode) {
    [dictionary setObject: self.payerAcctCode forKey: @"payerAcctCode"];
  }
  if (self.hasMemo) {
    [dictionary setObject: self.memo forKey: @"memo"];
  }
  if (self.hasOrderCode) {
    [dictionary setObject: self.orderCode forKey: @"orderCode"];
  }
  if (self.hasStatusName) {
    [dictionary setObject: self.statusName forKey: @"statusName"];
  }
  if (self.hasLastUpdateTime) {
    [dictionary setObject: self.lastUpdateTime forKey: @"lastUpdateTime"];
  }
  if (self.hasPayeeAcctCode) {
    [dictionary setObject: self.payeeAcctCode forKey: @"payeeAcctCode"];
  }
  if (self.hasOrderTime) {
    [dictionary setObject: self.orderTime forKey: @"orderTime"];
  }
  if (self.hasOrderStatus) {
    [dictionary setObject: self.orderStatus forKey: @"orderStatus"];
  }
  if (self.hasOrderAmount) {
    [dictionary setObject: self.orderAmount forKey: @"orderAmount"];
  }
  if (self.hasSequenceId) {
    [dictionary setObject: self.sequenceId forKey: @"sequenceId"];
  }
  if (self.hasCrDrName) {
    [dictionary setObject: self.crDrName forKey: @"crDrName"];
  }
  if (self.hasPayTypeName) {
    [dictionary setObject: self.payTypeName forKey: @"payTypeName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentQueryWalletBill99BillResponse class]]) {
    return NO;
  }
  ContentQueryWalletBill99BillResponse *otherMessage = other;
  return
      self.hasPayerAcctCode == otherMessage.hasPayerAcctCode &&
      (!self.hasPayerAcctCode || [self.payerAcctCode isEqual:otherMessage.payerAcctCode]) &&
      self.hasMemo == otherMessage.hasMemo &&
      (!self.hasMemo || [self.memo isEqual:otherMessage.memo]) &&
      self.hasOrderCode == otherMessage.hasOrderCode &&
      (!self.hasOrderCode || [self.orderCode isEqual:otherMessage.orderCode]) &&
      self.hasStatusName == otherMessage.hasStatusName &&
      (!self.hasStatusName || [self.statusName isEqual:otherMessage.statusName]) &&
      self.hasLastUpdateTime == otherMessage.hasLastUpdateTime &&
      (!self.hasLastUpdateTime || [self.lastUpdateTime isEqual:otherMessage.lastUpdateTime]) &&
      self.hasPayeeAcctCode == otherMessage.hasPayeeAcctCode &&
      (!self.hasPayeeAcctCode || [self.payeeAcctCode isEqual:otherMessage.payeeAcctCode]) &&
      self.hasOrderTime == otherMessage.hasOrderTime &&
      (!self.hasOrderTime || [self.orderTime isEqual:otherMessage.orderTime]) &&
      self.hasOrderStatus == otherMessage.hasOrderStatus &&
      (!self.hasOrderStatus || [self.orderStatus isEqual:otherMessage.orderStatus]) &&
      self.hasOrderAmount == otherMessage.hasOrderAmount &&
      (!self.hasOrderAmount || [self.orderAmount isEqual:otherMessage.orderAmount]) &&
      self.hasSequenceId == otherMessage.hasSequenceId &&
      (!self.hasSequenceId || [self.sequenceId isEqual:otherMessage.sequenceId]) &&
      self.hasCrDrName == otherMessage.hasCrDrName &&
      (!self.hasCrDrName || [self.crDrName isEqual:otherMessage.crDrName]) &&
      self.hasPayTypeName == otherMessage.hasPayTypeName &&
      (!self.hasPayTypeName || [self.payTypeName isEqual:otherMessage.payTypeName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPayerAcctCode) {
    hashCode = hashCode * 31 + [self.payerAcctCode hash];
  }
  if (self.hasMemo) {
    hashCode = hashCode * 31 + [self.memo hash];
  }
  if (self.hasOrderCode) {
    hashCode = hashCode * 31 + [self.orderCode hash];
  }
  if (self.hasStatusName) {
    hashCode = hashCode * 31 + [self.statusName hash];
  }
  if (self.hasLastUpdateTime) {
    hashCode = hashCode * 31 + [self.lastUpdateTime hash];
  }
  if (self.hasPayeeAcctCode) {
    hashCode = hashCode * 31 + [self.payeeAcctCode hash];
  }
  if (self.hasOrderTime) {
    hashCode = hashCode * 31 + [self.orderTime hash];
  }
  if (self.hasOrderStatus) {
    hashCode = hashCode * 31 + [self.orderStatus hash];
  }
  if (self.hasOrderAmount) {
    hashCode = hashCode * 31 + [self.orderAmount hash];
  }
  if (self.hasSequenceId) {
    hashCode = hashCode * 31 + [self.sequenceId hash];
  }
  if (self.hasCrDrName) {
    hashCode = hashCode * 31 + [self.crDrName hash];
  }
  if (self.hasPayTypeName) {
    hashCode = hashCode * 31 + [self.payTypeName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentQueryWalletBill99BillResponseBuilder()
@property (strong) ContentQueryWalletBill99BillResponse* resultQueryWalletBill99BillResponse;
@end

@implementation ContentQueryWalletBill99BillResponseBuilder
@synthesize resultQueryWalletBill99BillResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQueryWalletBill99BillResponse = [[ContentQueryWalletBill99BillResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQueryWalletBill99BillResponse;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clear {
  self.resultQueryWalletBill99BillResponse = [[ContentQueryWalletBill99BillResponse alloc] init];
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clone {
  return [ContentQueryWalletBill99BillResponse builderWithPrototype:resultQueryWalletBill99BillResponse];
}
- (ContentQueryWalletBill99BillResponse*) defaultInstance {
  return [ContentQueryWalletBill99BillResponse defaultInstance];
}
- (ContentQueryWalletBill99BillResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentQueryWalletBill99BillResponse*) buildPartial {
  ContentQueryWalletBill99BillResponse* returnMe = resultQueryWalletBill99BillResponse;
  self.resultQueryWalletBill99BillResponse = nil;
  return returnMe;
}
- (ContentQueryWalletBill99BillResponseBuilder*) mergeFrom:(ContentQueryWalletBill99BillResponse*) other {
  if (other == [ContentQueryWalletBill99BillResponse defaultInstance]) {
    return self;
  }
  if (other.hasPayerAcctCode) {
    [self setPayerAcctCode:other.payerAcctCode];
  }
  if (other.hasMemo) {
    [self setMemo:other.memo];
  }
  if (other.hasOrderCode) {
    [self setOrderCode:other.orderCode];
  }
  if (other.hasStatusName) {
    [self setStatusName:other.statusName];
  }
  if (other.hasLastUpdateTime) {
    [self setLastUpdateTime:other.lastUpdateTime];
  }
  if (other.hasPayeeAcctCode) {
    [self setPayeeAcctCode:other.payeeAcctCode];
  }
  if (other.hasOrderTime) {
    [self setOrderTime:other.orderTime];
  }
  if (other.hasOrderStatus) {
    [self setOrderStatus:other.orderStatus];
  }
  if (other.hasOrderAmount) {
    [self setOrderAmount:other.orderAmount];
  }
  if (other.hasSequenceId) {
    [self setSequenceId:other.sequenceId];
  }
  if (other.hasCrDrName) {
    [self setCrDrName:other.crDrName];
  }
  if (other.hasPayTypeName) {
    [self setPayTypeName:other.payTypeName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentQueryWalletBill99BillResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPayerAcctCode:[input readString]];
        break;
      }
      case 18: {
        [self setMemo:[input readString]];
        break;
      }
      case 26: {
        [self setOrderCode:[input readString]];
        break;
      }
      case 34: {
        [self setStatusName:[input readString]];
        break;
      }
      case 42: {
        [self setLastUpdateTime:[input readString]];
        break;
      }
      case 50: {
        [self setPayeeAcctCode:[input readString]];
        break;
      }
      case 58: {
        [self setOrderTime:[input readString]];
        break;
      }
      case 66: {
        [self setOrderStatus:[input readString]];
        break;
      }
      case 74: {
        [self setOrderAmount:[input readString]];
        break;
      }
      case 82: {
        [self setSequenceId:[input readString]];
        break;
      }
      case 90: {
        [self setCrDrName:[input readString]];
        break;
      }
      case 98: {
        [self setPayTypeName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPayerAcctCode {
  return resultQueryWalletBill99BillResponse.hasPayerAcctCode;
}
- (NSString*) payerAcctCode {
  return resultQueryWalletBill99BillResponse.payerAcctCode;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setPayerAcctCode:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasPayerAcctCode = YES;
  resultQueryWalletBill99BillResponse.payerAcctCode = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearPayerAcctCode {
  resultQueryWalletBill99BillResponse.hasPayerAcctCode = NO;
  resultQueryWalletBill99BillResponse.payerAcctCode = @"";
  return self;
}
- (BOOL) hasMemo {
  return resultQueryWalletBill99BillResponse.hasMemo;
}
- (NSString*) memo {
  return resultQueryWalletBill99BillResponse.memo;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setMemo:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasMemo = YES;
  resultQueryWalletBill99BillResponse.memo = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearMemo {
  resultQueryWalletBill99BillResponse.hasMemo = NO;
  resultQueryWalletBill99BillResponse.memo = @"";
  return self;
}
- (BOOL) hasOrderCode {
  return resultQueryWalletBill99BillResponse.hasOrderCode;
}
- (NSString*) orderCode {
  return resultQueryWalletBill99BillResponse.orderCode;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setOrderCode:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasOrderCode = YES;
  resultQueryWalletBill99BillResponse.orderCode = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearOrderCode {
  resultQueryWalletBill99BillResponse.hasOrderCode = NO;
  resultQueryWalletBill99BillResponse.orderCode = @"";
  return self;
}
- (BOOL) hasStatusName {
  return resultQueryWalletBill99BillResponse.hasStatusName;
}
- (NSString*) statusName {
  return resultQueryWalletBill99BillResponse.statusName;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setStatusName:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasStatusName = YES;
  resultQueryWalletBill99BillResponse.statusName = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearStatusName {
  resultQueryWalletBill99BillResponse.hasStatusName = NO;
  resultQueryWalletBill99BillResponse.statusName = @"";
  return self;
}
- (BOOL) hasLastUpdateTime {
  return resultQueryWalletBill99BillResponse.hasLastUpdateTime;
}
- (NSString*) lastUpdateTime {
  return resultQueryWalletBill99BillResponse.lastUpdateTime;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setLastUpdateTime:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasLastUpdateTime = YES;
  resultQueryWalletBill99BillResponse.lastUpdateTime = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearLastUpdateTime {
  resultQueryWalletBill99BillResponse.hasLastUpdateTime = NO;
  resultQueryWalletBill99BillResponse.lastUpdateTime = @"";
  return self;
}
- (BOOL) hasPayeeAcctCode {
  return resultQueryWalletBill99BillResponse.hasPayeeAcctCode;
}
- (NSString*) payeeAcctCode {
  return resultQueryWalletBill99BillResponse.payeeAcctCode;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setPayeeAcctCode:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasPayeeAcctCode = YES;
  resultQueryWalletBill99BillResponse.payeeAcctCode = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearPayeeAcctCode {
  resultQueryWalletBill99BillResponse.hasPayeeAcctCode = NO;
  resultQueryWalletBill99BillResponse.payeeAcctCode = @"";
  return self;
}
- (BOOL) hasOrderTime {
  return resultQueryWalletBill99BillResponse.hasOrderTime;
}
- (NSString*) orderTime {
  return resultQueryWalletBill99BillResponse.orderTime;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setOrderTime:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasOrderTime = YES;
  resultQueryWalletBill99BillResponse.orderTime = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearOrderTime {
  resultQueryWalletBill99BillResponse.hasOrderTime = NO;
  resultQueryWalletBill99BillResponse.orderTime = @"";
  return self;
}
- (BOOL) hasOrderStatus {
  return resultQueryWalletBill99BillResponse.hasOrderStatus;
}
- (NSString*) orderStatus {
  return resultQueryWalletBill99BillResponse.orderStatus;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setOrderStatus:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasOrderStatus = YES;
  resultQueryWalletBill99BillResponse.orderStatus = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearOrderStatus {
  resultQueryWalletBill99BillResponse.hasOrderStatus = NO;
  resultQueryWalletBill99BillResponse.orderStatus = @"";
  return self;
}
- (BOOL) hasOrderAmount {
  return resultQueryWalletBill99BillResponse.hasOrderAmount;
}
- (NSString*) orderAmount {
  return resultQueryWalletBill99BillResponse.orderAmount;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setOrderAmount:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasOrderAmount = YES;
  resultQueryWalletBill99BillResponse.orderAmount = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearOrderAmount {
  resultQueryWalletBill99BillResponse.hasOrderAmount = NO;
  resultQueryWalletBill99BillResponse.orderAmount = @"";
  return self;
}
- (BOOL) hasSequenceId {
  return resultQueryWalletBill99BillResponse.hasSequenceId;
}
- (NSString*) sequenceId {
  return resultQueryWalletBill99BillResponse.sequenceId;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setSequenceId:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasSequenceId = YES;
  resultQueryWalletBill99BillResponse.sequenceId = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearSequenceId {
  resultQueryWalletBill99BillResponse.hasSequenceId = NO;
  resultQueryWalletBill99BillResponse.sequenceId = @"";
  return self;
}
- (BOOL) hasCrDrName {
  return resultQueryWalletBill99BillResponse.hasCrDrName;
}
- (NSString*) crDrName {
  return resultQueryWalletBill99BillResponse.crDrName;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setCrDrName:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasCrDrName = YES;
  resultQueryWalletBill99BillResponse.crDrName = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearCrDrName {
  resultQueryWalletBill99BillResponse.hasCrDrName = NO;
  resultQueryWalletBill99BillResponse.crDrName = @"";
  return self;
}
- (BOOL) hasPayTypeName {
  return resultQueryWalletBill99BillResponse.hasPayTypeName;
}
- (NSString*) payTypeName {
  return resultQueryWalletBill99BillResponse.payTypeName;
}
- (ContentQueryWalletBill99BillResponseBuilder*) setPayTypeName:(NSString*) value {
  resultQueryWalletBill99BillResponse.hasPayTypeName = YES;
  resultQueryWalletBill99BillResponse.payTypeName = value;
  return self;
}
- (ContentQueryWalletBill99BillResponseBuilder*) clearPayTypeName {
  resultQueryWalletBill99BillResponse.hasPayTypeName = NO;
  resultQueryWalletBill99BillResponse.payTypeName = @"";
  return self;
}
@end

@interface ContentProdAccountInfo ()
@property (strong) NSString* productCode;
@property (strong) NSString* productName;
@property (strong) NSString* returnRateExp;
@property (strong) NSString* prodHorizonTo;
@property (strong) NSString* totalShare;
@property (strong) NSString* holdShare;
@property (strong) NSString* principal;
@property (strong) NSString* compositeCost;
@property (strong) NSString* totalProfit;
@property (strong) NSString* nextSettPrincipal;
@property (strong) NSString* nextSettDate;
@property (strong) NSString* nextSettAmt;
@property (strong) NSString* transFeeRate;
@property (strong) NSString* finProdType;
@property (strong) NSString* incomeType;
@property (strong) NSString* interestFrom;
@property (strong) NSString* productBatchNo;
@end

@implementation ContentProdAccountInfo

- (BOOL) hasProductCode {
  return !!hasProductCode_;
}
- (void) setHasProductCode:(BOOL) _value_ {
  hasProductCode_ = !!_value_;
}
@synthesize productCode;
- (BOOL) hasProductName {
  return !!hasProductName_;
}
- (void) setHasProductName:(BOOL) _value_ {
  hasProductName_ = !!_value_;
}
@synthesize productName;
- (BOOL) hasReturnRateExp {
  return !!hasReturnRateExp_;
}
- (void) setHasReturnRateExp:(BOOL) _value_ {
  hasReturnRateExp_ = !!_value_;
}
@synthesize returnRateExp;
- (BOOL) hasProdHorizonTo {
  return !!hasProdHorizonTo_;
}
- (void) setHasProdHorizonTo:(BOOL) _value_ {
  hasProdHorizonTo_ = !!_value_;
}
@synthesize prodHorizonTo;
- (BOOL) hasTotalShare {
  return !!hasTotalShare_;
}
- (void) setHasTotalShare:(BOOL) _value_ {
  hasTotalShare_ = !!_value_;
}
@synthesize totalShare;
- (BOOL) hasHoldShare {
  return !!hasHoldShare_;
}
- (void) setHasHoldShare:(BOOL) _value_ {
  hasHoldShare_ = !!_value_;
}
@synthesize holdShare;
- (BOOL) hasPrincipal {
  return !!hasPrincipal_;
}
- (void) setHasPrincipal:(BOOL) _value_ {
  hasPrincipal_ = !!_value_;
}
@synthesize principal;
- (BOOL) hasCompositeCost {
  return !!hasCompositeCost_;
}
- (void) setHasCompositeCost:(BOOL) _value_ {
  hasCompositeCost_ = !!_value_;
}
@synthesize compositeCost;
- (BOOL) hasTotalProfit {
  return !!hasTotalProfit_;
}
- (void) setHasTotalProfit:(BOOL) _value_ {
  hasTotalProfit_ = !!_value_;
}
@synthesize totalProfit;
- (BOOL) hasNextSettPrincipal {
  return !!hasNextSettPrincipal_;
}
- (void) setHasNextSettPrincipal:(BOOL) _value_ {
  hasNextSettPrincipal_ = !!_value_;
}
@synthesize nextSettPrincipal;
- (BOOL) hasNextSettDate {
  return !!hasNextSettDate_;
}
- (void) setHasNextSettDate:(BOOL) _value_ {
  hasNextSettDate_ = !!_value_;
}
@synthesize nextSettDate;
- (BOOL) hasNextSettAmt {
  return !!hasNextSettAmt_;
}
- (void) setHasNextSettAmt:(BOOL) _value_ {
  hasNextSettAmt_ = !!_value_;
}
@synthesize nextSettAmt;
- (BOOL) hasTransFeeRate {
  return !!hasTransFeeRate_;
}
- (void) setHasTransFeeRate:(BOOL) _value_ {
  hasTransFeeRate_ = !!_value_;
}
@synthesize transFeeRate;
- (BOOL) hasFinProdType {
  return !!hasFinProdType_;
}
- (void) setHasFinProdType:(BOOL) _value_ {
  hasFinProdType_ = !!_value_;
}
@synthesize finProdType;
- (BOOL) hasIncomeType {
  return !!hasIncomeType_;
}
- (void) setHasIncomeType:(BOOL) _value_ {
  hasIncomeType_ = !!_value_;
}
@synthesize incomeType;
- (BOOL) hasInterestFrom {
  return !!hasInterestFrom_;
}
- (void) setHasInterestFrom:(BOOL) _value_ {
  hasInterestFrom_ = !!_value_;
}
@synthesize interestFrom;
- (BOOL) hasProductBatchNo {
  return !!hasProductBatchNo_;
}
- (void) setHasProductBatchNo:(BOOL) _value_ {
  hasProductBatchNo_ = !!_value_;
}
@synthesize productBatchNo;
- (instancetype) init {
  if ((self = [super init])) {
    self.productCode = @"";
    self.productName = @"";
    self.returnRateExp = @"";
    self.prodHorizonTo = @"";
    self.totalShare = @"";
    self.holdShare = @"";
    self.principal = @"";
    self.compositeCost = @"";
    self.totalProfit = @"";
    self.nextSettPrincipal = @"";
    self.nextSettDate = @"";
    self.nextSettAmt = @"";
    self.transFeeRate = @"";
    self.finProdType = @"";
    self.incomeType = @"";
    self.interestFrom = @"";
    self.productBatchNo = @"";
  }
  return self;
}
static ContentProdAccountInfo* defaultContentProdAccountInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentProdAccountInfo class]) {
    defaultContentProdAccountInfoInstance = [[ContentProdAccountInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentProdAccountInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentProdAccountInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductCode) {
    [output writeString:1 value:self.productCode];
  }
  if (self.hasProductName) {
    [output writeString:2 value:self.productName];
  }
  if (self.hasReturnRateExp) {
    [output writeString:3 value:self.returnRateExp];
  }
  if (self.hasProdHorizonTo) {
    [output writeString:4 value:self.prodHorizonTo];
  }
  if (self.hasTotalShare) {
    [output writeString:5 value:self.totalShare];
  }
  if (self.hasHoldShare) {
    [output writeString:6 value:self.holdShare];
  }
  if (self.hasPrincipal) {
    [output writeString:7 value:self.principal];
  }
  if (self.hasCompositeCost) {
    [output writeString:8 value:self.compositeCost];
  }
  if (self.hasTotalProfit) {
    [output writeString:9 value:self.totalProfit];
  }
  if (self.hasNextSettPrincipal) {
    [output writeString:10 value:self.nextSettPrincipal];
  }
  if (self.hasNextSettDate) {
    [output writeString:11 value:self.nextSettDate];
  }
  if (self.hasNextSettAmt) {
    [output writeString:12 value:self.nextSettAmt];
  }
  if (self.hasTransFeeRate) {
    [output writeString:13 value:self.transFeeRate];
  }
  if (self.hasFinProdType) {
    [output writeString:14 value:self.finProdType];
  }
  if (self.hasIncomeType) {
    [output writeString:15 value:self.incomeType];
  }
  if (self.hasInterestFrom) {
    [output writeString:16 value:self.interestFrom];
  }
  if (self.hasProductBatchNo) {
    [output writeString:17 value:self.productBatchNo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProductCode) {
    size_ += computeStringSize(1, self.productCode);
  }
  if (self.hasProductName) {
    size_ += computeStringSize(2, self.productName);
  }
  if (self.hasReturnRateExp) {
    size_ += computeStringSize(3, self.returnRateExp);
  }
  if (self.hasProdHorizonTo) {
    size_ += computeStringSize(4, self.prodHorizonTo);
  }
  if (self.hasTotalShare) {
    size_ += computeStringSize(5, self.totalShare);
  }
  if (self.hasHoldShare) {
    size_ += computeStringSize(6, self.holdShare);
  }
  if (self.hasPrincipal) {
    size_ += computeStringSize(7, self.principal);
  }
  if (self.hasCompositeCost) {
    size_ += computeStringSize(8, self.compositeCost);
  }
  if (self.hasTotalProfit) {
    size_ += computeStringSize(9, self.totalProfit);
  }
  if (self.hasNextSettPrincipal) {
    size_ += computeStringSize(10, self.nextSettPrincipal);
  }
  if (self.hasNextSettDate) {
    size_ += computeStringSize(11, self.nextSettDate);
  }
  if (self.hasNextSettAmt) {
    size_ += computeStringSize(12, self.nextSettAmt);
  }
  if (self.hasTransFeeRate) {
    size_ += computeStringSize(13, self.transFeeRate);
  }
  if (self.hasFinProdType) {
    size_ += computeStringSize(14, self.finProdType);
  }
  if (self.hasIncomeType) {
    size_ += computeStringSize(15, self.incomeType);
  }
  if (self.hasInterestFrom) {
    size_ += computeStringSize(16, self.interestFrom);
  }
  if (self.hasProductBatchNo) {
    size_ += computeStringSize(17, self.productBatchNo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentProdAccountInfo*) parseFromData:(NSData*) data {
  return (ContentProdAccountInfo*)[[[ContentProdAccountInfo builder] mergeFromData:data] build];
}
+ (ContentProdAccountInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProdAccountInfo*)[[[ContentProdAccountInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentProdAccountInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentProdAccountInfo*)[[[ContentProdAccountInfo builder] mergeFromInputStream:input] build];
}
+ (ContentProdAccountInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProdAccountInfo*)[[[ContentProdAccountInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentProdAccountInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentProdAccountInfo*)[[[ContentProdAccountInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentProdAccountInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProdAccountInfo*)[[[ContentProdAccountInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentProdAccountInfoBuilder*) builder {
  return [[ContentProdAccountInfoBuilder alloc] init];
}
+ (ContentProdAccountInfoBuilder*) builderWithPrototype:(ContentProdAccountInfo*) prototype {
  return [[ContentProdAccountInfo builder] mergeFrom:prototype];
}
- (ContentProdAccountInfoBuilder*) builder {
  return [ContentProdAccountInfo builder];
}
- (ContentProdAccountInfoBuilder*) toBuilder {
  return [ContentProdAccountInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productCode", self.productCode];
  }
  if (self.hasProductName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productName", self.productName];
  }
  if (self.hasReturnRateExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"returnRateExp", self.returnRateExp];
  }
  if (self.hasProdHorizonTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prodHorizonTo", self.prodHorizonTo];
  }
  if (self.hasTotalShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalShare", self.totalShare];
  }
  if (self.hasHoldShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"holdShare", self.holdShare];
  }
  if (self.hasPrincipal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"principal", self.principal];
  }
  if (self.hasCompositeCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"compositeCost", self.compositeCost];
  }
  if (self.hasTotalProfit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalProfit", self.totalProfit];
  }
  if (self.hasNextSettPrincipal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextSettPrincipal", self.nextSettPrincipal];
  }
  if (self.hasNextSettDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextSettDate", self.nextSettDate];
  }
  if (self.hasNextSettAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextSettAmt", self.nextSettAmt];
  }
  if (self.hasTransFeeRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transFeeRate", self.transFeeRate];
  }
  if (self.hasFinProdType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finProdType", self.finProdType];
  }
  if (self.hasIncomeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"incomeType", self.incomeType];
  }
  if (self.hasInterestFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"interestFrom", self.interestFrom];
  }
  if (self.hasProductBatchNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productBatchNo", self.productBatchNo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProductCode) {
    [dictionary setObject: self.productCode forKey: @"productCode"];
  }
  if (self.hasProductName) {
    [dictionary setObject: self.productName forKey: @"productName"];
  }
  if (self.hasReturnRateExp) {
    [dictionary setObject: self.returnRateExp forKey: @"returnRateExp"];
  }
  if (self.hasProdHorizonTo) {
    [dictionary setObject: self.prodHorizonTo forKey: @"prodHorizonTo"];
  }
  if (self.hasTotalShare) {
    [dictionary setObject: self.totalShare forKey: @"totalShare"];
  }
  if (self.hasHoldShare) {
    [dictionary setObject: self.holdShare forKey: @"holdShare"];
  }
  if (self.hasPrincipal) {
    [dictionary setObject: self.principal forKey: @"principal"];
  }
  if (self.hasCompositeCost) {
    [dictionary setObject: self.compositeCost forKey: @"compositeCost"];
  }
  if (self.hasTotalProfit) {
    [dictionary setObject: self.totalProfit forKey: @"totalProfit"];
  }
  if (self.hasNextSettPrincipal) {
    [dictionary setObject: self.nextSettPrincipal forKey: @"nextSettPrincipal"];
  }
  if (self.hasNextSettDate) {
    [dictionary setObject: self.nextSettDate forKey: @"nextSettDate"];
  }
  if (self.hasNextSettAmt) {
    [dictionary setObject: self.nextSettAmt forKey: @"nextSettAmt"];
  }
  if (self.hasTransFeeRate) {
    [dictionary setObject: self.transFeeRate forKey: @"transFeeRate"];
  }
  if (self.hasFinProdType) {
    [dictionary setObject: self.finProdType forKey: @"finProdType"];
  }
  if (self.hasIncomeType) {
    [dictionary setObject: self.incomeType forKey: @"incomeType"];
  }
  if (self.hasInterestFrom) {
    [dictionary setObject: self.interestFrom forKey: @"interestFrom"];
  }
  if (self.hasProductBatchNo) {
    [dictionary setObject: self.productBatchNo forKey: @"productBatchNo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentProdAccountInfo class]]) {
    return NO;
  }
  ContentProdAccountInfo *otherMessage = other;
  return
      self.hasProductCode == otherMessage.hasProductCode &&
      (!self.hasProductCode || [self.productCode isEqual:otherMessage.productCode]) &&
      self.hasProductName == otherMessage.hasProductName &&
      (!self.hasProductName || [self.productName isEqual:otherMessage.productName]) &&
      self.hasReturnRateExp == otherMessage.hasReturnRateExp &&
      (!self.hasReturnRateExp || [self.returnRateExp isEqual:otherMessage.returnRateExp]) &&
      self.hasProdHorizonTo == otherMessage.hasProdHorizonTo &&
      (!self.hasProdHorizonTo || [self.prodHorizonTo isEqual:otherMessage.prodHorizonTo]) &&
      self.hasTotalShare == otherMessage.hasTotalShare &&
      (!self.hasTotalShare || [self.totalShare isEqual:otherMessage.totalShare]) &&
      self.hasHoldShare == otherMessage.hasHoldShare &&
      (!self.hasHoldShare || [self.holdShare isEqual:otherMessage.holdShare]) &&
      self.hasPrincipal == otherMessage.hasPrincipal &&
      (!self.hasPrincipal || [self.principal isEqual:otherMessage.principal]) &&
      self.hasCompositeCost == otherMessage.hasCompositeCost &&
      (!self.hasCompositeCost || [self.compositeCost isEqual:otherMessage.compositeCost]) &&
      self.hasTotalProfit == otherMessage.hasTotalProfit &&
      (!self.hasTotalProfit || [self.totalProfit isEqual:otherMessage.totalProfit]) &&
      self.hasNextSettPrincipal == otherMessage.hasNextSettPrincipal &&
      (!self.hasNextSettPrincipal || [self.nextSettPrincipal isEqual:otherMessage.nextSettPrincipal]) &&
      self.hasNextSettDate == otherMessage.hasNextSettDate &&
      (!self.hasNextSettDate || [self.nextSettDate isEqual:otherMessage.nextSettDate]) &&
      self.hasNextSettAmt == otherMessage.hasNextSettAmt &&
      (!self.hasNextSettAmt || [self.nextSettAmt isEqual:otherMessage.nextSettAmt]) &&
      self.hasTransFeeRate == otherMessage.hasTransFeeRate &&
      (!self.hasTransFeeRate || [self.transFeeRate isEqual:otherMessage.transFeeRate]) &&
      self.hasFinProdType == otherMessage.hasFinProdType &&
      (!self.hasFinProdType || [self.finProdType isEqual:otherMessage.finProdType]) &&
      self.hasIncomeType == otherMessage.hasIncomeType &&
      (!self.hasIncomeType || [self.incomeType isEqual:otherMessage.incomeType]) &&
      self.hasInterestFrom == otherMessage.hasInterestFrom &&
      (!self.hasInterestFrom || [self.interestFrom isEqual:otherMessage.interestFrom]) &&
      self.hasProductBatchNo == otherMessage.hasProductBatchNo &&
      (!self.hasProductBatchNo || [self.productBatchNo isEqual:otherMessage.productBatchNo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProductCode) {
    hashCode = hashCode * 31 + [self.productCode hash];
  }
  if (self.hasProductName) {
    hashCode = hashCode * 31 + [self.productName hash];
  }
  if (self.hasReturnRateExp) {
    hashCode = hashCode * 31 + [self.returnRateExp hash];
  }
  if (self.hasProdHorizonTo) {
    hashCode = hashCode * 31 + [self.prodHorizonTo hash];
  }
  if (self.hasTotalShare) {
    hashCode = hashCode * 31 + [self.totalShare hash];
  }
  if (self.hasHoldShare) {
    hashCode = hashCode * 31 + [self.holdShare hash];
  }
  if (self.hasPrincipal) {
    hashCode = hashCode * 31 + [self.principal hash];
  }
  if (self.hasCompositeCost) {
    hashCode = hashCode * 31 + [self.compositeCost hash];
  }
  if (self.hasTotalProfit) {
    hashCode = hashCode * 31 + [self.totalProfit hash];
  }
  if (self.hasNextSettPrincipal) {
    hashCode = hashCode * 31 + [self.nextSettPrincipal hash];
  }
  if (self.hasNextSettDate) {
    hashCode = hashCode * 31 + [self.nextSettDate hash];
  }
  if (self.hasNextSettAmt) {
    hashCode = hashCode * 31 + [self.nextSettAmt hash];
  }
  if (self.hasTransFeeRate) {
    hashCode = hashCode * 31 + [self.transFeeRate hash];
  }
  if (self.hasFinProdType) {
    hashCode = hashCode * 31 + [self.finProdType hash];
  }
  if (self.hasIncomeType) {
    hashCode = hashCode * 31 + [self.incomeType hash];
  }
  if (self.hasInterestFrom) {
    hashCode = hashCode * 31 + [self.interestFrom hash];
  }
  if (self.hasProductBatchNo) {
    hashCode = hashCode * 31 + [self.productBatchNo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentProdAccountInfoBuilder()
@property (strong) ContentProdAccountInfo* resultProdAccountInfo;
@end

@implementation ContentProdAccountInfoBuilder
@synthesize resultProdAccountInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProdAccountInfo = [[ContentProdAccountInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProdAccountInfo;
}
- (ContentProdAccountInfoBuilder*) clear {
  self.resultProdAccountInfo = [[ContentProdAccountInfo alloc] init];
  return self;
}
- (ContentProdAccountInfoBuilder*) clone {
  return [ContentProdAccountInfo builderWithPrototype:resultProdAccountInfo];
}
- (ContentProdAccountInfo*) defaultInstance {
  return [ContentProdAccountInfo defaultInstance];
}
- (ContentProdAccountInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentProdAccountInfo*) buildPartial {
  ContentProdAccountInfo* returnMe = resultProdAccountInfo;
  self.resultProdAccountInfo = nil;
  return returnMe;
}
- (ContentProdAccountInfoBuilder*) mergeFrom:(ContentProdAccountInfo*) other {
  if (other == [ContentProdAccountInfo defaultInstance]) {
    return self;
  }
  if (other.hasProductCode) {
    [self setProductCode:other.productCode];
  }
  if (other.hasProductName) {
    [self setProductName:other.productName];
  }
  if (other.hasReturnRateExp) {
    [self setReturnRateExp:other.returnRateExp];
  }
  if (other.hasProdHorizonTo) {
    [self setProdHorizonTo:other.prodHorizonTo];
  }
  if (other.hasTotalShare) {
    [self setTotalShare:other.totalShare];
  }
  if (other.hasHoldShare) {
    [self setHoldShare:other.holdShare];
  }
  if (other.hasPrincipal) {
    [self setPrincipal:other.principal];
  }
  if (other.hasCompositeCost) {
    [self setCompositeCost:other.compositeCost];
  }
  if (other.hasTotalProfit) {
    [self setTotalProfit:other.totalProfit];
  }
  if (other.hasNextSettPrincipal) {
    [self setNextSettPrincipal:other.nextSettPrincipal];
  }
  if (other.hasNextSettDate) {
    [self setNextSettDate:other.nextSettDate];
  }
  if (other.hasNextSettAmt) {
    [self setNextSettAmt:other.nextSettAmt];
  }
  if (other.hasTransFeeRate) {
    [self setTransFeeRate:other.transFeeRate];
  }
  if (other.hasFinProdType) {
    [self setFinProdType:other.finProdType];
  }
  if (other.hasIncomeType) {
    [self setIncomeType:other.incomeType];
  }
  if (other.hasInterestFrom) {
    [self setInterestFrom:other.interestFrom];
  }
  if (other.hasProductBatchNo) {
    [self setProductBatchNo:other.productBatchNo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentProdAccountInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentProdAccountInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setProductCode:[input readString]];
        break;
      }
      case 18: {
        [self setProductName:[input readString]];
        break;
      }
      case 26: {
        [self setReturnRateExp:[input readString]];
        break;
      }
      case 34: {
        [self setProdHorizonTo:[input readString]];
        break;
      }
      case 42: {
        [self setTotalShare:[input readString]];
        break;
      }
      case 50: {
        [self setHoldShare:[input readString]];
        break;
      }
      case 58: {
        [self setPrincipal:[input readString]];
        break;
      }
      case 66: {
        [self setCompositeCost:[input readString]];
        break;
      }
      case 74: {
        [self setTotalProfit:[input readString]];
        break;
      }
      case 82: {
        [self setNextSettPrincipal:[input readString]];
        break;
      }
      case 90: {
        [self setNextSettDate:[input readString]];
        break;
      }
      case 98: {
        [self setNextSettAmt:[input readString]];
        break;
      }
      case 106: {
        [self setTransFeeRate:[input readString]];
        break;
      }
      case 114: {
        [self setFinProdType:[input readString]];
        break;
      }
      case 122: {
        [self setIncomeType:[input readString]];
        break;
      }
      case 130: {
        [self setInterestFrom:[input readString]];
        break;
      }
      case 138: {
        [self setProductBatchNo:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasProductCode {
  return resultProdAccountInfo.hasProductCode;
}
- (NSString*) productCode {
  return resultProdAccountInfo.productCode;
}
- (ContentProdAccountInfoBuilder*) setProductCode:(NSString*) value {
  resultProdAccountInfo.hasProductCode = YES;
  resultProdAccountInfo.productCode = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearProductCode {
  resultProdAccountInfo.hasProductCode = NO;
  resultProdAccountInfo.productCode = @"";
  return self;
}
- (BOOL) hasProductName {
  return resultProdAccountInfo.hasProductName;
}
- (NSString*) productName {
  return resultProdAccountInfo.productName;
}
- (ContentProdAccountInfoBuilder*) setProductName:(NSString*) value {
  resultProdAccountInfo.hasProductName = YES;
  resultProdAccountInfo.productName = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearProductName {
  resultProdAccountInfo.hasProductName = NO;
  resultProdAccountInfo.productName = @"";
  return self;
}
- (BOOL) hasReturnRateExp {
  return resultProdAccountInfo.hasReturnRateExp;
}
- (NSString*) returnRateExp {
  return resultProdAccountInfo.returnRateExp;
}
- (ContentProdAccountInfoBuilder*) setReturnRateExp:(NSString*) value {
  resultProdAccountInfo.hasReturnRateExp = YES;
  resultProdAccountInfo.returnRateExp = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearReturnRateExp {
  resultProdAccountInfo.hasReturnRateExp = NO;
  resultProdAccountInfo.returnRateExp = @"";
  return self;
}
- (BOOL) hasProdHorizonTo {
  return resultProdAccountInfo.hasProdHorizonTo;
}
- (NSString*) prodHorizonTo {
  return resultProdAccountInfo.prodHorizonTo;
}
- (ContentProdAccountInfoBuilder*) setProdHorizonTo:(NSString*) value {
  resultProdAccountInfo.hasProdHorizonTo = YES;
  resultProdAccountInfo.prodHorizonTo = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearProdHorizonTo {
  resultProdAccountInfo.hasProdHorizonTo = NO;
  resultProdAccountInfo.prodHorizonTo = @"";
  return self;
}
- (BOOL) hasTotalShare {
  return resultProdAccountInfo.hasTotalShare;
}
- (NSString*) totalShare {
  return resultProdAccountInfo.totalShare;
}
- (ContentProdAccountInfoBuilder*) setTotalShare:(NSString*) value {
  resultProdAccountInfo.hasTotalShare = YES;
  resultProdAccountInfo.totalShare = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearTotalShare {
  resultProdAccountInfo.hasTotalShare = NO;
  resultProdAccountInfo.totalShare = @"";
  return self;
}
- (BOOL) hasHoldShare {
  return resultProdAccountInfo.hasHoldShare;
}
- (NSString*) holdShare {
  return resultProdAccountInfo.holdShare;
}
- (ContentProdAccountInfoBuilder*) setHoldShare:(NSString*) value {
  resultProdAccountInfo.hasHoldShare = YES;
  resultProdAccountInfo.holdShare = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearHoldShare {
  resultProdAccountInfo.hasHoldShare = NO;
  resultProdAccountInfo.holdShare = @"";
  return self;
}
- (BOOL) hasPrincipal {
  return resultProdAccountInfo.hasPrincipal;
}
- (NSString*) principal {
  return resultProdAccountInfo.principal;
}
- (ContentProdAccountInfoBuilder*) setPrincipal:(NSString*) value {
  resultProdAccountInfo.hasPrincipal = YES;
  resultProdAccountInfo.principal = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearPrincipal {
  resultProdAccountInfo.hasPrincipal = NO;
  resultProdAccountInfo.principal = @"";
  return self;
}
- (BOOL) hasCompositeCost {
  return resultProdAccountInfo.hasCompositeCost;
}
- (NSString*) compositeCost {
  return resultProdAccountInfo.compositeCost;
}
- (ContentProdAccountInfoBuilder*) setCompositeCost:(NSString*) value {
  resultProdAccountInfo.hasCompositeCost = YES;
  resultProdAccountInfo.compositeCost = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearCompositeCost {
  resultProdAccountInfo.hasCompositeCost = NO;
  resultProdAccountInfo.compositeCost = @"";
  return self;
}
- (BOOL) hasTotalProfit {
  return resultProdAccountInfo.hasTotalProfit;
}
- (NSString*) totalProfit {
  return resultProdAccountInfo.totalProfit;
}
- (ContentProdAccountInfoBuilder*) setTotalProfit:(NSString*) value {
  resultProdAccountInfo.hasTotalProfit = YES;
  resultProdAccountInfo.totalProfit = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearTotalProfit {
  resultProdAccountInfo.hasTotalProfit = NO;
  resultProdAccountInfo.totalProfit = @"";
  return self;
}
- (BOOL) hasNextSettPrincipal {
  return resultProdAccountInfo.hasNextSettPrincipal;
}
- (NSString*) nextSettPrincipal {
  return resultProdAccountInfo.nextSettPrincipal;
}
- (ContentProdAccountInfoBuilder*) setNextSettPrincipal:(NSString*) value {
  resultProdAccountInfo.hasNextSettPrincipal = YES;
  resultProdAccountInfo.nextSettPrincipal = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearNextSettPrincipal {
  resultProdAccountInfo.hasNextSettPrincipal = NO;
  resultProdAccountInfo.nextSettPrincipal = @"";
  return self;
}
- (BOOL) hasNextSettDate {
  return resultProdAccountInfo.hasNextSettDate;
}
- (NSString*) nextSettDate {
  return resultProdAccountInfo.nextSettDate;
}
- (ContentProdAccountInfoBuilder*) setNextSettDate:(NSString*) value {
  resultProdAccountInfo.hasNextSettDate = YES;
  resultProdAccountInfo.nextSettDate = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearNextSettDate {
  resultProdAccountInfo.hasNextSettDate = NO;
  resultProdAccountInfo.nextSettDate = @"";
  return self;
}
- (BOOL) hasNextSettAmt {
  return resultProdAccountInfo.hasNextSettAmt;
}
- (NSString*) nextSettAmt {
  return resultProdAccountInfo.nextSettAmt;
}
- (ContentProdAccountInfoBuilder*) setNextSettAmt:(NSString*) value {
  resultProdAccountInfo.hasNextSettAmt = YES;
  resultProdAccountInfo.nextSettAmt = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearNextSettAmt {
  resultProdAccountInfo.hasNextSettAmt = NO;
  resultProdAccountInfo.nextSettAmt = @"";
  return self;
}
- (BOOL) hasTransFeeRate {
  return resultProdAccountInfo.hasTransFeeRate;
}
- (NSString*) transFeeRate {
  return resultProdAccountInfo.transFeeRate;
}
- (ContentProdAccountInfoBuilder*) setTransFeeRate:(NSString*) value {
  resultProdAccountInfo.hasTransFeeRate = YES;
  resultProdAccountInfo.transFeeRate = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearTransFeeRate {
  resultProdAccountInfo.hasTransFeeRate = NO;
  resultProdAccountInfo.transFeeRate = @"";
  return self;
}
- (BOOL) hasFinProdType {
  return resultProdAccountInfo.hasFinProdType;
}
- (NSString*) finProdType {
  return resultProdAccountInfo.finProdType;
}
- (ContentProdAccountInfoBuilder*) setFinProdType:(NSString*) value {
  resultProdAccountInfo.hasFinProdType = YES;
  resultProdAccountInfo.finProdType = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearFinProdType {
  resultProdAccountInfo.hasFinProdType = NO;
  resultProdAccountInfo.finProdType = @"";
  return self;
}
- (BOOL) hasIncomeType {
  return resultProdAccountInfo.hasIncomeType;
}
- (NSString*) incomeType {
  return resultProdAccountInfo.incomeType;
}
- (ContentProdAccountInfoBuilder*) setIncomeType:(NSString*) value {
  resultProdAccountInfo.hasIncomeType = YES;
  resultProdAccountInfo.incomeType = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearIncomeType {
  resultProdAccountInfo.hasIncomeType = NO;
  resultProdAccountInfo.incomeType = @"";
  return self;
}
- (BOOL) hasInterestFrom {
  return resultProdAccountInfo.hasInterestFrom;
}
- (NSString*) interestFrom {
  return resultProdAccountInfo.interestFrom;
}
- (ContentProdAccountInfoBuilder*) setInterestFrom:(NSString*) value {
  resultProdAccountInfo.hasInterestFrom = YES;
  resultProdAccountInfo.interestFrom = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearInterestFrom {
  resultProdAccountInfo.hasInterestFrom = NO;
  resultProdAccountInfo.interestFrom = @"";
  return self;
}
- (BOOL) hasProductBatchNo {
  return resultProdAccountInfo.hasProductBatchNo;
}
- (NSString*) productBatchNo {
  return resultProdAccountInfo.productBatchNo;
}
- (ContentProdAccountInfoBuilder*) setProductBatchNo:(NSString*) value {
  resultProdAccountInfo.hasProductBatchNo = YES;
  resultProdAccountInfo.productBatchNo = value;
  return self;
}
- (ContentProdAccountInfoBuilder*) clearProductBatchNo {
  resultProdAccountInfo.hasProductBatchNo = NO;
  resultProdAccountInfo.productBatchNo = @"";
  return self;
}
@end

@interface ContentSolidCard ()
@property (strong) NSString* cardId;
@property (strong) NSString* pan;
@property (strong) NSString* userMebCode;
@property (strong) NSString* status;
@property (strong) NSString* crtTime;
@property (strong) NSString* updTime;
@property (strong) NSString* cardType;
@end

@implementation ContentSolidCard

- (BOOL) hasCardId {
  return !!hasCardId_;
}
- (void) setHasCardId:(BOOL) _value_ {
  hasCardId_ = !!_value_;
}
@synthesize cardId;
- (BOOL) hasPan {
  return !!hasPan_;
}
- (void) setHasPan:(BOOL) _value_ {
  hasPan_ = !!_value_;
}
@synthesize pan;
- (BOOL) hasUserMebCode {
  return !!hasUserMebCode_;
}
- (void) setHasUserMebCode:(BOOL) _value_ {
  hasUserMebCode_ = !!_value_;
}
@synthesize userMebCode;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasCrtTime {
  return !!hasCrtTime_;
}
- (void) setHasCrtTime:(BOOL) _value_ {
  hasCrtTime_ = !!_value_;
}
@synthesize crtTime;
- (BOOL) hasUpdTime {
  return !!hasUpdTime_;
}
- (void) setHasUpdTime:(BOOL) _value_ {
  hasUpdTime_ = !!_value_;
}
@synthesize updTime;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) _value_ {
  hasCardType_ = !!_value_;
}
@synthesize cardType;
- (instancetype) init {
  if ((self = [super init])) {
    self.cardId = @"";
    self.pan = @"";
    self.userMebCode = @"";
    self.status = @"";
    self.crtTime = @"";
    self.updTime = @"";
    self.cardType = @"";
  }
  return self;
}
static ContentSolidCard* defaultContentSolidCardInstance = nil;
+ (void) initialize {
  if (self == [ContentSolidCard class]) {
    defaultContentSolidCardInstance = [[ContentSolidCard alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentSolidCardInstance;
}
- (instancetype) defaultInstance {
  return defaultContentSolidCardInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCardId) {
    [output writeString:1 value:self.cardId];
  }
  if (self.hasPan) {
    [output writeString:2 value:self.pan];
  }
  if (self.hasUserMebCode) {
    [output writeString:3 value:self.userMebCode];
  }
  if (self.hasStatus) {
    [output writeString:4 value:self.status];
  }
  if (self.hasCrtTime) {
    [output writeString:5 value:self.crtTime];
  }
  if (self.hasUpdTime) {
    [output writeString:6 value:self.updTime];
  }
  if (self.hasCardType) {
    [output writeString:7 value:self.cardType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCardId) {
    size_ += computeStringSize(1, self.cardId);
  }
  if (self.hasPan) {
    size_ += computeStringSize(2, self.pan);
  }
  if (self.hasUserMebCode) {
    size_ += computeStringSize(3, self.userMebCode);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(4, self.status);
  }
  if (self.hasCrtTime) {
    size_ += computeStringSize(5, self.crtTime);
  }
  if (self.hasUpdTime) {
    size_ += computeStringSize(6, self.updTime);
  }
  if (self.hasCardType) {
    size_ += computeStringSize(7, self.cardType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentSolidCard*) parseFromData:(NSData*) data {
  return (ContentSolidCard*)[[[ContentSolidCard builder] mergeFromData:data] build];
}
+ (ContentSolidCard*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSolidCard*)[[[ContentSolidCard builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentSolidCard*) parseFromInputStream:(NSInputStream*) input {
  return (ContentSolidCard*)[[[ContentSolidCard builder] mergeFromInputStream:input] build];
}
+ (ContentSolidCard*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSolidCard*)[[[ContentSolidCard builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentSolidCard*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentSolidCard*)[[[ContentSolidCard builder] mergeFromCodedInputStream:input] build];
}
+ (ContentSolidCard*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSolidCard*)[[[ContentSolidCard builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentSolidCardBuilder*) builder {
  return [[ContentSolidCardBuilder alloc] init];
}
+ (ContentSolidCardBuilder*) builderWithPrototype:(ContentSolidCard*) prototype {
  return [[ContentSolidCard builder] mergeFrom:prototype];
}
- (ContentSolidCardBuilder*) builder {
  return [ContentSolidCard builder];
}
- (ContentSolidCardBuilder*) toBuilder {
  return [ContentSolidCard builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardId", self.cardId];
  }
  if (self.hasPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pan", self.pan];
  }
  if (self.hasUserMebCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMebCode", self.userMebCode];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasCrtTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"crtTime", self.crtTime];
  }
  if (self.hasUpdTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updTime", self.updTime];
  }
  if (self.hasCardType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardType", self.cardType];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCardId) {
    [dictionary setObject: self.cardId forKey: @"cardId"];
  }
  if (self.hasPan) {
    [dictionary setObject: self.pan forKey: @"pan"];
  }
  if (self.hasUserMebCode) {
    [dictionary setObject: self.userMebCode forKey: @"userMebCode"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  if (self.hasCrtTime) {
    [dictionary setObject: self.crtTime forKey: @"crtTime"];
  }
  if (self.hasUpdTime) {
    [dictionary setObject: self.updTime forKey: @"updTime"];
  }
  if (self.hasCardType) {
    [dictionary setObject: self.cardType forKey: @"cardType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentSolidCard class]]) {
    return NO;
  }
  ContentSolidCard *otherMessage = other;
  return
      self.hasCardId == otherMessage.hasCardId &&
      (!self.hasCardId || [self.cardId isEqual:otherMessage.cardId]) &&
      self.hasPan == otherMessage.hasPan &&
      (!self.hasPan || [self.pan isEqual:otherMessage.pan]) &&
      self.hasUserMebCode == otherMessage.hasUserMebCode &&
      (!self.hasUserMebCode || [self.userMebCode isEqual:otherMessage.userMebCode]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasCrtTime == otherMessage.hasCrtTime &&
      (!self.hasCrtTime || [self.crtTime isEqual:otherMessage.crtTime]) &&
      self.hasUpdTime == otherMessage.hasUpdTime &&
      (!self.hasUpdTime || [self.updTime isEqual:otherMessage.updTime]) &&
      self.hasCardType == otherMessage.hasCardType &&
      (!self.hasCardType || [self.cardType isEqual:otherMessage.cardType]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCardId) {
    hashCode = hashCode * 31 + [self.cardId hash];
  }
  if (self.hasPan) {
    hashCode = hashCode * 31 + [self.pan hash];
  }
  if (self.hasUserMebCode) {
    hashCode = hashCode * 31 + [self.userMebCode hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasCrtTime) {
    hashCode = hashCode * 31 + [self.crtTime hash];
  }
  if (self.hasUpdTime) {
    hashCode = hashCode * 31 + [self.updTime hash];
  }
  if (self.hasCardType) {
    hashCode = hashCode * 31 + [self.cardType hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentSolidCardBuilder()
@property (strong) ContentSolidCard* resultSolidCard;
@end

@implementation ContentSolidCardBuilder
@synthesize resultSolidCard;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSolidCard = [[ContentSolidCard alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSolidCard;
}
- (ContentSolidCardBuilder*) clear {
  self.resultSolidCard = [[ContentSolidCard alloc] init];
  return self;
}
- (ContentSolidCardBuilder*) clone {
  return [ContentSolidCard builderWithPrototype:resultSolidCard];
}
- (ContentSolidCard*) defaultInstance {
  return [ContentSolidCard defaultInstance];
}
- (ContentSolidCard*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentSolidCard*) buildPartial {
  ContentSolidCard* returnMe = resultSolidCard;
  self.resultSolidCard = nil;
  return returnMe;
}
- (ContentSolidCardBuilder*) mergeFrom:(ContentSolidCard*) other {
  if (other == [ContentSolidCard defaultInstance]) {
    return self;
  }
  if (other.hasCardId) {
    [self setCardId:other.cardId];
  }
  if (other.hasPan) {
    [self setPan:other.pan];
  }
  if (other.hasUserMebCode) {
    [self setUserMebCode:other.userMebCode];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCrtTime) {
    [self setCrtTime:other.crtTime];
  }
  if (other.hasUpdTime) {
    [self setUpdTime:other.updTime];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentSolidCardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentSolidCardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCardId:[input readString]];
        break;
      }
      case 18: {
        [self setPan:[input readString]];
        break;
      }
      case 26: {
        [self setUserMebCode:[input readString]];
        break;
      }
      case 34: {
        [self setStatus:[input readString]];
        break;
      }
      case 42: {
        [self setCrtTime:[input readString]];
        break;
      }
      case 50: {
        [self setUpdTime:[input readString]];
        break;
      }
      case 58: {
        [self setCardType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCardId {
  return resultSolidCard.hasCardId;
}
- (NSString*) cardId {
  return resultSolidCard.cardId;
}
- (ContentSolidCardBuilder*) setCardId:(NSString*) value {
  resultSolidCard.hasCardId = YES;
  resultSolidCard.cardId = value;
  return self;
}
- (ContentSolidCardBuilder*) clearCardId {
  resultSolidCard.hasCardId = NO;
  resultSolidCard.cardId = @"";
  return self;
}
- (BOOL) hasPan {
  return resultSolidCard.hasPan;
}
- (NSString*) pan {
  return resultSolidCard.pan;
}
- (ContentSolidCardBuilder*) setPan:(NSString*) value {
  resultSolidCard.hasPan = YES;
  resultSolidCard.pan = value;
  return self;
}
- (ContentSolidCardBuilder*) clearPan {
  resultSolidCard.hasPan = NO;
  resultSolidCard.pan = @"";
  return self;
}
- (BOOL) hasUserMebCode {
  return resultSolidCard.hasUserMebCode;
}
- (NSString*) userMebCode {
  return resultSolidCard.userMebCode;
}
- (ContentSolidCardBuilder*) setUserMebCode:(NSString*) value {
  resultSolidCard.hasUserMebCode = YES;
  resultSolidCard.userMebCode = value;
  return self;
}
- (ContentSolidCardBuilder*) clearUserMebCode {
  resultSolidCard.hasUserMebCode = NO;
  resultSolidCard.userMebCode = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultSolidCard.hasStatus;
}
- (NSString*) status {
  return resultSolidCard.status;
}
- (ContentSolidCardBuilder*) setStatus:(NSString*) value {
  resultSolidCard.hasStatus = YES;
  resultSolidCard.status = value;
  return self;
}
- (ContentSolidCardBuilder*) clearStatus {
  resultSolidCard.hasStatus = NO;
  resultSolidCard.status = @"";
  return self;
}
- (BOOL) hasCrtTime {
  return resultSolidCard.hasCrtTime;
}
- (NSString*) crtTime {
  return resultSolidCard.crtTime;
}
- (ContentSolidCardBuilder*) setCrtTime:(NSString*) value {
  resultSolidCard.hasCrtTime = YES;
  resultSolidCard.crtTime = value;
  return self;
}
- (ContentSolidCardBuilder*) clearCrtTime {
  resultSolidCard.hasCrtTime = NO;
  resultSolidCard.crtTime = @"";
  return self;
}
- (BOOL) hasUpdTime {
  return resultSolidCard.hasUpdTime;
}
- (NSString*) updTime {
  return resultSolidCard.updTime;
}
- (ContentSolidCardBuilder*) setUpdTime:(NSString*) value {
  resultSolidCard.hasUpdTime = YES;
  resultSolidCard.updTime = value;
  return self;
}
- (ContentSolidCardBuilder*) clearUpdTime {
  resultSolidCard.hasUpdTime = NO;
  resultSolidCard.updTime = @"";
  return self;
}
- (BOOL) hasCardType {
  return resultSolidCard.hasCardType;
}
- (NSString*) cardType {
  return resultSolidCard.cardType;
}
- (ContentSolidCardBuilder*) setCardType:(NSString*) value {
  resultSolidCard.hasCardType = YES;
  resultSolidCard.cardType = value;
  return self;
}
- (ContentSolidCardBuilder*) clearCardType {
  resultSolidCard.hasCardType = NO;
  resultSolidCard.cardType = @"";
  return self;
}
@end

@interface ContentFinancialInfo ()
@property (strong) NSString* totalAmt;
@property (strong) NSString* fpdBalance;
@property (strong) NSString* lastFpdProfit;
@property (strong) NSString* cumulativeFpdProfit;
@property (strong) NSString* atpHoldAmt;
@property (strong) NSString* atpHoldProfit;
@property (strong) NSString* atpSubscribeAmt;
@property (strong) NSString* rate;
@property (strong) NSString* operableBalance;
@property (strong) NSString* transferableBalance;
@property (strong) NSString* redeemToBeConfirmedBalance;
@property (strong) NSString* toBeConfirmedBalance;
@property (strong) NSString* profit;
@property (strong) NSString* profitRateSeven;
@property (strong) NSString* insureAmt;
@property (strong) NSString* fundsAsset;
@property (strong) NSString* kqbTotalProfit;
@property (strong) NSString* kqbProfit;
@property (strong) NSString* kqbRealShare;
@property (strong) NSString* peAmount;
@property (strong) NSString* peAppointNum;
@property (strong) NSString* peIncome;
@end

@implementation ContentFinancialInfo

- (BOOL) hasTotalAmt {
  return !!hasTotalAmt_;
}
- (void) setHasTotalAmt:(BOOL) _value_ {
  hasTotalAmt_ = !!_value_;
}
@synthesize totalAmt;
- (BOOL) hasFpdBalance {
  return !!hasFpdBalance_;
}
- (void) setHasFpdBalance:(BOOL) _value_ {
  hasFpdBalance_ = !!_value_;
}
@synthesize fpdBalance;
- (BOOL) hasLastFpdProfit {
  return !!hasLastFpdProfit_;
}
- (void) setHasLastFpdProfit:(BOOL) _value_ {
  hasLastFpdProfit_ = !!_value_;
}
@synthesize lastFpdProfit;
- (BOOL) hasCumulativeFpdProfit {
  return !!hasCumulativeFpdProfit_;
}
- (void) setHasCumulativeFpdProfit:(BOOL) _value_ {
  hasCumulativeFpdProfit_ = !!_value_;
}
@synthesize cumulativeFpdProfit;
- (BOOL) hasAtpHoldAmt {
  return !!hasAtpHoldAmt_;
}
- (void) setHasAtpHoldAmt:(BOOL) _value_ {
  hasAtpHoldAmt_ = !!_value_;
}
@synthesize atpHoldAmt;
- (BOOL) hasAtpHoldProfit {
  return !!hasAtpHoldProfit_;
}
- (void) setHasAtpHoldProfit:(BOOL) _value_ {
  hasAtpHoldProfit_ = !!_value_;
}
@synthesize atpHoldProfit;
- (BOOL) hasAtpSubscribeAmt {
  return !!hasAtpSubscribeAmt_;
}
- (void) setHasAtpSubscribeAmt:(BOOL) _value_ {
  hasAtpSubscribeAmt_ = !!_value_;
}
@synthesize atpSubscribeAmt;
- (BOOL) hasRate {
  return !!hasRate_;
}
- (void) setHasRate:(BOOL) _value_ {
  hasRate_ = !!_value_;
}
@synthesize rate;
- (BOOL) hasOperableBalance {
  return !!hasOperableBalance_;
}
- (void) setHasOperableBalance:(BOOL) _value_ {
  hasOperableBalance_ = !!_value_;
}
@synthesize operableBalance;
- (BOOL) hasTransferableBalance {
  return !!hasTransferableBalance_;
}
- (void) setHasTransferableBalance:(BOOL) _value_ {
  hasTransferableBalance_ = !!_value_;
}
@synthesize transferableBalance;
- (BOOL) hasRedeemToBeConfirmedBalance {
  return !!hasRedeemToBeConfirmedBalance_;
}
- (void) setHasRedeemToBeConfirmedBalance:(BOOL) _value_ {
  hasRedeemToBeConfirmedBalance_ = !!_value_;
}
@synthesize redeemToBeConfirmedBalance;
- (BOOL) hasToBeConfirmedBalance {
  return !!hasToBeConfirmedBalance_;
}
- (void) setHasToBeConfirmedBalance:(BOOL) _value_ {
  hasToBeConfirmedBalance_ = !!_value_;
}
@synthesize toBeConfirmedBalance;
- (BOOL) hasProfit {
  return !!hasProfit_;
}
- (void) setHasProfit:(BOOL) _value_ {
  hasProfit_ = !!_value_;
}
@synthesize profit;
- (BOOL) hasProfitRateSeven {
  return !!hasProfitRateSeven_;
}
- (void) setHasProfitRateSeven:(BOOL) _value_ {
  hasProfitRateSeven_ = !!_value_;
}
@synthesize profitRateSeven;
- (BOOL) hasInsureAmt {
  return !!hasInsureAmt_;
}
- (void) setHasInsureAmt:(BOOL) _value_ {
  hasInsureAmt_ = !!_value_;
}
@synthesize insureAmt;
- (BOOL) hasFundsAsset {
  return !!hasFundsAsset_;
}
- (void) setHasFundsAsset:(BOOL) _value_ {
  hasFundsAsset_ = !!_value_;
}
@synthesize fundsAsset;
- (BOOL) hasKqbTotalProfit {
  return !!hasKqbTotalProfit_;
}
- (void) setHasKqbTotalProfit:(BOOL) _value_ {
  hasKqbTotalProfit_ = !!_value_;
}
@synthesize kqbTotalProfit;
- (BOOL) hasKqbProfit {
  return !!hasKqbProfit_;
}
- (void) setHasKqbProfit:(BOOL) _value_ {
  hasKqbProfit_ = !!_value_;
}
@synthesize kqbProfit;
- (BOOL) hasKqbRealShare {
  return !!hasKqbRealShare_;
}
- (void) setHasKqbRealShare:(BOOL) _value_ {
  hasKqbRealShare_ = !!_value_;
}
@synthesize kqbRealShare;
- (BOOL) hasPeAmount {
  return !!hasPeAmount_;
}
- (void) setHasPeAmount:(BOOL) _value_ {
  hasPeAmount_ = !!_value_;
}
@synthesize peAmount;
- (BOOL) hasPeAppointNum {
  return !!hasPeAppointNum_;
}
- (void) setHasPeAppointNum:(BOOL) _value_ {
  hasPeAppointNum_ = !!_value_;
}
@synthesize peAppointNum;
- (BOOL) hasPeIncome {
  return !!hasPeIncome_;
}
- (void) setHasPeIncome:(BOOL) _value_ {
  hasPeIncome_ = !!_value_;
}
@synthesize peIncome;
- (instancetype) init {
  if ((self = [super init])) {
    self.totalAmt = @"";
    self.fpdBalance = @"";
    self.lastFpdProfit = @"";
    self.cumulativeFpdProfit = @"";
    self.atpHoldAmt = @"";
    self.atpHoldProfit = @"";
    self.atpSubscribeAmt = @"";
    self.rate = @"";
    self.operableBalance = @"";
    self.transferableBalance = @"";
    self.redeemToBeConfirmedBalance = @"";
    self.toBeConfirmedBalance = @"";
    self.profit = @"";
    self.profitRateSeven = @"";
    self.insureAmt = @"";
    self.fundsAsset = @"";
    self.kqbTotalProfit = @"";
    self.kqbProfit = @"";
    self.kqbRealShare = @"";
    self.peAmount = @"";
    self.peAppointNum = @"";
    self.peIncome = @"";
  }
  return self;
}
static ContentFinancialInfo* defaultContentFinancialInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentFinancialInfo class]) {
    defaultContentFinancialInfoInstance = [[ContentFinancialInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentFinancialInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentFinancialInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTotalAmt) {
    [output writeString:1 value:self.totalAmt];
  }
  if (self.hasFpdBalance) {
    [output writeString:2 value:self.fpdBalance];
  }
  if (self.hasLastFpdProfit) {
    [output writeString:3 value:self.lastFpdProfit];
  }
  if (self.hasCumulativeFpdProfit) {
    [output writeString:4 value:self.cumulativeFpdProfit];
  }
  if (self.hasAtpHoldAmt) {
    [output writeString:5 value:self.atpHoldAmt];
  }
  if (self.hasAtpHoldProfit) {
    [output writeString:6 value:self.atpHoldProfit];
  }
  if (self.hasAtpSubscribeAmt) {
    [output writeString:7 value:self.atpSubscribeAmt];
  }
  if (self.hasRate) {
    [output writeString:8 value:self.rate];
  }
  if (self.hasOperableBalance) {
    [output writeString:9 value:self.operableBalance];
  }
  if (self.hasTransferableBalance) {
    [output writeString:10 value:self.transferableBalance];
  }
  if (self.hasRedeemToBeConfirmedBalance) {
    [output writeString:11 value:self.redeemToBeConfirmedBalance];
  }
  if (self.hasToBeConfirmedBalance) {
    [output writeString:12 value:self.toBeConfirmedBalance];
  }
  if (self.hasProfit) {
    [output writeString:13 value:self.profit];
  }
  if (self.hasProfitRateSeven) {
    [output writeString:14 value:self.profitRateSeven];
  }
  if (self.hasInsureAmt) {
    [output writeString:15 value:self.insureAmt];
  }
  if (self.hasFundsAsset) {
    [output writeString:16 value:self.fundsAsset];
  }
  if (self.hasKqbTotalProfit) {
    [output writeString:17 value:self.kqbTotalProfit];
  }
  if (self.hasKqbProfit) {
    [output writeString:18 value:self.kqbProfit];
  }
  if (self.hasKqbRealShare) {
    [output writeString:19 value:self.kqbRealShare];
  }
  if (self.hasPeAmount) {
    [output writeString:20 value:self.peAmount];
  }
  if (self.hasPeAppointNum) {
    [output writeString:21 value:self.peAppointNum];
  }
  if (self.hasPeIncome) {
    [output writeString:22 value:self.peIncome];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTotalAmt) {
    size_ += computeStringSize(1, self.totalAmt);
  }
  if (self.hasFpdBalance) {
    size_ += computeStringSize(2, self.fpdBalance);
  }
  if (self.hasLastFpdProfit) {
    size_ += computeStringSize(3, self.lastFpdProfit);
  }
  if (self.hasCumulativeFpdProfit) {
    size_ += computeStringSize(4, self.cumulativeFpdProfit);
  }
  if (self.hasAtpHoldAmt) {
    size_ += computeStringSize(5, self.atpHoldAmt);
  }
  if (self.hasAtpHoldProfit) {
    size_ += computeStringSize(6, self.atpHoldProfit);
  }
  if (self.hasAtpSubscribeAmt) {
    size_ += computeStringSize(7, self.atpSubscribeAmt);
  }
  if (self.hasRate) {
    size_ += computeStringSize(8, self.rate);
  }
  if (self.hasOperableBalance) {
    size_ += computeStringSize(9, self.operableBalance);
  }
  if (self.hasTransferableBalance) {
    size_ += computeStringSize(10, self.transferableBalance);
  }
  if (self.hasRedeemToBeConfirmedBalance) {
    size_ += computeStringSize(11, self.redeemToBeConfirmedBalance);
  }
  if (self.hasToBeConfirmedBalance) {
    size_ += computeStringSize(12, self.toBeConfirmedBalance);
  }
  if (self.hasProfit) {
    size_ += computeStringSize(13, self.profit);
  }
  if (self.hasProfitRateSeven) {
    size_ += computeStringSize(14, self.profitRateSeven);
  }
  if (self.hasInsureAmt) {
    size_ += computeStringSize(15, self.insureAmt);
  }
  if (self.hasFundsAsset) {
    size_ += computeStringSize(16, self.fundsAsset);
  }
  if (self.hasKqbTotalProfit) {
    size_ += computeStringSize(17, self.kqbTotalProfit);
  }
  if (self.hasKqbProfit) {
    size_ += computeStringSize(18, self.kqbProfit);
  }
  if (self.hasKqbRealShare) {
    size_ += computeStringSize(19, self.kqbRealShare);
  }
  if (self.hasPeAmount) {
    size_ += computeStringSize(20, self.peAmount);
  }
  if (self.hasPeAppointNum) {
    size_ += computeStringSize(21, self.peAppointNum);
  }
  if (self.hasPeIncome) {
    size_ += computeStringSize(22, self.peIncome);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentFinancialInfo*) parseFromData:(NSData*) data {
  return (ContentFinancialInfo*)[[[ContentFinancialInfo builder] mergeFromData:data] build];
}
+ (ContentFinancialInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentFinancialInfo*)[[[ContentFinancialInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentFinancialInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentFinancialInfo*)[[[ContentFinancialInfo builder] mergeFromInputStream:input] build];
}
+ (ContentFinancialInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentFinancialInfo*)[[[ContentFinancialInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentFinancialInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentFinancialInfo*)[[[ContentFinancialInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentFinancialInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentFinancialInfo*)[[[ContentFinancialInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentFinancialInfoBuilder*) builder {
  return [[ContentFinancialInfoBuilder alloc] init];
}
+ (ContentFinancialInfoBuilder*) builderWithPrototype:(ContentFinancialInfo*) prototype {
  return [[ContentFinancialInfo builder] mergeFrom:prototype];
}
- (ContentFinancialInfoBuilder*) builder {
  return [ContentFinancialInfo builder];
}
- (ContentFinancialInfoBuilder*) toBuilder {
  return [ContentFinancialInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTotalAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalAmt", self.totalAmt];
  }
  if (self.hasFpdBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fpdBalance", self.fpdBalance];
  }
  if (self.hasLastFpdProfit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastFpdProfit", self.lastFpdProfit];
  }
  if (self.hasCumulativeFpdProfit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cumulativeFpdProfit", self.cumulativeFpdProfit];
  }
  if (self.hasAtpHoldAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atpHoldAmt", self.atpHoldAmt];
  }
  if (self.hasAtpHoldProfit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atpHoldProfit", self.atpHoldProfit];
  }
  if (self.hasAtpSubscribeAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atpSubscribeAmt", self.atpSubscribeAmt];
  }
  if (self.hasRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rate", self.rate];
  }
  if (self.hasOperableBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operableBalance", self.operableBalance];
  }
  if (self.hasTransferableBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transferableBalance", self.transferableBalance];
  }
  if (self.hasRedeemToBeConfirmedBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"redeemToBeConfirmedBalance", self.redeemToBeConfirmedBalance];
  }
  if (self.hasToBeConfirmedBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toBeConfirmedBalance", self.toBeConfirmedBalance];
  }
  if (self.hasProfit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"profit", self.profit];
  }
  if (self.hasProfitRateSeven) {
    [output appendFormat:@"%@%@: %@\n", indent, @"profitRateSeven", self.profitRateSeven];
  }
  if (self.hasInsureAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"insureAmt", self.insureAmt];
  }
  if (self.hasFundsAsset) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fundsAsset", self.fundsAsset];
  }
  if (self.hasKqbTotalProfit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kqbTotalProfit", self.kqbTotalProfit];
  }
  if (self.hasKqbProfit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kqbProfit", self.kqbProfit];
  }
  if (self.hasKqbRealShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kqbRealShare", self.kqbRealShare];
  }
  if (self.hasPeAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"peAmount", self.peAmount];
  }
  if (self.hasPeAppointNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"peAppointNum", self.peAppointNum];
  }
  if (self.hasPeIncome) {
    [output appendFormat:@"%@%@: %@\n", indent, @"peIncome", self.peIncome];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTotalAmt) {
    [dictionary setObject: self.totalAmt forKey: @"totalAmt"];
  }
  if (self.hasFpdBalance) {
    [dictionary setObject: self.fpdBalance forKey: @"fpdBalance"];
  }
  if (self.hasLastFpdProfit) {
    [dictionary setObject: self.lastFpdProfit forKey: @"lastFpdProfit"];
  }
  if (self.hasCumulativeFpdProfit) {
    [dictionary setObject: self.cumulativeFpdProfit forKey: @"cumulativeFpdProfit"];
  }
  if (self.hasAtpHoldAmt) {
    [dictionary setObject: self.atpHoldAmt forKey: @"atpHoldAmt"];
  }
  if (self.hasAtpHoldProfit) {
    [dictionary setObject: self.atpHoldProfit forKey: @"atpHoldProfit"];
  }
  if (self.hasAtpSubscribeAmt) {
    [dictionary setObject: self.atpSubscribeAmt forKey: @"atpSubscribeAmt"];
  }
  if (self.hasRate) {
    [dictionary setObject: self.rate forKey: @"rate"];
  }
  if (self.hasOperableBalance) {
    [dictionary setObject: self.operableBalance forKey: @"operableBalance"];
  }
  if (self.hasTransferableBalance) {
    [dictionary setObject: self.transferableBalance forKey: @"transferableBalance"];
  }
  if (self.hasRedeemToBeConfirmedBalance) {
    [dictionary setObject: self.redeemToBeConfirmedBalance forKey: @"redeemToBeConfirmedBalance"];
  }
  if (self.hasToBeConfirmedBalance) {
    [dictionary setObject: self.toBeConfirmedBalance forKey: @"toBeConfirmedBalance"];
  }
  if (self.hasProfit) {
    [dictionary setObject: self.profit forKey: @"profit"];
  }
  if (self.hasProfitRateSeven) {
    [dictionary setObject: self.profitRateSeven forKey: @"profitRateSeven"];
  }
  if (self.hasInsureAmt) {
    [dictionary setObject: self.insureAmt forKey: @"insureAmt"];
  }
  if (self.hasFundsAsset) {
    [dictionary setObject: self.fundsAsset forKey: @"fundsAsset"];
  }
  if (self.hasKqbTotalProfit) {
    [dictionary setObject: self.kqbTotalProfit forKey: @"kqbTotalProfit"];
  }
  if (self.hasKqbProfit) {
    [dictionary setObject: self.kqbProfit forKey: @"kqbProfit"];
  }
  if (self.hasKqbRealShare) {
    [dictionary setObject: self.kqbRealShare forKey: @"kqbRealShare"];
  }
  if (self.hasPeAmount) {
    [dictionary setObject: self.peAmount forKey: @"peAmount"];
  }
  if (self.hasPeAppointNum) {
    [dictionary setObject: self.peAppointNum forKey: @"peAppointNum"];
  }
  if (self.hasPeIncome) {
    [dictionary setObject: self.peIncome forKey: @"peIncome"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentFinancialInfo class]]) {
    return NO;
  }
  ContentFinancialInfo *otherMessage = other;
  return
      self.hasTotalAmt == otherMessage.hasTotalAmt &&
      (!self.hasTotalAmt || [self.totalAmt isEqual:otherMessage.totalAmt]) &&
      self.hasFpdBalance == otherMessage.hasFpdBalance &&
      (!self.hasFpdBalance || [self.fpdBalance isEqual:otherMessage.fpdBalance]) &&
      self.hasLastFpdProfit == otherMessage.hasLastFpdProfit &&
      (!self.hasLastFpdProfit || [self.lastFpdProfit isEqual:otherMessage.lastFpdProfit]) &&
      self.hasCumulativeFpdProfit == otherMessage.hasCumulativeFpdProfit &&
      (!self.hasCumulativeFpdProfit || [self.cumulativeFpdProfit isEqual:otherMessage.cumulativeFpdProfit]) &&
      self.hasAtpHoldAmt == otherMessage.hasAtpHoldAmt &&
      (!self.hasAtpHoldAmt || [self.atpHoldAmt isEqual:otherMessage.atpHoldAmt]) &&
      self.hasAtpHoldProfit == otherMessage.hasAtpHoldProfit &&
      (!self.hasAtpHoldProfit || [self.atpHoldProfit isEqual:otherMessage.atpHoldProfit]) &&
      self.hasAtpSubscribeAmt == otherMessage.hasAtpSubscribeAmt &&
      (!self.hasAtpSubscribeAmt || [self.atpSubscribeAmt isEqual:otherMessage.atpSubscribeAmt]) &&
      self.hasRate == otherMessage.hasRate &&
      (!self.hasRate || [self.rate isEqual:otherMessage.rate]) &&
      self.hasOperableBalance == otherMessage.hasOperableBalance &&
      (!self.hasOperableBalance || [self.operableBalance isEqual:otherMessage.operableBalance]) &&
      self.hasTransferableBalance == otherMessage.hasTransferableBalance &&
      (!self.hasTransferableBalance || [self.transferableBalance isEqual:otherMessage.transferableBalance]) &&
      self.hasRedeemToBeConfirmedBalance == otherMessage.hasRedeemToBeConfirmedBalance &&
      (!self.hasRedeemToBeConfirmedBalance || [self.redeemToBeConfirmedBalance isEqual:otherMessage.redeemToBeConfirmedBalance]) &&
      self.hasToBeConfirmedBalance == otherMessage.hasToBeConfirmedBalance &&
      (!self.hasToBeConfirmedBalance || [self.toBeConfirmedBalance isEqual:otherMessage.toBeConfirmedBalance]) &&
      self.hasProfit == otherMessage.hasProfit &&
      (!self.hasProfit || [self.profit isEqual:otherMessage.profit]) &&
      self.hasProfitRateSeven == otherMessage.hasProfitRateSeven &&
      (!self.hasProfitRateSeven || [self.profitRateSeven isEqual:otherMessage.profitRateSeven]) &&
      self.hasInsureAmt == otherMessage.hasInsureAmt &&
      (!self.hasInsureAmt || [self.insureAmt isEqual:otherMessage.insureAmt]) &&
      self.hasFundsAsset == otherMessage.hasFundsAsset &&
      (!self.hasFundsAsset || [self.fundsAsset isEqual:otherMessage.fundsAsset]) &&
      self.hasKqbTotalProfit == otherMessage.hasKqbTotalProfit &&
      (!self.hasKqbTotalProfit || [self.kqbTotalProfit isEqual:otherMessage.kqbTotalProfit]) &&
      self.hasKqbProfit == otherMessage.hasKqbProfit &&
      (!self.hasKqbProfit || [self.kqbProfit isEqual:otherMessage.kqbProfit]) &&
      self.hasKqbRealShare == otherMessage.hasKqbRealShare &&
      (!self.hasKqbRealShare || [self.kqbRealShare isEqual:otherMessage.kqbRealShare]) &&
      self.hasPeAmount == otherMessage.hasPeAmount &&
      (!self.hasPeAmount || [self.peAmount isEqual:otherMessage.peAmount]) &&
      self.hasPeAppointNum == otherMessage.hasPeAppointNum &&
      (!self.hasPeAppointNum || [self.peAppointNum isEqual:otherMessage.peAppointNum]) &&
      self.hasPeIncome == otherMessage.hasPeIncome &&
      (!self.hasPeIncome || [self.peIncome isEqual:otherMessage.peIncome]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTotalAmt) {
    hashCode = hashCode * 31 + [self.totalAmt hash];
  }
  if (self.hasFpdBalance) {
    hashCode = hashCode * 31 + [self.fpdBalance hash];
  }
  if (self.hasLastFpdProfit) {
    hashCode = hashCode * 31 + [self.lastFpdProfit hash];
  }
  if (self.hasCumulativeFpdProfit) {
    hashCode = hashCode * 31 + [self.cumulativeFpdProfit hash];
  }
  if (self.hasAtpHoldAmt) {
    hashCode = hashCode * 31 + [self.atpHoldAmt hash];
  }
  if (self.hasAtpHoldProfit) {
    hashCode = hashCode * 31 + [self.atpHoldProfit hash];
  }
  if (self.hasAtpSubscribeAmt) {
    hashCode = hashCode * 31 + [self.atpSubscribeAmt hash];
  }
  if (self.hasRate) {
    hashCode = hashCode * 31 + [self.rate hash];
  }
  if (self.hasOperableBalance) {
    hashCode = hashCode * 31 + [self.operableBalance hash];
  }
  if (self.hasTransferableBalance) {
    hashCode = hashCode * 31 + [self.transferableBalance hash];
  }
  if (self.hasRedeemToBeConfirmedBalance) {
    hashCode = hashCode * 31 + [self.redeemToBeConfirmedBalance hash];
  }
  if (self.hasToBeConfirmedBalance) {
    hashCode = hashCode * 31 + [self.toBeConfirmedBalance hash];
  }
  if (self.hasProfit) {
    hashCode = hashCode * 31 + [self.profit hash];
  }
  if (self.hasProfitRateSeven) {
    hashCode = hashCode * 31 + [self.profitRateSeven hash];
  }
  if (self.hasInsureAmt) {
    hashCode = hashCode * 31 + [self.insureAmt hash];
  }
  if (self.hasFundsAsset) {
    hashCode = hashCode * 31 + [self.fundsAsset hash];
  }
  if (self.hasKqbTotalProfit) {
    hashCode = hashCode * 31 + [self.kqbTotalProfit hash];
  }
  if (self.hasKqbProfit) {
    hashCode = hashCode * 31 + [self.kqbProfit hash];
  }
  if (self.hasKqbRealShare) {
    hashCode = hashCode * 31 + [self.kqbRealShare hash];
  }
  if (self.hasPeAmount) {
    hashCode = hashCode * 31 + [self.peAmount hash];
  }
  if (self.hasPeAppointNum) {
    hashCode = hashCode * 31 + [self.peAppointNum hash];
  }
  if (self.hasPeIncome) {
    hashCode = hashCode * 31 + [self.peIncome hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentFinancialInfoBuilder()
@property (strong) ContentFinancialInfo* resultFinancialInfo;
@end

@implementation ContentFinancialInfoBuilder
@synthesize resultFinancialInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFinancialInfo = [[ContentFinancialInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFinancialInfo;
}
- (ContentFinancialInfoBuilder*) clear {
  self.resultFinancialInfo = [[ContentFinancialInfo alloc] init];
  return self;
}
- (ContentFinancialInfoBuilder*) clone {
  return [ContentFinancialInfo builderWithPrototype:resultFinancialInfo];
}
- (ContentFinancialInfo*) defaultInstance {
  return [ContentFinancialInfo defaultInstance];
}
- (ContentFinancialInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentFinancialInfo*) buildPartial {
  ContentFinancialInfo* returnMe = resultFinancialInfo;
  self.resultFinancialInfo = nil;
  return returnMe;
}
- (ContentFinancialInfoBuilder*) mergeFrom:(ContentFinancialInfo*) other {
  if (other == [ContentFinancialInfo defaultInstance]) {
    return self;
  }
  if (other.hasTotalAmt) {
    [self setTotalAmt:other.totalAmt];
  }
  if (other.hasFpdBalance) {
    [self setFpdBalance:other.fpdBalance];
  }
  if (other.hasLastFpdProfit) {
    [self setLastFpdProfit:other.lastFpdProfit];
  }
  if (other.hasCumulativeFpdProfit) {
    [self setCumulativeFpdProfit:other.cumulativeFpdProfit];
  }
  if (other.hasAtpHoldAmt) {
    [self setAtpHoldAmt:other.atpHoldAmt];
  }
  if (other.hasAtpHoldProfit) {
    [self setAtpHoldProfit:other.atpHoldProfit];
  }
  if (other.hasAtpSubscribeAmt) {
    [self setAtpSubscribeAmt:other.atpSubscribeAmt];
  }
  if (other.hasRate) {
    [self setRate:other.rate];
  }
  if (other.hasOperableBalance) {
    [self setOperableBalance:other.operableBalance];
  }
  if (other.hasTransferableBalance) {
    [self setTransferableBalance:other.transferableBalance];
  }
  if (other.hasRedeemToBeConfirmedBalance) {
    [self setRedeemToBeConfirmedBalance:other.redeemToBeConfirmedBalance];
  }
  if (other.hasToBeConfirmedBalance) {
    [self setToBeConfirmedBalance:other.toBeConfirmedBalance];
  }
  if (other.hasProfit) {
    [self setProfit:other.profit];
  }
  if (other.hasProfitRateSeven) {
    [self setProfitRateSeven:other.profitRateSeven];
  }
  if (other.hasInsureAmt) {
    [self setInsureAmt:other.insureAmt];
  }
  if (other.hasFundsAsset) {
    [self setFundsAsset:other.fundsAsset];
  }
  if (other.hasKqbTotalProfit) {
    [self setKqbTotalProfit:other.kqbTotalProfit];
  }
  if (other.hasKqbProfit) {
    [self setKqbProfit:other.kqbProfit];
  }
  if (other.hasKqbRealShare) {
    [self setKqbRealShare:other.kqbRealShare];
  }
  if (other.hasPeAmount) {
    [self setPeAmount:other.peAmount];
  }
  if (other.hasPeAppointNum) {
    [self setPeAppointNum:other.peAppointNum];
  }
  if (other.hasPeIncome) {
    [self setPeIncome:other.peIncome];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentFinancialInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentFinancialInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTotalAmt:[input readString]];
        break;
      }
      case 18: {
        [self setFpdBalance:[input readString]];
        break;
      }
      case 26: {
        [self setLastFpdProfit:[input readString]];
        break;
      }
      case 34: {
        [self setCumulativeFpdProfit:[input readString]];
        break;
      }
      case 42: {
        [self setAtpHoldAmt:[input readString]];
        break;
      }
      case 50: {
        [self setAtpHoldProfit:[input readString]];
        break;
      }
      case 58: {
        [self setAtpSubscribeAmt:[input readString]];
        break;
      }
      case 66: {
        [self setRate:[input readString]];
        break;
      }
      case 74: {
        [self setOperableBalance:[input readString]];
        break;
      }
      case 82: {
        [self setTransferableBalance:[input readString]];
        break;
      }
      case 90: {
        [self setRedeemToBeConfirmedBalance:[input readString]];
        break;
      }
      case 98: {
        [self setToBeConfirmedBalance:[input readString]];
        break;
      }
      case 106: {
        [self setProfit:[input readString]];
        break;
      }
      case 114: {
        [self setProfitRateSeven:[input readString]];
        break;
      }
      case 122: {
        [self setInsureAmt:[input readString]];
        break;
      }
      case 130: {
        [self setFundsAsset:[input readString]];
        break;
      }
      case 138: {
        [self setKqbTotalProfit:[input readString]];
        break;
      }
      case 146: {
        [self setKqbProfit:[input readString]];
        break;
      }
      case 154: {
        [self setKqbRealShare:[input readString]];
        break;
      }
      case 162: {
        [self setPeAmount:[input readString]];
        break;
      }
      case 170: {
        [self setPeAppointNum:[input readString]];
        break;
      }
      case 178: {
        [self setPeIncome:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTotalAmt {
  return resultFinancialInfo.hasTotalAmt;
}
- (NSString*) totalAmt {
  return resultFinancialInfo.totalAmt;
}
- (ContentFinancialInfoBuilder*) setTotalAmt:(NSString*) value {
  resultFinancialInfo.hasTotalAmt = YES;
  resultFinancialInfo.totalAmt = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearTotalAmt {
  resultFinancialInfo.hasTotalAmt = NO;
  resultFinancialInfo.totalAmt = @"";
  return self;
}
- (BOOL) hasFpdBalance {
  return resultFinancialInfo.hasFpdBalance;
}
- (NSString*) fpdBalance {
  return resultFinancialInfo.fpdBalance;
}
- (ContentFinancialInfoBuilder*) setFpdBalance:(NSString*) value {
  resultFinancialInfo.hasFpdBalance = YES;
  resultFinancialInfo.fpdBalance = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearFpdBalance {
  resultFinancialInfo.hasFpdBalance = NO;
  resultFinancialInfo.fpdBalance = @"";
  return self;
}
- (BOOL) hasLastFpdProfit {
  return resultFinancialInfo.hasLastFpdProfit;
}
- (NSString*) lastFpdProfit {
  return resultFinancialInfo.lastFpdProfit;
}
- (ContentFinancialInfoBuilder*) setLastFpdProfit:(NSString*) value {
  resultFinancialInfo.hasLastFpdProfit = YES;
  resultFinancialInfo.lastFpdProfit = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearLastFpdProfit {
  resultFinancialInfo.hasLastFpdProfit = NO;
  resultFinancialInfo.lastFpdProfit = @"";
  return self;
}
- (BOOL) hasCumulativeFpdProfit {
  return resultFinancialInfo.hasCumulativeFpdProfit;
}
- (NSString*) cumulativeFpdProfit {
  return resultFinancialInfo.cumulativeFpdProfit;
}
- (ContentFinancialInfoBuilder*) setCumulativeFpdProfit:(NSString*) value {
  resultFinancialInfo.hasCumulativeFpdProfit = YES;
  resultFinancialInfo.cumulativeFpdProfit = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearCumulativeFpdProfit {
  resultFinancialInfo.hasCumulativeFpdProfit = NO;
  resultFinancialInfo.cumulativeFpdProfit = @"";
  return self;
}
- (BOOL) hasAtpHoldAmt {
  return resultFinancialInfo.hasAtpHoldAmt;
}
- (NSString*) atpHoldAmt {
  return resultFinancialInfo.atpHoldAmt;
}
- (ContentFinancialInfoBuilder*) setAtpHoldAmt:(NSString*) value {
  resultFinancialInfo.hasAtpHoldAmt = YES;
  resultFinancialInfo.atpHoldAmt = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearAtpHoldAmt {
  resultFinancialInfo.hasAtpHoldAmt = NO;
  resultFinancialInfo.atpHoldAmt = @"";
  return self;
}
- (BOOL) hasAtpHoldProfit {
  return resultFinancialInfo.hasAtpHoldProfit;
}
- (NSString*) atpHoldProfit {
  return resultFinancialInfo.atpHoldProfit;
}
- (ContentFinancialInfoBuilder*) setAtpHoldProfit:(NSString*) value {
  resultFinancialInfo.hasAtpHoldProfit = YES;
  resultFinancialInfo.atpHoldProfit = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearAtpHoldProfit {
  resultFinancialInfo.hasAtpHoldProfit = NO;
  resultFinancialInfo.atpHoldProfit = @"";
  return self;
}
- (BOOL) hasAtpSubscribeAmt {
  return resultFinancialInfo.hasAtpSubscribeAmt;
}
- (NSString*) atpSubscribeAmt {
  return resultFinancialInfo.atpSubscribeAmt;
}
- (ContentFinancialInfoBuilder*) setAtpSubscribeAmt:(NSString*) value {
  resultFinancialInfo.hasAtpSubscribeAmt = YES;
  resultFinancialInfo.atpSubscribeAmt = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearAtpSubscribeAmt {
  resultFinancialInfo.hasAtpSubscribeAmt = NO;
  resultFinancialInfo.atpSubscribeAmt = @"";
  return self;
}
- (BOOL) hasRate {
  return resultFinancialInfo.hasRate;
}
- (NSString*) rate {
  return resultFinancialInfo.rate;
}
- (ContentFinancialInfoBuilder*) setRate:(NSString*) value {
  resultFinancialInfo.hasRate = YES;
  resultFinancialInfo.rate = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearRate {
  resultFinancialInfo.hasRate = NO;
  resultFinancialInfo.rate = @"";
  return self;
}
- (BOOL) hasOperableBalance {
  return resultFinancialInfo.hasOperableBalance;
}
- (NSString*) operableBalance {
  return resultFinancialInfo.operableBalance;
}
- (ContentFinancialInfoBuilder*) setOperableBalance:(NSString*) value {
  resultFinancialInfo.hasOperableBalance = YES;
  resultFinancialInfo.operableBalance = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearOperableBalance {
  resultFinancialInfo.hasOperableBalance = NO;
  resultFinancialInfo.operableBalance = @"";
  return self;
}
- (BOOL) hasTransferableBalance {
  return resultFinancialInfo.hasTransferableBalance;
}
- (NSString*) transferableBalance {
  return resultFinancialInfo.transferableBalance;
}
- (ContentFinancialInfoBuilder*) setTransferableBalance:(NSString*) value {
  resultFinancialInfo.hasTransferableBalance = YES;
  resultFinancialInfo.transferableBalance = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearTransferableBalance {
  resultFinancialInfo.hasTransferableBalance = NO;
  resultFinancialInfo.transferableBalance = @"";
  return self;
}
- (BOOL) hasRedeemToBeConfirmedBalance {
  return resultFinancialInfo.hasRedeemToBeConfirmedBalance;
}
- (NSString*) redeemToBeConfirmedBalance {
  return resultFinancialInfo.redeemToBeConfirmedBalance;
}
- (ContentFinancialInfoBuilder*) setRedeemToBeConfirmedBalance:(NSString*) value {
  resultFinancialInfo.hasRedeemToBeConfirmedBalance = YES;
  resultFinancialInfo.redeemToBeConfirmedBalance = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearRedeemToBeConfirmedBalance {
  resultFinancialInfo.hasRedeemToBeConfirmedBalance = NO;
  resultFinancialInfo.redeemToBeConfirmedBalance = @"";
  return self;
}
- (BOOL) hasToBeConfirmedBalance {
  return resultFinancialInfo.hasToBeConfirmedBalance;
}
- (NSString*) toBeConfirmedBalance {
  return resultFinancialInfo.toBeConfirmedBalance;
}
- (ContentFinancialInfoBuilder*) setToBeConfirmedBalance:(NSString*) value {
  resultFinancialInfo.hasToBeConfirmedBalance = YES;
  resultFinancialInfo.toBeConfirmedBalance = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearToBeConfirmedBalance {
  resultFinancialInfo.hasToBeConfirmedBalance = NO;
  resultFinancialInfo.toBeConfirmedBalance = @"";
  return self;
}
- (BOOL) hasProfit {
  return resultFinancialInfo.hasProfit;
}
- (NSString*) profit {
  return resultFinancialInfo.profit;
}
- (ContentFinancialInfoBuilder*) setProfit:(NSString*) value {
  resultFinancialInfo.hasProfit = YES;
  resultFinancialInfo.profit = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearProfit {
  resultFinancialInfo.hasProfit = NO;
  resultFinancialInfo.profit = @"";
  return self;
}
- (BOOL) hasProfitRateSeven {
  return resultFinancialInfo.hasProfitRateSeven;
}
- (NSString*) profitRateSeven {
  return resultFinancialInfo.profitRateSeven;
}
- (ContentFinancialInfoBuilder*) setProfitRateSeven:(NSString*) value {
  resultFinancialInfo.hasProfitRateSeven = YES;
  resultFinancialInfo.profitRateSeven = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearProfitRateSeven {
  resultFinancialInfo.hasProfitRateSeven = NO;
  resultFinancialInfo.profitRateSeven = @"";
  return self;
}
- (BOOL) hasInsureAmt {
  return resultFinancialInfo.hasInsureAmt;
}
- (NSString*) insureAmt {
  return resultFinancialInfo.insureAmt;
}
- (ContentFinancialInfoBuilder*) setInsureAmt:(NSString*) value {
  resultFinancialInfo.hasInsureAmt = YES;
  resultFinancialInfo.insureAmt = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearInsureAmt {
  resultFinancialInfo.hasInsureAmt = NO;
  resultFinancialInfo.insureAmt = @"";
  return self;
}
- (BOOL) hasFundsAsset {
  return resultFinancialInfo.hasFundsAsset;
}
- (NSString*) fundsAsset {
  return resultFinancialInfo.fundsAsset;
}
- (ContentFinancialInfoBuilder*) setFundsAsset:(NSString*) value {
  resultFinancialInfo.hasFundsAsset = YES;
  resultFinancialInfo.fundsAsset = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearFundsAsset {
  resultFinancialInfo.hasFundsAsset = NO;
  resultFinancialInfo.fundsAsset = @"";
  return self;
}
- (BOOL) hasKqbTotalProfit {
  return resultFinancialInfo.hasKqbTotalProfit;
}
- (NSString*) kqbTotalProfit {
  return resultFinancialInfo.kqbTotalProfit;
}
- (ContentFinancialInfoBuilder*) setKqbTotalProfit:(NSString*) value {
  resultFinancialInfo.hasKqbTotalProfit = YES;
  resultFinancialInfo.kqbTotalProfit = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearKqbTotalProfit {
  resultFinancialInfo.hasKqbTotalProfit = NO;
  resultFinancialInfo.kqbTotalProfit = @"";
  return self;
}
- (BOOL) hasKqbProfit {
  return resultFinancialInfo.hasKqbProfit;
}
- (NSString*) kqbProfit {
  return resultFinancialInfo.kqbProfit;
}
- (ContentFinancialInfoBuilder*) setKqbProfit:(NSString*) value {
  resultFinancialInfo.hasKqbProfit = YES;
  resultFinancialInfo.kqbProfit = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearKqbProfit {
  resultFinancialInfo.hasKqbProfit = NO;
  resultFinancialInfo.kqbProfit = @"";
  return self;
}
- (BOOL) hasKqbRealShare {
  return resultFinancialInfo.hasKqbRealShare;
}
- (NSString*) kqbRealShare {
  return resultFinancialInfo.kqbRealShare;
}
- (ContentFinancialInfoBuilder*) setKqbRealShare:(NSString*) value {
  resultFinancialInfo.hasKqbRealShare = YES;
  resultFinancialInfo.kqbRealShare = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearKqbRealShare {
  resultFinancialInfo.hasKqbRealShare = NO;
  resultFinancialInfo.kqbRealShare = @"";
  return self;
}
- (BOOL) hasPeAmount {
  return resultFinancialInfo.hasPeAmount;
}
- (NSString*) peAmount {
  return resultFinancialInfo.peAmount;
}
- (ContentFinancialInfoBuilder*) setPeAmount:(NSString*) value {
  resultFinancialInfo.hasPeAmount = YES;
  resultFinancialInfo.peAmount = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearPeAmount {
  resultFinancialInfo.hasPeAmount = NO;
  resultFinancialInfo.peAmount = @"";
  return self;
}
- (BOOL) hasPeAppointNum {
  return resultFinancialInfo.hasPeAppointNum;
}
- (NSString*) peAppointNum {
  return resultFinancialInfo.peAppointNum;
}
- (ContentFinancialInfoBuilder*) setPeAppointNum:(NSString*) value {
  resultFinancialInfo.hasPeAppointNum = YES;
  resultFinancialInfo.peAppointNum = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearPeAppointNum {
  resultFinancialInfo.hasPeAppointNum = NO;
  resultFinancialInfo.peAppointNum = @"";
  return self;
}
- (BOOL) hasPeIncome {
  return resultFinancialInfo.hasPeIncome;
}
- (NSString*) peIncome {
  return resultFinancialInfo.peIncome;
}
- (ContentFinancialInfoBuilder*) setPeIncome:(NSString*) value {
  resultFinancialInfo.hasPeIncome = YES;
  resultFinancialInfo.peIncome = value;
  return self;
}
- (ContentFinancialInfoBuilder*) clearPeIncome {
  resultFinancialInfo.hasPeIncome = NO;
  resultFinancialInfo.peIncome = @"";
  return self;
}
@end

@interface ContentMemberAuthDto ()
@property (strong) NSString* isVfi;
@property (strong) NSString* isCsi;
@property (strong) NSString* bankNames;
@property (strong) NSString* channelNum;
@property (strong) NSString* needAuthChannelNum;
@property (strong) NSString* isVeriMobile;
@property (strong) NSString* isDl;
@property (strong) NSString* curAcctType;
@property (strong) NSString* upgrade;
@end

@implementation ContentMemberAuthDto

- (BOOL) hasIsVfi {
  return !!hasIsVfi_;
}
- (void) setHasIsVfi:(BOOL) _value_ {
  hasIsVfi_ = !!_value_;
}
@synthesize isVfi;
- (BOOL) hasIsCsi {
  return !!hasIsCsi_;
}
- (void) setHasIsCsi:(BOOL) _value_ {
  hasIsCsi_ = !!_value_;
}
@synthesize isCsi;
- (BOOL) hasBankNames {
  return !!hasBankNames_;
}
- (void) setHasBankNames:(BOOL) _value_ {
  hasBankNames_ = !!_value_;
}
@synthesize bankNames;
- (BOOL) hasChannelNum {
  return !!hasChannelNum_;
}
- (void) setHasChannelNum:(BOOL) _value_ {
  hasChannelNum_ = !!_value_;
}
@synthesize channelNum;
- (BOOL) hasNeedAuthChannelNum {
  return !!hasNeedAuthChannelNum_;
}
- (void) setHasNeedAuthChannelNum:(BOOL) _value_ {
  hasNeedAuthChannelNum_ = !!_value_;
}
@synthesize needAuthChannelNum;
- (BOOL) hasIsVeriMobile {
  return !!hasIsVeriMobile_;
}
- (void) setHasIsVeriMobile:(BOOL) _value_ {
  hasIsVeriMobile_ = !!_value_;
}
@synthesize isVeriMobile;
- (BOOL) hasIsDl {
  return !!hasIsDl_;
}
- (void) setHasIsDl:(BOOL) _value_ {
  hasIsDl_ = !!_value_;
}
@synthesize isDl;
- (BOOL) hasCurAcctType {
  return !!hasCurAcctType_;
}
- (void) setHasCurAcctType:(BOOL) _value_ {
  hasCurAcctType_ = !!_value_;
}
@synthesize curAcctType;
- (BOOL) hasUpgrade {
  return !!hasUpgrade_;
}
- (void) setHasUpgrade:(BOOL) _value_ {
  hasUpgrade_ = !!_value_;
}
@synthesize upgrade;
- (instancetype) init {
  if ((self = [super init])) {
    self.isVfi = @"";
    self.isCsi = @"";
    self.bankNames = @"";
    self.channelNum = @"";
    self.needAuthChannelNum = @"";
    self.isVeriMobile = @"";
    self.isDl = @"";
    self.curAcctType = @"";
    self.upgrade = @"";
  }
  return self;
}
static ContentMemberAuthDto* defaultContentMemberAuthDtoInstance = nil;
+ (void) initialize {
  if (self == [ContentMemberAuthDto class]) {
    defaultContentMemberAuthDtoInstance = [[ContentMemberAuthDto alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentMemberAuthDtoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentMemberAuthDtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIsVfi) {
    [output writeString:1 value:self.isVfi];
  }
  if (self.hasIsCsi) {
    [output writeString:2 value:self.isCsi];
  }
  if (self.hasBankNames) {
    [output writeString:3 value:self.bankNames];
  }
  if (self.hasChannelNum) {
    [output writeString:4 value:self.channelNum];
  }
  if (self.hasNeedAuthChannelNum) {
    [output writeString:5 value:self.needAuthChannelNum];
  }
  if (self.hasIsVeriMobile) {
    [output writeString:6 value:self.isVeriMobile];
  }
  if (self.hasIsDl) {
    [output writeString:7 value:self.isDl];
  }
  if (self.hasCurAcctType) {
    [output writeString:8 value:self.curAcctType];
  }
  if (self.hasUpgrade) {
    [output writeString:9 value:self.upgrade];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIsVfi) {
    size_ += computeStringSize(1, self.isVfi);
  }
  if (self.hasIsCsi) {
    size_ += computeStringSize(2, self.isCsi);
  }
  if (self.hasBankNames) {
    size_ += computeStringSize(3, self.bankNames);
  }
  if (self.hasChannelNum) {
    size_ += computeStringSize(4, self.channelNum);
  }
  if (self.hasNeedAuthChannelNum) {
    size_ += computeStringSize(5, self.needAuthChannelNum);
  }
  if (self.hasIsVeriMobile) {
    size_ += computeStringSize(6, self.isVeriMobile);
  }
  if (self.hasIsDl) {
    size_ += computeStringSize(7, self.isDl);
  }
  if (self.hasCurAcctType) {
    size_ += computeStringSize(8, self.curAcctType);
  }
  if (self.hasUpgrade) {
    size_ += computeStringSize(9, self.upgrade);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentMemberAuthDto*) parseFromData:(NSData*) data {
  return (ContentMemberAuthDto*)[[[ContentMemberAuthDto builder] mergeFromData:data] build];
}
+ (ContentMemberAuthDto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberAuthDto*)[[[ContentMemberAuthDto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberAuthDto*) parseFromInputStream:(NSInputStream*) input {
  return (ContentMemberAuthDto*)[[[ContentMemberAuthDto builder] mergeFromInputStream:input] build];
}
+ (ContentMemberAuthDto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberAuthDto*)[[[ContentMemberAuthDto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberAuthDto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentMemberAuthDto*)[[[ContentMemberAuthDto builder] mergeFromCodedInputStream:input] build];
}
+ (ContentMemberAuthDto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMemberAuthDto*)[[[ContentMemberAuthDto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMemberAuthDtoBuilder*) builder {
  return [[ContentMemberAuthDtoBuilder alloc] init];
}
+ (ContentMemberAuthDtoBuilder*) builderWithPrototype:(ContentMemberAuthDto*) prototype {
  return [[ContentMemberAuthDto builder] mergeFrom:prototype];
}
- (ContentMemberAuthDtoBuilder*) builder {
  return [ContentMemberAuthDto builder];
}
- (ContentMemberAuthDtoBuilder*) toBuilder {
  return [ContentMemberAuthDto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIsVfi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isVfi", self.isVfi];
  }
  if (self.hasIsCsi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isCsi", self.isCsi];
  }
  if (self.hasBankNames) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankNames", self.bankNames];
  }
  if (self.hasChannelNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelNum", self.channelNum];
  }
  if (self.hasNeedAuthChannelNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"needAuthChannelNum", self.needAuthChannelNum];
  }
  if (self.hasIsVeriMobile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isVeriMobile", self.isVeriMobile];
  }
  if (self.hasIsDl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDl", self.isDl];
  }
  if (self.hasCurAcctType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curAcctType", self.curAcctType];
  }
  if (self.hasUpgrade) {
    [output appendFormat:@"%@%@: %@\n", indent, @"upgrade", self.upgrade];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIsVfi) {
    [dictionary setObject: self.isVfi forKey: @"isVfi"];
  }
  if (self.hasIsCsi) {
    [dictionary setObject: self.isCsi forKey: @"isCsi"];
  }
  if (self.hasBankNames) {
    [dictionary setObject: self.bankNames forKey: @"bankNames"];
  }
  if (self.hasChannelNum) {
    [dictionary setObject: self.channelNum forKey: @"channelNum"];
  }
  if (self.hasNeedAuthChannelNum) {
    [dictionary setObject: self.needAuthChannelNum forKey: @"needAuthChannelNum"];
  }
  if (self.hasIsVeriMobile) {
    [dictionary setObject: self.isVeriMobile forKey: @"isVeriMobile"];
  }
  if (self.hasIsDl) {
    [dictionary setObject: self.isDl forKey: @"isDl"];
  }
  if (self.hasCurAcctType) {
    [dictionary setObject: self.curAcctType forKey: @"curAcctType"];
  }
  if (self.hasUpgrade) {
    [dictionary setObject: self.upgrade forKey: @"upgrade"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentMemberAuthDto class]]) {
    return NO;
  }
  ContentMemberAuthDto *otherMessage = other;
  return
      self.hasIsVfi == otherMessage.hasIsVfi &&
      (!self.hasIsVfi || [self.isVfi isEqual:otherMessage.isVfi]) &&
      self.hasIsCsi == otherMessage.hasIsCsi &&
      (!self.hasIsCsi || [self.isCsi isEqual:otherMessage.isCsi]) &&
      self.hasBankNames == otherMessage.hasBankNames &&
      (!self.hasBankNames || [self.bankNames isEqual:otherMessage.bankNames]) &&
      self.hasChannelNum == otherMessage.hasChannelNum &&
      (!self.hasChannelNum || [self.channelNum isEqual:otherMessage.channelNum]) &&
      self.hasNeedAuthChannelNum == otherMessage.hasNeedAuthChannelNum &&
      (!self.hasNeedAuthChannelNum || [self.needAuthChannelNum isEqual:otherMessage.needAuthChannelNum]) &&
      self.hasIsVeriMobile == otherMessage.hasIsVeriMobile &&
      (!self.hasIsVeriMobile || [self.isVeriMobile isEqual:otherMessage.isVeriMobile]) &&
      self.hasIsDl == otherMessage.hasIsDl &&
      (!self.hasIsDl || [self.isDl isEqual:otherMessage.isDl]) &&
      self.hasCurAcctType == otherMessage.hasCurAcctType &&
      (!self.hasCurAcctType || [self.curAcctType isEqual:otherMessage.curAcctType]) &&
      self.hasUpgrade == otherMessage.hasUpgrade &&
      (!self.hasUpgrade || [self.upgrade isEqual:otherMessage.upgrade]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIsVfi) {
    hashCode = hashCode * 31 + [self.isVfi hash];
  }
  if (self.hasIsCsi) {
    hashCode = hashCode * 31 + [self.isCsi hash];
  }
  if (self.hasBankNames) {
    hashCode = hashCode * 31 + [self.bankNames hash];
  }
  if (self.hasChannelNum) {
    hashCode = hashCode * 31 + [self.channelNum hash];
  }
  if (self.hasNeedAuthChannelNum) {
    hashCode = hashCode * 31 + [self.needAuthChannelNum hash];
  }
  if (self.hasIsVeriMobile) {
    hashCode = hashCode * 31 + [self.isVeriMobile hash];
  }
  if (self.hasIsDl) {
    hashCode = hashCode * 31 + [self.isDl hash];
  }
  if (self.hasCurAcctType) {
    hashCode = hashCode * 31 + [self.curAcctType hash];
  }
  if (self.hasUpgrade) {
    hashCode = hashCode * 31 + [self.upgrade hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentMemberAuthDtoBuilder()
@property (strong) ContentMemberAuthDto* resultMemberAuthDto;
@end

@implementation ContentMemberAuthDtoBuilder
@synthesize resultMemberAuthDto;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMemberAuthDto = [[ContentMemberAuthDto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMemberAuthDto;
}
- (ContentMemberAuthDtoBuilder*) clear {
  self.resultMemberAuthDto = [[ContentMemberAuthDto alloc] init];
  return self;
}
- (ContentMemberAuthDtoBuilder*) clone {
  return [ContentMemberAuthDto builderWithPrototype:resultMemberAuthDto];
}
- (ContentMemberAuthDto*) defaultInstance {
  return [ContentMemberAuthDto defaultInstance];
}
- (ContentMemberAuthDto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentMemberAuthDto*) buildPartial {
  ContentMemberAuthDto* returnMe = resultMemberAuthDto;
  self.resultMemberAuthDto = nil;
  return returnMe;
}
- (ContentMemberAuthDtoBuilder*) mergeFrom:(ContentMemberAuthDto*) other {
  if (other == [ContentMemberAuthDto defaultInstance]) {
    return self;
  }
  if (other.hasIsVfi) {
    [self setIsVfi:other.isVfi];
  }
  if (other.hasIsCsi) {
    [self setIsCsi:other.isCsi];
  }
  if (other.hasBankNames) {
    [self setBankNames:other.bankNames];
  }
  if (other.hasChannelNum) {
    [self setChannelNum:other.channelNum];
  }
  if (other.hasNeedAuthChannelNum) {
    [self setNeedAuthChannelNum:other.needAuthChannelNum];
  }
  if (other.hasIsVeriMobile) {
    [self setIsVeriMobile:other.isVeriMobile];
  }
  if (other.hasIsDl) {
    [self setIsDl:other.isDl];
  }
  if (other.hasCurAcctType) {
    [self setCurAcctType:other.curAcctType];
  }
  if (other.hasUpgrade) {
    [self setUpgrade:other.upgrade];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentMemberAuthDtoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentMemberAuthDtoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIsVfi:[input readString]];
        break;
      }
      case 18: {
        [self setIsCsi:[input readString]];
        break;
      }
      case 26: {
        [self setBankNames:[input readString]];
        break;
      }
      case 34: {
        [self setChannelNum:[input readString]];
        break;
      }
      case 42: {
        [self setNeedAuthChannelNum:[input readString]];
        break;
      }
      case 50: {
        [self setIsVeriMobile:[input readString]];
        break;
      }
      case 58: {
        [self setIsDl:[input readString]];
        break;
      }
      case 66: {
        [self setCurAcctType:[input readString]];
        break;
      }
      case 74: {
        [self setUpgrade:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIsVfi {
  return resultMemberAuthDto.hasIsVfi;
}
- (NSString*) isVfi {
  return resultMemberAuthDto.isVfi;
}
- (ContentMemberAuthDtoBuilder*) setIsVfi:(NSString*) value {
  resultMemberAuthDto.hasIsVfi = YES;
  resultMemberAuthDto.isVfi = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearIsVfi {
  resultMemberAuthDto.hasIsVfi = NO;
  resultMemberAuthDto.isVfi = @"";
  return self;
}
- (BOOL) hasIsCsi {
  return resultMemberAuthDto.hasIsCsi;
}
- (NSString*) isCsi {
  return resultMemberAuthDto.isCsi;
}
- (ContentMemberAuthDtoBuilder*) setIsCsi:(NSString*) value {
  resultMemberAuthDto.hasIsCsi = YES;
  resultMemberAuthDto.isCsi = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearIsCsi {
  resultMemberAuthDto.hasIsCsi = NO;
  resultMemberAuthDto.isCsi = @"";
  return self;
}
- (BOOL) hasBankNames {
  return resultMemberAuthDto.hasBankNames;
}
- (NSString*) bankNames {
  return resultMemberAuthDto.bankNames;
}
- (ContentMemberAuthDtoBuilder*) setBankNames:(NSString*) value {
  resultMemberAuthDto.hasBankNames = YES;
  resultMemberAuthDto.bankNames = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearBankNames {
  resultMemberAuthDto.hasBankNames = NO;
  resultMemberAuthDto.bankNames = @"";
  return self;
}
- (BOOL) hasChannelNum {
  return resultMemberAuthDto.hasChannelNum;
}
- (NSString*) channelNum {
  return resultMemberAuthDto.channelNum;
}
- (ContentMemberAuthDtoBuilder*) setChannelNum:(NSString*) value {
  resultMemberAuthDto.hasChannelNum = YES;
  resultMemberAuthDto.channelNum = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearChannelNum {
  resultMemberAuthDto.hasChannelNum = NO;
  resultMemberAuthDto.channelNum = @"";
  return self;
}
- (BOOL) hasNeedAuthChannelNum {
  return resultMemberAuthDto.hasNeedAuthChannelNum;
}
- (NSString*) needAuthChannelNum {
  return resultMemberAuthDto.needAuthChannelNum;
}
- (ContentMemberAuthDtoBuilder*) setNeedAuthChannelNum:(NSString*) value {
  resultMemberAuthDto.hasNeedAuthChannelNum = YES;
  resultMemberAuthDto.needAuthChannelNum = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearNeedAuthChannelNum {
  resultMemberAuthDto.hasNeedAuthChannelNum = NO;
  resultMemberAuthDto.needAuthChannelNum = @"";
  return self;
}
- (BOOL) hasIsVeriMobile {
  return resultMemberAuthDto.hasIsVeriMobile;
}
- (NSString*) isVeriMobile {
  return resultMemberAuthDto.isVeriMobile;
}
- (ContentMemberAuthDtoBuilder*) setIsVeriMobile:(NSString*) value {
  resultMemberAuthDto.hasIsVeriMobile = YES;
  resultMemberAuthDto.isVeriMobile = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearIsVeriMobile {
  resultMemberAuthDto.hasIsVeriMobile = NO;
  resultMemberAuthDto.isVeriMobile = @"";
  return self;
}
- (BOOL) hasIsDl {
  return resultMemberAuthDto.hasIsDl;
}
- (NSString*) isDl {
  return resultMemberAuthDto.isDl;
}
- (ContentMemberAuthDtoBuilder*) setIsDl:(NSString*) value {
  resultMemberAuthDto.hasIsDl = YES;
  resultMemberAuthDto.isDl = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearIsDl {
  resultMemberAuthDto.hasIsDl = NO;
  resultMemberAuthDto.isDl = @"";
  return self;
}
- (BOOL) hasCurAcctType {
  return resultMemberAuthDto.hasCurAcctType;
}
- (NSString*) curAcctType {
  return resultMemberAuthDto.curAcctType;
}
- (ContentMemberAuthDtoBuilder*) setCurAcctType:(NSString*) value {
  resultMemberAuthDto.hasCurAcctType = YES;
  resultMemberAuthDto.curAcctType = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearCurAcctType {
  resultMemberAuthDto.hasCurAcctType = NO;
  resultMemberAuthDto.curAcctType = @"";
  return self;
}
- (BOOL) hasUpgrade {
  return resultMemberAuthDto.hasUpgrade;
}
- (NSString*) upgrade {
  return resultMemberAuthDto.upgrade;
}
- (ContentMemberAuthDtoBuilder*) setUpgrade:(NSString*) value {
  resultMemberAuthDto.hasUpgrade = YES;
  resultMemberAuthDto.upgrade = value;
  return self;
}
- (ContentMemberAuthDtoBuilder*) clearUpgrade {
  resultMemberAuthDto.hasUpgrade = NO;
  resultMemberAuthDto.upgrade = @"";
  return self;
}
@end

@interface ContentBankLimitAmountDto ()
@property (strong) NSString* id;
@property (strong) NSString* bankId;
@property (strong) NSString* cardType;
@property (strong) NSString* productCode;
@property (strong) NSString* dayAmount;
@property (strong) NSString* monthAmount;
@property (strong) NSString* singleAmount;
@end

@implementation ContentBankLimitAmountDto

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasBankId {
  return !!hasBankId_;
}
- (void) setHasBankId:(BOOL) _value_ {
  hasBankId_ = !!_value_;
}
@synthesize bankId;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) _value_ {
  hasCardType_ = !!_value_;
}
@synthesize cardType;
- (BOOL) hasProductCode {
  return !!hasProductCode_;
}
- (void) setHasProductCode:(BOOL) _value_ {
  hasProductCode_ = !!_value_;
}
@synthesize productCode;
- (BOOL) hasDayAmount {
  return !!hasDayAmount_;
}
- (void) setHasDayAmount:(BOOL) _value_ {
  hasDayAmount_ = !!_value_;
}
@synthesize dayAmount;
- (BOOL) hasMonthAmount {
  return !!hasMonthAmount_;
}
- (void) setHasMonthAmount:(BOOL) _value_ {
  hasMonthAmount_ = !!_value_;
}
@synthesize monthAmount;
- (BOOL) hasSingleAmount {
  return !!hasSingleAmount_;
}
- (void) setHasSingleAmount:(BOOL) _value_ {
  hasSingleAmount_ = !!_value_;
}
@synthesize singleAmount;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = @"";
    self.bankId = @"";
    self.cardType = @"";
    self.productCode = @"";
    self.dayAmount = @"";
    self.monthAmount = @"";
    self.singleAmount = @"";
  }
  return self;
}
static ContentBankLimitAmountDto* defaultContentBankLimitAmountDtoInstance = nil;
+ (void) initialize {
  if (self == [ContentBankLimitAmountDto class]) {
    defaultContentBankLimitAmountDtoInstance = [[ContentBankLimitAmountDto alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentBankLimitAmountDtoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentBankLimitAmountDtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasBankId) {
    [output writeString:2 value:self.bankId];
  }
  if (self.hasCardType) {
    [output writeString:3 value:self.cardType];
  }
  if (self.hasProductCode) {
    [output writeString:4 value:self.productCode];
  }
  if (self.hasDayAmount) {
    [output writeString:5 value:self.dayAmount];
  }
  if (self.hasMonthAmount) {
    [output writeString:6 value:self.monthAmount];
  }
  if (self.hasSingleAmount) {
    [output writeString:7 value:self.singleAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasBankId) {
    size_ += computeStringSize(2, self.bankId);
  }
  if (self.hasCardType) {
    size_ += computeStringSize(3, self.cardType);
  }
  if (self.hasProductCode) {
    size_ += computeStringSize(4, self.productCode);
  }
  if (self.hasDayAmount) {
    size_ += computeStringSize(5, self.dayAmount);
  }
  if (self.hasMonthAmount) {
    size_ += computeStringSize(6, self.monthAmount);
  }
  if (self.hasSingleAmount) {
    size_ += computeStringSize(7, self.singleAmount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentBankLimitAmountDto*) parseFromData:(NSData*) data {
  return (ContentBankLimitAmountDto*)[[[ContentBankLimitAmountDto builder] mergeFromData:data] build];
}
+ (ContentBankLimitAmountDto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBankLimitAmountDto*)[[[ContentBankLimitAmountDto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentBankLimitAmountDto*) parseFromInputStream:(NSInputStream*) input {
  return (ContentBankLimitAmountDto*)[[[ContentBankLimitAmountDto builder] mergeFromInputStream:input] build];
}
+ (ContentBankLimitAmountDto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBankLimitAmountDto*)[[[ContentBankLimitAmountDto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentBankLimitAmountDto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentBankLimitAmountDto*)[[[ContentBankLimitAmountDto builder] mergeFromCodedInputStream:input] build];
}
+ (ContentBankLimitAmountDto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBankLimitAmountDto*)[[[ContentBankLimitAmountDto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentBankLimitAmountDtoBuilder*) builder {
  return [[ContentBankLimitAmountDtoBuilder alloc] init];
}
+ (ContentBankLimitAmountDtoBuilder*) builderWithPrototype:(ContentBankLimitAmountDto*) prototype {
  return [[ContentBankLimitAmountDto builder] mergeFrom:prototype];
}
- (ContentBankLimitAmountDtoBuilder*) builder {
  return [ContentBankLimitAmountDto builder];
}
- (ContentBankLimitAmountDtoBuilder*) toBuilder {
  return [ContentBankLimitAmountDto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasBankId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankId", self.bankId];
  }
  if (self.hasCardType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardType", self.cardType];
  }
  if (self.hasProductCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productCode", self.productCode];
  }
  if (self.hasDayAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dayAmount", self.dayAmount];
  }
  if (self.hasMonthAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monthAmount", self.monthAmount];
  }
  if (self.hasSingleAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"singleAmount", self.singleAmount];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasBankId) {
    [dictionary setObject: self.bankId forKey: @"bankId"];
  }
  if (self.hasCardType) {
    [dictionary setObject: self.cardType forKey: @"cardType"];
  }
  if (self.hasProductCode) {
    [dictionary setObject: self.productCode forKey: @"productCode"];
  }
  if (self.hasDayAmount) {
    [dictionary setObject: self.dayAmount forKey: @"dayAmount"];
  }
  if (self.hasMonthAmount) {
    [dictionary setObject: self.monthAmount forKey: @"monthAmount"];
  }
  if (self.hasSingleAmount) {
    [dictionary setObject: self.singleAmount forKey: @"singleAmount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentBankLimitAmountDto class]]) {
    return NO;
  }
  ContentBankLimitAmountDto *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasBankId == otherMessage.hasBankId &&
      (!self.hasBankId || [self.bankId isEqual:otherMessage.bankId]) &&
      self.hasCardType == otherMessage.hasCardType &&
      (!self.hasCardType || [self.cardType isEqual:otherMessage.cardType]) &&
      self.hasProductCode == otherMessage.hasProductCode &&
      (!self.hasProductCode || [self.productCode isEqual:otherMessage.productCode]) &&
      self.hasDayAmount == otherMessage.hasDayAmount &&
      (!self.hasDayAmount || [self.dayAmount isEqual:otherMessage.dayAmount]) &&
      self.hasMonthAmount == otherMessage.hasMonthAmount &&
      (!self.hasMonthAmount || [self.monthAmount isEqual:otherMessage.monthAmount]) &&
      self.hasSingleAmount == otherMessage.hasSingleAmount &&
      (!self.hasSingleAmount || [self.singleAmount isEqual:otherMessage.singleAmount]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasBankId) {
    hashCode = hashCode * 31 + [self.bankId hash];
  }
  if (self.hasCardType) {
    hashCode = hashCode * 31 + [self.cardType hash];
  }
  if (self.hasProductCode) {
    hashCode = hashCode * 31 + [self.productCode hash];
  }
  if (self.hasDayAmount) {
    hashCode = hashCode * 31 + [self.dayAmount hash];
  }
  if (self.hasMonthAmount) {
    hashCode = hashCode * 31 + [self.monthAmount hash];
  }
  if (self.hasSingleAmount) {
    hashCode = hashCode * 31 + [self.singleAmount hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentBankLimitAmountDtoBuilder()
@property (strong) ContentBankLimitAmountDto* resultBankLimitAmountDto;
@end

@implementation ContentBankLimitAmountDtoBuilder
@synthesize resultBankLimitAmountDto;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBankLimitAmountDto = [[ContentBankLimitAmountDto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBankLimitAmountDto;
}
- (ContentBankLimitAmountDtoBuilder*) clear {
  self.resultBankLimitAmountDto = [[ContentBankLimitAmountDto alloc] init];
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) clone {
  return [ContentBankLimitAmountDto builderWithPrototype:resultBankLimitAmountDto];
}
- (ContentBankLimitAmountDto*) defaultInstance {
  return [ContentBankLimitAmountDto defaultInstance];
}
- (ContentBankLimitAmountDto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentBankLimitAmountDto*) buildPartial {
  ContentBankLimitAmountDto* returnMe = resultBankLimitAmountDto;
  self.resultBankLimitAmountDto = nil;
  return returnMe;
}
- (ContentBankLimitAmountDtoBuilder*) mergeFrom:(ContentBankLimitAmountDto*) other {
  if (other == [ContentBankLimitAmountDto defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasBankId) {
    [self setBankId:other.bankId];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  if (other.hasProductCode) {
    [self setProductCode:other.productCode];
  }
  if (other.hasDayAmount) {
    [self setDayAmount:other.dayAmount];
  }
  if (other.hasMonthAmount) {
    [self setMonthAmount:other.monthAmount];
  }
  if (other.hasSingleAmount) {
    [self setSingleAmount:other.singleAmount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentBankLimitAmountDtoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setBankId:[input readString]];
        break;
      }
      case 26: {
        [self setCardType:[input readString]];
        break;
      }
      case 34: {
        [self setProductCode:[input readString]];
        break;
      }
      case 42: {
        [self setDayAmount:[input readString]];
        break;
      }
      case 50: {
        [self setMonthAmount:[input readString]];
        break;
      }
      case 58: {
        [self setSingleAmount:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultBankLimitAmountDto.hasId;
}
- (NSString*) id {
  return resultBankLimitAmountDto.id;
}
- (ContentBankLimitAmountDtoBuilder*) setId:(NSString*) value {
  resultBankLimitAmountDto.hasId = YES;
  resultBankLimitAmountDto.id = value;
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) clearId {
  resultBankLimitAmountDto.hasId = NO;
  resultBankLimitAmountDto.id = @"";
  return self;
}
- (BOOL) hasBankId {
  return resultBankLimitAmountDto.hasBankId;
}
- (NSString*) bankId {
  return resultBankLimitAmountDto.bankId;
}
- (ContentBankLimitAmountDtoBuilder*) setBankId:(NSString*) value {
  resultBankLimitAmountDto.hasBankId = YES;
  resultBankLimitAmountDto.bankId = value;
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) clearBankId {
  resultBankLimitAmountDto.hasBankId = NO;
  resultBankLimitAmountDto.bankId = @"";
  return self;
}
- (BOOL) hasCardType {
  return resultBankLimitAmountDto.hasCardType;
}
- (NSString*) cardType {
  return resultBankLimitAmountDto.cardType;
}
- (ContentBankLimitAmountDtoBuilder*) setCardType:(NSString*) value {
  resultBankLimitAmountDto.hasCardType = YES;
  resultBankLimitAmountDto.cardType = value;
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) clearCardType {
  resultBankLimitAmountDto.hasCardType = NO;
  resultBankLimitAmountDto.cardType = @"";
  return self;
}
- (BOOL) hasProductCode {
  return resultBankLimitAmountDto.hasProductCode;
}
- (NSString*) productCode {
  return resultBankLimitAmountDto.productCode;
}
- (ContentBankLimitAmountDtoBuilder*) setProductCode:(NSString*) value {
  resultBankLimitAmountDto.hasProductCode = YES;
  resultBankLimitAmountDto.productCode = value;
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) clearProductCode {
  resultBankLimitAmountDto.hasProductCode = NO;
  resultBankLimitAmountDto.productCode = @"";
  return self;
}
- (BOOL) hasDayAmount {
  return resultBankLimitAmountDto.hasDayAmount;
}
- (NSString*) dayAmount {
  return resultBankLimitAmountDto.dayAmount;
}
- (ContentBankLimitAmountDtoBuilder*) setDayAmount:(NSString*) value {
  resultBankLimitAmountDto.hasDayAmount = YES;
  resultBankLimitAmountDto.dayAmount = value;
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) clearDayAmount {
  resultBankLimitAmountDto.hasDayAmount = NO;
  resultBankLimitAmountDto.dayAmount = @"";
  return self;
}
- (BOOL) hasMonthAmount {
  return resultBankLimitAmountDto.hasMonthAmount;
}
- (NSString*) monthAmount {
  return resultBankLimitAmountDto.monthAmount;
}
- (ContentBankLimitAmountDtoBuilder*) setMonthAmount:(NSString*) value {
  resultBankLimitAmountDto.hasMonthAmount = YES;
  resultBankLimitAmountDto.monthAmount = value;
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) clearMonthAmount {
  resultBankLimitAmountDto.hasMonthAmount = NO;
  resultBankLimitAmountDto.monthAmount = @"";
  return self;
}
- (BOOL) hasSingleAmount {
  return resultBankLimitAmountDto.hasSingleAmount;
}
- (NSString*) singleAmount {
  return resultBankLimitAmountDto.singleAmount;
}
- (ContentBankLimitAmountDtoBuilder*) setSingleAmount:(NSString*) value {
  resultBankLimitAmountDto.hasSingleAmount = YES;
  resultBankLimitAmountDto.singleAmount = value;
  return self;
}
- (ContentBankLimitAmountDtoBuilder*) clearSingleAmount {
  resultBankLimitAmountDto.hasSingleAmount = NO;
  resultBankLimitAmountDto.singleAmount = @"";
  return self;
}
@end

@interface ContentConflictAcc ()
@property (strong) NSString* pwid;
@property (strong) NSString* sysFrom;
@end

@implementation ContentConflictAcc

- (BOOL) hasPwid {
  return !!hasPwid_;
}
- (void) setHasPwid:(BOOL) _value_ {
  hasPwid_ = !!_value_;
}
@synthesize pwid;
- (BOOL) hasSysFrom {
  return !!hasSysFrom_;
}
- (void) setHasSysFrom:(BOOL) _value_ {
  hasSysFrom_ = !!_value_;
}
@synthesize sysFrom;
- (instancetype) init {
  if ((self = [super init])) {
    self.pwid = @"";
    self.sysFrom = @"";
  }
  return self;
}
static ContentConflictAcc* defaultContentConflictAccInstance = nil;
+ (void) initialize {
  if (self == [ContentConflictAcc class]) {
    defaultContentConflictAccInstance = [[ContentConflictAcc alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentConflictAccInstance;
}
- (instancetype) defaultInstance {
  return defaultContentConflictAccInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPwid) {
    [output writeString:1 value:self.pwid];
  }
  if (self.hasSysFrom) {
    [output writeString:2 value:self.sysFrom];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPwid) {
    size_ += computeStringSize(1, self.pwid);
  }
  if (self.hasSysFrom) {
    size_ += computeStringSize(2, self.sysFrom);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentConflictAcc*) parseFromData:(NSData*) data {
  return (ContentConflictAcc*)[[[ContentConflictAcc builder] mergeFromData:data] build];
}
+ (ContentConflictAcc*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentConflictAcc*)[[[ContentConflictAcc builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentConflictAcc*) parseFromInputStream:(NSInputStream*) input {
  return (ContentConflictAcc*)[[[ContentConflictAcc builder] mergeFromInputStream:input] build];
}
+ (ContentConflictAcc*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentConflictAcc*)[[[ContentConflictAcc builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentConflictAcc*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentConflictAcc*)[[[ContentConflictAcc builder] mergeFromCodedInputStream:input] build];
}
+ (ContentConflictAcc*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentConflictAcc*)[[[ContentConflictAcc builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentConflictAccBuilder*) builder {
  return [[ContentConflictAccBuilder alloc] init];
}
+ (ContentConflictAccBuilder*) builderWithPrototype:(ContentConflictAcc*) prototype {
  return [[ContentConflictAcc builder] mergeFrom:prototype];
}
- (ContentConflictAccBuilder*) builder {
  return [ContentConflictAcc builder];
}
- (ContentConflictAccBuilder*) toBuilder {
  return [ContentConflictAcc builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pwid", self.pwid];
  }
  if (self.hasSysFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sysFrom", self.sysFrom];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPwid) {
    [dictionary setObject: self.pwid forKey: @"pwid"];
  }
  if (self.hasSysFrom) {
    [dictionary setObject: self.sysFrom forKey: @"sysFrom"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentConflictAcc class]]) {
    return NO;
  }
  ContentConflictAcc *otherMessage = other;
  return
      self.hasPwid == otherMessage.hasPwid &&
      (!self.hasPwid || [self.pwid isEqual:otherMessage.pwid]) &&
      self.hasSysFrom == otherMessage.hasSysFrom &&
      (!self.hasSysFrom || [self.sysFrom isEqual:otherMessage.sysFrom]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPwid) {
    hashCode = hashCode * 31 + [self.pwid hash];
  }
  if (self.hasSysFrom) {
    hashCode = hashCode * 31 + [self.sysFrom hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentConflictAccBuilder()
@property (strong) ContentConflictAcc* resultConflictAcc;
@end

@implementation ContentConflictAccBuilder
@synthesize resultConflictAcc;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConflictAcc = [[ContentConflictAcc alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConflictAcc;
}
- (ContentConflictAccBuilder*) clear {
  self.resultConflictAcc = [[ContentConflictAcc alloc] init];
  return self;
}
- (ContentConflictAccBuilder*) clone {
  return [ContentConflictAcc builderWithPrototype:resultConflictAcc];
}
- (ContentConflictAcc*) defaultInstance {
  return [ContentConflictAcc defaultInstance];
}
- (ContentConflictAcc*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentConflictAcc*) buildPartial {
  ContentConflictAcc* returnMe = resultConflictAcc;
  self.resultConflictAcc = nil;
  return returnMe;
}
- (ContentConflictAccBuilder*) mergeFrom:(ContentConflictAcc*) other {
  if (other == [ContentConflictAcc defaultInstance]) {
    return self;
  }
  if (other.hasPwid) {
    [self setPwid:other.pwid];
  }
  if (other.hasSysFrom) {
    [self setSysFrom:other.sysFrom];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentConflictAccBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentConflictAccBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPwid:[input readString]];
        break;
      }
      case 18: {
        [self setSysFrom:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPwid {
  return resultConflictAcc.hasPwid;
}
- (NSString*) pwid {
  return resultConflictAcc.pwid;
}
- (ContentConflictAccBuilder*) setPwid:(NSString*) value {
  resultConflictAcc.hasPwid = YES;
  resultConflictAcc.pwid = value;
  return self;
}
- (ContentConflictAccBuilder*) clearPwid {
  resultConflictAcc.hasPwid = NO;
  resultConflictAcc.pwid = @"";
  return self;
}
- (BOOL) hasSysFrom {
  return resultConflictAcc.hasSysFrom;
}
- (NSString*) sysFrom {
  return resultConflictAcc.sysFrom;
}
- (ContentConflictAccBuilder*) setSysFrom:(NSString*) value {
  resultConflictAcc.hasSysFrom = YES;
  resultConflictAcc.sysFrom = value;
  return self;
}
- (ContentConflictAccBuilder*) clearSysFrom {
  resultConflictAcc.hasSysFrom = NO;
  resultConflictAcc.sysFrom = @"";
  return self;
}
@end

@interface ContentAppUpInfo ()
@property (strong) NSString* model;
@property (strong) NSString* systemName;
@property (strong) NSString* systemVersion;
@property (strong) NSString* deviceCity;
@property (strong) NSString* deviceProv;
@property (strong) NSString* resolution;
@property (strong) NSString* netWorkType;
@property (strong) NSString* region;
@property (strong) NSString* currentTime;
@property (strong) NSString* activateAppChannel;
@property (strong) NSString* deviceToken;
@property (strong) NS_RETURNS_NOT_RETAINED NSString* newBaiduTag;
@property (strong) NSString* deviceName;
@property (strong) NSString* idfa;
@property (strong) NSString* idfv;
@property (strong) NSString* userAgent;
@end

@implementation ContentAppUpInfo

- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) _value_ {
  hasModel_ = !!_value_;
}
@synthesize model;
- (BOOL) hasSystemName {
  return !!hasSystemName_;
}
- (void) setHasSystemName:(BOOL) _value_ {
  hasSystemName_ = !!_value_;
}
@synthesize systemName;
- (BOOL) hasSystemVersion {
  return !!hasSystemVersion_;
}
- (void) setHasSystemVersion:(BOOL) _value_ {
  hasSystemVersion_ = !!_value_;
}
@synthesize systemVersion;
- (BOOL) hasDeviceCity {
  return !!hasDeviceCity_;
}
- (void) setHasDeviceCity:(BOOL) _value_ {
  hasDeviceCity_ = !!_value_;
}
@synthesize deviceCity;
- (BOOL) hasDeviceProv {
  return !!hasDeviceProv_;
}
- (void) setHasDeviceProv:(BOOL) _value_ {
  hasDeviceProv_ = !!_value_;
}
@synthesize deviceProv;
- (BOOL) hasResolution {
  return !!hasResolution_;
}
- (void) setHasResolution:(BOOL) _value_ {
  hasResolution_ = !!_value_;
}
@synthesize resolution;
- (BOOL) hasNetWorkType {
  return !!hasNetWorkType_;
}
- (void) setHasNetWorkType:(BOOL) _value_ {
  hasNetWorkType_ = !!_value_;
}
@synthesize netWorkType;
- (BOOL) hasRegion {
  return !!hasRegion_;
}
- (void) setHasRegion:(BOOL) _value_ {
  hasRegion_ = !!_value_;
}
@synthesize region;
- (BOOL) hasCurrentTime {
  return !!hasCurrentTime_;
}
- (void) setHasCurrentTime:(BOOL) _value_ {
  hasCurrentTime_ = !!_value_;
}
@synthesize currentTime;
- (BOOL) hasActivateAppChannel {
  return !!hasActivateAppChannel_;
}
- (void) setHasActivateAppChannel:(BOOL) _value_ {
  hasActivateAppChannel_ = !!_value_;
}
@synthesize activateAppChannel;
- (BOOL) hasDeviceToken {
  return !!hasDeviceToken_;
}
- (void) setHasDeviceToken:(BOOL) _value_ {
  hasDeviceToken_ = !!_value_;
}
@synthesize deviceToken;
- (BOOL) hasNewBaiduTag {
  return !!hasNewBaiduTag_;
}
- (void) setHasNewBaiduTag:(BOOL) _value_ {
  hasNewBaiduTag_ = !!_value_;
}
@synthesize newBaiduTag;
- (BOOL) hasDeviceName {
  return !!hasDeviceName_;
}
- (void) setHasDeviceName:(BOOL) _value_ {
  hasDeviceName_ = !!_value_;
}
@synthesize deviceName;
- (BOOL) hasIdfa {
  return !!hasIdfa_;
}
- (void) setHasIdfa:(BOOL) _value_ {
  hasIdfa_ = !!_value_;
}
@synthesize idfa;
- (BOOL) hasIdfv {
  return !!hasIdfv_;
}
- (void) setHasIdfv:(BOOL) _value_ {
  hasIdfv_ = !!_value_;
}
@synthesize idfv;
- (BOOL) hasUserAgent {
  return !!hasUserAgent_;
}
- (void) setHasUserAgent:(BOOL) _value_ {
  hasUserAgent_ = !!_value_;
}
@synthesize userAgent;
- (instancetype) init {
  if ((self = [super init])) {
    self.model = @"";
    self.systemName = @"";
    self.systemVersion = @"";
    self.deviceCity = @"";
    self.deviceProv = @"";
    self.resolution = @"";
    self.netWorkType = @"";
    self.region = @"";
    self.currentTime = @"";
    self.activateAppChannel = @"";
    self.deviceToken = @"";
    self.newBaiduTag = @"";
    self.deviceName = @"";
    self.idfa = @"";
    self.idfv = @"";
    self.userAgent = @"";
  }
  return self;
}
static ContentAppUpInfo* defaultContentAppUpInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentAppUpInfo class]) {
    defaultContentAppUpInfoInstance = [[ContentAppUpInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentAppUpInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentAppUpInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasModel) {
    [output writeString:1 value:self.model];
  }
  if (self.hasSystemName) {
    [output writeString:2 value:self.systemName];
  }
  if (self.hasSystemVersion) {
    [output writeString:3 value:self.systemVersion];
  }
  if (self.hasDeviceCity) {
    [output writeString:4 value:self.deviceCity];
  }
  if (self.hasDeviceProv) {
    [output writeString:5 value:self.deviceProv];
  }
  if (self.hasResolution) {
    [output writeString:6 value:self.resolution];
  }
  if (self.hasNetWorkType) {
    [output writeString:7 value:self.netWorkType];
  }
  if (self.hasRegion) {
    [output writeString:8 value:self.region];
  }
  if (self.hasCurrentTime) {
    [output writeString:9 value:self.currentTime];
  }
  if (self.hasActivateAppChannel) {
    [output writeString:10 value:self.activateAppChannel];
  }
  if (self.hasDeviceToken) {
    [output writeString:11 value:self.deviceToken];
  }
  if (self.hasNewBaiduTag) {
    [output writeString:12 value:self.newBaiduTag];
  }
  if (self.hasDeviceName) {
    [output writeString:13 value:self.deviceName];
  }
  if (self.hasIdfa) {
    [output writeString:14 value:self.idfa];
  }
  if (self.hasIdfv) {
    [output writeString:15 value:self.idfv];
  }
  if (self.hasUserAgent) {
    [output writeString:16 value:self.userAgent];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasModel) {
    size_ += computeStringSize(1, self.model);
  }
  if (self.hasSystemName) {
    size_ += computeStringSize(2, self.systemName);
  }
  if (self.hasSystemVersion) {
    size_ += computeStringSize(3, self.systemVersion);
  }
  if (self.hasDeviceCity) {
    size_ += computeStringSize(4, self.deviceCity);
  }
  if (self.hasDeviceProv) {
    size_ += computeStringSize(5, self.deviceProv);
  }
  if (self.hasResolution) {
    size_ += computeStringSize(6, self.resolution);
  }
  if (self.hasNetWorkType) {
    size_ += computeStringSize(7, self.netWorkType);
  }
  if (self.hasRegion) {
    size_ += computeStringSize(8, self.region);
  }
  if (self.hasCurrentTime) {
    size_ += computeStringSize(9, self.currentTime);
  }
  if (self.hasActivateAppChannel) {
    size_ += computeStringSize(10, self.activateAppChannel);
  }
  if (self.hasDeviceToken) {
    size_ += computeStringSize(11, self.deviceToken);
  }
  if (self.hasNewBaiduTag) {
    size_ += computeStringSize(12, self.newBaiduTag);
  }
  if (self.hasDeviceName) {
    size_ += computeStringSize(13, self.deviceName);
  }
  if (self.hasIdfa) {
    size_ += computeStringSize(14, self.idfa);
  }
  if (self.hasIdfv) {
    size_ += computeStringSize(15, self.idfv);
  }
  if (self.hasUserAgent) {
    size_ += computeStringSize(16, self.userAgent);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentAppUpInfo*) parseFromData:(NSData*) data {
  return (ContentAppUpInfo*)[[[ContentAppUpInfo builder] mergeFromData:data] build];
}
+ (ContentAppUpInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAppUpInfo*)[[[ContentAppUpInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentAppUpInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentAppUpInfo*)[[[ContentAppUpInfo builder] mergeFromInputStream:input] build];
}
+ (ContentAppUpInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAppUpInfo*)[[[ContentAppUpInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAppUpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentAppUpInfo*)[[[ContentAppUpInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentAppUpInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAppUpInfo*)[[[ContentAppUpInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAppUpInfoBuilder*) builder {
  return [[ContentAppUpInfoBuilder alloc] init];
}
+ (ContentAppUpInfoBuilder*) builderWithPrototype:(ContentAppUpInfo*) prototype {
  return [[ContentAppUpInfo builder] mergeFrom:prototype];
}
- (ContentAppUpInfoBuilder*) builder {
  return [ContentAppUpInfo builder];
}
- (ContentAppUpInfoBuilder*) toBuilder {
  return [ContentAppUpInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"model", self.model];
  }
  if (self.hasSystemName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"systemName", self.systemName];
  }
  if (self.hasSystemVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"systemVersion", self.systemVersion];
  }
  if (self.hasDeviceCity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceCity", self.deviceCity];
  }
  if (self.hasDeviceProv) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceProv", self.deviceProv];
  }
  if (self.hasResolution) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resolution", self.resolution];
  }
  if (self.hasNetWorkType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"netWorkType", self.netWorkType];
  }
  if (self.hasRegion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"region", self.region];
  }
  if (self.hasCurrentTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentTime", self.currentTime];
  }
  if (self.hasActivateAppChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"activateAppChannel", self.activateAppChannel];
  }
  if (self.hasDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceToken", self.deviceToken];
  }
  if (self.hasNewBaiduTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newBaiduTag", self.newBaiduTag];
  }
  if (self.hasDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceName", self.deviceName];
  }
  if (self.hasIdfa) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idfa", self.idfa];
  }
  if (self.hasIdfv) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idfv", self.idfv];
  }
  if (self.hasUserAgent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userAgent", self.userAgent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasModel) {
    [dictionary setObject: self.model forKey: @"model"];
  }
  if (self.hasSystemName) {
    [dictionary setObject: self.systemName forKey: @"systemName"];
  }
  if (self.hasSystemVersion) {
    [dictionary setObject: self.systemVersion forKey: @"systemVersion"];
  }
  if (self.hasDeviceCity) {
    [dictionary setObject: self.deviceCity forKey: @"deviceCity"];
  }
  if (self.hasDeviceProv) {
    [dictionary setObject: self.deviceProv forKey: @"deviceProv"];
  }
  if (self.hasResolution) {
    [dictionary setObject: self.resolution forKey: @"resolution"];
  }
  if (self.hasNetWorkType) {
    [dictionary setObject: self.netWorkType forKey: @"netWorkType"];
  }
  if (self.hasRegion) {
    [dictionary setObject: self.region forKey: @"region"];
  }
  if (self.hasCurrentTime) {
    [dictionary setObject: self.currentTime forKey: @"currentTime"];
  }
  if (self.hasActivateAppChannel) {
    [dictionary setObject: self.activateAppChannel forKey: @"activateAppChannel"];
  }
  if (self.hasDeviceToken) {
    [dictionary setObject: self.deviceToken forKey: @"deviceToken"];
  }
  if (self.hasNewBaiduTag) {
    [dictionary setObject: self.newBaiduTag forKey: @"newBaiduTag"];
  }
  if (self.hasDeviceName) {
    [dictionary setObject: self.deviceName forKey: @"deviceName"];
  }
  if (self.hasIdfa) {
    [dictionary setObject: self.idfa forKey: @"idfa"];
  }
  if (self.hasIdfv) {
    [dictionary setObject: self.idfv forKey: @"idfv"];
  }
  if (self.hasUserAgent) {
    [dictionary setObject: self.userAgent forKey: @"userAgent"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentAppUpInfo class]]) {
    return NO;
  }
  ContentAppUpInfo *otherMessage = other;
  return
      self.hasModel == otherMessage.hasModel &&
      (!self.hasModel || [self.model isEqual:otherMessage.model]) &&
      self.hasSystemName == otherMessage.hasSystemName &&
      (!self.hasSystemName || [self.systemName isEqual:otherMessage.systemName]) &&
      self.hasSystemVersion == otherMessage.hasSystemVersion &&
      (!self.hasSystemVersion || [self.systemVersion isEqual:otherMessage.systemVersion]) &&
      self.hasDeviceCity == otherMessage.hasDeviceCity &&
      (!self.hasDeviceCity || [self.deviceCity isEqual:otherMessage.deviceCity]) &&
      self.hasDeviceProv == otherMessage.hasDeviceProv &&
      (!self.hasDeviceProv || [self.deviceProv isEqual:otherMessage.deviceProv]) &&
      self.hasResolution == otherMessage.hasResolution &&
      (!self.hasResolution || [self.resolution isEqual:otherMessage.resolution]) &&
      self.hasNetWorkType == otherMessage.hasNetWorkType &&
      (!self.hasNetWorkType || [self.netWorkType isEqual:otherMessage.netWorkType]) &&
      self.hasRegion == otherMessage.hasRegion &&
      (!self.hasRegion || [self.region isEqual:otherMessage.region]) &&
      self.hasCurrentTime == otherMessage.hasCurrentTime &&
      (!self.hasCurrentTime || [self.currentTime isEqual:otherMessage.currentTime]) &&
      self.hasActivateAppChannel == otherMessage.hasActivateAppChannel &&
      (!self.hasActivateAppChannel || [self.activateAppChannel isEqual:otherMessage.activateAppChannel]) &&
      self.hasDeviceToken == otherMessage.hasDeviceToken &&
      (!self.hasDeviceToken || [self.deviceToken isEqual:otherMessage.deviceToken]) &&
      self.hasNewBaiduTag == otherMessage.hasNewBaiduTag &&
      (!self.hasNewBaiduTag || [self.newBaiduTag isEqual:otherMessage.newBaiduTag]) &&
      self.hasDeviceName == otherMessage.hasDeviceName &&
      (!self.hasDeviceName || [self.deviceName isEqual:otherMessage.deviceName]) &&
      self.hasIdfa == otherMessage.hasIdfa &&
      (!self.hasIdfa || [self.idfa isEqual:otherMessage.idfa]) &&
      self.hasIdfv == otherMessage.hasIdfv &&
      (!self.hasIdfv || [self.idfv isEqual:otherMessage.idfv]) &&
      self.hasUserAgent == otherMessage.hasUserAgent &&
      (!self.hasUserAgent || [self.userAgent isEqual:otherMessage.userAgent]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasModel) {
    hashCode = hashCode * 31 + [self.model hash];
  }
  if (self.hasSystemName) {
    hashCode = hashCode * 31 + [self.systemName hash];
  }
  if (self.hasSystemVersion) {
    hashCode = hashCode * 31 + [self.systemVersion hash];
  }
  if (self.hasDeviceCity) {
    hashCode = hashCode * 31 + [self.deviceCity hash];
  }
  if (self.hasDeviceProv) {
    hashCode = hashCode * 31 + [self.deviceProv hash];
  }
  if (self.hasResolution) {
    hashCode = hashCode * 31 + [self.resolution hash];
  }
  if (self.hasNetWorkType) {
    hashCode = hashCode * 31 + [self.netWorkType hash];
  }
  if (self.hasRegion) {
    hashCode = hashCode * 31 + [self.region hash];
  }
  if (self.hasCurrentTime) {
    hashCode = hashCode * 31 + [self.currentTime hash];
  }
  if (self.hasActivateAppChannel) {
    hashCode = hashCode * 31 + [self.activateAppChannel hash];
  }
  if (self.hasDeviceToken) {
    hashCode = hashCode * 31 + [self.deviceToken hash];
  }
  if (self.hasNewBaiduTag) {
    hashCode = hashCode * 31 + [self.newBaiduTag hash];
  }
  if (self.hasDeviceName) {
    hashCode = hashCode * 31 + [self.deviceName hash];
  }
  if (self.hasIdfa) {
    hashCode = hashCode * 31 + [self.idfa hash];
  }
  if (self.hasIdfv) {
    hashCode = hashCode * 31 + [self.idfv hash];
  }
  if (self.hasUserAgent) {
    hashCode = hashCode * 31 + [self.userAgent hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentAppUpInfoBuilder()
@property (strong) ContentAppUpInfo* resultAppUpInfo;
@end

@implementation ContentAppUpInfoBuilder
@synthesize resultAppUpInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppUpInfo = [[ContentAppUpInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppUpInfo;
}
- (ContentAppUpInfoBuilder*) clear {
  self.resultAppUpInfo = [[ContentAppUpInfo alloc] init];
  return self;
}
- (ContentAppUpInfoBuilder*) clone {
  return [ContentAppUpInfo builderWithPrototype:resultAppUpInfo];
}
- (ContentAppUpInfo*) defaultInstance {
  return [ContentAppUpInfo defaultInstance];
}
- (ContentAppUpInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentAppUpInfo*) buildPartial {
  ContentAppUpInfo* returnMe = resultAppUpInfo;
  self.resultAppUpInfo = nil;
  return returnMe;
}
- (ContentAppUpInfoBuilder*) mergeFrom:(ContentAppUpInfo*) other {
  if (other == [ContentAppUpInfo defaultInstance]) {
    return self;
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasSystemName) {
    [self setSystemName:other.systemName];
  }
  if (other.hasSystemVersion) {
    [self setSystemVersion:other.systemVersion];
  }
  if (other.hasDeviceCity) {
    [self setDeviceCity:other.deviceCity];
  }
  if (other.hasDeviceProv) {
    [self setDeviceProv:other.deviceProv];
  }
  if (other.hasResolution) {
    [self setResolution:other.resolution];
  }
  if (other.hasNetWorkType) {
    [self setNetWorkType:other.netWorkType];
  }
  if (other.hasRegion) {
    [self setRegion:other.region];
  }
  if (other.hasCurrentTime) {
    [self setCurrentTime:other.currentTime];
  }
  if (other.hasActivateAppChannel) {
    [self setActivateAppChannel:other.activateAppChannel];
  }
  if (other.hasDeviceToken) {
    [self setDeviceToken:other.deviceToken];
  }
  if (other.hasNewBaiduTag) {
    [self setNewBaiduTag:other.newBaiduTag];
  }
  if (other.hasDeviceName) {
    [self setDeviceName:other.deviceName];
  }
  if (other.hasIdfa) {
    [self setIdfa:other.idfa];
  }
  if (other.hasIdfv) {
    [self setIdfv:other.idfv];
  }
  if (other.hasUserAgent) {
    [self setUserAgent:other.userAgent];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentAppUpInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentAppUpInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setModel:[input readString]];
        break;
      }
      case 18: {
        [self setSystemName:[input readString]];
        break;
      }
      case 26: {
        [self setSystemVersion:[input readString]];
        break;
      }
      case 34: {
        [self setDeviceCity:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceProv:[input readString]];
        break;
      }
      case 50: {
        [self setResolution:[input readString]];
        break;
      }
      case 58: {
        [self setNetWorkType:[input readString]];
        break;
      }
      case 66: {
        [self setRegion:[input readString]];
        break;
      }
      case 74: {
        [self setCurrentTime:[input readString]];
        break;
      }
      case 82: {
        [self setActivateAppChannel:[input readString]];
        break;
      }
      case 90: {
        [self setDeviceToken:[input readString]];
        break;
      }
      case 98: {
        [self setNewBaiduTag:[input readString]];
        break;
      }
      case 106: {
        [self setDeviceName:[input readString]];
        break;
      }
      case 114: {
        [self setIdfa:[input readString]];
        break;
      }
      case 122: {
        [self setIdfv:[input readString]];
        break;
      }
      case 130: {
        [self setUserAgent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasModel {
  return resultAppUpInfo.hasModel;
}
- (NSString*) model {
  return resultAppUpInfo.model;
}
- (ContentAppUpInfoBuilder*) setModel:(NSString*) value {
  resultAppUpInfo.hasModel = YES;
  resultAppUpInfo.model = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearModel {
  resultAppUpInfo.hasModel = NO;
  resultAppUpInfo.model = @"";
  return self;
}
- (BOOL) hasSystemName {
  return resultAppUpInfo.hasSystemName;
}
- (NSString*) systemName {
  return resultAppUpInfo.systemName;
}
- (ContentAppUpInfoBuilder*) setSystemName:(NSString*) value {
  resultAppUpInfo.hasSystemName = YES;
  resultAppUpInfo.systemName = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearSystemName {
  resultAppUpInfo.hasSystemName = NO;
  resultAppUpInfo.systemName = @"";
  return self;
}
- (BOOL) hasSystemVersion {
  return resultAppUpInfo.hasSystemVersion;
}
- (NSString*) systemVersion {
  return resultAppUpInfo.systemVersion;
}
- (ContentAppUpInfoBuilder*) setSystemVersion:(NSString*) value {
  resultAppUpInfo.hasSystemVersion = YES;
  resultAppUpInfo.systemVersion = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearSystemVersion {
  resultAppUpInfo.hasSystemVersion = NO;
  resultAppUpInfo.systemVersion = @"";
  return self;
}
- (BOOL) hasDeviceCity {
  return resultAppUpInfo.hasDeviceCity;
}
- (NSString*) deviceCity {
  return resultAppUpInfo.deviceCity;
}
- (ContentAppUpInfoBuilder*) setDeviceCity:(NSString*) value {
  resultAppUpInfo.hasDeviceCity = YES;
  resultAppUpInfo.deviceCity = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearDeviceCity {
  resultAppUpInfo.hasDeviceCity = NO;
  resultAppUpInfo.deviceCity = @"";
  return self;
}
- (BOOL) hasDeviceProv {
  return resultAppUpInfo.hasDeviceProv;
}
- (NSString*) deviceProv {
  return resultAppUpInfo.deviceProv;
}
- (ContentAppUpInfoBuilder*) setDeviceProv:(NSString*) value {
  resultAppUpInfo.hasDeviceProv = YES;
  resultAppUpInfo.deviceProv = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearDeviceProv {
  resultAppUpInfo.hasDeviceProv = NO;
  resultAppUpInfo.deviceProv = @"";
  return self;
}
- (BOOL) hasResolution {
  return resultAppUpInfo.hasResolution;
}
- (NSString*) resolution {
  return resultAppUpInfo.resolution;
}
- (ContentAppUpInfoBuilder*) setResolution:(NSString*) value {
  resultAppUpInfo.hasResolution = YES;
  resultAppUpInfo.resolution = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearResolution {
  resultAppUpInfo.hasResolution = NO;
  resultAppUpInfo.resolution = @"";
  return self;
}
- (BOOL) hasNetWorkType {
  return resultAppUpInfo.hasNetWorkType;
}
- (NSString*) netWorkType {
  return resultAppUpInfo.netWorkType;
}
- (ContentAppUpInfoBuilder*) setNetWorkType:(NSString*) value {
  resultAppUpInfo.hasNetWorkType = YES;
  resultAppUpInfo.netWorkType = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearNetWorkType {
  resultAppUpInfo.hasNetWorkType = NO;
  resultAppUpInfo.netWorkType = @"";
  return self;
}
- (BOOL) hasRegion {
  return resultAppUpInfo.hasRegion;
}
- (NSString*) region {
  return resultAppUpInfo.region;
}
- (ContentAppUpInfoBuilder*) setRegion:(NSString*) value {
  resultAppUpInfo.hasRegion = YES;
  resultAppUpInfo.region = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearRegion {
  resultAppUpInfo.hasRegion = NO;
  resultAppUpInfo.region = @"";
  return self;
}
- (BOOL) hasCurrentTime {
  return resultAppUpInfo.hasCurrentTime;
}
- (NSString*) currentTime {
  return resultAppUpInfo.currentTime;
}
- (ContentAppUpInfoBuilder*) setCurrentTime:(NSString*) value {
  resultAppUpInfo.hasCurrentTime = YES;
  resultAppUpInfo.currentTime = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearCurrentTime {
  resultAppUpInfo.hasCurrentTime = NO;
  resultAppUpInfo.currentTime = @"";
  return self;
}
- (BOOL) hasActivateAppChannel {
  return resultAppUpInfo.hasActivateAppChannel;
}
- (NSString*) activateAppChannel {
  return resultAppUpInfo.activateAppChannel;
}
- (ContentAppUpInfoBuilder*) setActivateAppChannel:(NSString*) value {
  resultAppUpInfo.hasActivateAppChannel = YES;
  resultAppUpInfo.activateAppChannel = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearActivateAppChannel {
  resultAppUpInfo.hasActivateAppChannel = NO;
  resultAppUpInfo.activateAppChannel = @"";
  return self;
}
- (BOOL) hasDeviceToken {
  return resultAppUpInfo.hasDeviceToken;
}
- (NSString*) deviceToken {
  return resultAppUpInfo.deviceToken;
}
- (ContentAppUpInfoBuilder*) setDeviceToken:(NSString*) value {
  resultAppUpInfo.hasDeviceToken = YES;
  resultAppUpInfo.deviceToken = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearDeviceToken {
  resultAppUpInfo.hasDeviceToken = NO;
  resultAppUpInfo.deviceToken = @"";
  return self;
}
- (BOOL) hasNewBaiduTag {
  return resultAppUpInfo.hasNewBaiduTag;
}
- (NSString*) newBaiduTag {
  return resultAppUpInfo.newBaiduTag;
}
- (ContentAppUpInfoBuilder*) setNewBaiduTag:(NSString*) value {
  resultAppUpInfo.hasNewBaiduTag = YES;
  resultAppUpInfo.newBaiduTag = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearNewBaiduTag {
  resultAppUpInfo.hasNewBaiduTag = NO;
  resultAppUpInfo.newBaiduTag = @"";
  return self;
}
- (BOOL) hasDeviceName {
  return resultAppUpInfo.hasDeviceName;
}
- (NSString*) deviceName {
  return resultAppUpInfo.deviceName;
}
- (ContentAppUpInfoBuilder*) setDeviceName:(NSString*) value {
  resultAppUpInfo.hasDeviceName = YES;
  resultAppUpInfo.deviceName = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearDeviceName {
  resultAppUpInfo.hasDeviceName = NO;
  resultAppUpInfo.deviceName = @"";
  return self;
}
- (BOOL) hasIdfa {
  return resultAppUpInfo.hasIdfa;
}
- (NSString*) idfa {
  return resultAppUpInfo.idfa;
}
- (ContentAppUpInfoBuilder*) setIdfa:(NSString*) value {
  resultAppUpInfo.hasIdfa = YES;
  resultAppUpInfo.idfa = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearIdfa {
  resultAppUpInfo.hasIdfa = NO;
  resultAppUpInfo.idfa = @"";
  return self;
}
- (BOOL) hasIdfv {
  return resultAppUpInfo.hasIdfv;
}
- (NSString*) idfv {
  return resultAppUpInfo.idfv;
}
- (ContentAppUpInfoBuilder*) setIdfv:(NSString*) value {
  resultAppUpInfo.hasIdfv = YES;
  resultAppUpInfo.idfv = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearIdfv {
  resultAppUpInfo.hasIdfv = NO;
  resultAppUpInfo.idfv = @"";
  return self;
}
- (BOOL) hasUserAgent {
  return resultAppUpInfo.hasUserAgent;
}
- (NSString*) userAgent {
  return resultAppUpInfo.userAgent;
}
- (ContentAppUpInfoBuilder*) setUserAgent:(NSString*) value {
  resultAppUpInfo.hasUserAgent = YES;
  resultAppUpInfo.userAgent = value;
  return self;
}
- (ContentAppUpInfoBuilder*) clearUserAgent {
  resultAppUpInfo.hasUserAgent = NO;
  resultAppUpInfo.userAgent = @"";
  return self;
}
@end

@interface ContentAtpTradeOrder ()
@property (strong) NSString* atpProdCode;
@property (strong) NSString* amount;
@property (strong) NSString* atpProdName;
@property (strong) NSString* finProdType;
@property (strong) NSString* status;
@property (strong) NSString* crtTime;
@property (strong) NSString* tradeType;
@property (strong) NSString* returnRateExp;
@property (strong) NSString* holdShare;
@property (strong) NSString* orderId;
@property (strong) NSString* accountType;
@property (strong) NSString* tradePrice;
@property (strong) NSString* premiumRate;
@property (strong) NSString* interestFrom;
@property (strong) NSString* interestTo;
@property (strong) NSString* returnRateDesc;
@property (strong) NSString* currentPrice;
@property (strong) NSString* remark;
@property (strong) NSString* tradeTypeDesc;
@property (strong) NSString* acctNum;
@property (strong) NSString* depositBank;
@property (strong) NSString* acctHeaded;
@property (strong) NSString* finishTime;
@end

@implementation ContentAtpTradeOrder

- (BOOL) hasAtpProdCode {
  return !!hasAtpProdCode_;
}
- (void) setHasAtpProdCode:(BOOL) _value_ {
  hasAtpProdCode_ = !!_value_;
}
@synthesize atpProdCode;
- (BOOL) hasAmount {
  return !!hasAmount_;
}
- (void) setHasAmount:(BOOL) _value_ {
  hasAmount_ = !!_value_;
}
@synthesize amount;
- (BOOL) hasAtpProdName {
  return !!hasAtpProdName_;
}
- (void) setHasAtpProdName:(BOOL) _value_ {
  hasAtpProdName_ = !!_value_;
}
@synthesize atpProdName;
- (BOOL) hasFinProdType {
  return !!hasFinProdType_;
}
- (void) setHasFinProdType:(BOOL) _value_ {
  hasFinProdType_ = !!_value_;
}
@synthesize finProdType;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasCrtTime {
  return !!hasCrtTime_;
}
- (void) setHasCrtTime:(BOOL) _value_ {
  hasCrtTime_ = !!_value_;
}
@synthesize crtTime;
- (BOOL) hasTradeType {
  return !!hasTradeType_;
}
- (void) setHasTradeType:(BOOL) _value_ {
  hasTradeType_ = !!_value_;
}
@synthesize tradeType;
- (BOOL) hasReturnRateExp {
  return !!hasReturnRateExp_;
}
- (void) setHasReturnRateExp:(BOOL) _value_ {
  hasReturnRateExp_ = !!_value_;
}
@synthesize returnRateExp;
- (BOOL) hasHoldShare {
  return !!hasHoldShare_;
}
- (void) setHasHoldShare:(BOOL) _value_ {
  hasHoldShare_ = !!_value_;
}
@synthesize holdShare;
- (BOOL) hasOrderId {
  return !!hasOrderId_;
}
- (void) setHasOrderId:(BOOL) _value_ {
  hasOrderId_ = !!_value_;
}
@synthesize orderId;
- (BOOL) hasAccountType {
  return !!hasAccountType_;
}
- (void) setHasAccountType:(BOOL) _value_ {
  hasAccountType_ = !!_value_;
}
@synthesize accountType;
- (BOOL) hasTradePrice {
  return !!hasTradePrice_;
}
- (void) setHasTradePrice:(BOOL) _value_ {
  hasTradePrice_ = !!_value_;
}
@synthesize tradePrice;
- (BOOL) hasPremiumRate {
  return !!hasPremiumRate_;
}
- (void) setHasPremiumRate:(BOOL) _value_ {
  hasPremiumRate_ = !!_value_;
}
@synthesize premiumRate;
- (BOOL) hasInterestFrom {
  return !!hasInterestFrom_;
}
- (void) setHasInterestFrom:(BOOL) _value_ {
  hasInterestFrom_ = !!_value_;
}
@synthesize interestFrom;
- (BOOL) hasInterestTo {
  return !!hasInterestTo_;
}
- (void) setHasInterestTo:(BOOL) _value_ {
  hasInterestTo_ = !!_value_;
}
@synthesize interestTo;
- (BOOL) hasReturnRateDesc {
  return !!hasReturnRateDesc_;
}
- (void) setHasReturnRateDesc:(BOOL) _value_ {
  hasReturnRateDesc_ = !!_value_;
}
@synthesize returnRateDesc;
- (BOOL) hasCurrentPrice {
  return !!hasCurrentPrice_;
}
- (void) setHasCurrentPrice:(BOOL) _value_ {
  hasCurrentPrice_ = !!_value_;
}
@synthesize currentPrice;
- (BOOL) hasRemark {
  return !!hasRemark_;
}
- (void) setHasRemark:(BOOL) _value_ {
  hasRemark_ = !!_value_;
}
@synthesize remark;
- (BOOL) hasTradeTypeDesc {
  return !!hasTradeTypeDesc_;
}
- (void) setHasTradeTypeDesc:(BOOL) _value_ {
  hasTradeTypeDesc_ = !!_value_;
}
@synthesize tradeTypeDesc;
- (BOOL) hasAcctNum {
  return !!hasAcctNum_;
}
- (void) setHasAcctNum:(BOOL) _value_ {
  hasAcctNum_ = !!_value_;
}
@synthesize acctNum;
- (BOOL) hasDepositBank {
  return !!hasDepositBank_;
}
- (void) setHasDepositBank:(BOOL) _value_ {
  hasDepositBank_ = !!_value_;
}
@synthesize depositBank;
- (BOOL) hasAcctHeaded {
  return !!hasAcctHeaded_;
}
- (void) setHasAcctHeaded:(BOOL) _value_ {
  hasAcctHeaded_ = !!_value_;
}
@synthesize acctHeaded;
- (BOOL) hasFinishTime {
  return !!hasFinishTime_;
}
- (void) setHasFinishTime:(BOOL) _value_ {
  hasFinishTime_ = !!_value_;
}
@synthesize finishTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.atpProdCode = @"";
    self.amount = @"";
    self.atpProdName = @"";
    self.finProdType = @"";
    self.status = @"";
    self.crtTime = @"";
    self.tradeType = @"";
    self.returnRateExp = @"";
    self.holdShare = @"";
    self.orderId = @"";
    self.accountType = @"";
    self.tradePrice = @"";
    self.premiumRate = @"";
    self.interestFrom = @"";
    self.interestTo = @"";
    self.returnRateDesc = @"";
    self.currentPrice = @"";
    self.remark = @"";
    self.tradeTypeDesc = @"";
    self.acctNum = @"";
    self.depositBank = @"";
    self.acctHeaded = @"";
    self.finishTime = @"";
  }
  return self;
}
static ContentAtpTradeOrder* defaultContentAtpTradeOrderInstance = nil;
+ (void) initialize {
  if (self == [ContentAtpTradeOrder class]) {
    defaultContentAtpTradeOrderInstance = [[ContentAtpTradeOrder alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentAtpTradeOrderInstance;
}
- (instancetype) defaultInstance {
  return defaultContentAtpTradeOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAtpProdCode) {
    [output writeString:1 value:self.atpProdCode];
  }
  if (self.hasAmount) {
    [output writeString:2 value:self.amount];
  }
  if (self.hasAtpProdName) {
    [output writeString:3 value:self.atpProdName];
  }
  if (self.hasFinProdType) {
    [output writeString:4 value:self.finProdType];
  }
  if (self.hasStatus) {
    [output writeString:5 value:self.status];
  }
  if (self.hasCrtTime) {
    [output writeString:6 value:self.crtTime];
  }
  if (self.hasTradeType) {
    [output writeString:7 value:self.tradeType];
  }
  if (self.hasReturnRateExp) {
    [output writeString:8 value:self.returnRateExp];
  }
  if (self.hasHoldShare) {
    [output writeString:9 value:self.holdShare];
  }
  if (self.hasOrderId) {
    [output writeString:10 value:self.orderId];
  }
  if (self.hasAccountType) {
    [output writeString:11 value:self.accountType];
  }
  if (self.hasTradePrice) {
    [output writeString:12 value:self.tradePrice];
  }
  if (self.hasPremiumRate) {
    [output writeString:13 value:self.premiumRate];
  }
  if (self.hasInterestFrom) {
    [output writeString:14 value:self.interestFrom];
  }
  if (self.hasInterestTo) {
    [output writeString:15 value:self.interestTo];
  }
  if (self.hasReturnRateDesc) {
    [output writeString:16 value:self.returnRateDesc];
  }
  if (self.hasCurrentPrice) {
    [output writeString:17 value:self.currentPrice];
  }
  if (self.hasRemark) {
    [output writeString:18 value:self.remark];
  }
  if (self.hasTradeTypeDesc) {
    [output writeString:19 value:self.tradeTypeDesc];
  }
  if (self.hasAcctNum) {
    [output writeString:20 value:self.acctNum];
  }
  if (self.hasDepositBank) {
    [output writeString:21 value:self.depositBank];
  }
  if (self.hasAcctHeaded) {
    [output writeString:22 value:self.acctHeaded];
  }
  if (self.hasFinishTime) {
    [output writeString:23 value:self.finishTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAtpProdCode) {
    size_ += computeStringSize(1, self.atpProdCode);
  }
  if (self.hasAmount) {
    size_ += computeStringSize(2, self.amount);
  }
  if (self.hasAtpProdName) {
    size_ += computeStringSize(3, self.atpProdName);
  }
  if (self.hasFinProdType) {
    size_ += computeStringSize(4, self.finProdType);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(5, self.status);
  }
  if (self.hasCrtTime) {
    size_ += computeStringSize(6, self.crtTime);
  }
  if (self.hasTradeType) {
    size_ += computeStringSize(7, self.tradeType);
  }
  if (self.hasReturnRateExp) {
    size_ += computeStringSize(8, self.returnRateExp);
  }
  if (self.hasHoldShare) {
    size_ += computeStringSize(9, self.holdShare);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(10, self.orderId);
  }
  if (self.hasAccountType) {
    size_ += computeStringSize(11, self.accountType);
  }
  if (self.hasTradePrice) {
    size_ += computeStringSize(12, self.tradePrice);
  }
  if (self.hasPremiumRate) {
    size_ += computeStringSize(13, self.premiumRate);
  }
  if (self.hasInterestFrom) {
    size_ += computeStringSize(14, self.interestFrom);
  }
  if (self.hasInterestTo) {
    size_ += computeStringSize(15, self.interestTo);
  }
  if (self.hasReturnRateDesc) {
    size_ += computeStringSize(16, self.returnRateDesc);
  }
  if (self.hasCurrentPrice) {
    size_ += computeStringSize(17, self.currentPrice);
  }
  if (self.hasRemark) {
    size_ += computeStringSize(18, self.remark);
  }
  if (self.hasTradeTypeDesc) {
    size_ += computeStringSize(19, self.tradeTypeDesc);
  }
  if (self.hasAcctNum) {
    size_ += computeStringSize(20, self.acctNum);
  }
  if (self.hasDepositBank) {
    size_ += computeStringSize(21, self.depositBank);
  }
  if (self.hasAcctHeaded) {
    size_ += computeStringSize(22, self.acctHeaded);
  }
  if (self.hasFinishTime) {
    size_ += computeStringSize(23, self.finishTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentAtpTradeOrder*) parseFromData:(NSData*) data {
  return (ContentAtpTradeOrder*)[[[ContentAtpTradeOrder builder] mergeFromData:data] build];
}
+ (ContentAtpTradeOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAtpTradeOrder*)[[[ContentAtpTradeOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentAtpTradeOrder*) parseFromInputStream:(NSInputStream*) input {
  return (ContentAtpTradeOrder*)[[[ContentAtpTradeOrder builder] mergeFromInputStream:input] build];
}
+ (ContentAtpTradeOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAtpTradeOrder*)[[[ContentAtpTradeOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAtpTradeOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentAtpTradeOrder*)[[[ContentAtpTradeOrder builder] mergeFromCodedInputStream:input] build];
}
+ (ContentAtpTradeOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAtpTradeOrder*)[[[ContentAtpTradeOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAtpTradeOrderBuilder*) builder {
  return [[ContentAtpTradeOrderBuilder alloc] init];
}
+ (ContentAtpTradeOrderBuilder*) builderWithPrototype:(ContentAtpTradeOrder*) prototype {
  return [[ContentAtpTradeOrder builder] mergeFrom:prototype];
}
- (ContentAtpTradeOrderBuilder*) builder {
  return [ContentAtpTradeOrder builder];
}
- (ContentAtpTradeOrderBuilder*) toBuilder {
  return [ContentAtpTradeOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAtpProdCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atpProdCode", self.atpProdCode];
  }
  if (self.hasAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amount", self.amount];
  }
  if (self.hasAtpProdName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atpProdName", self.atpProdName];
  }
  if (self.hasFinProdType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finProdType", self.finProdType];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasCrtTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"crtTime", self.crtTime];
  }
  if (self.hasTradeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeType", self.tradeType];
  }
  if (self.hasReturnRateExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"returnRateExp", self.returnRateExp];
  }
  if (self.hasHoldShare) {
    [output appendFormat:@"%@%@: %@\n", indent, @"holdShare", self.holdShare];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasAccountType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountType", self.accountType];
  }
  if (self.hasTradePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradePrice", self.tradePrice];
  }
  if (self.hasPremiumRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"premiumRate", self.premiumRate];
  }
  if (self.hasInterestFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"interestFrom", self.interestFrom];
  }
  if (self.hasInterestTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"interestTo", self.interestTo];
  }
  if (self.hasReturnRateDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"returnRateDesc", self.returnRateDesc];
  }
  if (self.hasCurrentPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentPrice", self.currentPrice];
  }
  if (self.hasRemark) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remark", self.remark];
  }
  if (self.hasTradeTypeDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeTypeDesc", self.tradeTypeDesc];
  }
  if (self.hasAcctNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acctNum", self.acctNum];
  }
  if (self.hasDepositBank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"depositBank", self.depositBank];
  }
  if (self.hasAcctHeaded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acctHeaded", self.acctHeaded];
  }
  if (self.hasFinishTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finishTime", self.finishTime];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAtpProdCode) {
    [dictionary setObject: self.atpProdCode forKey: @"atpProdCode"];
  }
  if (self.hasAmount) {
    [dictionary setObject: self.amount forKey: @"amount"];
  }
  if (self.hasAtpProdName) {
    [dictionary setObject: self.atpProdName forKey: @"atpProdName"];
  }
  if (self.hasFinProdType) {
    [dictionary setObject: self.finProdType forKey: @"finProdType"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  if (self.hasCrtTime) {
    [dictionary setObject: self.crtTime forKey: @"crtTime"];
  }
  if (self.hasTradeType) {
    [dictionary setObject: self.tradeType forKey: @"tradeType"];
  }
  if (self.hasReturnRateExp) {
    [dictionary setObject: self.returnRateExp forKey: @"returnRateExp"];
  }
  if (self.hasHoldShare) {
    [dictionary setObject: self.holdShare forKey: @"holdShare"];
  }
  if (self.hasOrderId) {
    [dictionary setObject: self.orderId forKey: @"orderId"];
  }
  if (self.hasAccountType) {
    [dictionary setObject: self.accountType forKey: @"accountType"];
  }
  if (self.hasTradePrice) {
    [dictionary setObject: self.tradePrice forKey: @"tradePrice"];
  }
  if (self.hasPremiumRate) {
    [dictionary setObject: self.premiumRate forKey: @"premiumRate"];
  }
  if (self.hasInterestFrom) {
    [dictionary setObject: self.interestFrom forKey: @"interestFrom"];
  }
  if (self.hasInterestTo) {
    [dictionary setObject: self.interestTo forKey: @"interestTo"];
  }
  if (self.hasReturnRateDesc) {
    [dictionary setObject: self.returnRateDesc forKey: @"returnRateDesc"];
  }
  if (self.hasCurrentPrice) {
    [dictionary setObject: self.currentPrice forKey: @"currentPrice"];
  }
  if (self.hasRemark) {
    [dictionary setObject: self.remark forKey: @"remark"];
  }
  if (self.hasTradeTypeDesc) {
    [dictionary setObject: self.tradeTypeDesc forKey: @"tradeTypeDesc"];
  }
  if (self.hasAcctNum) {
    [dictionary setObject: self.acctNum forKey: @"acctNum"];
  }
  if (self.hasDepositBank) {
    [dictionary setObject: self.depositBank forKey: @"depositBank"];
  }
  if (self.hasAcctHeaded) {
    [dictionary setObject: self.acctHeaded forKey: @"acctHeaded"];
  }
  if (self.hasFinishTime) {
    [dictionary setObject: self.finishTime forKey: @"finishTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentAtpTradeOrder class]]) {
    return NO;
  }
  ContentAtpTradeOrder *otherMessage = other;
  return
      self.hasAtpProdCode == otherMessage.hasAtpProdCode &&
      (!self.hasAtpProdCode || [self.atpProdCode isEqual:otherMessage.atpProdCode]) &&
      self.hasAmount == otherMessage.hasAmount &&
      (!self.hasAmount || [self.amount isEqual:otherMessage.amount]) &&
      self.hasAtpProdName == otherMessage.hasAtpProdName &&
      (!self.hasAtpProdName || [self.atpProdName isEqual:otherMessage.atpProdName]) &&
      self.hasFinProdType == otherMessage.hasFinProdType &&
      (!self.hasFinProdType || [self.finProdType isEqual:otherMessage.finProdType]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasCrtTime == otherMessage.hasCrtTime &&
      (!self.hasCrtTime || [self.crtTime isEqual:otherMessage.crtTime]) &&
      self.hasTradeType == otherMessage.hasTradeType &&
      (!self.hasTradeType || [self.tradeType isEqual:otherMessage.tradeType]) &&
      self.hasReturnRateExp == otherMessage.hasReturnRateExp &&
      (!self.hasReturnRateExp || [self.returnRateExp isEqual:otherMessage.returnRateExp]) &&
      self.hasHoldShare == otherMessage.hasHoldShare &&
      (!self.hasHoldShare || [self.holdShare isEqual:otherMessage.holdShare]) &&
      self.hasOrderId == otherMessage.hasOrderId &&
      (!self.hasOrderId || [self.orderId isEqual:otherMessage.orderId]) &&
      self.hasAccountType == otherMessage.hasAccountType &&
      (!self.hasAccountType || [self.accountType isEqual:otherMessage.accountType]) &&
      self.hasTradePrice == otherMessage.hasTradePrice &&
      (!self.hasTradePrice || [self.tradePrice isEqual:otherMessage.tradePrice]) &&
      self.hasPremiumRate == otherMessage.hasPremiumRate &&
      (!self.hasPremiumRate || [self.premiumRate isEqual:otherMessage.premiumRate]) &&
      self.hasInterestFrom == otherMessage.hasInterestFrom &&
      (!self.hasInterestFrom || [self.interestFrom isEqual:otherMessage.interestFrom]) &&
      self.hasInterestTo == otherMessage.hasInterestTo &&
      (!self.hasInterestTo || [self.interestTo isEqual:otherMessage.interestTo]) &&
      self.hasReturnRateDesc == otherMessage.hasReturnRateDesc &&
      (!self.hasReturnRateDesc || [self.returnRateDesc isEqual:otherMessage.returnRateDesc]) &&
      self.hasCurrentPrice == otherMessage.hasCurrentPrice &&
      (!self.hasCurrentPrice || [self.currentPrice isEqual:otherMessage.currentPrice]) &&
      self.hasRemark == otherMessage.hasRemark &&
      (!self.hasRemark || [self.remark isEqual:otherMessage.remark]) &&
      self.hasTradeTypeDesc == otherMessage.hasTradeTypeDesc &&
      (!self.hasTradeTypeDesc || [self.tradeTypeDesc isEqual:otherMessage.tradeTypeDesc]) &&
      self.hasAcctNum == otherMessage.hasAcctNum &&
      (!self.hasAcctNum || [self.acctNum isEqual:otherMessage.acctNum]) &&
      self.hasDepositBank == otherMessage.hasDepositBank &&
      (!self.hasDepositBank || [self.depositBank isEqual:otherMessage.depositBank]) &&
      self.hasAcctHeaded == otherMessage.hasAcctHeaded &&
      (!self.hasAcctHeaded || [self.acctHeaded isEqual:otherMessage.acctHeaded]) &&
      self.hasFinishTime == otherMessage.hasFinishTime &&
      (!self.hasFinishTime || [self.finishTime isEqual:otherMessage.finishTime]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAtpProdCode) {
    hashCode = hashCode * 31 + [self.atpProdCode hash];
  }
  if (self.hasAmount) {
    hashCode = hashCode * 31 + [self.amount hash];
  }
  if (self.hasAtpProdName) {
    hashCode = hashCode * 31 + [self.atpProdName hash];
  }
  if (self.hasFinProdType) {
    hashCode = hashCode * 31 + [self.finProdType hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasCrtTime) {
    hashCode = hashCode * 31 + [self.crtTime hash];
  }
  if (self.hasTradeType) {
    hashCode = hashCode * 31 + [self.tradeType hash];
  }
  if (self.hasReturnRateExp) {
    hashCode = hashCode * 31 + [self.returnRateExp hash];
  }
  if (self.hasHoldShare) {
    hashCode = hashCode * 31 + [self.holdShare hash];
  }
  if (self.hasOrderId) {
    hashCode = hashCode * 31 + [self.orderId hash];
  }
  if (self.hasAccountType) {
    hashCode = hashCode * 31 + [self.accountType hash];
  }
  if (self.hasTradePrice) {
    hashCode = hashCode * 31 + [self.tradePrice hash];
  }
  if (self.hasPremiumRate) {
    hashCode = hashCode * 31 + [self.premiumRate hash];
  }
  if (self.hasInterestFrom) {
    hashCode = hashCode * 31 + [self.interestFrom hash];
  }
  if (self.hasInterestTo) {
    hashCode = hashCode * 31 + [self.interestTo hash];
  }
  if (self.hasReturnRateDesc) {
    hashCode = hashCode * 31 + [self.returnRateDesc hash];
  }
  if (self.hasCurrentPrice) {
    hashCode = hashCode * 31 + [self.currentPrice hash];
  }
  if (self.hasRemark) {
    hashCode = hashCode * 31 + [self.remark hash];
  }
  if (self.hasTradeTypeDesc) {
    hashCode = hashCode * 31 + [self.tradeTypeDesc hash];
  }
  if (self.hasAcctNum) {
    hashCode = hashCode * 31 + [self.acctNum hash];
  }
  if (self.hasDepositBank) {
    hashCode = hashCode * 31 + [self.depositBank hash];
  }
  if (self.hasAcctHeaded) {
    hashCode = hashCode * 31 + [self.acctHeaded hash];
  }
  if (self.hasFinishTime) {
    hashCode = hashCode * 31 + [self.finishTime hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentAtpTradeOrderBuilder()
@property (strong) ContentAtpTradeOrder* resultAtpTradeOrder;
@end

@implementation ContentAtpTradeOrderBuilder
@synthesize resultAtpTradeOrder;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAtpTradeOrder = [[ContentAtpTradeOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAtpTradeOrder;
}
- (ContentAtpTradeOrderBuilder*) clear {
  self.resultAtpTradeOrder = [[ContentAtpTradeOrder alloc] init];
  return self;
}
- (ContentAtpTradeOrderBuilder*) clone {
  return [ContentAtpTradeOrder builderWithPrototype:resultAtpTradeOrder];
}
- (ContentAtpTradeOrder*) defaultInstance {
  return [ContentAtpTradeOrder defaultInstance];
}
- (ContentAtpTradeOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentAtpTradeOrder*) buildPartial {
  ContentAtpTradeOrder* returnMe = resultAtpTradeOrder;
  self.resultAtpTradeOrder = nil;
  return returnMe;
}
- (ContentAtpTradeOrderBuilder*) mergeFrom:(ContentAtpTradeOrder*) other {
  if (other == [ContentAtpTradeOrder defaultInstance]) {
    return self;
  }
  if (other.hasAtpProdCode) {
    [self setAtpProdCode:other.atpProdCode];
  }
  if (other.hasAmount) {
    [self setAmount:other.amount];
  }
  if (other.hasAtpProdName) {
    [self setAtpProdName:other.atpProdName];
  }
  if (other.hasFinProdType) {
    [self setFinProdType:other.finProdType];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCrtTime) {
    [self setCrtTime:other.crtTime];
  }
  if (other.hasTradeType) {
    [self setTradeType:other.tradeType];
  }
  if (other.hasReturnRateExp) {
    [self setReturnRateExp:other.returnRateExp];
  }
  if (other.hasHoldShare) {
    [self setHoldShare:other.holdShare];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasAccountType) {
    [self setAccountType:other.accountType];
  }
  if (other.hasTradePrice) {
    [self setTradePrice:other.tradePrice];
  }
  if (other.hasPremiumRate) {
    [self setPremiumRate:other.premiumRate];
  }
  if (other.hasInterestFrom) {
    [self setInterestFrom:other.interestFrom];
  }
  if (other.hasInterestTo) {
    [self setInterestTo:other.interestTo];
  }
  if (other.hasReturnRateDesc) {
    [self setReturnRateDesc:other.returnRateDesc];
  }
  if (other.hasCurrentPrice) {
    [self setCurrentPrice:other.currentPrice];
  }
  if (other.hasRemark) {
    [self setRemark:other.remark];
  }
  if (other.hasTradeTypeDesc) {
    [self setTradeTypeDesc:other.tradeTypeDesc];
  }
  if (other.hasAcctNum) {
    [self setAcctNum:other.acctNum];
  }
  if (other.hasDepositBank) {
    [self setDepositBank:other.depositBank];
  }
  if (other.hasAcctHeaded) {
    [self setAcctHeaded:other.acctHeaded];
  }
  if (other.hasFinishTime) {
    [self setFinishTime:other.finishTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentAtpTradeOrderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentAtpTradeOrderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAtpProdCode:[input readString]];
        break;
      }
      case 18: {
        [self setAmount:[input readString]];
        break;
      }
      case 26: {
        [self setAtpProdName:[input readString]];
        break;
      }
      case 34: {
        [self setFinProdType:[input readString]];
        break;
      }
      case 42: {
        [self setStatus:[input readString]];
        break;
      }
      case 50: {
        [self setCrtTime:[input readString]];
        break;
      }
      case 58: {
        [self setTradeType:[input readString]];
        break;
      }
      case 66: {
        [self setReturnRateExp:[input readString]];
        break;
      }
      case 74: {
        [self setHoldShare:[input readString]];
        break;
      }
      case 82: {
        [self setOrderId:[input readString]];
        break;
      }
      case 90: {
        [self setAccountType:[input readString]];
        break;
      }
      case 98: {
        [self setTradePrice:[input readString]];
        break;
      }
      case 106: {
        [self setPremiumRate:[input readString]];
        break;
      }
      case 114: {
        [self setInterestFrom:[input readString]];
        break;
      }
      case 122: {
        [self setInterestTo:[input readString]];
        break;
      }
      case 130: {
        [self setReturnRateDesc:[input readString]];
        break;
      }
      case 138: {
        [self setCurrentPrice:[input readString]];
        break;
      }
      case 146: {
        [self setRemark:[input readString]];
        break;
      }
      case 154: {
        [self setTradeTypeDesc:[input readString]];
        break;
      }
      case 162: {
        [self setAcctNum:[input readString]];
        break;
      }
      case 170: {
        [self setDepositBank:[input readString]];
        break;
      }
      case 178: {
        [self setAcctHeaded:[input readString]];
        break;
      }
      case 186: {
        [self setFinishTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAtpProdCode {
  return resultAtpTradeOrder.hasAtpProdCode;
}
- (NSString*) atpProdCode {
  return resultAtpTradeOrder.atpProdCode;
}
- (ContentAtpTradeOrderBuilder*) setAtpProdCode:(NSString*) value {
  resultAtpTradeOrder.hasAtpProdCode = YES;
  resultAtpTradeOrder.atpProdCode = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearAtpProdCode {
  resultAtpTradeOrder.hasAtpProdCode = NO;
  resultAtpTradeOrder.atpProdCode = @"";
  return self;
}
- (BOOL) hasAmount {
  return resultAtpTradeOrder.hasAmount;
}
- (NSString*) amount {
  return resultAtpTradeOrder.amount;
}
- (ContentAtpTradeOrderBuilder*) setAmount:(NSString*) value {
  resultAtpTradeOrder.hasAmount = YES;
  resultAtpTradeOrder.amount = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearAmount {
  resultAtpTradeOrder.hasAmount = NO;
  resultAtpTradeOrder.amount = @"";
  return self;
}
- (BOOL) hasAtpProdName {
  return resultAtpTradeOrder.hasAtpProdName;
}
- (NSString*) atpProdName {
  return resultAtpTradeOrder.atpProdName;
}
- (ContentAtpTradeOrderBuilder*) setAtpProdName:(NSString*) value {
  resultAtpTradeOrder.hasAtpProdName = YES;
  resultAtpTradeOrder.atpProdName = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearAtpProdName {
  resultAtpTradeOrder.hasAtpProdName = NO;
  resultAtpTradeOrder.atpProdName = @"";
  return self;
}
- (BOOL) hasFinProdType {
  return resultAtpTradeOrder.hasFinProdType;
}
- (NSString*) finProdType {
  return resultAtpTradeOrder.finProdType;
}
- (ContentAtpTradeOrderBuilder*) setFinProdType:(NSString*) value {
  resultAtpTradeOrder.hasFinProdType = YES;
  resultAtpTradeOrder.finProdType = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearFinProdType {
  resultAtpTradeOrder.hasFinProdType = NO;
  resultAtpTradeOrder.finProdType = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultAtpTradeOrder.hasStatus;
}
- (NSString*) status {
  return resultAtpTradeOrder.status;
}
- (ContentAtpTradeOrderBuilder*) setStatus:(NSString*) value {
  resultAtpTradeOrder.hasStatus = YES;
  resultAtpTradeOrder.status = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearStatus {
  resultAtpTradeOrder.hasStatus = NO;
  resultAtpTradeOrder.status = @"";
  return self;
}
- (BOOL) hasCrtTime {
  return resultAtpTradeOrder.hasCrtTime;
}
- (NSString*) crtTime {
  return resultAtpTradeOrder.crtTime;
}
- (ContentAtpTradeOrderBuilder*) setCrtTime:(NSString*) value {
  resultAtpTradeOrder.hasCrtTime = YES;
  resultAtpTradeOrder.crtTime = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearCrtTime {
  resultAtpTradeOrder.hasCrtTime = NO;
  resultAtpTradeOrder.crtTime = @"";
  return self;
}
- (BOOL) hasTradeType {
  return resultAtpTradeOrder.hasTradeType;
}
- (NSString*) tradeType {
  return resultAtpTradeOrder.tradeType;
}
- (ContentAtpTradeOrderBuilder*) setTradeType:(NSString*) value {
  resultAtpTradeOrder.hasTradeType = YES;
  resultAtpTradeOrder.tradeType = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearTradeType {
  resultAtpTradeOrder.hasTradeType = NO;
  resultAtpTradeOrder.tradeType = @"";
  return self;
}
- (BOOL) hasReturnRateExp {
  return resultAtpTradeOrder.hasReturnRateExp;
}
- (NSString*) returnRateExp {
  return resultAtpTradeOrder.returnRateExp;
}
- (ContentAtpTradeOrderBuilder*) setReturnRateExp:(NSString*) value {
  resultAtpTradeOrder.hasReturnRateExp = YES;
  resultAtpTradeOrder.returnRateExp = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearReturnRateExp {
  resultAtpTradeOrder.hasReturnRateExp = NO;
  resultAtpTradeOrder.returnRateExp = @"";
  return self;
}
- (BOOL) hasHoldShare {
  return resultAtpTradeOrder.hasHoldShare;
}
- (NSString*) holdShare {
  return resultAtpTradeOrder.holdShare;
}
- (ContentAtpTradeOrderBuilder*) setHoldShare:(NSString*) value {
  resultAtpTradeOrder.hasHoldShare = YES;
  resultAtpTradeOrder.holdShare = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearHoldShare {
  resultAtpTradeOrder.hasHoldShare = NO;
  resultAtpTradeOrder.holdShare = @"";
  return self;
}
- (BOOL) hasOrderId {
  return resultAtpTradeOrder.hasOrderId;
}
- (NSString*) orderId {
  return resultAtpTradeOrder.orderId;
}
- (ContentAtpTradeOrderBuilder*) setOrderId:(NSString*) value {
  resultAtpTradeOrder.hasOrderId = YES;
  resultAtpTradeOrder.orderId = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearOrderId {
  resultAtpTradeOrder.hasOrderId = NO;
  resultAtpTradeOrder.orderId = @"";
  return self;
}
- (BOOL) hasAccountType {
  return resultAtpTradeOrder.hasAccountType;
}
- (NSString*) accountType {
  return resultAtpTradeOrder.accountType;
}
- (ContentAtpTradeOrderBuilder*) setAccountType:(NSString*) value {
  resultAtpTradeOrder.hasAccountType = YES;
  resultAtpTradeOrder.accountType = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearAccountType {
  resultAtpTradeOrder.hasAccountType = NO;
  resultAtpTradeOrder.accountType = @"";
  return self;
}
- (BOOL) hasTradePrice {
  return resultAtpTradeOrder.hasTradePrice;
}
- (NSString*) tradePrice {
  return resultAtpTradeOrder.tradePrice;
}
- (ContentAtpTradeOrderBuilder*) setTradePrice:(NSString*) value {
  resultAtpTradeOrder.hasTradePrice = YES;
  resultAtpTradeOrder.tradePrice = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearTradePrice {
  resultAtpTradeOrder.hasTradePrice = NO;
  resultAtpTradeOrder.tradePrice = @"";
  return self;
}
- (BOOL) hasPremiumRate {
  return resultAtpTradeOrder.hasPremiumRate;
}
- (NSString*) premiumRate {
  return resultAtpTradeOrder.premiumRate;
}
- (ContentAtpTradeOrderBuilder*) setPremiumRate:(NSString*) value {
  resultAtpTradeOrder.hasPremiumRate = YES;
  resultAtpTradeOrder.premiumRate = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearPremiumRate {
  resultAtpTradeOrder.hasPremiumRate = NO;
  resultAtpTradeOrder.premiumRate = @"";
  return self;
}
- (BOOL) hasInterestFrom {
  return resultAtpTradeOrder.hasInterestFrom;
}
- (NSString*) interestFrom {
  return resultAtpTradeOrder.interestFrom;
}
- (ContentAtpTradeOrderBuilder*) setInterestFrom:(NSString*) value {
  resultAtpTradeOrder.hasInterestFrom = YES;
  resultAtpTradeOrder.interestFrom = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearInterestFrom {
  resultAtpTradeOrder.hasInterestFrom = NO;
  resultAtpTradeOrder.interestFrom = @"";
  return self;
}
- (BOOL) hasInterestTo {
  return resultAtpTradeOrder.hasInterestTo;
}
- (NSString*) interestTo {
  return resultAtpTradeOrder.interestTo;
}
- (ContentAtpTradeOrderBuilder*) setInterestTo:(NSString*) value {
  resultAtpTradeOrder.hasInterestTo = YES;
  resultAtpTradeOrder.interestTo = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearInterestTo {
  resultAtpTradeOrder.hasInterestTo = NO;
  resultAtpTradeOrder.interestTo = @"";
  return self;
}
- (BOOL) hasReturnRateDesc {
  return resultAtpTradeOrder.hasReturnRateDesc;
}
- (NSString*) returnRateDesc {
  return resultAtpTradeOrder.returnRateDesc;
}
- (ContentAtpTradeOrderBuilder*) setReturnRateDesc:(NSString*) value {
  resultAtpTradeOrder.hasReturnRateDesc = YES;
  resultAtpTradeOrder.returnRateDesc = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearReturnRateDesc {
  resultAtpTradeOrder.hasReturnRateDesc = NO;
  resultAtpTradeOrder.returnRateDesc = @"";
  return self;
}
- (BOOL) hasCurrentPrice {
  return resultAtpTradeOrder.hasCurrentPrice;
}
- (NSString*) currentPrice {
  return resultAtpTradeOrder.currentPrice;
}
- (ContentAtpTradeOrderBuilder*) setCurrentPrice:(NSString*) value {
  resultAtpTradeOrder.hasCurrentPrice = YES;
  resultAtpTradeOrder.currentPrice = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearCurrentPrice {
  resultAtpTradeOrder.hasCurrentPrice = NO;
  resultAtpTradeOrder.currentPrice = @"";
  return self;
}
- (BOOL) hasRemark {
  return resultAtpTradeOrder.hasRemark;
}
- (NSString*) remark {
  return resultAtpTradeOrder.remark;
}
- (ContentAtpTradeOrderBuilder*) setRemark:(NSString*) value {
  resultAtpTradeOrder.hasRemark = YES;
  resultAtpTradeOrder.remark = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearRemark {
  resultAtpTradeOrder.hasRemark = NO;
  resultAtpTradeOrder.remark = @"";
  return self;
}
- (BOOL) hasTradeTypeDesc {
  return resultAtpTradeOrder.hasTradeTypeDesc;
}
- (NSString*) tradeTypeDesc {
  return resultAtpTradeOrder.tradeTypeDesc;
}
- (ContentAtpTradeOrderBuilder*) setTradeTypeDesc:(NSString*) value {
  resultAtpTradeOrder.hasTradeTypeDesc = YES;
  resultAtpTradeOrder.tradeTypeDesc = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearTradeTypeDesc {
  resultAtpTradeOrder.hasTradeTypeDesc = NO;
  resultAtpTradeOrder.tradeTypeDesc = @"";
  return self;
}
- (BOOL) hasAcctNum {
  return resultAtpTradeOrder.hasAcctNum;
}
- (NSString*) acctNum {
  return resultAtpTradeOrder.acctNum;
}
- (ContentAtpTradeOrderBuilder*) setAcctNum:(NSString*) value {
  resultAtpTradeOrder.hasAcctNum = YES;
  resultAtpTradeOrder.acctNum = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearAcctNum {
  resultAtpTradeOrder.hasAcctNum = NO;
  resultAtpTradeOrder.acctNum = @"";
  return self;
}
- (BOOL) hasDepositBank {
  return resultAtpTradeOrder.hasDepositBank;
}
- (NSString*) depositBank {
  return resultAtpTradeOrder.depositBank;
}
- (ContentAtpTradeOrderBuilder*) setDepositBank:(NSString*) value {
  resultAtpTradeOrder.hasDepositBank = YES;
  resultAtpTradeOrder.depositBank = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearDepositBank {
  resultAtpTradeOrder.hasDepositBank = NO;
  resultAtpTradeOrder.depositBank = @"";
  return self;
}
- (BOOL) hasAcctHeaded {
  return resultAtpTradeOrder.hasAcctHeaded;
}
- (NSString*) acctHeaded {
  return resultAtpTradeOrder.acctHeaded;
}
- (ContentAtpTradeOrderBuilder*) setAcctHeaded:(NSString*) value {
  resultAtpTradeOrder.hasAcctHeaded = YES;
  resultAtpTradeOrder.acctHeaded = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearAcctHeaded {
  resultAtpTradeOrder.hasAcctHeaded = NO;
  resultAtpTradeOrder.acctHeaded = @"";
  return self;
}
- (BOOL) hasFinishTime {
  return resultAtpTradeOrder.hasFinishTime;
}
- (NSString*) finishTime {
  return resultAtpTradeOrder.finishTime;
}
- (ContentAtpTradeOrderBuilder*) setFinishTime:(NSString*) value {
  resultAtpTradeOrder.hasFinishTime = YES;
  resultAtpTradeOrder.finishTime = value;
  return self;
}
- (ContentAtpTradeOrderBuilder*) clearFinishTime {
  resultAtpTradeOrder.hasFinishTime = NO;
  resultAtpTradeOrder.finishTime = @"";
  return self;
}
@end

@interface ContentPayMethod ()
@property (strong) NSString* methodId;
@property (strong) NSString* bankCard;
@property (strong) NSString* bankName;
@property (strong) NSString* cardType;
@property (strong) NSString* phoneNo;
@property (strong) NSString* desc;
@property (strong) NSString* remainingSum;
@property (strong) NSString* bankId;
@property (strong) NSString* payType;
@property (strong) NSString* limitInfo;
@property (strong) NSString* available;
@property (strong) NSString* displayName;
@property (strong) NSString* limit;
@property (strong) NSString* icon;
@property (strong) NSString* isStagable;
@property (strong) NSString* memberBankAcctId;
@property (strong) NSString* cashierId;
@property (strong) NSString* chnCode;
@property (strong) NSString* paySort;
@property (strong) NSString* isActivity;
@property (strong) NSString* status;
@end

@implementation ContentPayMethod

- (BOOL) hasMethodId {
  return !!hasMethodId_;
}
- (void) setHasMethodId:(BOOL) _value_ {
  hasMethodId_ = !!_value_;
}
@synthesize methodId;
- (BOOL) hasBankCard {
  return !!hasBankCard_;
}
- (void) setHasBankCard:(BOOL) _value_ {
  hasBankCard_ = !!_value_;
}
@synthesize bankCard;
- (BOOL) hasBankName {
  return !!hasBankName_;
}
- (void) setHasBankName:(BOOL) _value_ {
  hasBankName_ = !!_value_;
}
@synthesize bankName;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) _value_ {
  hasCardType_ = !!_value_;
}
@synthesize cardType;
- (BOOL) hasPhoneNo {
  return !!hasPhoneNo_;
}
- (void) setHasPhoneNo:(BOOL) _value_ {
  hasPhoneNo_ = !!_value_;
}
@synthesize phoneNo;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasRemainingSum {
  return !!hasRemainingSum_;
}
- (void) setHasRemainingSum:(BOOL) _value_ {
  hasRemainingSum_ = !!_value_;
}
@synthesize remainingSum;
- (BOOL) hasBankId {
  return !!hasBankId_;
}
- (void) setHasBankId:(BOOL) _value_ {
  hasBankId_ = !!_value_;
}
@synthesize bankId;
- (BOOL) hasPayType {
  return !!hasPayType_;
}
- (void) setHasPayType:(BOOL) _value_ {
  hasPayType_ = !!_value_;
}
@synthesize payType;
- (BOOL) hasLimitInfo {
  return !!hasLimitInfo_;
}
- (void) setHasLimitInfo:(BOOL) _value_ {
  hasLimitInfo_ = !!_value_;
}
@synthesize limitInfo;
- (BOOL) hasAvailable {
  return !!hasAvailable_;
}
- (void) setHasAvailable:(BOOL) _value_ {
  hasAvailable_ = !!_value_;
}
@synthesize available;
- (BOOL) hasDisplayName {
  return !!hasDisplayName_;
}
- (void) setHasDisplayName:(BOOL) _value_ {
  hasDisplayName_ = !!_value_;
}
@synthesize displayName;
- (BOOL) hasLimit {
  return !!hasLimit_;
}
- (void) setHasLimit:(BOOL) _value_ {
  hasLimit_ = !!_value_;
}
@synthesize limit;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) _value_ {
  hasIcon_ = !!_value_;
}
@synthesize icon;
- (BOOL) hasIsStagable {
  return !!hasIsStagable_;
}
- (void) setHasIsStagable:(BOOL) _value_ {
  hasIsStagable_ = !!_value_;
}
@synthesize isStagable;
- (BOOL) hasMemberBankAcctId {
  return !!hasMemberBankAcctId_;
}
- (void) setHasMemberBankAcctId:(BOOL) _value_ {
  hasMemberBankAcctId_ = !!_value_;
}
@synthesize memberBankAcctId;
- (BOOL) hasCashierId {
  return !!hasCashierId_;
}
- (void) setHasCashierId:(BOOL) _value_ {
  hasCashierId_ = !!_value_;
}
@synthesize cashierId;
- (BOOL) hasChnCode {
  return !!hasChnCode_;
}
- (void) setHasChnCode:(BOOL) _value_ {
  hasChnCode_ = !!_value_;
}
@synthesize chnCode;
- (BOOL) hasPaySort {
  return !!hasPaySort_;
}
- (void) setHasPaySort:(BOOL) _value_ {
  hasPaySort_ = !!_value_;
}
@synthesize paySort;
- (BOOL) hasIsActivity {
  return !!hasIsActivity_;
}
- (void) setHasIsActivity:(BOOL) _value_ {
  hasIsActivity_ = !!_value_;
}
@synthesize isActivity;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.methodId = @"";
    self.bankCard = @"";
    self.bankName = @"";
    self.cardType = @"";
    self.phoneNo = @"";
    self.desc = @"";
    self.remainingSum = @"";
    self.bankId = @"";
    self.payType = @"";
    self.limitInfo = @"";
    self.available = @"";
    self.displayName = @"";
    self.limit = @"";
    self.icon = @"";
    self.isStagable = @"";
    self.memberBankAcctId = @"";
    self.cashierId = @"";
    self.chnCode = @"";
    self.paySort = @"";
    self.isActivity = @"";
    self.status = @"";
  }
  return self;
}
static ContentPayMethod* defaultContentPayMethodInstance = nil;
+ (void) initialize {
  if (self == [ContentPayMethod class]) {
    defaultContentPayMethodInstance = [[ContentPayMethod alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentPayMethodInstance;
}
- (instancetype) defaultInstance {
  return defaultContentPayMethodInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMethodId) {
    [output writeString:1 value:self.methodId];
  }
  if (self.hasBankCard) {
    [output writeString:2 value:self.bankCard];
  }
  if (self.hasBankName) {
    [output writeString:3 value:self.bankName];
  }
  if (self.hasCardType) {
    [output writeString:4 value:self.cardType];
  }
  if (self.hasPhoneNo) {
    [output writeString:5 value:self.phoneNo];
  }
  if (self.hasDesc) {
    [output writeString:6 value:self.desc];
  }
  if (self.hasRemainingSum) {
    [output writeString:7 value:self.remainingSum];
  }
  if (self.hasBankId) {
    [output writeString:8 value:self.bankId];
  }
  if (self.hasPayType) {
    [output writeString:9 value:self.payType];
  }
  if (self.hasLimitInfo) {
    [output writeString:10 value:self.limitInfo];
  }
  if (self.hasAvailable) {
    [output writeString:11 value:self.available];
  }
  if (self.hasDisplayName) {
    [output writeString:12 value:self.displayName];
  }
  if (self.hasLimit) {
    [output writeString:13 value:self.limit];
  }
  if (self.hasIcon) {
    [output writeString:14 value:self.icon];
  }
  if (self.hasIsStagable) {
    [output writeString:15 value:self.isStagable];
  }
  if (self.hasMemberBankAcctId) {
    [output writeString:16 value:self.memberBankAcctId];
  }
  if (self.hasCashierId) {
    [output writeString:17 value:self.cashierId];
  }
  if (self.hasChnCode) {
    [output writeString:18 value:self.chnCode];
  }
  if (self.hasPaySort) {
    [output writeString:19 value:self.paySort];
  }
  if (self.hasIsActivity) {
    [output writeString:20 value:self.isActivity];
  }
  if (self.hasStatus) {
    [output writeString:21 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMethodId) {
    size_ += computeStringSize(1, self.methodId);
  }
  if (self.hasBankCard) {
    size_ += computeStringSize(2, self.bankCard);
  }
  if (self.hasBankName) {
    size_ += computeStringSize(3, self.bankName);
  }
  if (self.hasCardType) {
    size_ += computeStringSize(4, self.cardType);
  }
  if (self.hasPhoneNo) {
    size_ += computeStringSize(5, self.phoneNo);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(6, self.desc);
  }
  if (self.hasRemainingSum) {
    size_ += computeStringSize(7, self.remainingSum);
  }
  if (self.hasBankId) {
    size_ += computeStringSize(8, self.bankId);
  }
  if (self.hasPayType) {
    size_ += computeStringSize(9, self.payType);
  }
  if (self.hasLimitInfo) {
    size_ += computeStringSize(10, self.limitInfo);
  }
  if (self.hasAvailable) {
    size_ += computeStringSize(11, self.available);
  }
  if (self.hasDisplayName) {
    size_ += computeStringSize(12, self.displayName);
  }
  if (self.hasLimit) {
    size_ += computeStringSize(13, self.limit);
  }
  if (self.hasIcon) {
    size_ += computeStringSize(14, self.icon);
  }
  if (self.hasIsStagable) {
    size_ += computeStringSize(15, self.isStagable);
  }
  if (self.hasMemberBankAcctId) {
    size_ += computeStringSize(16, self.memberBankAcctId);
  }
  if (self.hasCashierId) {
    size_ += computeStringSize(17, self.cashierId);
  }
  if (self.hasChnCode) {
    size_ += computeStringSize(18, self.chnCode);
  }
  if (self.hasPaySort) {
    size_ += computeStringSize(19, self.paySort);
  }
  if (self.hasIsActivity) {
    size_ += computeStringSize(20, self.isActivity);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(21, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentPayMethod*) parseFromData:(NSData*) data {
  return (ContentPayMethod*)[[[ContentPayMethod builder] mergeFromData:data] build];
}
+ (ContentPayMethod*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentPayMethod*)[[[ContentPayMethod builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentPayMethod*) parseFromInputStream:(NSInputStream*) input {
  return (ContentPayMethod*)[[[ContentPayMethod builder] mergeFromInputStream:input] build];
}
+ (ContentPayMethod*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentPayMethod*)[[[ContentPayMethod builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentPayMethod*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentPayMethod*)[[[ContentPayMethod builder] mergeFromCodedInputStream:input] build];
}
+ (ContentPayMethod*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentPayMethod*)[[[ContentPayMethod builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentPayMethodBuilder*) builder {
  return [[ContentPayMethodBuilder alloc] init];
}
+ (ContentPayMethodBuilder*) builderWithPrototype:(ContentPayMethod*) prototype {
  return [[ContentPayMethod builder] mergeFrom:prototype];
}
- (ContentPayMethodBuilder*) builder {
  return [ContentPayMethod builder];
}
- (ContentPayMethodBuilder*) toBuilder {
  return [ContentPayMethod builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMethodId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"methodId", self.methodId];
  }
  if (self.hasBankCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankCard", self.bankCard];
  }
  if (self.hasBankName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankName", self.bankName];
  }
  if (self.hasCardType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardType", self.cardType];
  }
  if (self.hasPhoneNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNo", self.phoneNo];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasRemainingSum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remainingSum", self.remainingSum];
  }
  if (self.hasBankId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankId", self.bankId];
  }
  if (self.hasPayType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payType", self.payType];
  }
  if (self.hasLimitInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"limitInfo", self.limitInfo];
  }
  if (self.hasAvailable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"available", self.available];
  }
  if (self.hasDisplayName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"displayName", self.displayName];
  }
  if (self.hasLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"limit", self.limit];
  }
  if (self.hasIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"icon", self.icon];
  }
  if (self.hasIsStagable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isStagable", self.isStagable];
  }
  if (self.hasMemberBankAcctId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberBankAcctId", self.memberBankAcctId];
  }
  if (self.hasCashierId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashierId", self.cashierId];
  }
  if (self.hasChnCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chnCode", self.chnCode];
  }
  if (self.hasPaySort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"paySort", self.paySort];
  }
  if (self.hasIsActivity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isActivity", self.isActivity];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMethodId) {
    [dictionary setObject: self.methodId forKey: @"methodId"];
  }
  if (self.hasBankCard) {
    [dictionary setObject: self.bankCard forKey: @"bankCard"];
  }
  if (self.hasBankName) {
    [dictionary setObject: self.bankName forKey: @"bankName"];
  }
  if (self.hasCardType) {
    [dictionary setObject: self.cardType forKey: @"cardType"];
  }
  if (self.hasPhoneNo) {
    [dictionary setObject: self.phoneNo forKey: @"phoneNo"];
  }
  if (self.hasDesc) {
    [dictionary setObject: self.desc forKey: @"desc"];
  }
  if (self.hasRemainingSum) {
    [dictionary setObject: self.remainingSum forKey: @"remainingSum"];
  }
  if (self.hasBankId) {
    [dictionary setObject: self.bankId forKey: @"bankId"];
  }
  if (self.hasPayType) {
    [dictionary setObject: self.payType forKey: @"payType"];
  }
  if (self.hasLimitInfo) {
    [dictionary setObject: self.limitInfo forKey: @"limitInfo"];
  }
  if (self.hasAvailable) {
    [dictionary setObject: self.available forKey: @"available"];
  }
  if (self.hasDisplayName) {
    [dictionary setObject: self.displayName forKey: @"displayName"];
  }
  if (self.hasLimit) {
    [dictionary setObject: self.limit forKey: @"limit"];
  }
  if (self.hasIcon) {
    [dictionary setObject: self.icon forKey: @"icon"];
  }
  if (self.hasIsStagable) {
    [dictionary setObject: self.isStagable forKey: @"isStagable"];
  }
  if (self.hasMemberBankAcctId) {
    [dictionary setObject: self.memberBankAcctId forKey: @"memberBankAcctId"];
  }
  if (self.hasCashierId) {
    [dictionary setObject: self.cashierId forKey: @"cashierId"];
  }
  if (self.hasChnCode) {
    [dictionary setObject: self.chnCode forKey: @"chnCode"];
  }
  if (self.hasPaySort) {
    [dictionary setObject: self.paySort forKey: @"paySort"];
  }
  if (self.hasIsActivity) {
    [dictionary setObject: self.isActivity forKey: @"isActivity"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentPayMethod class]]) {
    return NO;
  }
  ContentPayMethod *otherMessage = other;
  return
      self.hasMethodId == otherMessage.hasMethodId &&
      (!self.hasMethodId || [self.methodId isEqual:otherMessage.methodId]) &&
      self.hasBankCard == otherMessage.hasBankCard &&
      (!self.hasBankCard || [self.bankCard isEqual:otherMessage.bankCard]) &&
      self.hasBankName == otherMessage.hasBankName &&
      (!self.hasBankName || [self.bankName isEqual:otherMessage.bankName]) &&
      self.hasCardType == otherMessage.hasCardType &&
      (!self.hasCardType || [self.cardType isEqual:otherMessage.cardType]) &&
      self.hasPhoneNo == otherMessage.hasPhoneNo &&
      (!self.hasPhoneNo || [self.phoneNo isEqual:otherMessage.phoneNo]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasRemainingSum == otherMessage.hasRemainingSum &&
      (!self.hasRemainingSum || [self.remainingSum isEqual:otherMessage.remainingSum]) &&
      self.hasBankId == otherMessage.hasBankId &&
      (!self.hasBankId || [self.bankId isEqual:otherMessage.bankId]) &&
      self.hasPayType == otherMessage.hasPayType &&
      (!self.hasPayType || [self.payType isEqual:otherMessage.payType]) &&
      self.hasLimitInfo == otherMessage.hasLimitInfo &&
      (!self.hasLimitInfo || [self.limitInfo isEqual:otherMessage.limitInfo]) &&
      self.hasAvailable == otherMessage.hasAvailable &&
      (!self.hasAvailable || [self.available isEqual:otherMessage.available]) &&
      self.hasDisplayName == otherMessage.hasDisplayName &&
      (!self.hasDisplayName || [self.displayName isEqual:otherMessage.displayName]) &&
      self.hasLimit == otherMessage.hasLimit &&
      (!self.hasLimit || [self.limit isEqual:otherMessage.limit]) &&
      self.hasIcon == otherMessage.hasIcon &&
      (!self.hasIcon || [self.icon isEqual:otherMessage.icon]) &&
      self.hasIsStagable == otherMessage.hasIsStagable &&
      (!self.hasIsStagable || [self.isStagable isEqual:otherMessage.isStagable]) &&
      self.hasMemberBankAcctId == otherMessage.hasMemberBankAcctId &&
      (!self.hasMemberBankAcctId || [self.memberBankAcctId isEqual:otherMessage.memberBankAcctId]) &&
      self.hasCashierId == otherMessage.hasCashierId &&
      (!self.hasCashierId || [self.cashierId isEqual:otherMessage.cashierId]) &&
      self.hasChnCode == otherMessage.hasChnCode &&
      (!self.hasChnCode || [self.chnCode isEqual:otherMessage.chnCode]) &&
      self.hasPaySort == otherMessage.hasPaySort &&
      (!self.hasPaySort || [self.paySort isEqual:otherMessage.paySort]) &&
      self.hasIsActivity == otherMessage.hasIsActivity &&
      (!self.hasIsActivity || [self.isActivity isEqual:otherMessage.isActivity]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMethodId) {
    hashCode = hashCode * 31 + [self.methodId hash];
  }
  if (self.hasBankCard) {
    hashCode = hashCode * 31 + [self.bankCard hash];
  }
  if (self.hasBankName) {
    hashCode = hashCode * 31 + [self.bankName hash];
  }
  if (self.hasCardType) {
    hashCode = hashCode * 31 + [self.cardType hash];
  }
  if (self.hasPhoneNo) {
    hashCode = hashCode * 31 + [self.phoneNo hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasRemainingSum) {
    hashCode = hashCode * 31 + [self.remainingSum hash];
  }
  if (self.hasBankId) {
    hashCode = hashCode * 31 + [self.bankId hash];
  }
  if (self.hasPayType) {
    hashCode = hashCode * 31 + [self.payType hash];
  }
  if (self.hasLimitInfo) {
    hashCode = hashCode * 31 + [self.limitInfo hash];
  }
  if (self.hasAvailable) {
    hashCode = hashCode * 31 + [self.available hash];
  }
  if (self.hasDisplayName) {
    hashCode = hashCode * 31 + [self.displayName hash];
  }
  if (self.hasLimit) {
    hashCode = hashCode * 31 + [self.limit hash];
  }
  if (self.hasIcon) {
    hashCode = hashCode * 31 + [self.icon hash];
  }
  if (self.hasIsStagable) {
    hashCode = hashCode * 31 + [self.isStagable hash];
  }
  if (self.hasMemberBankAcctId) {
    hashCode = hashCode * 31 + [self.memberBankAcctId hash];
  }
  if (self.hasCashierId) {
    hashCode = hashCode * 31 + [self.cashierId hash];
  }
  if (self.hasChnCode) {
    hashCode = hashCode * 31 + [self.chnCode hash];
  }
  if (self.hasPaySort) {
    hashCode = hashCode * 31 + [self.paySort hash];
  }
  if (self.hasIsActivity) {
    hashCode = hashCode * 31 + [self.isActivity hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentPayMethodBuilder()
@property (strong) ContentPayMethod* resultPayMethod;
@end

@implementation ContentPayMethodBuilder
@synthesize resultPayMethod;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPayMethod = [[ContentPayMethod alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPayMethod;
}
- (ContentPayMethodBuilder*) clear {
  self.resultPayMethod = [[ContentPayMethod alloc] init];
  return self;
}
- (ContentPayMethodBuilder*) clone {
  return [ContentPayMethod builderWithPrototype:resultPayMethod];
}
- (ContentPayMethod*) defaultInstance {
  return [ContentPayMethod defaultInstance];
}
- (ContentPayMethod*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentPayMethod*) buildPartial {
  ContentPayMethod* returnMe = resultPayMethod;
  self.resultPayMethod = nil;
  return returnMe;
}
- (ContentPayMethodBuilder*) mergeFrom:(ContentPayMethod*) other {
  if (other == [ContentPayMethod defaultInstance]) {
    return self;
  }
  if (other.hasMethodId) {
    [self setMethodId:other.methodId];
  }
  if (other.hasBankCard) {
    [self setBankCard:other.bankCard];
  }
  if (other.hasBankName) {
    [self setBankName:other.bankName];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  if (other.hasPhoneNo) {
    [self setPhoneNo:other.phoneNo];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasRemainingSum) {
    [self setRemainingSum:other.remainingSum];
  }
  if (other.hasBankId) {
    [self setBankId:other.bankId];
  }
  if (other.hasPayType) {
    [self setPayType:other.payType];
  }
  if (other.hasLimitInfo) {
    [self setLimitInfo:other.limitInfo];
  }
  if (other.hasAvailable) {
    [self setAvailable:other.available];
  }
  if (other.hasDisplayName) {
    [self setDisplayName:other.displayName];
  }
  if (other.hasLimit) {
    [self setLimit:other.limit];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  if (other.hasIsStagable) {
    [self setIsStagable:other.isStagable];
  }
  if (other.hasMemberBankAcctId) {
    [self setMemberBankAcctId:other.memberBankAcctId];
  }
  if (other.hasCashierId) {
    [self setCashierId:other.cashierId];
  }
  if (other.hasChnCode) {
    [self setChnCode:other.chnCode];
  }
  if (other.hasPaySort) {
    [self setPaySort:other.paySort];
  }
  if (other.hasIsActivity) {
    [self setIsActivity:other.isActivity];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentPayMethodBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentPayMethodBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMethodId:[input readString]];
        break;
      }
      case 18: {
        [self setBankCard:[input readString]];
        break;
      }
      case 26: {
        [self setBankName:[input readString]];
        break;
      }
      case 34: {
        [self setCardType:[input readString]];
        break;
      }
      case 42: {
        [self setPhoneNo:[input readString]];
        break;
      }
      case 50: {
        [self setDesc:[input readString]];
        break;
      }
      case 58: {
        [self setRemainingSum:[input readString]];
        break;
      }
      case 66: {
        [self setBankId:[input readString]];
        break;
      }
      case 74: {
        [self setPayType:[input readString]];
        break;
      }
      case 82: {
        [self setLimitInfo:[input readString]];
        break;
      }
      case 90: {
        [self setAvailable:[input readString]];
        break;
      }
      case 98: {
        [self setDisplayName:[input readString]];
        break;
      }
      case 106: {
        [self setLimit:[input readString]];
        break;
      }
      case 114: {
        [self setIcon:[input readString]];
        break;
      }
      case 122: {
        [self setIsStagable:[input readString]];
        break;
      }
      case 130: {
        [self setMemberBankAcctId:[input readString]];
        break;
      }
      case 138: {
        [self setCashierId:[input readString]];
        break;
      }
      case 146: {
        [self setChnCode:[input readString]];
        break;
      }
      case 154: {
        [self setPaySort:[input readString]];
        break;
      }
      case 162: {
        [self setIsActivity:[input readString]];
        break;
      }
      case 170: {
        [self setStatus:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMethodId {
  return resultPayMethod.hasMethodId;
}
- (NSString*) methodId {
  return resultPayMethod.methodId;
}
- (ContentPayMethodBuilder*) setMethodId:(NSString*) value {
  resultPayMethod.hasMethodId = YES;
  resultPayMethod.methodId = value;
  return self;
}
- (ContentPayMethodBuilder*) clearMethodId {
  resultPayMethod.hasMethodId = NO;
  resultPayMethod.methodId = @"";
  return self;
}
- (BOOL) hasBankCard {
  return resultPayMethod.hasBankCard;
}
- (NSString*) bankCard {
  return resultPayMethod.bankCard;
}
- (ContentPayMethodBuilder*) setBankCard:(NSString*) value {
  resultPayMethod.hasBankCard = YES;
  resultPayMethod.bankCard = value;
  return self;
}
- (ContentPayMethodBuilder*) clearBankCard {
  resultPayMethod.hasBankCard = NO;
  resultPayMethod.bankCard = @"";
  return self;
}
- (BOOL) hasBankName {
  return resultPayMethod.hasBankName;
}
- (NSString*) bankName {
  return resultPayMethod.bankName;
}
- (ContentPayMethodBuilder*) setBankName:(NSString*) value {
  resultPayMethod.hasBankName = YES;
  resultPayMethod.bankName = value;
  return self;
}
- (ContentPayMethodBuilder*) clearBankName {
  resultPayMethod.hasBankName = NO;
  resultPayMethod.bankName = @"";
  return self;
}
- (BOOL) hasCardType {
  return resultPayMethod.hasCardType;
}
- (NSString*) cardType {
  return resultPayMethod.cardType;
}
- (ContentPayMethodBuilder*) setCardType:(NSString*) value {
  resultPayMethod.hasCardType = YES;
  resultPayMethod.cardType = value;
  return self;
}
- (ContentPayMethodBuilder*) clearCardType {
  resultPayMethod.hasCardType = NO;
  resultPayMethod.cardType = @"";
  return self;
}
- (BOOL) hasPhoneNo {
  return resultPayMethod.hasPhoneNo;
}
- (NSString*) phoneNo {
  return resultPayMethod.phoneNo;
}
- (ContentPayMethodBuilder*) setPhoneNo:(NSString*) value {
  resultPayMethod.hasPhoneNo = YES;
  resultPayMethod.phoneNo = value;
  return self;
}
- (ContentPayMethodBuilder*) clearPhoneNo {
  resultPayMethod.hasPhoneNo = NO;
  resultPayMethod.phoneNo = @"";
  return self;
}
- (BOOL) hasDesc {
  return resultPayMethod.hasDesc;
}
- (NSString*) desc {
  return resultPayMethod.desc;
}
- (ContentPayMethodBuilder*) setDesc:(NSString*) value {
  resultPayMethod.hasDesc = YES;
  resultPayMethod.desc = value;
  return self;
}
- (ContentPayMethodBuilder*) clearDesc {
  resultPayMethod.hasDesc = NO;
  resultPayMethod.desc = @"";
  return self;
}
- (BOOL) hasRemainingSum {
  return resultPayMethod.hasRemainingSum;
}
- (NSString*) remainingSum {
  return resultPayMethod.remainingSum;
}
- (ContentPayMethodBuilder*) setRemainingSum:(NSString*) value {
  resultPayMethod.hasRemainingSum = YES;
  resultPayMethod.remainingSum = value;
  return self;
}
- (ContentPayMethodBuilder*) clearRemainingSum {
  resultPayMethod.hasRemainingSum = NO;
  resultPayMethod.remainingSum = @"";
  return self;
}
- (BOOL) hasBankId {
  return resultPayMethod.hasBankId;
}
- (NSString*) bankId {
  return resultPayMethod.bankId;
}
- (ContentPayMethodBuilder*) setBankId:(NSString*) value {
  resultPayMethod.hasBankId = YES;
  resultPayMethod.bankId = value;
  return self;
}
- (ContentPayMethodBuilder*) clearBankId {
  resultPayMethod.hasBankId = NO;
  resultPayMethod.bankId = @"";
  return self;
}
- (BOOL) hasPayType {
  return resultPayMethod.hasPayType;
}
- (NSString*) payType {
  return resultPayMethod.payType;
}
- (ContentPayMethodBuilder*) setPayType:(NSString*) value {
  resultPayMethod.hasPayType = YES;
  resultPayMethod.payType = value;
  return self;
}
- (ContentPayMethodBuilder*) clearPayType {
  resultPayMethod.hasPayType = NO;
  resultPayMethod.payType = @"";
  return self;
}
- (BOOL) hasLimitInfo {
  return resultPayMethod.hasLimitInfo;
}
- (NSString*) limitInfo {
  return resultPayMethod.limitInfo;
}
- (ContentPayMethodBuilder*) setLimitInfo:(NSString*) value {
  resultPayMethod.hasLimitInfo = YES;
  resultPayMethod.limitInfo = value;
  return self;
}
- (ContentPayMethodBuilder*) clearLimitInfo {
  resultPayMethod.hasLimitInfo = NO;
  resultPayMethod.limitInfo = @"";
  return self;
}
- (BOOL) hasAvailable {
  return resultPayMethod.hasAvailable;
}
- (NSString*) available {
  return resultPayMethod.available;
}
- (ContentPayMethodBuilder*) setAvailable:(NSString*) value {
  resultPayMethod.hasAvailable = YES;
  resultPayMethod.available = value;
  return self;
}
- (ContentPayMethodBuilder*) clearAvailable {
  resultPayMethod.hasAvailable = NO;
  resultPayMethod.available = @"";
  return self;
}
- (BOOL) hasDisplayName {
  return resultPayMethod.hasDisplayName;
}
- (NSString*) displayName {
  return resultPayMethod.displayName;
}
- (ContentPayMethodBuilder*) setDisplayName:(NSString*) value {
  resultPayMethod.hasDisplayName = YES;
  resultPayMethod.displayName = value;
  return self;
}
- (ContentPayMethodBuilder*) clearDisplayName {
  resultPayMethod.hasDisplayName = NO;
  resultPayMethod.displayName = @"";
  return self;
}
- (BOOL) hasLimit {
  return resultPayMethod.hasLimit;
}
- (NSString*) limit {
  return resultPayMethod.limit;
}
- (ContentPayMethodBuilder*) setLimit:(NSString*) value {
  resultPayMethod.hasLimit = YES;
  resultPayMethod.limit = value;
  return self;
}
- (ContentPayMethodBuilder*) clearLimit {
  resultPayMethod.hasLimit = NO;
  resultPayMethod.limit = @"";
  return self;
}
- (BOOL) hasIcon {
  return resultPayMethod.hasIcon;
}
- (NSString*) icon {
  return resultPayMethod.icon;
}
- (ContentPayMethodBuilder*) setIcon:(NSString*) value {
  resultPayMethod.hasIcon = YES;
  resultPayMethod.icon = value;
  return self;
}
- (ContentPayMethodBuilder*) clearIcon {
  resultPayMethod.hasIcon = NO;
  resultPayMethod.icon = @"";
  return self;
}
- (BOOL) hasIsStagable {
  return resultPayMethod.hasIsStagable;
}
- (NSString*) isStagable {
  return resultPayMethod.isStagable;
}
- (ContentPayMethodBuilder*) setIsStagable:(NSString*) value {
  resultPayMethod.hasIsStagable = YES;
  resultPayMethod.isStagable = value;
  return self;
}
- (ContentPayMethodBuilder*) clearIsStagable {
  resultPayMethod.hasIsStagable = NO;
  resultPayMethod.isStagable = @"";
  return self;
}
- (BOOL) hasMemberBankAcctId {
  return resultPayMethod.hasMemberBankAcctId;
}
- (NSString*) memberBankAcctId {
  return resultPayMethod.memberBankAcctId;
}
- (ContentPayMethodBuilder*) setMemberBankAcctId:(NSString*) value {
  resultPayMethod.hasMemberBankAcctId = YES;
  resultPayMethod.memberBankAcctId = value;
  return self;
}
- (ContentPayMethodBuilder*) clearMemberBankAcctId {
  resultPayMethod.hasMemberBankAcctId = NO;
  resultPayMethod.memberBankAcctId = @"";
  return self;
}
- (BOOL) hasCashierId {
  return resultPayMethod.hasCashierId;
}
- (NSString*) cashierId {
  return resultPayMethod.cashierId;
}
- (ContentPayMethodBuilder*) setCashierId:(NSString*) value {
  resultPayMethod.hasCashierId = YES;
  resultPayMethod.cashierId = value;
  return self;
}
- (ContentPayMethodBuilder*) clearCashierId {
  resultPayMethod.hasCashierId = NO;
  resultPayMethod.cashierId = @"";
  return self;
}
- (BOOL) hasChnCode {
  return resultPayMethod.hasChnCode;
}
- (NSString*) chnCode {
  return resultPayMethod.chnCode;
}
- (ContentPayMethodBuilder*) setChnCode:(NSString*) value {
  resultPayMethod.hasChnCode = YES;
  resultPayMethod.chnCode = value;
  return self;
}
- (ContentPayMethodBuilder*) clearChnCode {
  resultPayMethod.hasChnCode = NO;
  resultPayMethod.chnCode = @"";
  return self;
}
- (BOOL) hasPaySort {
  return resultPayMethod.hasPaySort;
}
- (NSString*) paySort {
  return resultPayMethod.paySort;
}
- (ContentPayMethodBuilder*) setPaySort:(NSString*) value {
  resultPayMethod.hasPaySort = YES;
  resultPayMethod.paySort = value;
  return self;
}
- (ContentPayMethodBuilder*) clearPaySort {
  resultPayMethod.hasPaySort = NO;
  resultPayMethod.paySort = @"";
  return self;
}
- (BOOL) hasIsActivity {
  return resultPayMethod.hasIsActivity;
}
- (NSString*) isActivity {
  return resultPayMethod.isActivity;
}
- (ContentPayMethodBuilder*) setIsActivity:(NSString*) value {
  resultPayMethod.hasIsActivity = YES;
  resultPayMethod.isActivity = value;
  return self;
}
- (ContentPayMethodBuilder*) clearIsActivity {
  resultPayMethod.hasIsActivity = NO;
  resultPayMethod.isActivity = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultPayMethod.hasStatus;
}
- (NSString*) status {
  return resultPayMethod.status;
}
- (ContentPayMethodBuilder*) setStatus:(NSString*) value {
  resultPayMethod.hasStatus = YES;
  resultPayMethod.status = value;
  return self;
}
- (ContentPayMethodBuilder*) clearStatus {
  resultPayMethod.hasStatus = NO;
  resultPayMethod.status = @"";
  return self;
}
@end

@interface ContentProductInfo ()
@property (strong) NSString* productTag;
@property (strong) NSString* productDesc;
@end

@implementation ContentProductInfo

- (BOOL) hasProductTag {
  return !!hasProductTag_;
}
- (void) setHasProductTag:(BOOL) _value_ {
  hasProductTag_ = !!_value_;
}
@synthesize productTag;
- (BOOL) hasProductDesc {
  return !!hasProductDesc_;
}
- (void) setHasProductDesc:(BOOL) _value_ {
  hasProductDesc_ = !!_value_;
}
@synthesize productDesc;
- (instancetype) init {
  if ((self = [super init])) {
    self.productTag = @"";
    self.productDesc = @"";
  }
  return self;
}
static ContentProductInfo* defaultContentProductInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentProductInfo class]) {
    defaultContentProductInfoInstance = [[ContentProductInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentProductInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentProductInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductTag) {
    [output writeString:1 value:self.productTag];
  }
  if (self.hasProductDesc) {
    [output writeString:2 value:self.productDesc];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProductTag) {
    size_ += computeStringSize(1, self.productTag);
  }
  if (self.hasProductDesc) {
    size_ += computeStringSize(2, self.productDesc);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentProductInfo*) parseFromData:(NSData*) data {
  return (ContentProductInfo*)[[[ContentProductInfo builder] mergeFromData:data] build];
}
+ (ContentProductInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductInfo*)[[[ContentProductInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentProductInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentProductInfo*)[[[ContentProductInfo builder] mergeFromInputStream:input] build];
}
+ (ContentProductInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductInfo*)[[[ContentProductInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentProductInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentProductInfo*)[[[ContentProductInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentProductInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentProductInfo*)[[[ContentProductInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentProductInfoBuilder*) builder {
  return [[ContentProductInfoBuilder alloc] init];
}
+ (ContentProductInfoBuilder*) builderWithPrototype:(ContentProductInfo*) prototype {
  return [[ContentProductInfo builder] mergeFrom:prototype];
}
- (ContentProductInfoBuilder*) builder {
  return [ContentProductInfo builder];
}
- (ContentProductInfoBuilder*) toBuilder {
  return [ContentProductInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productTag", self.productTag];
  }
  if (self.hasProductDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productDesc", self.productDesc];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProductTag) {
    [dictionary setObject: self.productTag forKey: @"productTag"];
  }
  if (self.hasProductDesc) {
    [dictionary setObject: self.productDesc forKey: @"productDesc"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentProductInfo class]]) {
    return NO;
  }
  ContentProductInfo *otherMessage = other;
  return
      self.hasProductTag == otherMessage.hasProductTag &&
      (!self.hasProductTag || [self.productTag isEqual:otherMessage.productTag]) &&
      self.hasProductDesc == otherMessage.hasProductDesc &&
      (!self.hasProductDesc || [self.productDesc isEqual:otherMessage.productDesc]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProductTag) {
    hashCode = hashCode * 31 + [self.productTag hash];
  }
  if (self.hasProductDesc) {
    hashCode = hashCode * 31 + [self.productDesc hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentProductInfoBuilder()
@property (strong) ContentProductInfo* resultProductInfo;
@end

@implementation ContentProductInfoBuilder
@synthesize resultProductInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProductInfo = [[ContentProductInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProductInfo;
}
- (ContentProductInfoBuilder*) clear {
  self.resultProductInfo = [[ContentProductInfo alloc] init];
  return self;
}
- (ContentProductInfoBuilder*) clone {
  return [ContentProductInfo builderWithPrototype:resultProductInfo];
}
- (ContentProductInfo*) defaultInstance {
  return [ContentProductInfo defaultInstance];
}
- (ContentProductInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentProductInfo*) buildPartial {
  ContentProductInfo* returnMe = resultProductInfo;
  self.resultProductInfo = nil;
  return returnMe;
}
- (ContentProductInfoBuilder*) mergeFrom:(ContentProductInfo*) other {
  if (other == [ContentProductInfo defaultInstance]) {
    return self;
  }
  if (other.hasProductTag) {
    [self setProductTag:other.productTag];
  }
  if (other.hasProductDesc) {
    [self setProductDesc:other.productDesc];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentProductInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentProductInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setProductTag:[input readString]];
        break;
      }
      case 18: {
        [self setProductDesc:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasProductTag {
  return resultProductInfo.hasProductTag;
}
- (NSString*) productTag {
  return resultProductInfo.productTag;
}
- (ContentProductInfoBuilder*) setProductTag:(NSString*) value {
  resultProductInfo.hasProductTag = YES;
  resultProductInfo.productTag = value;
  return self;
}
- (ContentProductInfoBuilder*) clearProductTag {
  resultProductInfo.hasProductTag = NO;
  resultProductInfo.productTag = @"";
  return self;
}
- (BOOL) hasProductDesc {
  return resultProductInfo.hasProductDesc;
}
- (NSString*) productDesc {
  return resultProductInfo.productDesc;
}
- (ContentProductInfoBuilder*) setProductDesc:(NSString*) value {
  resultProductInfo.hasProductDesc = YES;
  resultProductInfo.productDesc = value;
  return self;
}
- (ContentProductInfoBuilder*) clearProductDesc {
  resultProductInfo.hasProductDesc = NO;
  resultProductInfo.productDesc = @"";
  return self;
}
@end

@interface ContentInstalment ()
@property (strong) NSString* id;
@property (strong) NSString* stageCount;
@property (strong) NSString* feeRate;
@property (strong) NSString* cost;
@property (strong) NSString* repay;
@property (strong) NSString* total;
@property (strong) NSString* instalmentType;
@property (strong) NSString* stageInfo;
@property (strong) NSString* feeInfo;
@property (strong) NSString* totalFeeInfo;
@end

@implementation ContentInstalment

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasStageCount {
  return !!hasStageCount_;
}
- (void) setHasStageCount:(BOOL) _value_ {
  hasStageCount_ = !!_value_;
}
@synthesize stageCount;
- (BOOL) hasFeeRate {
  return !!hasFeeRate_;
}
- (void) setHasFeeRate:(BOOL) _value_ {
  hasFeeRate_ = !!_value_;
}
@synthesize feeRate;
- (BOOL) hasCost {
  return !!hasCost_;
}
- (void) setHasCost:(BOOL) _value_ {
  hasCost_ = !!_value_;
}
@synthesize cost;
- (BOOL) hasRepay {
  return !!hasRepay_;
}
- (void) setHasRepay:(BOOL) _value_ {
  hasRepay_ = !!_value_;
}
@synthesize repay;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) _value_ {
  hasTotal_ = !!_value_;
}
@synthesize total;
- (BOOL) hasInstalmentType {
  return !!hasInstalmentType_;
}
- (void) setHasInstalmentType:(BOOL) _value_ {
  hasInstalmentType_ = !!_value_;
}
@synthesize instalmentType;
- (BOOL) hasStageInfo {
  return !!hasStageInfo_;
}
- (void) setHasStageInfo:(BOOL) _value_ {
  hasStageInfo_ = !!_value_;
}
@synthesize stageInfo;
- (BOOL) hasFeeInfo {
  return !!hasFeeInfo_;
}
- (void) setHasFeeInfo:(BOOL) _value_ {
  hasFeeInfo_ = !!_value_;
}
@synthesize feeInfo;
- (BOOL) hasTotalFeeInfo {
  return !!hasTotalFeeInfo_;
}
- (void) setHasTotalFeeInfo:(BOOL) _value_ {
  hasTotalFeeInfo_ = !!_value_;
}
@synthesize totalFeeInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = @"";
    self.stageCount = @"";
    self.feeRate = @"";
    self.cost = @"";
    self.repay = @"";
    self.total = @"";
    self.instalmentType = @"";
    self.stageInfo = @"";
    self.feeInfo = @"";
    self.totalFeeInfo = @"";
  }
  return self;
}
static ContentInstalment* defaultContentInstalmentInstance = nil;
+ (void) initialize {
  if (self == [ContentInstalment class]) {
    defaultContentInstalmentInstance = [[ContentInstalment alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentInstalmentInstance;
}
- (instancetype) defaultInstance {
  return defaultContentInstalmentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasStageCount) {
    [output writeString:2 value:self.stageCount];
  }
  if (self.hasFeeRate) {
    [output writeString:3 value:self.feeRate];
  }
  if (self.hasCost) {
    [output writeString:4 value:self.cost];
  }
  if (self.hasRepay) {
    [output writeString:5 value:self.repay];
  }
  if (self.hasTotal) {
    [output writeString:6 value:self.total];
  }
  if (self.hasInstalmentType) {
    [output writeString:7 value:self.instalmentType];
  }
  if (self.hasStageInfo) {
    [output writeString:8 value:self.stageInfo];
  }
  if (self.hasFeeInfo) {
    [output writeString:9 value:self.feeInfo];
  }
  if (self.hasTotalFeeInfo) {
    [output writeString:10 value:self.totalFeeInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasStageCount) {
    size_ += computeStringSize(2, self.stageCount);
  }
  if (self.hasFeeRate) {
    size_ += computeStringSize(3, self.feeRate);
  }
  if (self.hasCost) {
    size_ += computeStringSize(4, self.cost);
  }
  if (self.hasRepay) {
    size_ += computeStringSize(5, self.repay);
  }
  if (self.hasTotal) {
    size_ += computeStringSize(6, self.total);
  }
  if (self.hasInstalmentType) {
    size_ += computeStringSize(7, self.instalmentType);
  }
  if (self.hasStageInfo) {
    size_ += computeStringSize(8, self.stageInfo);
  }
  if (self.hasFeeInfo) {
    size_ += computeStringSize(9, self.feeInfo);
  }
  if (self.hasTotalFeeInfo) {
    size_ += computeStringSize(10, self.totalFeeInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentInstalment*) parseFromData:(NSData*) data {
  return (ContentInstalment*)[[[ContentInstalment builder] mergeFromData:data] build];
}
+ (ContentInstalment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentInstalment*)[[[ContentInstalment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentInstalment*) parseFromInputStream:(NSInputStream*) input {
  return (ContentInstalment*)[[[ContentInstalment builder] mergeFromInputStream:input] build];
}
+ (ContentInstalment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentInstalment*)[[[ContentInstalment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentInstalment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentInstalment*)[[[ContentInstalment builder] mergeFromCodedInputStream:input] build];
}
+ (ContentInstalment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentInstalment*)[[[ContentInstalment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentInstalmentBuilder*) builder {
  return [[ContentInstalmentBuilder alloc] init];
}
+ (ContentInstalmentBuilder*) builderWithPrototype:(ContentInstalment*) prototype {
  return [[ContentInstalment builder] mergeFrom:prototype];
}
- (ContentInstalmentBuilder*) builder {
  return [ContentInstalment builder];
}
- (ContentInstalmentBuilder*) toBuilder {
  return [ContentInstalment builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasStageCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageCount", self.stageCount];
  }
  if (self.hasFeeRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feeRate", self.feeRate];
  }
  if (self.hasCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cost", self.cost];
  }
  if (self.hasRepay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repay", self.repay];
  }
  if (self.hasTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"total", self.total];
  }
  if (self.hasInstalmentType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"instalmentType", self.instalmentType];
  }
  if (self.hasStageInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageInfo", self.stageInfo];
  }
  if (self.hasFeeInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feeInfo", self.feeInfo];
  }
  if (self.hasTotalFeeInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalFeeInfo", self.totalFeeInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasStageCount) {
    [dictionary setObject: self.stageCount forKey: @"stageCount"];
  }
  if (self.hasFeeRate) {
    [dictionary setObject: self.feeRate forKey: @"feeRate"];
  }
  if (self.hasCost) {
    [dictionary setObject: self.cost forKey: @"cost"];
  }
  if (self.hasRepay) {
    [dictionary setObject: self.repay forKey: @"repay"];
  }
  if (self.hasTotal) {
    [dictionary setObject: self.total forKey: @"total"];
  }
  if (self.hasInstalmentType) {
    [dictionary setObject: self.instalmentType forKey: @"instalmentType"];
  }
  if (self.hasStageInfo) {
    [dictionary setObject: self.stageInfo forKey: @"stageInfo"];
  }
  if (self.hasFeeInfo) {
    [dictionary setObject: self.feeInfo forKey: @"feeInfo"];
  }
  if (self.hasTotalFeeInfo) {
    [dictionary setObject: self.totalFeeInfo forKey: @"totalFeeInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentInstalment class]]) {
    return NO;
  }
  ContentInstalment *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasStageCount == otherMessage.hasStageCount &&
      (!self.hasStageCount || [self.stageCount isEqual:otherMessage.stageCount]) &&
      self.hasFeeRate == otherMessage.hasFeeRate &&
      (!self.hasFeeRate || [self.feeRate isEqual:otherMessage.feeRate]) &&
      self.hasCost == otherMessage.hasCost &&
      (!self.hasCost || [self.cost isEqual:otherMessage.cost]) &&
      self.hasRepay == otherMessage.hasRepay &&
      (!self.hasRepay || [self.repay isEqual:otherMessage.repay]) &&
      self.hasTotal == otherMessage.hasTotal &&
      (!self.hasTotal || [self.total isEqual:otherMessage.total]) &&
      self.hasInstalmentType == otherMessage.hasInstalmentType &&
      (!self.hasInstalmentType || [self.instalmentType isEqual:otherMessage.instalmentType]) &&
      self.hasStageInfo == otherMessage.hasStageInfo &&
      (!self.hasStageInfo || [self.stageInfo isEqual:otherMessage.stageInfo]) &&
      self.hasFeeInfo == otherMessage.hasFeeInfo &&
      (!self.hasFeeInfo || [self.feeInfo isEqual:otherMessage.feeInfo]) &&
      self.hasTotalFeeInfo == otherMessage.hasTotalFeeInfo &&
      (!self.hasTotalFeeInfo || [self.totalFeeInfo isEqual:otherMessage.totalFeeInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasStageCount) {
    hashCode = hashCode * 31 + [self.stageCount hash];
  }
  if (self.hasFeeRate) {
    hashCode = hashCode * 31 + [self.feeRate hash];
  }
  if (self.hasCost) {
    hashCode = hashCode * 31 + [self.cost hash];
  }
  if (self.hasRepay) {
    hashCode = hashCode * 31 + [self.repay hash];
  }
  if (self.hasTotal) {
    hashCode = hashCode * 31 + [self.total hash];
  }
  if (self.hasInstalmentType) {
    hashCode = hashCode * 31 + [self.instalmentType hash];
  }
  if (self.hasStageInfo) {
    hashCode = hashCode * 31 + [self.stageInfo hash];
  }
  if (self.hasFeeInfo) {
    hashCode = hashCode * 31 + [self.feeInfo hash];
  }
  if (self.hasTotalFeeInfo) {
    hashCode = hashCode * 31 + [self.totalFeeInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentInstalmentBuilder()
@property (strong) ContentInstalment* resultInstalment;
@end

@implementation ContentInstalmentBuilder
@synthesize resultInstalment;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultInstalment = [[ContentInstalment alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultInstalment;
}
- (ContentInstalmentBuilder*) clear {
  self.resultInstalment = [[ContentInstalment alloc] init];
  return self;
}
- (ContentInstalmentBuilder*) clone {
  return [ContentInstalment builderWithPrototype:resultInstalment];
}
- (ContentInstalment*) defaultInstance {
  return [ContentInstalment defaultInstance];
}
- (ContentInstalment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentInstalment*) buildPartial {
  ContentInstalment* returnMe = resultInstalment;
  self.resultInstalment = nil;
  return returnMe;
}
- (ContentInstalmentBuilder*) mergeFrom:(ContentInstalment*) other {
  if (other == [ContentInstalment defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasStageCount) {
    [self setStageCount:other.stageCount];
  }
  if (other.hasFeeRate) {
    [self setFeeRate:other.feeRate];
  }
  if (other.hasCost) {
    [self setCost:other.cost];
  }
  if (other.hasRepay) {
    [self setRepay:other.repay];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  if (other.hasInstalmentType) {
    [self setInstalmentType:other.instalmentType];
  }
  if (other.hasStageInfo) {
    [self setStageInfo:other.stageInfo];
  }
  if (other.hasFeeInfo) {
    [self setFeeInfo:other.feeInfo];
  }
  if (other.hasTotalFeeInfo) {
    [self setTotalFeeInfo:other.totalFeeInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentInstalmentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentInstalmentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setStageCount:[input readString]];
        break;
      }
      case 26: {
        [self setFeeRate:[input readString]];
        break;
      }
      case 34: {
        [self setCost:[input readString]];
        break;
      }
      case 42: {
        [self setRepay:[input readString]];
        break;
      }
      case 50: {
        [self setTotal:[input readString]];
        break;
      }
      case 58: {
        [self setInstalmentType:[input readString]];
        break;
      }
      case 66: {
        [self setStageInfo:[input readString]];
        break;
      }
      case 74: {
        [self setFeeInfo:[input readString]];
        break;
      }
      case 82: {
        [self setTotalFeeInfo:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultInstalment.hasId;
}
- (NSString*) id {
  return resultInstalment.id;
}
- (ContentInstalmentBuilder*) setId:(NSString*) value {
  resultInstalment.hasId = YES;
  resultInstalment.id = value;
  return self;
}
- (ContentInstalmentBuilder*) clearId {
  resultInstalment.hasId = NO;
  resultInstalment.id = @"";
  return self;
}
- (BOOL) hasStageCount {
  return resultInstalment.hasStageCount;
}
- (NSString*) stageCount {
  return resultInstalment.stageCount;
}
- (ContentInstalmentBuilder*) setStageCount:(NSString*) value {
  resultInstalment.hasStageCount = YES;
  resultInstalment.stageCount = value;
  return self;
}
- (ContentInstalmentBuilder*) clearStageCount {
  resultInstalment.hasStageCount = NO;
  resultInstalment.stageCount = @"";
  return self;
}
- (BOOL) hasFeeRate {
  return resultInstalment.hasFeeRate;
}
- (NSString*) feeRate {
  return resultInstalment.feeRate;
}
- (ContentInstalmentBuilder*) setFeeRate:(NSString*) value {
  resultInstalment.hasFeeRate = YES;
  resultInstalment.feeRate = value;
  return self;
}
- (ContentInstalmentBuilder*) clearFeeRate {
  resultInstalment.hasFeeRate = NO;
  resultInstalment.feeRate = @"";
  return self;
}
- (BOOL) hasCost {
  return resultInstalment.hasCost;
}
- (NSString*) cost {
  return resultInstalment.cost;
}
- (ContentInstalmentBuilder*) setCost:(NSString*) value {
  resultInstalment.hasCost = YES;
  resultInstalment.cost = value;
  return self;
}
- (ContentInstalmentBuilder*) clearCost {
  resultInstalment.hasCost = NO;
  resultInstalment.cost = @"";
  return self;
}
- (BOOL) hasRepay {
  return resultInstalment.hasRepay;
}
- (NSString*) repay {
  return resultInstalment.repay;
}
- (ContentInstalmentBuilder*) setRepay:(NSString*) value {
  resultInstalment.hasRepay = YES;
  resultInstalment.repay = value;
  return self;
}
- (ContentInstalmentBuilder*) clearRepay {
  resultInstalment.hasRepay = NO;
  resultInstalment.repay = @"";
  return self;
}
- (BOOL) hasTotal {
  return resultInstalment.hasTotal;
}
- (NSString*) total {
  return resultInstalment.total;
}
- (ContentInstalmentBuilder*) setTotal:(NSString*) value {
  resultInstalment.hasTotal = YES;
  resultInstalment.total = value;
  return self;
}
- (ContentInstalmentBuilder*) clearTotal {
  resultInstalment.hasTotal = NO;
  resultInstalment.total = @"";
  return self;
}
- (BOOL) hasInstalmentType {
  return resultInstalment.hasInstalmentType;
}
- (NSString*) instalmentType {
  return resultInstalment.instalmentType;
}
- (ContentInstalmentBuilder*) setInstalmentType:(NSString*) value {
  resultInstalment.hasInstalmentType = YES;
  resultInstalment.instalmentType = value;
  return self;
}
- (ContentInstalmentBuilder*) clearInstalmentType {
  resultInstalment.hasInstalmentType = NO;
  resultInstalment.instalmentType = @"";
  return self;
}
- (BOOL) hasStageInfo {
  return resultInstalment.hasStageInfo;
}
- (NSString*) stageInfo {
  return resultInstalment.stageInfo;
}
- (ContentInstalmentBuilder*) setStageInfo:(NSString*) value {
  resultInstalment.hasStageInfo = YES;
  resultInstalment.stageInfo = value;
  return self;
}
- (ContentInstalmentBuilder*) clearStageInfo {
  resultInstalment.hasStageInfo = NO;
  resultInstalment.stageInfo = @"";
  return self;
}
- (BOOL) hasFeeInfo {
  return resultInstalment.hasFeeInfo;
}
- (NSString*) feeInfo {
  return resultInstalment.feeInfo;
}
- (ContentInstalmentBuilder*) setFeeInfo:(NSString*) value {
  resultInstalment.hasFeeInfo = YES;
  resultInstalment.feeInfo = value;
  return self;
}
- (ContentInstalmentBuilder*) clearFeeInfo {
  resultInstalment.hasFeeInfo = NO;
  resultInstalment.feeInfo = @"";
  return self;
}
- (BOOL) hasTotalFeeInfo {
  return resultInstalment.hasTotalFeeInfo;
}
- (NSString*) totalFeeInfo {
  return resultInstalment.totalFeeInfo;
}
- (ContentInstalmentBuilder*) setTotalFeeInfo:(NSString*) value {
  resultInstalment.hasTotalFeeInfo = YES;
  resultInstalment.totalFeeInfo = value;
  return self;
}
- (ContentInstalmentBuilder*) clearTotalFeeInfo {
  resultInstalment.hasTotalFeeInfo = NO;
  resultInstalment.totalFeeInfo = @"";
  return self;
}
@end

@interface ContentVoucher ()
@property (strong) NSString* voucherInfo;
@property (strong) NSString* name;
@property (strong) NSString* expDate;
@property (strong) NSString* status;
@property (strong) NSString* voucherNo;
@property (strong) NSString* voucherAmount;
@property (strong) NSString* payAmount;
@property (strong) NSMutableArray * supportedMethodIdListArray;
@end

@implementation ContentVoucher

- (BOOL) hasVoucherInfo {
  return !!hasVoucherInfo_;
}
- (void) setHasVoucherInfo:(BOOL) _value_ {
  hasVoucherInfo_ = !!_value_;
}
@synthesize voucherInfo;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasExpDate {
  return !!hasExpDate_;
}
- (void) setHasExpDate:(BOOL) _value_ {
  hasExpDate_ = !!_value_;
}
@synthesize expDate;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasVoucherNo {
  return !!hasVoucherNo_;
}
- (void) setHasVoucherNo:(BOOL) _value_ {
  hasVoucherNo_ = !!_value_;
}
@synthesize voucherNo;
- (BOOL) hasVoucherAmount {
  return !!hasVoucherAmount_;
}
- (void) setHasVoucherAmount:(BOOL) _value_ {
  hasVoucherAmount_ = !!_value_;
}
@synthesize voucherAmount;
- (BOOL) hasPayAmount {
  return !!hasPayAmount_;
}
- (void) setHasPayAmount:(BOOL) _value_ {
  hasPayAmount_ = !!_value_;
}
@synthesize payAmount;
@synthesize supportedMethodIdListArray;
@dynamic supportedMethodIdList;
- (instancetype) init {
  if ((self = [super init])) {
    self.voucherInfo = @"";
    self.name = @"";
    self.expDate = @"";
    self.status = @"";
    self.voucherNo = @"";
    self.voucherAmount = @"";
    self.payAmount = @"";
  }
  return self;
}
static ContentVoucher* defaultContentVoucherInstance = nil;
+ (void) initialize {
  if (self == [ContentVoucher class]) {
    defaultContentVoucherInstance = [[ContentVoucher alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentVoucherInstance;
}
- (instancetype) defaultInstance {
  return defaultContentVoucherInstance;
}
- (NSArray *)supportedMethodIdList {
  return supportedMethodIdListArray;
}
- (NSString*)supportedMethodIdListAtIndex:(NSUInteger)index {
  return [supportedMethodIdListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVoucherInfo) {
    [output writeString:1 value:self.voucherInfo];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasExpDate) {
    [output writeString:3 value:self.expDate];
  }
  if (self.hasStatus) {
    [output writeString:4 value:self.status];
  }
  if (self.hasVoucherNo) {
    [output writeString:5 value:self.voucherNo];
  }
  if (self.hasVoucherAmount) {
    [output writeString:6 value:self.voucherAmount];
  }
  if (self.hasPayAmount) {
    [output writeString:7 value:self.payAmount];
  }
  [self.supportedMethodIdListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:8 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVoucherInfo) {
    size_ += computeStringSize(1, self.voucherInfo);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasExpDate) {
    size_ += computeStringSize(3, self.expDate);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(4, self.status);
  }
  if (self.hasVoucherNo) {
    size_ += computeStringSize(5, self.voucherNo);
  }
  if (self.hasVoucherAmount) {
    size_ += computeStringSize(6, self.voucherAmount);
  }
  if (self.hasPayAmount) {
    size_ += computeStringSize(7, self.payAmount);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.supportedMethodIdListArray.count;
    [self.supportedMethodIdListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentVoucher*) parseFromData:(NSData*) data {
  return (ContentVoucher*)[[[ContentVoucher builder] mergeFromData:data] build];
}
+ (ContentVoucher*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentVoucher*)[[[ContentVoucher builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentVoucher*) parseFromInputStream:(NSInputStream*) input {
  return (ContentVoucher*)[[[ContentVoucher builder] mergeFromInputStream:input] build];
}
+ (ContentVoucher*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentVoucher*)[[[ContentVoucher builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentVoucher*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentVoucher*)[[[ContentVoucher builder] mergeFromCodedInputStream:input] build];
}
+ (ContentVoucher*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentVoucher*)[[[ContentVoucher builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentVoucherBuilder*) builder {
  return [[ContentVoucherBuilder alloc] init];
}
+ (ContentVoucherBuilder*) builderWithPrototype:(ContentVoucher*) prototype {
  return [[ContentVoucher builder] mergeFrom:prototype];
}
- (ContentVoucherBuilder*) builder {
  return [ContentVoucher builder];
}
- (ContentVoucherBuilder*) toBuilder {
  return [ContentVoucher builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVoucherInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherInfo", self.voucherInfo];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasExpDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expDate", self.expDate];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasVoucherNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherNo", self.voucherNo];
  }
  if (self.hasVoucherAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherAmount", self.voucherAmount];
  }
  if (self.hasPayAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payAmount", self.payAmount];
  }
  [self.supportedMethodIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportedMethodIdList", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVoucherInfo) {
    [dictionary setObject: self.voucherInfo forKey: @"voucherInfo"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasExpDate) {
    [dictionary setObject: self.expDate forKey: @"expDate"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  if (self.hasVoucherNo) {
    [dictionary setObject: self.voucherNo forKey: @"voucherNo"];
  }
  if (self.hasVoucherAmount) {
    [dictionary setObject: self.voucherAmount forKey: @"voucherAmount"];
  }
  if (self.hasPayAmount) {
    [dictionary setObject: self.payAmount forKey: @"payAmount"];
  }
  [dictionary setObject:self.supportedMethodIdList forKey: @"supportedMethodIdList"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentVoucher class]]) {
    return NO;
  }
  ContentVoucher *otherMessage = other;
  return
      self.hasVoucherInfo == otherMessage.hasVoucherInfo &&
      (!self.hasVoucherInfo || [self.voucherInfo isEqual:otherMessage.voucherInfo]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasExpDate == otherMessage.hasExpDate &&
      (!self.hasExpDate || [self.expDate isEqual:otherMessage.expDate]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasVoucherNo == otherMessage.hasVoucherNo &&
      (!self.hasVoucherNo || [self.voucherNo isEqual:otherMessage.voucherNo]) &&
      self.hasVoucherAmount == otherMessage.hasVoucherAmount &&
      (!self.hasVoucherAmount || [self.voucherAmount isEqual:otherMessage.voucherAmount]) &&
      self.hasPayAmount == otherMessage.hasPayAmount &&
      (!self.hasPayAmount || [self.payAmount isEqual:otherMessage.payAmount]) &&
      [self.supportedMethodIdListArray isEqualToArray:otherMessage.supportedMethodIdListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVoucherInfo) {
    hashCode = hashCode * 31 + [self.voucherInfo hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasExpDate) {
    hashCode = hashCode * 31 + [self.expDate hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasVoucherNo) {
    hashCode = hashCode * 31 + [self.voucherNo hash];
  }
  if (self.hasVoucherAmount) {
    hashCode = hashCode * 31 + [self.voucherAmount hash];
  }
  if (self.hasPayAmount) {
    hashCode = hashCode * 31 + [self.payAmount hash];
  }
  [self.supportedMethodIdListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentVoucherBuilder()
@property (strong) ContentVoucher* resultVoucher;
@end

@implementation ContentVoucherBuilder
@synthesize resultVoucher;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultVoucher = [[ContentVoucher alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultVoucher;
}
- (ContentVoucherBuilder*) clear {
  self.resultVoucher = [[ContentVoucher alloc] init];
  return self;
}
- (ContentVoucherBuilder*) clone {
  return [ContentVoucher builderWithPrototype:resultVoucher];
}
- (ContentVoucher*) defaultInstance {
  return [ContentVoucher defaultInstance];
}
- (ContentVoucher*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentVoucher*) buildPartial {
  ContentVoucher* returnMe = resultVoucher;
  self.resultVoucher = nil;
  return returnMe;
}
- (ContentVoucherBuilder*) mergeFrom:(ContentVoucher*) other {
  if (other == [ContentVoucher defaultInstance]) {
    return self;
  }
  if (other.hasVoucherInfo) {
    [self setVoucherInfo:other.voucherInfo];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasExpDate) {
    [self setExpDate:other.expDate];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasVoucherNo) {
    [self setVoucherNo:other.voucherNo];
  }
  if (other.hasVoucherAmount) {
    [self setVoucherAmount:other.voucherAmount];
  }
  if (other.hasPayAmount) {
    [self setPayAmount:other.payAmount];
  }
  if (other.supportedMethodIdListArray.count > 0) {
    if (resultVoucher.supportedMethodIdListArray == nil) {
      resultVoucher.supportedMethodIdListArray = [[NSMutableArray alloc] initWithArray:other.supportedMethodIdListArray];
    } else {
      [resultVoucher.supportedMethodIdListArray addObjectsFromArray:other.supportedMethodIdListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentVoucherBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentVoucherBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setVoucherInfo:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setExpDate:[input readString]];
        break;
      }
      case 34: {
        [self setStatus:[input readString]];
        break;
      }
      case 42: {
        [self setVoucherNo:[input readString]];
        break;
      }
      case 50: {
        [self setVoucherAmount:[input readString]];
        break;
      }
      case 58: {
        [self setPayAmount:[input readString]];
        break;
      }
      case 66: {
        [self addSupportedMethodIdList:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasVoucherInfo {
  return resultVoucher.hasVoucherInfo;
}
- (NSString*) voucherInfo {
  return resultVoucher.voucherInfo;
}
- (ContentVoucherBuilder*) setVoucherInfo:(NSString*) value {
  resultVoucher.hasVoucherInfo = YES;
  resultVoucher.voucherInfo = value;
  return self;
}
- (ContentVoucherBuilder*) clearVoucherInfo {
  resultVoucher.hasVoucherInfo = NO;
  resultVoucher.voucherInfo = @"";
  return self;
}
- (BOOL) hasName {
  return resultVoucher.hasName;
}
- (NSString*) name {
  return resultVoucher.name;
}
- (ContentVoucherBuilder*) setName:(NSString*) value {
  resultVoucher.hasName = YES;
  resultVoucher.name = value;
  return self;
}
- (ContentVoucherBuilder*) clearName {
  resultVoucher.hasName = NO;
  resultVoucher.name = @"";
  return self;
}
- (BOOL) hasExpDate {
  return resultVoucher.hasExpDate;
}
- (NSString*) expDate {
  return resultVoucher.expDate;
}
- (ContentVoucherBuilder*) setExpDate:(NSString*) value {
  resultVoucher.hasExpDate = YES;
  resultVoucher.expDate = value;
  return self;
}
- (ContentVoucherBuilder*) clearExpDate {
  resultVoucher.hasExpDate = NO;
  resultVoucher.expDate = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultVoucher.hasStatus;
}
- (NSString*) status {
  return resultVoucher.status;
}
- (ContentVoucherBuilder*) setStatus:(NSString*) value {
  resultVoucher.hasStatus = YES;
  resultVoucher.status = value;
  return self;
}
- (ContentVoucherBuilder*) clearStatus {
  resultVoucher.hasStatus = NO;
  resultVoucher.status = @"";
  return self;
}
- (BOOL) hasVoucherNo {
  return resultVoucher.hasVoucherNo;
}
- (NSString*) voucherNo {
  return resultVoucher.voucherNo;
}
- (ContentVoucherBuilder*) setVoucherNo:(NSString*) value {
  resultVoucher.hasVoucherNo = YES;
  resultVoucher.voucherNo = value;
  return self;
}
- (ContentVoucherBuilder*) clearVoucherNo {
  resultVoucher.hasVoucherNo = NO;
  resultVoucher.voucherNo = @"";
  return self;
}
- (BOOL) hasVoucherAmount {
  return resultVoucher.hasVoucherAmount;
}
- (NSString*) voucherAmount {
  return resultVoucher.voucherAmount;
}
- (ContentVoucherBuilder*) setVoucherAmount:(NSString*) value {
  resultVoucher.hasVoucherAmount = YES;
  resultVoucher.voucherAmount = value;
  return self;
}
- (ContentVoucherBuilder*) clearVoucherAmount {
  resultVoucher.hasVoucherAmount = NO;
  resultVoucher.voucherAmount = @"";
  return self;
}
- (BOOL) hasPayAmount {
  return resultVoucher.hasPayAmount;
}
- (NSString*) payAmount {
  return resultVoucher.payAmount;
}
- (ContentVoucherBuilder*) setPayAmount:(NSString*) value {
  resultVoucher.hasPayAmount = YES;
  resultVoucher.payAmount = value;
  return self;
}
- (ContentVoucherBuilder*) clearPayAmount {
  resultVoucher.hasPayAmount = NO;
  resultVoucher.payAmount = @"";
  return self;
}
- (NSMutableArray *)supportedMethodIdList {
  return resultVoucher.supportedMethodIdListArray;
}
- (NSString*)supportedMethodIdListAtIndex:(NSUInteger)index {
  return [resultVoucher supportedMethodIdListAtIndex:index];
}
- (ContentVoucherBuilder *)addSupportedMethodIdList:(NSString*)value {
  if (resultVoucher.supportedMethodIdListArray == nil) {
    resultVoucher.supportedMethodIdListArray = [[NSMutableArray alloc]init];
  }
  [resultVoucher.supportedMethodIdListArray addObject:value];
  return self;
}
- (ContentVoucherBuilder *)setSupportedMethodIdListArray:(NSArray *)array {
  resultVoucher.supportedMethodIdListArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ContentVoucherBuilder *)clearSupportedMethodIdList {
  resultVoucher.supportedMethodIdListArray = nil;
  return self;
}
@end

@interface ContentAteTradeOrder ()
@property (strong) NSString* appId;
@property (strong) NSString* merchantCode;
@property (strong) NSString* outTradeNo;
@property (strong) NSString* tradeId;
@property (strong) NSString* isPlus;
@property (strong) NSString* tradeAmount;
@property (strong) NSString* orderType;
@property (strong) NSString* showStatus;
@property (strong) NSString* createTime;
@property (strong) NSString* tradeEndTime;
@property (strong) NSString* payStatus;
@property (strong) NSString* equityAmount;
@property (strong) NSString* productTag;
@property (strong) NSString* productDesc;
@property (strong) NSString* merchantName;
@property (strong) NSString* channelType;
@property (strong) NSString* payMode;
@property (strong) NSString* functionCode;
@property (strong) NSString* currencyCode;
@property (strong) NSString* refundAmount;
@property (strong) NSString* refundStatus;
@property (strong) NSString* showAmount;
@property (strong) NSString* tradeStatus;
@property (strong) NSString* errorCode;
@property (strong) NSString* errorInfo;
@property (strong) NSString* bankAcctId;
@property (strong) NSString* bankAcctType;
@property (strong) NSString* bankAcctName;
@property (strong) NSString* payAmount;
@property (strong) NSString* payModeInfo;
@property (strong) NSString* memo;
@property (strong) NSMutableArray * equityInfoArray;
@property (strong) NSString* billId;
@end

@implementation ContentAteTradeOrder

- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) _value_ {
  hasAppId_ = !!_value_;
}
@synthesize appId;
- (BOOL) hasMerchantCode {
  return !!hasMerchantCode_;
}
- (void) setHasMerchantCode:(BOOL) _value_ {
  hasMerchantCode_ = !!_value_;
}
@synthesize merchantCode;
- (BOOL) hasOutTradeNo {
  return !!hasOutTradeNo_;
}
- (void) setHasOutTradeNo:(BOOL) _value_ {
  hasOutTradeNo_ = !!_value_;
}
@synthesize outTradeNo;
- (BOOL) hasTradeId {
  return !!hasTradeId_;
}
- (void) setHasTradeId:(BOOL) _value_ {
  hasTradeId_ = !!_value_;
}
@synthesize tradeId;
- (BOOL) hasIsPlus {
  return !!hasIsPlus_;
}
- (void) setHasIsPlus:(BOOL) _value_ {
  hasIsPlus_ = !!_value_;
}
@synthesize isPlus;
- (BOOL) hasTradeAmount {
  return !!hasTradeAmount_;
}
- (void) setHasTradeAmount:(BOOL) _value_ {
  hasTradeAmount_ = !!_value_;
}
@synthesize tradeAmount;
- (BOOL) hasOrderType {
  return !!hasOrderType_;
}
- (void) setHasOrderType:(BOOL) _value_ {
  hasOrderType_ = !!_value_;
}
@synthesize orderType;
- (BOOL) hasShowStatus {
  return !!hasShowStatus_;
}
- (void) setHasShowStatus:(BOOL) _value_ {
  hasShowStatus_ = !!_value_;
}
@synthesize showStatus;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) _value_ {
  hasCreateTime_ = !!_value_;
}
@synthesize createTime;
- (BOOL) hasTradeEndTime {
  return !!hasTradeEndTime_;
}
- (void) setHasTradeEndTime:(BOOL) _value_ {
  hasTradeEndTime_ = !!_value_;
}
@synthesize tradeEndTime;
- (BOOL) hasPayStatus {
  return !!hasPayStatus_;
}
- (void) setHasPayStatus:(BOOL) _value_ {
  hasPayStatus_ = !!_value_;
}
@synthesize payStatus;
- (BOOL) hasEquityAmount {
  return !!hasEquityAmount_;
}
- (void) setHasEquityAmount:(BOOL) _value_ {
  hasEquityAmount_ = !!_value_;
}
@synthesize equityAmount;
- (BOOL) hasProductTag {
  return !!hasProductTag_;
}
- (void) setHasProductTag:(BOOL) _value_ {
  hasProductTag_ = !!_value_;
}
@synthesize productTag;
- (BOOL) hasProductDesc {
  return !!hasProductDesc_;
}
- (void) setHasProductDesc:(BOOL) _value_ {
  hasProductDesc_ = !!_value_;
}
@synthesize productDesc;
- (BOOL) hasMerchantName {
  return !!hasMerchantName_;
}
- (void) setHasMerchantName:(BOOL) _value_ {
  hasMerchantName_ = !!_value_;
}
@synthesize merchantName;
- (BOOL) hasChannelType {
  return !!hasChannelType_;
}
- (void) setHasChannelType:(BOOL) _value_ {
  hasChannelType_ = !!_value_;
}
@synthesize channelType;
- (BOOL) hasPayMode {
  return !!hasPayMode_;
}
- (void) setHasPayMode:(BOOL) _value_ {
  hasPayMode_ = !!_value_;
}
@synthesize payMode;
- (BOOL) hasFunctionCode {
  return !!hasFunctionCode_;
}
- (void) setHasFunctionCode:(BOOL) _value_ {
  hasFunctionCode_ = !!_value_;
}
@synthesize functionCode;
- (BOOL) hasCurrencyCode {
  return !!hasCurrencyCode_;
}
- (void) setHasCurrencyCode:(BOOL) _value_ {
  hasCurrencyCode_ = !!_value_;
}
@synthesize currencyCode;
- (BOOL) hasRefundAmount {
  return !!hasRefundAmount_;
}
- (void) setHasRefundAmount:(BOOL) _value_ {
  hasRefundAmount_ = !!_value_;
}
@synthesize refundAmount;
- (BOOL) hasRefundStatus {
  return !!hasRefundStatus_;
}
- (void) setHasRefundStatus:(BOOL) _value_ {
  hasRefundStatus_ = !!_value_;
}
@synthesize refundStatus;
- (BOOL) hasShowAmount {
  return !!hasShowAmount_;
}
- (void) setHasShowAmount:(BOOL) _value_ {
  hasShowAmount_ = !!_value_;
}
@synthesize showAmount;
- (BOOL) hasTradeStatus {
  return !!hasTradeStatus_;
}
- (void) setHasTradeStatus:(BOOL) _value_ {
  hasTradeStatus_ = !!_value_;
}
@synthesize tradeStatus;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasErrorInfo {
  return !!hasErrorInfo_;
}
- (void) setHasErrorInfo:(BOOL) _value_ {
  hasErrorInfo_ = !!_value_;
}
@synthesize errorInfo;
- (BOOL) hasBankAcctId {
  return !!hasBankAcctId_;
}
- (void) setHasBankAcctId:(BOOL) _value_ {
  hasBankAcctId_ = !!_value_;
}
@synthesize bankAcctId;
- (BOOL) hasBankAcctType {
  return !!hasBankAcctType_;
}
- (void) setHasBankAcctType:(BOOL) _value_ {
  hasBankAcctType_ = !!_value_;
}
@synthesize bankAcctType;
- (BOOL) hasBankAcctName {
  return !!hasBankAcctName_;
}
- (void) setHasBankAcctName:(BOOL) _value_ {
  hasBankAcctName_ = !!_value_;
}
@synthesize bankAcctName;
- (BOOL) hasPayAmount {
  return !!hasPayAmount_;
}
- (void) setHasPayAmount:(BOOL) _value_ {
  hasPayAmount_ = !!_value_;
}
@synthesize payAmount;
- (BOOL) hasPayModeInfo {
  return !!hasPayModeInfo_;
}
- (void) setHasPayModeInfo:(BOOL) _value_ {
  hasPayModeInfo_ = !!_value_;
}
@synthesize payModeInfo;
- (BOOL) hasMemo {
  return !!hasMemo_;
}
- (void) setHasMemo:(BOOL) _value_ {
  hasMemo_ = !!_value_;
}
@synthesize memo;
@synthesize equityInfoArray;
@dynamic equityInfo;
- (BOOL) hasBillId {
  return !!hasBillId_;
}
- (void) setHasBillId:(BOOL) _value_ {
  hasBillId_ = !!_value_;
}
@synthesize billId;
- (instancetype) init {
  if ((self = [super init])) {
    self.appId = @"";
    self.merchantCode = @"";
    self.outTradeNo = @"";
    self.tradeId = @"";
    self.isPlus = @"";
    self.tradeAmount = @"";
    self.orderType = @"";
    self.showStatus = @"";
    self.createTime = @"";
    self.tradeEndTime = @"";
    self.payStatus = @"";
    self.equityAmount = @"";
    self.productTag = @"";
    self.productDesc = @"";
    self.merchantName = @"";
    self.channelType = @"";
    self.payMode = @"";
    self.functionCode = @"";
    self.currencyCode = @"";
    self.refundAmount = @"";
    self.refundStatus = @"";
    self.showAmount = @"";
    self.tradeStatus = @"";
    self.errorCode = @"";
    self.errorInfo = @"";
    self.bankAcctId = @"";
    self.bankAcctType = @"";
    self.bankAcctName = @"";
    self.payAmount = @"";
    self.payModeInfo = @"";
    self.memo = @"";
    self.billId = @"";
  }
  return self;
}
static ContentAteTradeOrder* defaultContentAteTradeOrderInstance = nil;
+ (void) initialize {
  if (self == [ContentAteTradeOrder class]) {
    defaultContentAteTradeOrderInstance = [[ContentAteTradeOrder alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentAteTradeOrderInstance;
}
- (instancetype) defaultInstance {
  return defaultContentAteTradeOrderInstance;
}
- (NSArray *)equityInfo {
  return equityInfoArray;
}
- (ContentEquityInfo*)equityInfoAtIndex:(NSUInteger)index {
  return [equityInfoArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAppId) {
    [output writeString:1 value:self.appId];
  }
  if (self.hasMerchantCode) {
    [output writeString:2 value:self.merchantCode];
  }
  if (self.hasOutTradeNo) {
    [output writeString:3 value:self.outTradeNo];
  }
  if (self.hasTradeId) {
    [output writeString:4 value:self.tradeId];
  }
  if (self.hasIsPlus) {
    [output writeString:5 value:self.isPlus];
  }
  if (self.hasTradeAmount) {
    [output writeString:6 value:self.tradeAmount];
  }
  if (self.hasOrderType) {
    [output writeString:7 value:self.orderType];
  }
  if (self.hasShowStatus) {
    [output writeString:8 value:self.showStatus];
  }
  if (self.hasCreateTime) {
    [output writeString:9 value:self.createTime];
  }
  if (self.hasTradeEndTime) {
    [output writeString:10 value:self.tradeEndTime];
  }
  if (self.hasPayStatus) {
    [output writeString:11 value:self.payStatus];
  }
  if (self.hasEquityAmount) {
    [output writeString:12 value:self.equityAmount];
  }
  if (self.hasProductTag) {
    [output writeString:13 value:self.productTag];
  }
  if (self.hasProductDesc) {
    [output writeString:14 value:self.productDesc];
  }
  if (self.hasMerchantName) {
    [output writeString:15 value:self.merchantName];
  }
  if (self.hasChannelType) {
    [output writeString:16 value:self.channelType];
  }
  if (self.hasPayMode) {
    [output writeString:17 value:self.payMode];
  }
  if (self.hasFunctionCode) {
    [output writeString:18 value:self.functionCode];
  }
  if (self.hasCurrencyCode) {
    [output writeString:19 value:self.currencyCode];
  }
  if (self.hasRefundAmount) {
    [output writeString:20 value:self.refundAmount];
  }
  if (self.hasRefundStatus) {
    [output writeString:21 value:self.refundStatus];
  }
  if (self.hasShowAmount) {
    [output writeString:22 value:self.showAmount];
  }
  if (self.hasTradeStatus) {
    [output writeString:23 value:self.tradeStatus];
  }
  if (self.hasErrorCode) {
    [output writeString:24 value:self.errorCode];
  }
  if (self.hasErrorInfo) {
    [output writeString:25 value:self.errorInfo];
  }
  if (self.hasBankAcctId) {
    [output writeString:26 value:self.bankAcctId];
  }
  if (self.hasBankAcctType) {
    [output writeString:27 value:self.bankAcctType];
  }
  if (self.hasBankAcctName) {
    [output writeString:28 value:self.bankAcctName];
  }
  if (self.hasPayAmount) {
    [output writeString:29 value:self.payAmount];
  }
  if (self.hasPayModeInfo) {
    [output writeString:30 value:self.payModeInfo];
  }
  if (self.hasMemo) {
    [output writeString:31 value:self.memo];
  }
  [self.equityInfoArray enumerateObjectsUsingBlock:^(ContentEquityInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:32 value:element];
  }];
  if (self.hasBillId) {
    [output writeString:33 value:self.billId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAppId) {
    size_ += computeStringSize(1, self.appId);
  }
  if (self.hasMerchantCode) {
    size_ += computeStringSize(2, self.merchantCode);
  }
  if (self.hasOutTradeNo) {
    size_ += computeStringSize(3, self.outTradeNo);
  }
  if (self.hasTradeId) {
    size_ += computeStringSize(4, self.tradeId);
  }
  if (self.hasIsPlus) {
    size_ += computeStringSize(5, self.isPlus);
  }
  if (self.hasTradeAmount) {
    size_ += computeStringSize(6, self.tradeAmount);
  }
  if (self.hasOrderType) {
    size_ += computeStringSize(7, self.orderType);
  }
  if (self.hasShowStatus) {
    size_ += computeStringSize(8, self.showStatus);
  }
  if (self.hasCreateTime) {
    size_ += computeStringSize(9, self.createTime);
  }
  if (self.hasTradeEndTime) {
    size_ += computeStringSize(10, self.tradeEndTime);
  }
  if (self.hasPayStatus) {
    size_ += computeStringSize(11, self.payStatus);
  }
  if (self.hasEquityAmount) {
    size_ += computeStringSize(12, self.equityAmount);
  }
  if (self.hasProductTag) {
    size_ += computeStringSize(13, self.productTag);
  }
  if (self.hasProductDesc) {
    size_ += computeStringSize(14, self.productDesc);
  }
  if (self.hasMerchantName) {
    size_ += computeStringSize(15, self.merchantName);
  }
  if (self.hasChannelType) {
    size_ += computeStringSize(16, self.channelType);
  }
  if (self.hasPayMode) {
    size_ += computeStringSize(17, self.payMode);
  }
  if (self.hasFunctionCode) {
    size_ += computeStringSize(18, self.functionCode);
  }
  if (self.hasCurrencyCode) {
    size_ += computeStringSize(19, self.currencyCode);
  }
  if (self.hasRefundAmount) {
    size_ += computeStringSize(20, self.refundAmount);
  }
  if (self.hasRefundStatus) {
    size_ += computeStringSize(21, self.refundStatus);
  }
  if (self.hasShowAmount) {
    size_ += computeStringSize(22, self.showAmount);
  }
  if (self.hasTradeStatus) {
    size_ += computeStringSize(23, self.tradeStatus);
  }
  if (self.hasErrorCode) {
    size_ += computeStringSize(24, self.errorCode);
  }
  if (self.hasErrorInfo) {
    size_ += computeStringSize(25, self.errorInfo);
  }
  if (self.hasBankAcctId) {
    size_ += computeStringSize(26, self.bankAcctId);
  }
  if (self.hasBankAcctType) {
    size_ += computeStringSize(27, self.bankAcctType);
  }
  if (self.hasBankAcctName) {
    size_ += computeStringSize(28, self.bankAcctName);
  }
  if (self.hasPayAmount) {
    size_ += computeStringSize(29, self.payAmount);
  }
  if (self.hasPayModeInfo) {
    size_ += computeStringSize(30, self.payModeInfo);
  }
  if (self.hasMemo) {
    size_ += computeStringSize(31, self.memo);
  }
  [self.equityInfoArray enumerateObjectsUsingBlock:^(ContentEquityInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(32, element);
  }];
  if (self.hasBillId) {
    size_ += computeStringSize(33, self.billId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentAteTradeOrder*) parseFromData:(NSData*) data {
  return (ContentAteTradeOrder*)[[[ContentAteTradeOrder builder] mergeFromData:data] build];
}
+ (ContentAteTradeOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAteTradeOrder*)[[[ContentAteTradeOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentAteTradeOrder*) parseFromInputStream:(NSInputStream*) input {
  return (ContentAteTradeOrder*)[[[ContentAteTradeOrder builder] mergeFromInputStream:input] build];
}
+ (ContentAteTradeOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAteTradeOrder*)[[[ContentAteTradeOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAteTradeOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentAteTradeOrder*)[[[ContentAteTradeOrder builder] mergeFromCodedInputStream:input] build];
}
+ (ContentAteTradeOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentAteTradeOrder*)[[[ContentAteTradeOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentAteTradeOrderBuilder*) builder {
  return [[ContentAteTradeOrderBuilder alloc] init];
}
+ (ContentAteTradeOrderBuilder*) builderWithPrototype:(ContentAteTradeOrder*) prototype {
  return [[ContentAteTradeOrder builder] mergeFrom:prototype];
}
- (ContentAteTradeOrderBuilder*) builder {
  return [ContentAteTradeOrder builder];
}
- (ContentAteTradeOrderBuilder*) toBuilder {
  return [ContentAteTradeOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  if (self.hasMerchantCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantCode", self.merchantCode];
  }
  if (self.hasOutTradeNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outTradeNo", self.outTradeNo];
  }
  if (self.hasTradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeId", self.tradeId];
  }
  if (self.hasIsPlus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isPlus", self.isPlus];
  }
  if (self.hasTradeAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeAmount", self.tradeAmount];
  }
  if (self.hasOrderType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderType", self.orderType];
  }
  if (self.hasShowStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showStatus", self.showStatus];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", self.createTime];
  }
  if (self.hasTradeEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeEndTime", self.tradeEndTime];
  }
  if (self.hasPayStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payStatus", self.payStatus];
  }
  if (self.hasEquityAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"equityAmount", self.equityAmount];
  }
  if (self.hasProductTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productTag", self.productTag];
  }
  if (self.hasProductDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productDesc", self.productDesc];
  }
  if (self.hasMerchantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantName", self.merchantName];
  }
  if (self.hasChannelType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelType", self.channelType];
  }
  if (self.hasPayMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payMode", self.payMode];
  }
  if (self.hasFunctionCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"functionCode", self.functionCode];
  }
  if (self.hasCurrencyCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currencyCode", self.currencyCode];
  }
  if (self.hasRefundAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refundAmount", self.refundAmount];
  }
  if (self.hasRefundStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refundStatus", self.refundStatus];
  }
  if (self.hasShowAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showAmount", self.showAmount];
  }
  if (self.hasTradeStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeStatus", self.tradeStatus];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", self.errorCode];
  }
  if (self.hasErrorInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorInfo", self.errorInfo];
  }
  if (self.hasBankAcctId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankAcctId", self.bankAcctId];
  }
  if (self.hasBankAcctType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankAcctType", self.bankAcctType];
  }
  if (self.hasBankAcctName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankAcctName", self.bankAcctName];
  }
  if (self.hasPayAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payAmount", self.payAmount];
  }
  if (self.hasPayModeInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payModeInfo", self.payModeInfo];
  }
  if (self.hasMemo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memo", self.memo];
  }
  [self.equityInfoArray enumerateObjectsUsingBlock:^(ContentEquityInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"equityInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasBillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"billId", self.billId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAppId) {
    [dictionary setObject: self.appId forKey: @"appId"];
  }
  if (self.hasMerchantCode) {
    [dictionary setObject: self.merchantCode forKey: @"merchantCode"];
  }
  if (self.hasOutTradeNo) {
    [dictionary setObject: self.outTradeNo forKey: @"outTradeNo"];
  }
  if (self.hasTradeId) {
    [dictionary setObject: self.tradeId forKey: @"tradeId"];
  }
  if (self.hasIsPlus) {
    [dictionary setObject: self.isPlus forKey: @"isPlus"];
  }
  if (self.hasTradeAmount) {
    [dictionary setObject: self.tradeAmount forKey: @"tradeAmount"];
  }
  if (self.hasOrderType) {
    [dictionary setObject: self.orderType forKey: @"orderType"];
  }
  if (self.hasShowStatus) {
    [dictionary setObject: self.showStatus forKey: @"showStatus"];
  }
  if (self.hasCreateTime) {
    [dictionary setObject: self.createTime forKey: @"createTime"];
  }
  if (self.hasTradeEndTime) {
    [dictionary setObject: self.tradeEndTime forKey: @"tradeEndTime"];
  }
  if (self.hasPayStatus) {
    [dictionary setObject: self.payStatus forKey: @"payStatus"];
  }
  if (self.hasEquityAmount) {
    [dictionary setObject: self.equityAmount forKey: @"equityAmount"];
  }
  if (self.hasProductTag) {
    [dictionary setObject: self.productTag forKey: @"productTag"];
  }
  if (self.hasProductDesc) {
    [dictionary setObject: self.productDesc forKey: @"productDesc"];
  }
  if (self.hasMerchantName) {
    [dictionary setObject: self.merchantName forKey: @"merchantName"];
  }
  if (self.hasChannelType) {
    [dictionary setObject: self.channelType forKey: @"channelType"];
  }
  if (self.hasPayMode) {
    [dictionary setObject: self.payMode forKey: @"payMode"];
  }
  if (self.hasFunctionCode) {
    [dictionary setObject: self.functionCode forKey: @"functionCode"];
  }
  if (self.hasCurrencyCode) {
    [dictionary setObject: self.currencyCode forKey: @"currencyCode"];
  }
  if (self.hasRefundAmount) {
    [dictionary setObject: self.refundAmount forKey: @"refundAmount"];
  }
  if (self.hasRefundStatus) {
    [dictionary setObject: self.refundStatus forKey: @"refundStatus"];
  }
  if (self.hasShowAmount) {
    [dictionary setObject: self.showAmount forKey: @"showAmount"];
  }
  if (self.hasTradeStatus) {
    [dictionary setObject: self.tradeStatus forKey: @"tradeStatus"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: self.errorCode forKey: @"errorCode"];
  }
  if (self.hasErrorInfo) {
    [dictionary setObject: self.errorInfo forKey: @"errorInfo"];
  }
  if (self.hasBankAcctId) {
    [dictionary setObject: self.bankAcctId forKey: @"bankAcctId"];
  }
  if (self.hasBankAcctType) {
    [dictionary setObject: self.bankAcctType forKey: @"bankAcctType"];
  }
  if (self.hasBankAcctName) {
    [dictionary setObject: self.bankAcctName forKey: @"bankAcctName"];
  }
  if (self.hasPayAmount) {
    [dictionary setObject: self.payAmount forKey: @"payAmount"];
  }
  if (self.hasPayModeInfo) {
    [dictionary setObject: self.payModeInfo forKey: @"payModeInfo"];
  }
  if (self.hasMemo) {
    [dictionary setObject: self.memo forKey: @"memo"];
  }
  for (ContentEquityInfo* element in self.equityInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"equityInfo"];
  }
  if (self.hasBillId) {
    [dictionary setObject: self.billId forKey: @"billId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentAteTradeOrder class]]) {
    return NO;
  }
  ContentAteTradeOrder *otherMessage = other;
  return
      self.hasAppId == otherMessage.hasAppId &&
      (!self.hasAppId || [self.appId isEqual:otherMessage.appId]) &&
      self.hasMerchantCode == otherMessage.hasMerchantCode &&
      (!self.hasMerchantCode || [self.merchantCode isEqual:otherMessage.merchantCode]) &&
      self.hasOutTradeNo == otherMessage.hasOutTradeNo &&
      (!self.hasOutTradeNo || [self.outTradeNo isEqual:otherMessage.outTradeNo]) &&
      self.hasTradeId == otherMessage.hasTradeId &&
      (!self.hasTradeId || [self.tradeId isEqual:otherMessage.tradeId]) &&
      self.hasIsPlus == otherMessage.hasIsPlus &&
      (!self.hasIsPlus || [self.isPlus isEqual:otherMessage.isPlus]) &&
      self.hasTradeAmount == otherMessage.hasTradeAmount &&
      (!self.hasTradeAmount || [self.tradeAmount isEqual:otherMessage.tradeAmount]) &&
      self.hasOrderType == otherMessage.hasOrderType &&
      (!self.hasOrderType || [self.orderType isEqual:otherMessage.orderType]) &&
      self.hasShowStatus == otherMessage.hasShowStatus &&
      (!self.hasShowStatus || [self.showStatus isEqual:otherMessage.showStatus]) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || [self.createTime isEqual:otherMessage.createTime]) &&
      self.hasTradeEndTime == otherMessage.hasTradeEndTime &&
      (!self.hasTradeEndTime || [self.tradeEndTime isEqual:otherMessage.tradeEndTime]) &&
      self.hasPayStatus == otherMessage.hasPayStatus &&
      (!self.hasPayStatus || [self.payStatus isEqual:otherMessage.payStatus]) &&
      self.hasEquityAmount == otherMessage.hasEquityAmount &&
      (!self.hasEquityAmount || [self.equityAmount isEqual:otherMessage.equityAmount]) &&
      self.hasProductTag == otherMessage.hasProductTag &&
      (!self.hasProductTag || [self.productTag isEqual:otherMessage.productTag]) &&
      self.hasProductDesc == otherMessage.hasProductDesc &&
      (!self.hasProductDesc || [self.productDesc isEqual:otherMessage.productDesc]) &&
      self.hasMerchantName == otherMessage.hasMerchantName &&
      (!self.hasMerchantName || [self.merchantName isEqual:otherMessage.merchantName]) &&
      self.hasChannelType == otherMessage.hasChannelType &&
      (!self.hasChannelType || [self.channelType isEqual:otherMessage.channelType]) &&
      self.hasPayMode == otherMessage.hasPayMode &&
      (!self.hasPayMode || [self.payMode isEqual:otherMessage.payMode]) &&
      self.hasFunctionCode == otherMessage.hasFunctionCode &&
      (!self.hasFunctionCode || [self.functionCode isEqual:otherMessage.functionCode]) &&
      self.hasCurrencyCode == otherMessage.hasCurrencyCode &&
      (!self.hasCurrencyCode || [self.currencyCode isEqual:otherMessage.currencyCode]) &&
      self.hasRefundAmount == otherMessage.hasRefundAmount &&
      (!self.hasRefundAmount || [self.refundAmount isEqual:otherMessage.refundAmount]) &&
      self.hasRefundStatus == otherMessage.hasRefundStatus &&
      (!self.hasRefundStatus || [self.refundStatus isEqual:otherMessage.refundStatus]) &&
      self.hasShowAmount == otherMessage.hasShowAmount &&
      (!self.hasShowAmount || [self.showAmount isEqual:otherMessage.showAmount]) &&
      self.hasTradeStatus == otherMessage.hasTradeStatus &&
      (!self.hasTradeStatus || [self.tradeStatus isEqual:otherMessage.tradeStatus]) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || [self.errorCode isEqual:otherMessage.errorCode]) &&
      self.hasErrorInfo == otherMessage.hasErrorInfo &&
      (!self.hasErrorInfo || [self.errorInfo isEqual:otherMessage.errorInfo]) &&
      self.hasBankAcctId == otherMessage.hasBankAcctId &&
      (!self.hasBankAcctId || [self.bankAcctId isEqual:otherMessage.bankAcctId]) &&
      self.hasBankAcctType == otherMessage.hasBankAcctType &&
      (!self.hasBankAcctType || [self.bankAcctType isEqual:otherMessage.bankAcctType]) &&
      self.hasBankAcctName == otherMessage.hasBankAcctName &&
      (!self.hasBankAcctName || [self.bankAcctName isEqual:otherMessage.bankAcctName]) &&
      self.hasPayAmount == otherMessage.hasPayAmount &&
      (!self.hasPayAmount || [self.payAmount isEqual:otherMessage.payAmount]) &&
      self.hasPayModeInfo == otherMessage.hasPayModeInfo &&
      (!self.hasPayModeInfo || [self.payModeInfo isEqual:otherMessage.payModeInfo]) &&
      self.hasMemo == otherMessage.hasMemo &&
      (!self.hasMemo || [self.memo isEqual:otherMessage.memo]) &&
      [self.equityInfoArray isEqualToArray:otherMessage.equityInfoArray] &&
      self.hasBillId == otherMessage.hasBillId &&
      (!self.hasBillId || [self.billId isEqual:otherMessage.billId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAppId) {
    hashCode = hashCode * 31 + [self.appId hash];
  }
  if (self.hasMerchantCode) {
    hashCode = hashCode * 31 + [self.merchantCode hash];
  }
  if (self.hasOutTradeNo) {
    hashCode = hashCode * 31 + [self.outTradeNo hash];
  }
  if (self.hasTradeId) {
    hashCode = hashCode * 31 + [self.tradeId hash];
  }
  if (self.hasIsPlus) {
    hashCode = hashCode * 31 + [self.isPlus hash];
  }
  if (self.hasTradeAmount) {
    hashCode = hashCode * 31 + [self.tradeAmount hash];
  }
  if (self.hasOrderType) {
    hashCode = hashCode * 31 + [self.orderType hash];
  }
  if (self.hasShowStatus) {
    hashCode = hashCode * 31 + [self.showStatus hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [self.createTime hash];
  }
  if (self.hasTradeEndTime) {
    hashCode = hashCode * 31 + [self.tradeEndTime hash];
  }
  if (self.hasPayStatus) {
    hashCode = hashCode * 31 + [self.payStatus hash];
  }
  if (self.hasEquityAmount) {
    hashCode = hashCode * 31 + [self.equityAmount hash];
  }
  if (self.hasProductTag) {
    hashCode = hashCode * 31 + [self.productTag hash];
  }
  if (self.hasProductDesc) {
    hashCode = hashCode * 31 + [self.productDesc hash];
  }
  if (self.hasMerchantName) {
    hashCode = hashCode * 31 + [self.merchantName hash];
  }
  if (self.hasChannelType) {
    hashCode = hashCode * 31 + [self.channelType hash];
  }
  if (self.hasPayMode) {
    hashCode = hashCode * 31 + [self.payMode hash];
  }
  if (self.hasFunctionCode) {
    hashCode = hashCode * 31 + [self.functionCode hash];
  }
  if (self.hasCurrencyCode) {
    hashCode = hashCode * 31 + [self.currencyCode hash];
  }
  if (self.hasRefundAmount) {
    hashCode = hashCode * 31 + [self.refundAmount hash];
  }
  if (self.hasRefundStatus) {
    hashCode = hashCode * 31 + [self.refundStatus hash];
  }
  if (self.hasShowAmount) {
    hashCode = hashCode * 31 + [self.showAmount hash];
  }
  if (self.hasTradeStatus) {
    hashCode = hashCode * 31 + [self.tradeStatus hash];
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + [self.errorCode hash];
  }
  if (self.hasErrorInfo) {
    hashCode = hashCode * 31 + [self.errorInfo hash];
  }
  if (self.hasBankAcctId) {
    hashCode = hashCode * 31 + [self.bankAcctId hash];
  }
  if (self.hasBankAcctType) {
    hashCode = hashCode * 31 + [self.bankAcctType hash];
  }
  if (self.hasBankAcctName) {
    hashCode = hashCode * 31 + [self.bankAcctName hash];
  }
  if (self.hasPayAmount) {
    hashCode = hashCode * 31 + [self.payAmount hash];
  }
  if (self.hasPayModeInfo) {
    hashCode = hashCode * 31 + [self.payModeInfo hash];
  }
  if (self.hasMemo) {
    hashCode = hashCode * 31 + [self.memo hash];
  }
  [self.equityInfoArray enumerateObjectsUsingBlock:^(ContentEquityInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBillId) {
    hashCode = hashCode * 31 + [self.billId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentAteTradeOrderBuilder()
@property (strong) ContentAteTradeOrder* resultAteTradeOrder;
@end

@implementation ContentAteTradeOrderBuilder
@synthesize resultAteTradeOrder;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAteTradeOrder = [[ContentAteTradeOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAteTradeOrder;
}
- (ContentAteTradeOrderBuilder*) clear {
  self.resultAteTradeOrder = [[ContentAteTradeOrder alloc] init];
  return self;
}
- (ContentAteTradeOrderBuilder*) clone {
  return [ContentAteTradeOrder builderWithPrototype:resultAteTradeOrder];
}
- (ContentAteTradeOrder*) defaultInstance {
  return [ContentAteTradeOrder defaultInstance];
}
- (ContentAteTradeOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentAteTradeOrder*) buildPartial {
  ContentAteTradeOrder* returnMe = resultAteTradeOrder;
  self.resultAteTradeOrder = nil;
  return returnMe;
}
- (ContentAteTradeOrderBuilder*) mergeFrom:(ContentAteTradeOrder*) other {
  if (other == [ContentAteTradeOrder defaultInstance]) {
    return self;
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.hasMerchantCode) {
    [self setMerchantCode:other.merchantCode];
  }
  if (other.hasOutTradeNo) {
    [self setOutTradeNo:other.outTradeNo];
  }
  if (other.hasTradeId) {
    [self setTradeId:other.tradeId];
  }
  if (other.hasIsPlus) {
    [self setIsPlus:other.isPlus];
  }
  if (other.hasTradeAmount) {
    [self setTradeAmount:other.tradeAmount];
  }
  if (other.hasOrderType) {
    [self setOrderType:other.orderType];
  }
  if (other.hasShowStatus) {
    [self setShowStatus:other.showStatus];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasTradeEndTime) {
    [self setTradeEndTime:other.tradeEndTime];
  }
  if (other.hasPayStatus) {
    [self setPayStatus:other.payStatus];
  }
  if (other.hasEquityAmount) {
    [self setEquityAmount:other.equityAmount];
  }
  if (other.hasProductTag) {
    [self setProductTag:other.productTag];
  }
  if (other.hasProductDesc) {
    [self setProductDesc:other.productDesc];
  }
  if (other.hasMerchantName) {
    [self setMerchantName:other.merchantName];
  }
  if (other.hasChannelType) {
    [self setChannelType:other.channelType];
  }
  if (other.hasPayMode) {
    [self setPayMode:other.payMode];
  }
  if (other.hasFunctionCode) {
    [self setFunctionCode:other.functionCode];
  }
  if (other.hasCurrencyCode) {
    [self setCurrencyCode:other.currencyCode];
  }
  if (other.hasRefundAmount) {
    [self setRefundAmount:other.refundAmount];
  }
  if (other.hasRefundStatus) {
    [self setRefundStatus:other.refundStatus];
  }
  if (other.hasShowAmount) {
    [self setShowAmount:other.showAmount];
  }
  if (other.hasTradeStatus) {
    [self setTradeStatus:other.tradeStatus];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasErrorInfo) {
    [self setErrorInfo:other.errorInfo];
  }
  if (other.hasBankAcctId) {
    [self setBankAcctId:other.bankAcctId];
  }
  if (other.hasBankAcctType) {
    [self setBankAcctType:other.bankAcctType];
  }
  if (other.hasBankAcctName) {
    [self setBankAcctName:other.bankAcctName];
  }
  if (other.hasPayAmount) {
    [self setPayAmount:other.payAmount];
  }
  if (other.hasPayModeInfo) {
    [self setPayModeInfo:other.payModeInfo];
  }
  if (other.hasMemo) {
    [self setMemo:other.memo];
  }
  if (other.equityInfoArray.count > 0) {
    if (resultAteTradeOrder.equityInfoArray == nil) {
      resultAteTradeOrder.equityInfoArray = [[NSMutableArray alloc] initWithArray:other.equityInfoArray];
    } else {
      [resultAteTradeOrder.equityInfoArray addObjectsFromArray:other.equityInfoArray];
    }
  }
  if (other.hasBillId) {
    [self setBillId:other.billId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentAteTradeOrderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentAteTradeOrderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAppId:[input readString]];
        break;
      }
      case 18: {
        [self setMerchantCode:[input readString]];
        break;
      }
      case 26: {
        [self setOutTradeNo:[input readString]];
        break;
      }
      case 34: {
        [self setTradeId:[input readString]];
        break;
      }
      case 42: {
        [self setIsPlus:[input readString]];
        break;
      }
      case 50: {
        [self setTradeAmount:[input readString]];
        break;
      }
      case 58: {
        [self setOrderType:[input readString]];
        break;
      }
      case 66: {
        [self setShowStatus:[input readString]];
        break;
      }
      case 74: {
        [self setCreateTime:[input readString]];
        break;
      }
      case 82: {
        [self setTradeEndTime:[input readString]];
        break;
      }
      case 90: {
        [self setPayStatus:[input readString]];
        break;
      }
      case 98: {
        [self setEquityAmount:[input readString]];
        break;
      }
      case 106: {
        [self setProductTag:[input readString]];
        break;
      }
      case 114: {
        [self setProductDesc:[input readString]];
        break;
      }
      case 122: {
        [self setMerchantName:[input readString]];
        break;
      }
      case 130: {
        [self setChannelType:[input readString]];
        break;
      }
      case 138: {
        [self setPayMode:[input readString]];
        break;
      }
      case 146: {
        [self setFunctionCode:[input readString]];
        break;
      }
      case 154: {
        [self setCurrencyCode:[input readString]];
        break;
      }
      case 162: {
        [self setRefundAmount:[input readString]];
        break;
      }
      case 170: {
        [self setRefundStatus:[input readString]];
        break;
      }
      case 178: {
        [self setShowAmount:[input readString]];
        break;
      }
      case 186: {
        [self setTradeStatus:[input readString]];
        break;
      }
      case 194: {
        [self setErrorCode:[input readString]];
        break;
      }
      case 202: {
        [self setErrorInfo:[input readString]];
        break;
      }
      case 210: {
        [self setBankAcctId:[input readString]];
        break;
      }
      case 218: {
        [self setBankAcctType:[input readString]];
        break;
      }
      case 226: {
        [self setBankAcctName:[input readString]];
        break;
      }
      case 234: {
        [self setPayAmount:[input readString]];
        break;
      }
      case 242: {
        [self setPayModeInfo:[input readString]];
        break;
      }
      case 250: {
        [self setMemo:[input readString]];
        break;
      }
      case 258: {
        ContentEquityInfoBuilder* subBuilder = [ContentEquityInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEquityInfo:[subBuilder buildPartial]];
        break;
      }
      case 266: {
        [self setBillId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAppId {
  return resultAteTradeOrder.hasAppId;
}
- (NSString*) appId {
  return resultAteTradeOrder.appId;
}
- (ContentAteTradeOrderBuilder*) setAppId:(NSString*) value {
  resultAteTradeOrder.hasAppId = YES;
  resultAteTradeOrder.appId = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearAppId {
  resultAteTradeOrder.hasAppId = NO;
  resultAteTradeOrder.appId = @"";
  return self;
}
- (BOOL) hasMerchantCode {
  return resultAteTradeOrder.hasMerchantCode;
}
- (NSString*) merchantCode {
  return resultAteTradeOrder.merchantCode;
}
- (ContentAteTradeOrderBuilder*) setMerchantCode:(NSString*) value {
  resultAteTradeOrder.hasMerchantCode = YES;
  resultAteTradeOrder.merchantCode = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearMerchantCode {
  resultAteTradeOrder.hasMerchantCode = NO;
  resultAteTradeOrder.merchantCode = @"";
  return self;
}
- (BOOL) hasOutTradeNo {
  return resultAteTradeOrder.hasOutTradeNo;
}
- (NSString*) outTradeNo {
  return resultAteTradeOrder.outTradeNo;
}
- (ContentAteTradeOrderBuilder*) setOutTradeNo:(NSString*) value {
  resultAteTradeOrder.hasOutTradeNo = YES;
  resultAteTradeOrder.outTradeNo = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearOutTradeNo {
  resultAteTradeOrder.hasOutTradeNo = NO;
  resultAteTradeOrder.outTradeNo = @"";
  return self;
}
- (BOOL) hasTradeId {
  return resultAteTradeOrder.hasTradeId;
}
- (NSString*) tradeId {
  return resultAteTradeOrder.tradeId;
}
- (ContentAteTradeOrderBuilder*) setTradeId:(NSString*) value {
  resultAteTradeOrder.hasTradeId = YES;
  resultAteTradeOrder.tradeId = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearTradeId {
  resultAteTradeOrder.hasTradeId = NO;
  resultAteTradeOrder.tradeId = @"";
  return self;
}
- (BOOL) hasIsPlus {
  return resultAteTradeOrder.hasIsPlus;
}
- (NSString*) isPlus {
  return resultAteTradeOrder.isPlus;
}
- (ContentAteTradeOrderBuilder*) setIsPlus:(NSString*) value {
  resultAteTradeOrder.hasIsPlus = YES;
  resultAteTradeOrder.isPlus = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearIsPlus {
  resultAteTradeOrder.hasIsPlus = NO;
  resultAteTradeOrder.isPlus = @"";
  return self;
}
- (BOOL) hasTradeAmount {
  return resultAteTradeOrder.hasTradeAmount;
}
- (NSString*) tradeAmount {
  return resultAteTradeOrder.tradeAmount;
}
- (ContentAteTradeOrderBuilder*) setTradeAmount:(NSString*) value {
  resultAteTradeOrder.hasTradeAmount = YES;
  resultAteTradeOrder.tradeAmount = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearTradeAmount {
  resultAteTradeOrder.hasTradeAmount = NO;
  resultAteTradeOrder.tradeAmount = @"";
  return self;
}
- (BOOL) hasOrderType {
  return resultAteTradeOrder.hasOrderType;
}
- (NSString*) orderType {
  return resultAteTradeOrder.orderType;
}
- (ContentAteTradeOrderBuilder*) setOrderType:(NSString*) value {
  resultAteTradeOrder.hasOrderType = YES;
  resultAteTradeOrder.orderType = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearOrderType {
  resultAteTradeOrder.hasOrderType = NO;
  resultAteTradeOrder.orderType = @"";
  return self;
}
- (BOOL) hasShowStatus {
  return resultAteTradeOrder.hasShowStatus;
}
- (NSString*) showStatus {
  return resultAteTradeOrder.showStatus;
}
- (ContentAteTradeOrderBuilder*) setShowStatus:(NSString*) value {
  resultAteTradeOrder.hasShowStatus = YES;
  resultAteTradeOrder.showStatus = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearShowStatus {
  resultAteTradeOrder.hasShowStatus = NO;
  resultAteTradeOrder.showStatus = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return resultAteTradeOrder.hasCreateTime;
}
- (NSString*) createTime {
  return resultAteTradeOrder.createTime;
}
- (ContentAteTradeOrderBuilder*) setCreateTime:(NSString*) value {
  resultAteTradeOrder.hasCreateTime = YES;
  resultAteTradeOrder.createTime = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearCreateTime {
  resultAteTradeOrder.hasCreateTime = NO;
  resultAteTradeOrder.createTime = @"";
  return self;
}
- (BOOL) hasTradeEndTime {
  return resultAteTradeOrder.hasTradeEndTime;
}
- (NSString*) tradeEndTime {
  return resultAteTradeOrder.tradeEndTime;
}
- (ContentAteTradeOrderBuilder*) setTradeEndTime:(NSString*) value {
  resultAteTradeOrder.hasTradeEndTime = YES;
  resultAteTradeOrder.tradeEndTime = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearTradeEndTime {
  resultAteTradeOrder.hasTradeEndTime = NO;
  resultAteTradeOrder.tradeEndTime = @"";
  return self;
}
- (BOOL) hasPayStatus {
  return resultAteTradeOrder.hasPayStatus;
}
- (NSString*) payStatus {
  return resultAteTradeOrder.payStatus;
}
- (ContentAteTradeOrderBuilder*) setPayStatus:(NSString*) value {
  resultAteTradeOrder.hasPayStatus = YES;
  resultAteTradeOrder.payStatus = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearPayStatus {
  resultAteTradeOrder.hasPayStatus = NO;
  resultAteTradeOrder.payStatus = @"";
  return self;
}
- (BOOL) hasEquityAmount {
  return resultAteTradeOrder.hasEquityAmount;
}
- (NSString*) equityAmount {
  return resultAteTradeOrder.equityAmount;
}
- (ContentAteTradeOrderBuilder*) setEquityAmount:(NSString*) value {
  resultAteTradeOrder.hasEquityAmount = YES;
  resultAteTradeOrder.equityAmount = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearEquityAmount {
  resultAteTradeOrder.hasEquityAmount = NO;
  resultAteTradeOrder.equityAmount = @"";
  return self;
}
- (BOOL) hasProductTag {
  return resultAteTradeOrder.hasProductTag;
}
- (NSString*) productTag {
  return resultAteTradeOrder.productTag;
}
- (ContentAteTradeOrderBuilder*) setProductTag:(NSString*) value {
  resultAteTradeOrder.hasProductTag = YES;
  resultAteTradeOrder.productTag = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearProductTag {
  resultAteTradeOrder.hasProductTag = NO;
  resultAteTradeOrder.productTag = @"";
  return self;
}
- (BOOL) hasProductDesc {
  return resultAteTradeOrder.hasProductDesc;
}
- (NSString*) productDesc {
  return resultAteTradeOrder.productDesc;
}
- (ContentAteTradeOrderBuilder*) setProductDesc:(NSString*) value {
  resultAteTradeOrder.hasProductDesc = YES;
  resultAteTradeOrder.productDesc = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearProductDesc {
  resultAteTradeOrder.hasProductDesc = NO;
  resultAteTradeOrder.productDesc = @"";
  return self;
}
- (BOOL) hasMerchantName {
  return resultAteTradeOrder.hasMerchantName;
}
- (NSString*) merchantName {
  return resultAteTradeOrder.merchantName;
}
- (ContentAteTradeOrderBuilder*) setMerchantName:(NSString*) value {
  resultAteTradeOrder.hasMerchantName = YES;
  resultAteTradeOrder.merchantName = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearMerchantName {
  resultAteTradeOrder.hasMerchantName = NO;
  resultAteTradeOrder.merchantName = @"";
  return self;
}
- (BOOL) hasChannelType {
  return resultAteTradeOrder.hasChannelType;
}
- (NSString*) channelType {
  return resultAteTradeOrder.channelType;
}
- (ContentAteTradeOrderBuilder*) setChannelType:(NSString*) value {
  resultAteTradeOrder.hasChannelType = YES;
  resultAteTradeOrder.channelType = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearChannelType {
  resultAteTradeOrder.hasChannelType = NO;
  resultAteTradeOrder.channelType = @"";
  return self;
}
- (BOOL) hasPayMode {
  return resultAteTradeOrder.hasPayMode;
}
- (NSString*) payMode {
  return resultAteTradeOrder.payMode;
}
- (ContentAteTradeOrderBuilder*) setPayMode:(NSString*) value {
  resultAteTradeOrder.hasPayMode = YES;
  resultAteTradeOrder.payMode = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearPayMode {
  resultAteTradeOrder.hasPayMode = NO;
  resultAteTradeOrder.payMode = @"";
  return self;
}
- (BOOL) hasFunctionCode {
  return resultAteTradeOrder.hasFunctionCode;
}
- (NSString*) functionCode {
  return resultAteTradeOrder.functionCode;
}
- (ContentAteTradeOrderBuilder*) setFunctionCode:(NSString*) value {
  resultAteTradeOrder.hasFunctionCode = YES;
  resultAteTradeOrder.functionCode = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearFunctionCode {
  resultAteTradeOrder.hasFunctionCode = NO;
  resultAteTradeOrder.functionCode = @"";
  return self;
}
- (BOOL) hasCurrencyCode {
  return resultAteTradeOrder.hasCurrencyCode;
}
- (NSString*) currencyCode {
  return resultAteTradeOrder.currencyCode;
}
- (ContentAteTradeOrderBuilder*) setCurrencyCode:(NSString*) value {
  resultAteTradeOrder.hasCurrencyCode = YES;
  resultAteTradeOrder.currencyCode = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearCurrencyCode {
  resultAteTradeOrder.hasCurrencyCode = NO;
  resultAteTradeOrder.currencyCode = @"";
  return self;
}
- (BOOL) hasRefundAmount {
  return resultAteTradeOrder.hasRefundAmount;
}
- (NSString*) refundAmount {
  return resultAteTradeOrder.refundAmount;
}
- (ContentAteTradeOrderBuilder*) setRefundAmount:(NSString*) value {
  resultAteTradeOrder.hasRefundAmount = YES;
  resultAteTradeOrder.refundAmount = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearRefundAmount {
  resultAteTradeOrder.hasRefundAmount = NO;
  resultAteTradeOrder.refundAmount = @"";
  return self;
}
- (BOOL) hasRefundStatus {
  return resultAteTradeOrder.hasRefundStatus;
}
- (NSString*) refundStatus {
  return resultAteTradeOrder.refundStatus;
}
- (ContentAteTradeOrderBuilder*) setRefundStatus:(NSString*) value {
  resultAteTradeOrder.hasRefundStatus = YES;
  resultAteTradeOrder.refundStatus = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearRefundStatus {
  resultAteTradeOrder.hasRefundStatus = NO;
  resultAteTradeOrder.refundStatus = @"";
  return self;
}
- (BOOL) hasShowAmount {
  return resultAteTradeOrder.hasShowAmount;
}
- (NSString*) showAmount {
  return resultAteTradeOrder.showAmount;
}
- (ContentAteTradeOrderBuilder*) setShowAmount:(NSString*) value {
  resultAteTradeOrder.hasShowAmount = YES;
  resultAteTradeOrder.showAmount = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearShowAmount {
  resultAteTradeOrder.hasShowAmount = NO;
  resultAteTradeOrder.showAmount = @"";
  return self;
}
- (BOOL) hasTradeStatus {
  return resultAteTradeOrder.hasTradeStatus;
}
- (NSString*) tradeStatus {
  return resultAteTradeOrder.tradeStatus;
}
- (ContentAteTradeOrderBuilder*) setTradeStatus:(NSString*) value {
  resultAteTradeOrder.hasTradeStatus = YES;
  resultAteTradeOrder.tradeStatus = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearTradeStatus {
  resultAteTradeOrder.hasTradeStatus = NO;
  resultAteTradeOrder.tradeStatus = @"";
  return self;
}
- (BOOL) hasErrorCode {
  return resultAteTradeOrder.hasErrorCode;
}
- (NSString*) errorCode {
  return resultAteTradeOrder.errorCode;
}
- (ContentAteTradeOrderBuilder*) setErrorCode:(NSString*) value {
  resultAteTradeOrder.hasErrorCode = YES;
  resultAteTradeOrder.errorCode = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearErrorCode {
  resultAteTradeOrder.hasErrorCode = NO;
  resultAteTradeOrder.errorCode = @"";
  return self;
}
- (BOOL) hasErrorInfo {
  return resultAteTradeOrder.hasErrorInfo;
}
- (NSString*) errorInfo {
  return resultAteTradeOrder.errorInfo;
}
- (ContentAteTradeOrderBuilder*) setErrorInfo:(NSString*) value {
  resultAteTradeOrder.hasErrorInfo = YES;
  resultAteTradeOrder.errorInfo = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearErrorInfo {
  resultAteTradeOrder.hasErrorInfo = NO;
  resultAteTradeOrder.errorInfo = @"";
  return self;
}
- (BOOL) hasBankAcctId {
  return resultAteTradeOrder.hasBankAcctId;
}
- (NSString*) bankAcctId {
  return resultAteTradeOrder.bankAcctId;
}
- (ContentAteTradeOrderBuilder*) setBankAcctId:(NSString*) value {
  resultAteTradeOrder.hasBankAcctId = YES;
  resultAteTradeOrder.bankAcctId = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearBankAcctId {
  resultAteTradeOrder.hasBankAcctId = NO;
  resultAteTradeOrder.bankAcctId = @"";
  return self;
}
- (BOOL) hasBankAcctType {
  return resultAteTradeOrder.hasBankAcctType;
}
- (NSString*) bankAcctType {
  return resultAteTradeOrder.bankAcctType;
}
- (ContentAteTradeOrderBuilder*) setBankAcctType:(NSString*) value {
  resultAteTradeOrder.hasBankAcctType = YES;
  resultAteTradeOrder.bankAcctType = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearBankAcctType {
  resultAteTradeOrder.hasBankAcctType = NO;
  resultAteTradeOrder.bankAcctType = @"";
  return self;
}
- (BOOL) hasBankAcctName {
  return resultAteTradeOrder.hasBankAcctName;
}
- (NSString*) bankAcctName {
  return resultAteTradeOrder.bankAcctName;
}
- (ContentAteTradeOrderBuilder*) setBankAcctName:(NSString*) value {
  resultAteTradeOrder.hasBankAcctName = YES;
  resultAteTradeOrder.bankAcctName = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearBankAcctName {
  resultAteTradeOrder.hasBankAcctName = NO;
  resultAteTradeOrder.bankAcctName = @"";
  return self;
}
- (BOOL) hasPayAmount {
  return resultAteTradeOrder.hasPayAmount;
}
- (NSString*) payAmount {
  return resultAteTradeOrder.payAmount;
}
- (ContentAteTradeOrderBuilder*) setPayAmount:(NSString*) value {
  resultAteTradeOrder.hasPayAmount = YES;
  resultAteTradeOrder.payAmount = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearPayAmount {
  resultAteTradeOrder.hasPayAmount = NO;
  resultAteTradeOrder.payAmount = @"";
  return self;
}
- (BOOL) hasPayModeInfo {
  return resultAteTradeOrder.hasPayModeInfo;
}
- (NSString*) payModeInfo {
  return resultAteTradeOrder.payModeInfo;
}
- (ContentAteTradeOrderBuilder*) setPayModeInfo:(NSString*) value {
  resultAteTradeOrder.hasPayModeInfo = YES;
  resultAteTradeOrder.payModeInfo = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearPayModeInfo {
  resultAteTradeOrder.hasPayModeInfo = NO;
  resultAteTradeOrder.payModeInfo = @"";
  return self;
}
- (BOOL) hasMemo {
  return resultAteTradeOrder.hasMemo;
}
- (NSString*) memo {
  return resultAteTradeOrder.memo;
}
- (ContentAteTradeOrderBuilder*) setMemo:(NSString*) value {
  resultAteTradeOrder.hasMemo = YES;
  resultAteTradeOrder.memo = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearMemo {
  resultAteTradeOrder.hasMemo = NO;
  resultAteTradeOrder.memo = @"";
  return self;
}
- (NSMutableArray *)equityInfo {
  return resultAteTradeOrder.equityInfoArray;
}
- (ContentEquityInfo*)equityInfoAtIndex:(NSUInteger)index {
  return [resultAteTradeOrder equityInfoAtIndex:index];
}
- (ContentAteTradeOrderBuilder *)addEquityInfo:(ContentEquityInfo*)value {
  if (resultAteTradeOrder.equityInfoArray == nil) {
    resultAteTradeOrder.equityInfoArray = [[NSMutableArray alloc]init];
  }
  [resultAteTradeOrder.equityInfoArray addObject:value];
  return self;
}
- (ContentAteTradeOrderBuilder *)setEquityInfoArray:(NSArray *)array {
  resultAteTradeOrder.equityInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentAteTradeOrderBuilder *)clearEquityInfo {
  resultAteTradeOrder.equityInfoArray = nil;
  return self;
}
- (BOOL) hasBillId {
  return resultAteTradeOrder.hasBillId;
}
- (NSString*) billId {
  return resultAteTradeOrder.billId;
}
- (ContentAteTradeOrderBuilder*) setBillId:(NSString*) value {
  resultAteTradeOrder.hasBillId = YES;
  resultAteTradeOrder.billId = value;
  return self;
}
- (ContentAteTradeOrderBuilder*) clearBillId {
  resultAteTradeOrder.hasBillId = NO;
  resultAteTradeOrder.billId = @"";
  return self;
}
@end

@interface ContentMsgTypeInfo ()
@property (strong) NSString* typeId;
@property (strong) NSString* typeName;
@property (strong) NSString* lastRecordTime;
@property (strong) NSString* lastRecordTitle;
@property (strong) NSString* unreadCount;
@property (strong) NSString* picUrl;
@property (strong) NSString* isDisBeforeLogin;
@property (strong) NSString* isDisMsgCenter;
@end

@implementation ContentMsgTypeInfo

- (BOOL) hasTypeId {
  return !!hasTypeId_;
}
- (void) setHasTypeId:(BOOL) _value_ {
  hasTypeId_ = !!_value_;
}
@synthesize typeId;
- (BOOL) hasTypeName {
  return !!hasTypeName_;
}
- (void) setHasTypeName:(BOOL) _value_ {
  hasTypeName_ = !!_value_;
}
@synthesize typeName;
- (BOOL) hasLastRecordTime {
  return !!hasLastRecordTime_;
}
- (void) setHasLastRecordTime:(BOOL) _value_ {
  hasLastRecordTime_ = !!_value_;
}
@synthesize lastRecordTime;
- (BOOL) hasLastRecordTitle {
  return !!hasLastRecordTitle_;
}
- (void) setHasLastRecordTitle:(BOOL) _value_ {
  hasLastRecordTitle_ = !!_value_;
}
@synthesize lastRecordTitle;
- (BOOL) hasUnreadCount {
  return !!hasUnreadCount_;
}
- (void) setHasUnreadCount:(BOOL) _value_ {
  hasUnreadCount_ = !!_value_;
}
@synthesize unreadCount;
- (BOOL) hasPicUrl {
  return !!hasPicUrl_;
}
- (void) setHasPicUrl:(BOOL) _value_ {
  hasPicUrl_ = !!_value_;
}
@synthesize picUrl;
- (BOOL) hasIsDisBeforeLogin {
  return !!hasIsDisBeforeLogin_;
}
- (void) setHasIsDisBeforeLogin:(BOOL) _value_ {
  hasIsDisBeforeLogin_ = !!_value_;
}
@synthesize isDisBeforeLogin;
- (BOOL) hasIsDisMsgCenter {
  return !!hasIsDisMsgCenter_;
}
- (void) setHasIsDisMsgCenter:(BOOL) _value_ {
  hasIsDisMsgCenter_ = !!_value_;
}
@synthesize isDisMsgCenter;
- (instancetype) init {
  if ((self = [super init])) {
    self.typeId = @"";
    self.typeName = @"";
    self.lastRecordTime = @"";
    self.lastRecordTitle = @"";
    self.unreadCount = @"";
    self.picUrl = @"";
    self.isDisBeforeLogin = @"";
    self.isDisMsgCenter = @"";
  }
  return self;
}
static ContentMsgTypeInfo* defaultContentMsgTypeInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentMsgTypeInfo class]) {
    defaultContentMsgTypeInfoInstance = [[ContentMsgTypeInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentMsgTypeInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentMsgTypeInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTypeId) {
    [output writeString:1 value:self.typeId];
  }
  if (self.hasTypeName) {
    [output writeString:2 value:self.typeName];
  }
  if (self.hasLastRecordTime) {
    [output writeString:3 value:self.lastRecordTime];
  }
  if (self.hasLastRecordTitle) {
    [output writeString:4 value:self.lastRecordTitle];
  }
  if (self.hasUnreadCount) {
    [output writeString:5 value:self.unreadCount];
  }
  if (self.hasPicUrl) {
    [output writeString:6 value:self.picUrl];
  }
  if (self.hasIsDisBeforeLogin) {
    [output writeString:7 value:self.isDisBeforeLogin];
  }
  if (self.hasIsDisMsgCenter) {
    [output writeString:8 value:self.isDisMsgCenter];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTypeId) {
    size_ += computeStringSize(1, self.typeId);
  }
  if (self.hasTypeName) {
    size_ += computeStringSize(2, self.typeName);
  }
  if (self.hasLastRecordTime) {
    size_ += computeStringSize(3, self.lastRecordTime);
  }
  if (self.hasLastRecordTitle) {
    size_ += computeStringSize(4, self.lastRecordTitle);
  }
  if (self.hasUnreadCount) {
    size_ += computeStringSize(5, self.unreadCount);
  }
  if (self.hasPicUrl) {
    size_ += computeStringSize(6, self.picUrl);
  }
  if (self.hasIsDisBeforeLogin) {
    size_ += computeStringSize(7, self.isDisBeforeLogin);
  }
  if (self.hasIsDisMsgCenter) {
    size_ += computeStringSize(8, self.isDisMsgCenter);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentMsgTypeInfo*) parseFromData:(NSData*) data {
  return (ContentMsgTypeInfo*)[[[ContentMsgTypeInfo builder] mergeFromData:data] build];
}
+ (ContentMsgTypeInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMsgTypeInfo*)[[[ContentMsgTypeInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentMsgTypeInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentMsgTypeInfo*)[[[ContentMsgTypeInfo builder] mergeFromInputStream:input] build];
}
+ (ContentMsgTypeInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMsgTypeInfo*)[[[ContentMsgTypeInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMsgTypeInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentMsgTypeInfo*)[[[ContentMsgTypeInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentMsgTypeInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMsgTypeInfo*)[[[ContentMsgTypeInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMsgTypeInfoBuilder*) builder {
  return [[ContentMsgTypeInfoBuilder alloc] init];
}
+ (ContentMsgTypeInfoBuilder*) builderWithPrototype:(ContentMsgTypeInfo*) prototype {
  return [[ContentMsgTypeInfo builder] mergeFrom:prototype];
}
- (ContentMsgTypeInfoBuilder*) builder {
  return [ContentMsgTypeInfo builder];
}
- (ContentMsgTypeInfoBuilder*) toBuilder {
  return [ContentMsgTypeInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTypeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeId", self.typeId];
  }
  if (self.hasTypeName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeName", self.typeName];
  }
  if (self.hasLastRecordTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastRecordTime", self.lastRecordTime];
  }
  if (self.hasLastRecordTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastRecordTitle", self.lastRecordTitle];
  }
  if (self.hasUnreadCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unreadCount", self.unreadCount];
  }
  if (self.hasPicUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"picUrl", self.picUrl];
  }
  if (self.hasIsDisBeforeLogin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDisBeforeLogin", self.isDisBeforeLogin];
  }
  if (self.hasIsDisMsgCenter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDisMsgCenter", self.isDisMsgCenter];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTypeId) {
    [dictionary setObject: self.typeId forKey: @"typeId"];
  }
  if (self.hasTypeName) {
    [dictionary setObject: self.typeName forKey: @"typeName"];
  }
  if (self.hasLastRecordTime) {
    [dictionary setObject: self.lastRecordTime forKey: @"lastRecordTime"];
  }
  if (self.hasLastRecordTitle) {
    [dictionary setObject: self.lastRecordTitle forKey: @"lastRecordTitle"];
  }
  if (self.hasUnreadCount) {
    [dictionary setObject: self.unreadCount forKey: @"unreadCount"];
  }
  if (self.hasPicUrl) {
    [dictionary setObject: self.picUrl forKey: @"picUrl"];
  }
  if (self.hasIsDisBeforeLogin) {
    [dictionary setObject: self.isDisBeforeLogin forKey: @"isDisBeforeLogin"];
  }
  if (self.hasIsDisMsgCenter) {
    [dictionary setObject: self.isDisMsgCenter forKey: @"isDisMsgCenter"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentMsgTypeInfo class]]) {
    return NO;
  }
  ContentMsgTypeInfo *otherMessage = other;
  return
      self.hasTypeId == otherMessage.hasTypeId &&
      (!self.hasTypeId || [self.typeId isEqual:otherMessage.typeId]) &&
      self.hasTypeName == otherMessage.hasTypeName &&
      (!self.hasTypeName || [self.typeName isEqual:otherMessage.typeName]) &&
      self.hasLastRecordTime == otherMessage.hasLastRecordTime &&
      (!self.hasLastRecordTime || [self.lastRecordTime isEqual:otherMessage.lastRecordTime]) &&
      self.hasLastRecordTitle == otherMessage.hasLastRecordTitle &&
      (!self.hasLastRecordTitle || [self.lastRecordTitle isEqual:otherMessage.lastRecordTitle]) &&
      self.hasUnreadCount == otherMessage.hasUnreadCount &&
      (!self.hasUnreadCount || [self.unreadCount isEqual:otherMessage.unreadCount]) &&
      self.hasPicUrl == otherMessage.hasPicUrl &&
      (!self.hasPicUrl || [self.picUrl isEqual:otherMessage.picUrl]) &&
      self.hasIsDisBeforeLogin == otherMessage.hasIsDisBeforeLogin &&
      (!self.hasIsDisBeforeLogin || [self.isDisBeforeLogin isEqual:otherMessage.isDisBeforeLogin]) &&
      self.hasIsDisMsgCenter == otherMessage.hasIsDisMsgCenter &&
      (!self.hasIsDisMsgCenter || [self.isDisMsgCenter isEqual:otherMessage.isDisMsgCenter]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTypeId) {
    hashCode = hashCode * 31 + [self.typeId hash];
  }
  if (self.hasTypeName) {
    hashCode = hashCode * 31 + [self.typeName hash];
  }
  if (self.hasLastRecordTime) {
    hashCode = hashCode * 31 + [self.lastRecordTime hash];
  }
  if (self.hasLastRecordTitle) {
    hashCode = hashCode * 31 + [self.lastRecordTitle hash];
  }
  if (self.hasUnreadCount) {
    hashCode = hashCode * 31 + [self.unreadCount hash];
  }
  if (self.hasPicUrl) {
    hashCode = hashCode * 31 + [self.picUrl hash];
  }
  if (self.hasIsDisBeforeLogin) {
    hashCode = hashCode * 31 + [self.isDisBeforeLogin hash];
  }
  if (self.hasIsDisMsgCenter) {
    hashCode = hashCode * 31 + [self.isDisMsgCenter hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentMsgTypeInfoBuilder()
@property (strong) ContentMsgTypeInfo* resultMsgTypeInfo;
@end

@implementation ContentMsgTypeInfoBuilder
@synthesize resultMsgTypeInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMsgTypeInfo = [[ContentMsgTypeInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMsgTypeInfo;
}
- (ContentMsgTypeInfoBuilder*) clear {
  self.resultMsgTypeInfo = [[ContentMsgTypeInfo alloc] init];
  return self;
}
- (ContentMsgTypeInfoBuilder*) clone {
  return [ContentMsgTypeInfo builderWithPrototype:resultMsgTypeInfo];
}
- (ContentMsgTypeInfo*) defaultInstance {
  return [ContentMsgTypeInfo defaultInstance];
}
- (ContentMsgTypeInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentMsgTypeInfo*) buildPartial {
  ContentMsgTypeInfo* returnMe = resultMsgTypeInfo;
  self.resultMsgTypeInfo = nil;
  return returnMe;
}
- (ContentMsgTypeInfoBuilder*) mergeFrom:(ContentMsgTypeInfo*) other {
  if (other == [ContentMsgTypeInfo defaultInstance]) {
    return self;
  }
  if (other.hasTypeId) {
    [self setTypeId:other.typeId];
  }
  if (other.hasTypeName) {
    [self setTypeName:other.typeName];
  }
  if (other.hasLastRecordTime) {
    [self setLastRecordTime:other.lastRecordTime];
  }
  if (other.hasLastRecordTitle) {
    [self setLastRecordTitle:other.lastRecordTitle];
  }
  if (other.hasUnreadCount) {
    [self setUnreadCount:other.unreadCount];
  }
  if (other.hasPicUrl) {
    [self setPicUrl:other.picUrl];
  }
  if (other.hasIsDisBeforeLogin) {
    [self setIsDisBeforeLogin:other.isDisBeforeLogin];
  }
  if (other.hasIsDisMsgCenter) {
    [self setIsDisMsgCenter:other.isDisMsgCenter];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentMsgTypeInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentMsgTypeInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTypeId:[input readString]];
        break;
      }
      case 18: {
        [self setTypeName:[input readString]];
        break;
      }
      case 26: {
        [self setLastRecordTime:[input readString]];
        break;
      }
      case 34: {
        [self setLastRecordTitle:[input readString]];
        break;
      }
      case 42: {
        [self setUnreadCount:[input readString]];
        break;
      }
      case 50: {
        [self setPicUrl:[input readString]];
        break;
      }
      case 58: {
        [self setIsDisBeforeLogin:[input readString]];
        break;
      }
      case 66: {
        [self setIsDisMsgCenter:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTypeId {
  return resultMsgTypeInfo.hasTypeId;
}
- (NSString*) typeId {
  return resultMsgTypeInfo.typeId;
}
- (ContentMsgTypeInfoBuilder*) setTypeId:(NSString*) value {
  resultMsgTypeInfo.hasTypeId = YES;
  resultMsgTypeInfo.typeId = value;
  return self;
}
- (ContentMsgTypeInfoBuilder*) clearTypeId {
  resultMsgTypeInfo.hasTypeId = NO;
  resultMsgTypeInfo.typeId = @"";
  return self;
}
- (BOOL) hasTypeName {
  return resultMsgTypeInfo.hasTypeName;
}
- (NSString*) typeName {
  return resultMsgTypeInfo.typeName;
}
- (ContentMsgTypeInfoBuilder*) setTypeName:(NSString*) value {
  resultMsgTypeInfo.hasTypeName = YES;
  resultMsgTypeInfo.typeName = value;
  return self;
}
- (ContentMsgTypeInfoBuilder*) clearTypeName {
  resultMsgTypeInfo.hasTypeName = NO;
  resultMsgTypeInfo.typeName = @"";
  return self;
}
- (BOOL) hasLastRecordTime {
  return resultMsgTypeInfo.hasLastRecordTime;
}
- (NSString*) lastRecordTime {
  return resultMsgTypeInfo.lastRecordTime;
}
- (ContentMsgTypeInfoBuilder*) setLastRecordTime:(NSString*) value {
  resultMsgTypeInfo.hasLastRecordTime = YES;
  resultMsgTypeInfo.lastRecordTime = value;
  return self;
}
- (ContentMsgTypeInfoBuilder*) clearLastRecordTime {
  resultMsgTypeInfo.hasLastRecordTime = NO;
  resultMsgTypeInfo.lastRecordTime = @"";
  return self;
}
- (BOOL) hasLastRecordTitle {
  return resultMsgTypeInfo.hasLastRecordTitle;
}
- (NSString*) lastRecordTitle {
  return resultMsgTypeInfo.lastRecordTitle;
}
- (ContentMsgTypeInfoBuilder*) setLastRecordTitle:(NSString*) value {
  resultMsgTypeInfo.hasLastRecordTitle = YES;
  resultMsgTypeInfo.lastRecordTitle = value;
  return self;
}
- (ContentMsgTypeInfoBuilder*) clearLastRecordTitle {
  resultMsgTypeInfo.hasLastRecordTitle = NO;
  resultMsgTypeInfo.lastRecordTitle = @"";
  return self;
}
- (BOOL) hasUnreadCount {
  return resultMsgTypeInfo.hasUnreadCount;
}
- (NSString*) unreadCount {
  return resultMsgTypeInfo.unreadCount;
}
- (ContentMsgTypeInfoBuilder*) setUnreadCount:(NSString*) value {
  resultMsgTypeInfo.hasUnreadCount = YES;
  resultMsgTypeInfo.unreadCount = value;
  return self;
}
- (ContentMsgTypeInfoBuilder*) clearUnreadCount {
  resultMsgTypeInfo.hasUnreadCount = NO;
  resultMsgTypeInfo.unreadCount = @"";
  return self;
}
- (BOOL) hasPicUrl {
  return resultMsgTypeInfo.hasPicUrl;
}
- (NSString*) picUrl {
  return resultMsgTypeInfo.picUrl;
}
- (ContentMsgTypeInfoBuilder*) setPicUrl:(NSString*) value {
  resultMsgTypeInfo.hasPicUrl = YES;
  resultMsgTypeInfo.picUrl = value;
  return self;
}
- (ContentMsgTypeInfoBuilder*) clearPicUrl {
  resultMsgTypeInfo.hasPicUrl = NO;
  resultMsgTypeInfo.picUrl = @"";
  return self;
}
- (BOOL) hasIsDisBeforeLogin {
  return resultMsgTypeInfo.hasIsDisBeforeLogin;
}
- (NSString*) isDisBeforeLogin {
  return resultMsgTypeInfo.isDisBeforeLogin;
}
- (ContentMsgTypeInfoBuilder*) setIsDisBeforeLogin:(NSString*) value {
  resultMsgTypeInfo.hasIsDisBeforeLogin = YES;
  resultMsgTypeInfo.isDisBeforeLogin = value;
  return self;
}
- (ContentMsgTypeInfoBuilder*) clearIsDisBeforeLogin {
  resultMsgTypeInfo.hasIsDisBeforeLogin = NO;
  resultMsgTypeInfo.isDisBeforeLogin = @"";
  return self;
}
- (BOOL) hasIsDisMsgCenter {
  return resultMsgTypeInfo.hasIsDisMsgCenter;
}
- (NSString*) isDisMsgCenter {
  return resultMsgTypeInfo.isDisMsgCenter;
}
- (ContentMsgTypeInfoBuilder*) setIsDisMsgCenter:(NSString*) value {
  resultMsgTypeInfo.hasIsDisMsgCenter = YES;
  resultMsgTypeInfo.isDisMsgCenter = value;
  return self;
}
- (ContentMsgTypeInfoBuilder*) clearIsDisMsgCenter {
  resultMsgTypeInfo.hasIsDisMsgCenter = NO;
  resultMsgTypeInfo.isDisMsgCenter = @"";
  return self;
}
@end

@interface ContentMsgInfo ()
@property (strong) NSString* id;
@property (strong) NSString* title;
@property (strong) NSString* outline;
@property (strong) NSString* picUrl;
@property (strong) NSString* jumpMode;
@property (strong) NSString* jumpPath;
@property (strong) NSString* validTime;
@property (strong) NSString* invalidTime;
@property (strong) NSString* typeId;
@property (strong) NSString* pageType;
@property (strong) NSString* extParamter;
@property (strong) NSString* channelCode;
@end

@implementation ContentMsgInfo

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasOutline {
  return !!hasOutline_;
}
- (void) setHasOutline:(BOOL) _value_ {
  hasOutline_ = !!_value_;
}
@synthesize outline;
- (BOOL) hasPicUrl {
  return !!hasPicUrl_;
}
- (void) setHasPicUrl:(BOOL) _value_ {
  hasPicUrl_ = !!_value_;
}
@synthesize picUrl;
- (BOOL) hasJumpMode {
  return !!hasJumpMode_;
}
- (void) setHasJumpMode:(BOOL) _value_ {
  hasJumpMode_ = !!_value_;
}
@synthesize jumpMode;
- (BOOL) hasJumpPath {
  return !!hasJumpPath_;
}
- (void) setHasJumpPath:(BOOL) _value_ {
  hasJumpPath_ = !!_value_;
}
@synthesize jumpPath;
- (BOOL) hasValidTime {
  return !!hasValidTime_;
}
- (void) setHasValidTime:(BOOL) _value_ {
  hasValidTime_ = !!_value_;
}
@synthesize validTime;
- (BOOL) hasInvalidTime {
  return !!hasInvalidTime_;
}
- (void) setHasInvalidTime:(BOOL) _value_ {
  hasInvalidTime_ = !!_value_;
}
@synthesize invalidTime;
- (BOOL) hasTypeId {
  return !!hasTypeId_;
}
- (void) setHasTypeId:(BOOL) _value_ {
  hasTypeId_ = !!_value_;
}
@synthesize typeId;
- (BOOL) hasPageType {
  return !!hasPageType_;
}
- (void) setHasPageType:(BOOL) _value_ {
  hasPageType_ = !!_value_;
}
@synthesize pageType;
- (BOOL) hasExtParamter {
  return !!hasExtParamter_;
}
- (void) setHasExtParamter:(BOOL) _value_ {
  hasExtParamter_ = !!_value_;
}
@synthesize extParamter;
- (BOOL) hasChannelCode {
  return !!hasChannelCode_;
}
- (void) setHasChannelCode:(BOOL) _value_ {
  hasChannelCode_ = !!_value_;
}
@synthesize channelCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = @"";
    self.title = @"";
    self.outline = @"";
    self.picUrl = @"";
    self.jumpMode = @"";
    self.jumpPath = @"";
    self.validTime = @"";
    self.invalidTime = @"";
    self.typeId = @"";
    self.pageType = @"";
    self.extParamter = @"";
    self.channelCode = @"";
  }
  return self;
}
static ContentMsgInfo* defaultContentMsgInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentMsgInfo class]) {
    defaultContentMsgInfoInstance = [[ContentMsgInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentMsgInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentMsgInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasOutline) {
    [output writeString:3 value:self.outline];
  }
  if (self.hasPicUrl) {
    [output writeString:4 value:self.picUrl];
  }
  if (self.hasJumpMode) {
    [output writeString:5 value:self.jumpMode];
  }
  if (self.hasJumpPath) {
    [output writeString:6 value:self.jumpPath];
  }
  if (self.hasValidTime) {
    [output writeString:7 value:self.validTime];
  }
  if (self.hasInvalidTime) {
    [output writeString:8 value:self.invalidTime];
  }
  if (self.hasTypeId) {
    [output writeString:9 value:self.typeId];
  }
  if (self.hasPageType) {
    [output writeString:10 value:self.pageType];
  }
  if (self.hasExtParamter) {
    [output writeString:11 value:self.extParamter];
  }
  if (self.hasChannelCode) {
    [output writeString:12 value:self.channelCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(2, self.title);
  }
  if (self.hasOutline) {
    size_ += computeStringSize(3, self.outline);
  }
  if (self.hasPicUrl) {
    size_ += computeStringSize(4, self.picUrl);
  }
  if (self.hasJumpMode) {
    size_ += computeStringSize(5, self.jumpMode);
  }
  if (self.hasJumpPath) {
    size_ += computeStringSize(6, self.jumpPath);
  }
  if (self.hasValidTime) {
    size_ += computeStringSize(7, self.validTime);
  }
  if (self.hasInvalidTime) {
    size_ += computeStringSize(8, self.invalidTime);
  }
  if (self.hasTypeId) {
    size_ += computeStringSize(9, self.typeId);
  }
  if (self.hasPageType) {
    size_ += computeStringSize(10, self.pageType);
  }
  if (self.hasExtParamter) {
    size_ += computeStringSize(11, self.extParamter);
  }
  if (self.hasChannelCode) {
    size_ += computeStringSize(12, self.channelCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentMsgInfo*) parseFromData:(NSData*) data {
  return (ContentMsgInfo*)[[[ContentMsgInfo builder] mergeFromData:data] build];
}
+ (ContentMsgInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMsgInfo*)[[[ContentMsgInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentMsgInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentMsgInfo*)[[[ContentMsgInfo builder] mergeFromInputStream:input] build];
}
+ (ContentMsgInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMsgInfo*)[[[ContentMsgInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMsgInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentMsgInfo*)[[[ContentMsgInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentMsgInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentMsgInfo*)[[[ContentMsgInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentMsgInfoBuilder*) builder {
  return [[ContentMsgInfoBuilder alloc] init];
}
+ (ContentMsgInfoBuilder*) builderWithPrototype:(ContentMsgInfo*) prototype {
  return [[ContentMsgInfo builder] mergeFrom:prototype];
}
- (ContentMsgInfoBuilder*) builder {
  return [ContentMsgInfo builder];
}
- (ContentMsgInfoBuilder*) toBuilder {
  return [ContentMsgInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasOutline) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outline", self.outline];
  }
  if (self.hasPicUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"picUrl", self.picUrl];
  }
  if (self.hasJumpMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jumpMode", self.jumpMode];
  }
  if (self.hasJumpPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jumpPath", self.jumpPath];
  }
  if (self.hasValidTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validTime", self.validTime];
  }
  if (self.hasInvalidTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"invalidTime", self.invalidTime];
  }
  if (self.hasTypeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeId", self.typeId];
  }
  if (self.hasPageType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pageType", self.pageType];
  }
  if (self.hasExtParamter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extParamter", self.extParamter];
  }
  if (self.hasChannelCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelCode", self.channelCode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasOutline) {
    [dictionary setObject: self.outline forKey: @"outline"];
  }
  if (self.hasPicUrl) {
    [dictionary setObject: self.picUrl forKey: @"picUrl"];
  }
  if (self.hasJumpMode) {
    [dictionary setObject: self.jumpMode forKey: @"jumpMode"];
  }
  if (self.hasJumpPath) {
    [dictionary setObject: self.jumpPath forKey: @"jumpPath"];
  }
  if (self.hasValidTime) {
    [dictionary setObject: self.validTime forKey: @"validTime"];
  }
  if (self.hasInvalidTime) {
    [dictionary setObject: self.invalidTime forKey: @"invalidTime"];
  }
  if (self.hasTypeId) {
    [dictionary setObject: self.typeId forKey: @"typeId"];
  }
  if (self.hasPageType) {
    [dictionary setObject: self.pageType forKey: @"pageType"];
  }
  if (self.hasExtParamter) {
    [dictionary setObject: self.extParamter forKey: @"extParamter"];
  }
  if (self.hasChannelCode) {
    [dictionary setObject: self.channelCode forKey: @"channelCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentMsgInfo class]]) {
    return NO;
  }
  ContentMsgInfo *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasOutline == otherMessage.hasOutline &&
      (!self.hasOutline || [self.outline isEqual:otherMessage.outline]) &&
      self.hasPicUrl == otherMessage.hasPicUrl &&
      (!self.hasPicUrl || [self.picUrl isEqual:otherMessage.picUrl]) &&
      self.hasJumpMode == otherMessage.hasJumpMode &&
      (!self.hasJumpMode || [self.jumpMode isEqual:otherMessage.jumpMode]) &&
      self.hasJumpPath == otherMessage.hasJumpPath &&
      (!self.hasJumpPath || [self.jumpPath isEqual:otherMessage.jumpPath]) &&
      self.hasValidTime == otherMessage.hasValidTime &&
      (!self.hasValidTime || [self.validTime isEqual:otherMessage.validTime]) &&
      self.hasInvalidTime == otherMessage.hasInvalidTime &&
      (!self.hasInvalidTime || [self.invalidTime isEqual:otherMessage.invalidTime]) &&
      self.hasTypeId == otherMessage.hasTypeId &&
      (!self.hasTypeId || [self.typeId isEqual:otherMessage.typeId]) &&
      self.hasPageType == otherMessage.hasPageType &&
      (!self.hasPageType || [self.pageType isEqual:otherMessage.pageType]) &&
      self.hasExtParamter == otherMessage.hasExtParamter &&
      (!self.hasExtParamter || [self.extParamter isEqual:otherMessage.extParamter]) &&
      self.hasChannelCode == otherMessage.hasChannelCode &&
      (!self.hasChannelCode || [self.channelCode isEqual:otherMessage.channelCode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasOutline) {
    hashCode = hashCode * 31 + [self.outline hash];
  }
  if (self.hasPicUrl) {
    hashCode = hashCode * 31 + [self.picUrl hash];
  }
  if (self.hasJumpMode) {
    hashCode = hashCode * 31 + [self.jumpMode hash];
  }
  if (self.hasJumpPath) {
    hashCode = hashCode * 31 + [self.jumpPath hash];
  }
  if (self.hasValidTime) {
    hashCode = hashCode * 31 + [self.validTime hash];
  }
  if (self.hasInvalidTime) {
    hashCode = hashCode * 31 + [self.invalidTime hash];
  }
  if (self.hasTypeId) {
    hashCode = hashCode * 31 + [self.typeId hash];
  }
  if (self.hasPageType) {
    hashCode = hashCode * 31 + [self.pageType hash];
  }
  if (self.hasExtParamter) {
    hashCode = hashCode * 31 + [self.extParamter hash];
  }
  if (self.hasChannelCode) {
    hashCode = hashCode * 31 + [self.channelCode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentMsgInfoBuilder()
@property (strong) ContentMsgInfo* resultMsgInfo;
@end

@implementation ContentMsgInfoBuilder
@synthesize resultMsgInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMsgInfo = [[ContentMsgInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMsgInfo;
}
- (ContentMsgInfoBuilder*) clear {
  self.resultMsgInfo = [[ContentMsgInfo alloc] init];
  return self;
}
- (ContentMsgInfoBuilder*) clone {
  return [ContentMsgInfo builderWithPrototype:resultMsgInfo];
}
- (ContentMsgInfo*) defaultInstance {
  return [ContentMsgInfo defaultInstance];
}
- (ContentMsgInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentMsgInfo*) buildPartial {
  ContentMsgInfo* returnMe = resultMsgInfo;
  self.resultMsgInfo = nil;
  return returnMe;
}
- (ContentMsgInfoBuilder*) mergeFrom:(ContentMsgInfo*) other {
  if (other == [ContentMsgInfo defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasOutline) {
    [self setOutline:other.outline];
  }
  if (other.hasPicUrl) {
    [self setPicUrl:other.picUrl];
  }
  if (other.hasJumpMode) {
    [self setJumpMode:other.jumpMode];
  }
  if (other.hasJumpPath) {
    [self setJumpPath:other.jumpPath];
  }
  if (other.hasValidTime) {
    [self setValidTime:other.validTime];
  }
  if (other.hasInvalidTime) {
    [self setInvalidTime:other.invalidTime];
  }
  if (other.hasTypeId) {
    [self setTypeId:other.typeId];
  }
  if (other.hasPageType) {
    [self setPageType:other.pageType];
  }
  if (other.hasExtParamter) {
    [self setExtParamter:other.extParamter];
  }
  if (other.hasChannelCode) {
    [self setChannelCode:other.channelCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentMsgInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentMsgInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        [self setOutline:[input readString]];
        break;
      }
      case 34: {
        [self setPicUrl:[input readString]];
        break;
      }
      case 42: {
        [self setJumpMode:[input readString]];
        break;
      }
      case 50: {
        [self setJumpPath:[input readString]];
        break;
      }
      case 58: {
        [self setValidTime:[input readString]];
        break;
      }
      case 66: {
        [self setInvalidTime:[input readString]];
        break;
      }
      case 74: {
        [self setTypeId:[input readString]];
        break;
      }
      case 82: {
        [self setPageType:[input readString]];
        break;
      }
      case 90: {
        [self setExtParamter:[input readString]];
        break;
      }
      case 98: {
        [self setChannelCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultMsgInfo.hasId;
}
- (NSString*) id {
  return resultMsgInfo.id;
}
- (ContentMsgInfoBuilder*) setId:(NSString*) value {
  resultMsgInfo.hasId = YES;
  resultMsgInfo.id = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearId {
  resultMsgInfo.hasId = NO;
  resultMsgInfo.id = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultMsgInfo.hasTitle;
}
- (NSString*) title {
  return resultMsgInfo.title;
}
- (ContentMsgInfoBuilder*) setTitle:(NSString*) value {
  resultMsgInfo.hasTitle = YES;
  resultMsgInfo.title = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearTitle {
  resultMsgInfo.hasTitle = NO;
  resultMsgInfo.title = @"";
  return self;
}
- (BOOL) hasOutline {
  return resultMsgInfo.hasOutline;
}
- (NSString*) outline {
  return resultMsgInfo.outline;
}
- (ContentMsgInfoBuilder*) setOutline:(NSString*) value {
  resultMsgInfo.hasOutline = YES;
  resultMsgInfo.outline = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearOutline {
  resultMsgInfo.hasOutline = NO;
  resultMsgInfo.outline = @"";
  return self;
}
- (BOOL) hasPicUrl {
  return resultMsgInfo.hasPicUrl;
}
- (NSString*) picUrl {
  return resultMsgInfo.picUrl;
}
- (ContentMsgInfoBuilder*) setPicUrl:(NSString*) value {
  resultMsgInfo.hasPicUrl = YES;
  resultMsgInfo.picUrl = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearPicUrl {
  resultMsgInfo.hasPicUrl = NO;
  resultMsgInfo.picUrl = @"";
  return self;
}
- (BOOL) hasJumpMode {
  return resultMsgInfo.hasJumpMode;
}
- (NSString*) jumpMode {
  return resultMsgInfo.jumpMode;
}
- (ContentMsgInfoBuilder*) setJumpMode:(NSString*) value {
  resultMsgInfo.hasJumpMode = YES;
  resultMsgInfo.jumpMode = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearJumpMode {
  resultMsgInfo.hasJumpMode = NO;
  resultMsgInfo.jumpMode = @"";
  return self;
}
- (BOOL) hasJumpPath {
  return resultMsgInfo.hasJumpPath;
}
- (NSString*) jumpPath {
  return resultMsgInfo.jumpPath;
}
- (ContentMsgInfoBuilder*) setJumpPath:(NSString*) value {
  resultMsgInfo.hasJumpPath = YES;
  resultMsgInfo.jumpPath = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearJumpPath {
  resultMsgInfo.hasJumpPath = NO;
  resultMsgInfo.jumpPath = @"";
  return self;
}
- (BOOL) hasValidTime {
  return resultMsgInfo.hasValidTime;
}
- (NSString*) validTime {
  return resultMsgInfo.validTime;
}
- (ContentMsgInfoBuilder*) setValidTime:(NSString*) value {
  resultMsgInfo.hasValidTime = YES;
  resultMsgInfo.validTime = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearValidTime {
  resultMsgInfo.hasValidTime = NO;
  resultMsgInfo.validTime = @"";
  return self;
}
- (BOOL) hasInvalidTime {
  return resultMsgInfo.hasInvalidTime;
}
- (NSString*) invalidTime {
  return resultMsgInfo.invalidTime;
}
- (ContentMsgInfoBuilder*) setInvalidTime:(NSString*) value {
  resultMsgInfo.hasInvalidTime = YES;
  resultMsgInfo.invalidTime = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearInvalidTime {
  resultMsgInfo.hasInvalidTime = NO;
  resultMsgInfo.invalidTime = @"";
  return self;
}
- (BOOL) hasTypeId {
  return resultMsgInfo.hasTypeId;
}
- (NSString*) typeId {
  return resultMsgInfo.typeId;
}
- (ContentMsgInfoBuilder*) setTypeId:(NSString*) value {
  resultMsgInfo.hasTypeId = YES;
  resultMsgInfo.typeId = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearTypeId {
  resultMsgInfo.hasTypeId = NO;
  resultMsgInfo.typeId = @"";
  return self;
}
- (BOOL) hasPageType {
  return resultMsgInfo.hasPageType;
}
- (NSString*) pageType {
  return resultMsgInfo.pageType;
}
- (ContentMsgInfoBuilder*) setPageType:(NSString*) value {
  resultMsgInfo.hasPageType = YES;
  resultMsgInfo.pageType = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearPageType {
  resultMsgInfo.hasPageType = NO;
  resultMsgInfo.pageType = @"";
  return self;
}
- (BOOL) hasExtParamter {
  return resultMsgInfo.hasExtParamter;
}
- (NSString*) extParamter {
  return resultMsgInfo.extParamter;
}
- (ContentMsgInfoBuilder*) setExtParamter:(NSString*) value {
  resultMsgInfo.hasExtParamter = YES;
  resultMsgInfo.extParamter = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearExtParamter {
  resultMsgInfo.hasExtParamter = NO;
  resultMsgInfo.extParamter = @"";
  return self;
}
- (BOOL) hasChannelCode {
  return resultMsgInfo.hasChannelCode;
}
- (NSString*) channelCode {
  return resultMsgInfo.channelCode;
}
- (ContentMsgInfoBuilder*) setChannelCode:(NSString*) value {
  resultMsgInfo.hasChannelCode = YES;
  resultMsgInfo.channelCode = value;
  return self;
}
- (ContentMsgInfoBuilder*) clearChannelCode {
  resultMsgInfo.hasChannelCode = NO;
  resultMsgInfo.channelCode = @"";
  return self;
}
@end

@interface ContentResourceInfo ()
@property (strong) NSString* resourceId;
@property (strong) NSString* resourceName;
@property (strong) NSString* resourceType;
@property (strong) NSString* resourceUrl;
@property (strong) NSString* md5;
@end

@implementation ContentResourceInfo

- (BOOL) hasResourceId {
  return !!hasResourceId_;
}
- (void) setHasResourceId:(BOOL) _value_ {
  hasResourceId_ = !!_value_;
}
@synthesize resourceId;
- (BOOL) hasResourceName {
  return !!hasResourceName_;
}
- (void) setHasResourceName:(BOOL) _value_ {
  hasResourceName_ = !!_value_;
}
@synthesize resourceName;
- (BOOL) hasResourceType {
  return !!hasResourceType_;
}
- (void) setHasResourceType:(BOOL) _value_ {
  hasResourceType_ = !!_value_;
}
@synthesize resourceType;
- (BOOL) hasResourceUrl {
  return !!hasResourceUrl_;
}
- (void) setHasResourceUrl:(BOOL) _value_ {
  hasResourceUrl_ = !!_value_;
}
@synthesize resourceUrl;
- (BOOL) hasMd5 {
  return !!hasMd5_;
}
- (void) setHasMd5:(BOOL) _value_ {
  hasMd5_ = !!_value_;
}
@synthesize md5;
- (instancetype) init {
  if ((self = [super init])) {
    self.resourceId = @"";
    self.resourceName = @"";
    self.resourceType = @"";
    self.resourceUrl = @"";
    self.md5 = @"";
  }
  return self;
}
static ContentResourceInfo* defaultContentResourceInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentResourceInfo class]) {
    defaultContentResourceInfoInstance = [[ContentResourceInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentResourceInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentResourceInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResourceId) {
    [output writeString:1 value:self.resourceId];
  }
  if (self.hasResourceName) {
    [output writeString:2 value:self.resourceName];
  }
  if (self.hasResourceType) {
    [output writeString:3 value:self.resourceType];
  }
  if (self.hasResourceUrl) {
    [output writeString:4 value:self.resourceUrl];
  }
  if (self.hasMd5) {
    [output writeString:5 value:self.md5];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResourceId) {
    size_ += computeStringSize(1, self.resourceId);
  }
  if (self.hasResourceName) {
    size_ += computeStringSize(2, self.resourceName);
  }
  if (self.hasResourceType) {
    size_ += computeStringSize(3, self.resourceType);
  }
  if (self.hasResourceUrl) {
    size_ += computeStringSize(4, self.resourceUrl);
  }
  if (self.hasMd5) {
    size_ += computeStringSize(5, self.md5);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentResourceInfo*) parseFromData:(NSData*) data {
  return (ContentResourceInfo*)[[[ContentResourceInfo builder] mergeFromData:data] build];
}
+ (ContentResourceInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentResourceInfo*)[[[ContentResourceInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentResourceInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentResourceInfo*)[[[ContentResourceInfo builder] mergeFromInputStream:input] build];
}
+ (ContentResourceInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentResourceInfo*)[[[ContentResourceInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentResourceInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentResourceInfo*)[[[ContentResourceInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentResourceInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentResourceInfo*)[[[ContentResourceInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentResourceInfoBuilder*) builder {
  return [[ContentResourceInfoBuilder alloc] init];
}
+ (ContentResourceInfoBuilder*) builderWithPrototype:(ContentResourceInfo*) prototype {
  return [[ContentResourceInfo builder] mergeFrom:prototype];
}
- (ContentResourceInfoBuilder*) builder {
  return [ContentResourceInfo builder];
}
- (ContentResourceInfoBuilder*) toBuilder {
  return [ContentResourceInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResourceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resourceId", self.resourceId];
  }
  if (self.hasResourceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resourceName", self.resourceName];
  }
  if (self.hasResourceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resourceType", self.resourceType];
  }
  if (self.hasResourceUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resourceUrl", self.resourceUrl];
  }
  if (self.hasMd5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"md5", self.md5];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResourceId) {
    [dictionary setObject: self.resourceId forKey: @"resourceId"];
  }
  if (self.hasResourceName) {
    [dictionary setObject: self.resourceName forKey: @"resourceName"];
  }
  if (self.hasResourceType) {
    [dictionary setObject: self.resourceType forKey: @"resourceType"];
  }
  if (self.hasResourceUrl) {
    [dictionary setObject: self.resourceUrl forKey: @"resourceUrl"];
  }
  if (self.hasMd5) {
    [dictionary setObject: self.md5 forKey: @"md5"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentResourceInfo class]]) {
    return NO;
  }
  ContentResourceInfo *otherMessage = other;
  return
      self.hasResourceId == otherMessage.hasResourceId &&
      (!self.hasResourceId || [self.resourceId isEqual:otherMessage.resourceId]) &&
      self.hasResourceName == otherMessage.hasResourceName &&
      (!self.hasResourceName || [self.resourceName isEqual:otherMessage.resourceName]) &&
      self.hasResourceType == otherMessage.hasResourceType &&
      (!self.hasResourceType || [self.resourceType isEqual:otherMessage.resourceType]) &&
      self.hasResourceUrl == otherMessage.hasResourceUrl &&
      (!self.hasResourceUrl || [self.resourceUrl isEqual:otherMessage.resourceUrl]) &&
      self.hasMd5 == otherMessage.hasMd5 &&
      (!self.hasMd5 || [self.md5 isEqual:otherMessage.md5]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResourceId) {
    hashCode = hashCode * 31 + [self.resourceId hash];
  }
  if (self.hasResourceName) {
    hashCode = hashCode * 31 + [self.resourceName hash];
  }
  if (self.hasResourceType) {
    hashCode = hashCode * 31 + [self.resourceType hash];
  }
  if (self.hasResourceUrl) {
    hashCode = hashCode * 31 + [self.resourceUrl hash];
  }
  if (self.hasMd5) {
    hashCode = hashCode * 31 + [self.md5 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentResourceInfoBuilder()
@property (strong) ContentResourceInfo* resultResourceInfo;
@end

@implementation ContentResourceInfoBuilder
@synthesize resultResourceInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResourceInfo = [[ContentResourceInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResourceInfo;
}
- (ContentResourceInfoBuilder*) clear {
  self.resultResourceInfo = [[ContentResourceInfo alloc] init];
  return self;
}
- (ContentResourceInfoBuilder*) clone {
  return [ContentResourceInfo builderWithPrototype:resultResourceInfo];
}
- (ContentResourceInfo*) defaultInstance {
  return [ContentResourceInfo defaultInstance];
}
- (ContentResourceInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentResourceInfo*) buildPartial {
  ContentResourceInfo* returnMe = resultResourceInfo;
  self.resultResourceInfo = nil;
  return returnMe;
}
- (ContentResourceInfoBuilder*) mergeFrom:(ContentResourceInfo*) other {
  if (other == [ContentResourceInfo defaultInstance]) {
    return self;
  }
  if (other.hasResourceId) {
    [self setResourceId:other.resourceId];
  }
  if (other.hasResourceName) {
    [self setResourceName:other.resourceName];
  }
  if (other.hasResourceType) {
    [self setResourceType:other.resourceType];
  }
  if (other.hasResourceUrl) {
    [self setResourceUrl:other.resourceUrl];
  }
  if (other.hasMd5) {
    [self setMd5:other.md5];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentResourceInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentResourceInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setResourceId:[input readString]];
        break;
      }
      case 18: {
        [self setResourceName:[input readString]];
        break;
      }
      case 26: {
        [self setResourceType:[input readString]];
        break;
      }
      case 34: {
        [self setResourceUrl:[input readString]];
        break;
      }
      case 42: {
        [self setMd5:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasResourceId {
  return resultResourceInfo.hasResourceId;
}
- (NSString*) resourceId {
  return resultResourceInfo.resourceId;
}
- (ContentResourceInfoBuilder*) setResourceId:(NSString*) value {
  resultResourceInfo.hasResourceId = YES;
  resultResourceInfo.resourceId = value;
  return self;
}
- (ContentResourceInfoBuilder*) clearResourceId {
  resultResourceInfo.hasResourceId = NO;
  resultResourceInfo.resourceId = @"";
  return self;
}
- (BOOL) hasResourceName {
  return resultResourceInfo.hasResourceName;
}
- (NSString*) resourceName {
  return resultResourceInfo.resourceName;
}
- (ContentResourceInfoBuilder*) setResourceName:(NSString*) value {
  resultResourceInfo.hasResourceName = YES;
  resultResourceInfo.resourceName = value;
  return self;
}
- (ContentResourceInfoBuilder*) clearResourceName {
  resultResourceInfo.hasResourceName = NO;
  resultResourceInfo.resourceName = @"";
  return self;
}
- (BOOL) hasResourceType {
  return resultResourceInfo.hasResourceType;
}
- (NSString*) resourceType {
  return resultResourceInfo.resourceType;
}
- (ContentResourceInfoBuilder*) setResourceType:(NSString*) value {
  resultResourceInfo.hasResourceType = YES;
  resultResourceInfo.resourceType = value;
  return self;
}
- (ContentResourceInfoBuilder*) clearResourceType {
  resultResourceInfo.hasResourceType = NO;
  resultResourceInfo.resourceType = @"";
  return self;
}
- (BOOL) hasResourceUrl {
  return resultResourceInfo.hasResourceUrl;
}
- (NSString*) resourceUrl {
  return resultResourceInfo.resourceUrl;
}
- (ContentResourceInfoBuilder*) setResourceUrl:(NSString*) value {
  resultResourceInfo.hasResourceUrl = YES;
  resultResourceInfo.resourceUrl = value;
  return self;
}
- (ContentResourceInfoBuilder*) clearResourceUrl {
  resultResourceInfo.hasResourceUrl = NO;
  resultResourceInfo.resourceUrl = @"";
  return self;
}
- (BOOL) hasMd5 {
  return resultResourceInfo.hasMd5;
}
- (NSString*) md5 {
  return resultResourceInfo.md5;
}
- (ContentResourceInfoBuilder*) setMd5:(NSString*) value {
  resultResourceInfo.hasMd5 = YES;
  resultResourceInfo.md5 = value;
  return self;
}
- (ContentResourceInfoBuilder*) clearMd5 {
  resultResourceInfo.hasMd5 = NO;
  resultResourceInfo.md5 = @"";
  return self;
}
@end

@interface ContentCommonZipInfo ()
@property (strong) NSString* commonZipId;
@property (strong) NSString* commonZipName;
@property (strong) NSString* commonZipUrl;
@property (strong) NSString* md5;
@end

@implementation ContentCommonZipInfo

- (BOOL) hasCommonZipId {
  return !!hasCommonZipId_;
}
- (void) setHasCommonZipId:(BOOL) _value_ {
  hasCommonZipId_ = !!_value_;
}
@synthesize commonZipId;
- (BOOL) hasCommonZipName {
  return !!hasCommonZipName_;
}
- (void) setHasCommonZipName:(BOOL) _value_ {
  hasCommonZipName_ = !!_value_;
}
@synthesize commonZipName;
- (BOOL) hasCommonZipUrl {
  return !!hasCommonZipUrl_;
}
- (void) setHasCommonZipUrl:(BOOL) _value_ {
  hasCommonZipUrl_ = !!_value_;
}
@synthesize commonZipUrl;
- (BOOL) hasMd5 {
  return !!hasMd5_;
}
- (void) setHasMd5:(BOOL) _value_ {
  hasMd5_ = !!_value_;
}
@synthesize md5;
- (instancetype) init {
  if ((self = [super init])) {
    self.commonZipId = @"";
    self.commonZipName = @"";
    self.commonZipUrl = @"";
    self.md5 = @"";
  }
  return self;
}
static ContentCommonZipInfo* defaultContentCommonZipInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentCommonZipInfo class]) {
    defaultContentCommonZipInfoInstance = [[ContentCommonZipInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentCommonZipInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentCommonZipInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommonZipId) {
    [output writeString:1 value:self.commonZipId];
  }
  if (self.hasCommonZipName) {
    [output writeString:2 value:self.commonZipName];
  }
  if (self.hasCommonZipUrl) {
    [output writeString:3 value:self.commonZipUrl];
  }
  if (self.hasMd5) {
    [output writeString:4 value:self.md5];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCommonZipId) {
    size_ += computeStringSize(1, self.commonZipId);
  }
  if (self.hasCommonZipName) {
    size_ += computeStringSize(2, self.commonZipName);
  }
  if (self.hasCommonZipUrl) {
    size_ += computeStringSize(3, self.commonZipUrl);
  }
  if (self.hasMd5) {
    size_ += computeStringSize(4, self.md5);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentCommonZipInfo*) parseFromData:(NSData*) data {
  return (ContentCommonZipInfo*)[[[ContentCommonZipInfo builder] mergeFromData:data] build];
}
+ (ContentCommonZipInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCommonZipInfo*)[[[ContentCommonZipInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentCommonZipInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentCommonZipInfo*)[[[ContentCommonZipInfo builder] mergeFromInputStream:input] build];
}
+ (ContentCommonZipInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCommonZipInfo*)[[[ContentCommonZipInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentCommonZipInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentCommonZipInfo*)[[[ContentCommonZipInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentCommonZipInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCommonZipInfo*)[[[ContentCommonZipInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentCommonZipInfoBuilder*) builder {
  return [[ContentCommonZipInfoBuilder alloc] init];
}
+ (ContentCommonZipInfoBuilder*) builderWithPrototype:(ContentCommonZipInfo*) prototype {
  return [[ContentCommonZipInfo builder] mergeFrom:prototype];
}
- (ContentCommonZipInfoBuilder*) builder {
  return [ContentCommonZipInfo builder];
}
- (ContentCommonZipInfoBuilder*) toBuilder {
  return [ContentCommonZipInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCommonZipId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commonZipId", self.commonZipId];
  }
  if (self.hasCommonZipName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commonZipName", self.commonZipName];
  }
  if (self.hasCommonZipUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commonZipUrl", self.commonZipUrl];
  }
  if (self.hasMd5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"md5", self.md5];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCommonZipId) {
    [dictionary setObject: self.commonZipId forKey: @"commonZipId"];
  }
  if (self.hasCommonZipName) {
    [dictionary setObject: self.commonZipName forKey: @"commonZipName"];
  }
  if (self.hasCommonZipUrl) {
    [dictionary setObject: self.commonZipUrl forKey: @"commonZipUrl"];
  }
  if (self.hasMd5) {
    [dictionary setObject: self.md5 forKey: @"md5"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentCommonZipInfo class]]) {
    return NO;
  }
  ContentCommonZipInfo *otherMessage = other;
  return
      self.hasCommonZipId == otherMessage.hasCommonZipId &&
      (!self.hasCommonZipId || [self.commonZipId isEqual:otherMessage.commonZipId]) &&
      self.hasCommonZipName == otherMessage.hasCommonZipName &&
      (!self.hasCommonZipName || [self.commonZipName isEqual:otherMessage.commonZipName]) &&
      self.hasCommonZipUrl == otherMessage.hasCommonZipUrl &&
      (!self.hasCommonZipUrl || [self.commonZipUrl isEqual:otherMessage.commonZipUrl]) &&
      self.hasMd5 == otherMessage.hasMd5 &&
      (!self.hasMd5 || [self.md5 isEqual:otherMessage.md5]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCommonZipId) {
    hashCode = hashCode * 31 + [self.commonZipId hash];
  }
  if (self.hasCommonZipName) {
    hashCode = hashCode * 31 + [self.commonZipName hash];
  }
  if (self.hasCommonZipUrl) {
    hashCode = hashCode * 31 + [self.commonZipUrl hash];
  }
  if (self.hasMd5) {
    hashCode = hashCode * 31 + [self.md5 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentCommonZipInfoBuilder()
@property (strong) ContentCommonZipInfo* resultCommonZipInfo;
@end

@implementation ContentCommonZipInfoBuilder
@synthesize resultCommonZipInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCommonZipInfo = [[ContentCommonZipInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCommonZipInfo;
}
- (ContentCommonZipInfoBuilder*) clear {
  self.resultCommonZipInfo = [[ContentCommonZipInfo alloc] init];
  return self;
}
- (ContentCommonZipInfoBuilder*) clone {
  return [ContentCommonZipInfo builderWithPrototype:resultCommonZipInfo];
}
- (ContentCommonZipInfo*) defaultInstance {
  return [ContentCommonZipInfo defaultInstance];
}
- (ContentCommonZipInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentCommonZipInfo*) buildPartial {
  ContentCommonZipInfo* returnMe = resultCommonZipInfo;
  self.resultCommonZipInfo = nil;
  return returnMe;
}
- (ContentCommonZipInfoBuilder*) mergeFrom:(ContentCommonZipInfo*) other {
  if (other == [ContentCommonZipInfo defaultInstance]) {
    return self;
  }
  if (other.hasCommonZipId) {
    [self setCommonZipId:other.commonZipId];
  }
  if (other.hasCommonZipName) {
    [self setCommonZipName:other.commonZipName];
  }
  if (other.hasCommonZipUrl) {
    [self setCommonZipUrl:other.commonZipUrl];
  }
  if (other.hasMd5) {
    [self setMd5:other.md5];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentCommonZipInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentCommonZipInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCommonZipId:[input readString]];
        break;
      }
      case 18: {
        [self setCommonZipName:[input readString]];
        break;
      }
      case 26: {
        [self setCommonZipUrl:[input readString]];
        break;
      }
      case 34: {
        [self setMd5:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCommonZipId {
  return resultCommonZipInfo.hasCommonZipId;
}
- (NSString*) commonZipId {
  return resultCommonZipInfo.commonZipId;
}
- (ContentCommonZipInfoBuilder*) setCommonZipId:(NSString*) value {
  resultCommonZipInfo.hasCommonZipId = YES;
  resultCommonZipInfo.commonZipId = value;
  return self;
}
- (ContentCommonZipInfoBuilder*) clearCommonZipId {
  resultCommonZipInfo.hasCommonZipId = NO;
  resultCommonZipInfo.commonZipId = @"";
  return self;
}
- (BOOL) hasCommonZipName {
  return resultCommonZipInfo.hasCommonZipName;
}
- (NSString*) commonZipName {
  return resultCommonZipInfo.commonZipName;
}
- (ContentCommonZipInfoBuilder*) setCommonZipName:(NSString*) value {
  resultCommonZipInfo.hasCommonZipName = YES;
  resultCommonZipInfo.commonZipName = value;
  return self;
}
- (ContentCommonZipInfoBuilder*) clearCommonZipName {
  resultCommonZipInfo.hasCommonZipName = NO;
  resultCommonZipInfo.commonZipName = @"";
  return self;
}
- (BOOL) hasCommonZipUrl {
  return resultCommonZipInfo.hasCommonZipUrl;
}
- (NSString*) commonZipUrl {
  return resultCommonZipInfo.commonZipUrl;
}
- (ContentCommonZipInfoBuilder*) setCommonZipUrl:(NSString*) value {
  resultCommonZipInfo.hasCommonZipUrl = YES;
  resultCommonZipInfo.commonZipUrl = value;
  return self;
}
- (ContentCommonZipInfoBuilder*) clearCommonZipUrl {
  resultCommonZipInfo.hasCommonZipUrl = NO;
  resultCommonZipInfo.commonZipUrl = @"";
  return self;
}
- (BOOL) hasMd5 {
  return resultCommonZipInfo.hasMd5;
}
- (NSString*) md5 {
  return resultCommonZipInfo.md5;
}
- (ContentCommonZipInfoBuilder*) setMd5:(NSString*) value {
  resultCommonZipInfo.hasMd5 = YES;
  resultCommonZipInfo.md5 = value;
  return self;
}
- (ContentCommonZipInfoBuilder*) clearMd5 {
  resultCommonZipInfo.hasMd5 = NO;
  resultCommonZipInfo.md5 = @"";
  return self;
}
@end

@interface ContentShareInfo ()
@property (strong) NSString* shareType;
@property (strong) NSString* shareTitle;
@property (strong) NSString* shareLinkUrl;
@property (strong) NSString* shareDes;
@property (strong) NSString* shareImageUrl;
@property (strong) NSString* needRealNameFlg;
@end

@implementation ContentShareInfo

- (BOOL) hasShareType {
  return !!hasShareType_;
}
- (void) setHasShareType:(BOOL) _value_ {
  hasShareType_ = !!_value_;
}
@synthesize shareType;
- (BOOL) hasShareTitle {
  return !!hasShareTitle_;
}
- (void) setHasShareTitle:(BOOL) _value_ {
  hasShareTitle_ = !!_value_;
}
@synthesize shareTitle;
- (BOOL) hasShareLinkUrl {
  return !!hasShareLinkUrl_;
}
- (void) setHasShareLinkUrl:(BOOL) _value_ {
  hasShareLinkUrl_ = !!_value_;
}
@synthesize shareLinkUrl;
- (BOOL) hasShareDes {
  return !!hasShareDes_;
}
- (void) setHasShareDes:(BOOL) _value_ {
  hasShareDes_ = !!_value_;
}
@synthesize shareDes;
- (BOOL) hasShareImageUrl {
  return !!hasShareImageUrl_;
}
- (void) setHasShareImageUrl:(BOOL) _value_ {
  hasShareImageUrl_ = !!_value_;
}
@synthesize shareImageUrl;
- (BOOL) hasNeedRealNameFlg {
  return !!hasNeedRealNameFlg_;
}
- (void) setHasNeedRealNameFlg:(BOOL) _value_ {
  hasNeedRealNameFlg_ = !!_value_;
}
@synthesize needRealNameFlg;
- (instancetype) init {
  if ((self = [super init])) {
    self.shareType = @"";
    self.shareTitle = @"";
    self.shareLinkUrl = @"";
    self.shareDes = @"";
    self.shareImageUrl = @"";
    self.needRealNameFlg = @"";
  }
  return self;
}
static ContentShareInfo* defaultContentShareInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentShareInfo class]) {
    defaultContentShareInfoInstance = [[ContentShareInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentShareInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentShareInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasShareType) {
    [output writeString:1 value:self.shareType];
  }
  if (self.hasShareTitle) {
    [output writeString:2 value:self.shareTitle];
  }
  if (self.hasShareLinkUrl) {
    [output writeString:3 value:self.shareLinkUrl];
  }
  if (self.hasShareDes) {
    [output writeString:4 value:self.shareDes];
  }
  if (self.hasShareImageUrl) {
    [output writeString:5 value:self.shareImageUrl];
  }
  if (self.hasNeedRealNameFlg) {
    [output writeString:6 value:self.needRealNameFlg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasShareType) {
    size_ += computeStringSize(1, self.shareType);
  }
  if (self.hasShareTitle) {
    size_ += computeStringSize(2, self.shareTitle);
  }
  if (self.hasShareLinkUrl) {
    size_ += computeStringSize(3, self.shareLinkUrl);
  }
  if (self.hasShareDes) {
    size_ += computeStringSize(4, self.shareDes);
  }
  if (self.hasShareImageUrl) {
    size_ += computeStringSize(5, self.shareImageUrl);
  }
  if (self.hasNeedRealNameFlg) {
    size_ += computeStringSize(6, self.needRealNameFlg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentShareInfo*) parseFromData:(NSData*) data {
  return (ContentShareInfo*)[[[ContentShareInfo builder] mergeFromData:data] build];
}
+ (ContentShareInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentShareInfo*)[[[ContentShareInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentShareInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentShareInfo*)[[[ContentShareInfo builder] mergeFromInputStream:input] build];
}
+ (ContentShareInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentShareInfo*)[[[ContentShareInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentShareInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentShareInfo*)[[[ContentShareInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentShareInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentShareInfo*)[[[ContentShareInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentShareInfoBuilder*) builder {
  return [[ContentShareInfoBuilder alloc] init];
}
+ (ContentShareInfoBuilder*) builderWithPrototype:(ContentShareInfo*) prototype {
  return [[ContentShareInfo builder] mergeFrom:prototype];
}
- (ContentShareInfoBuilder*) builder {
  return [ContentShareInfo builder];
}
- (ContentShareInfoBuilder*) toBuilder {
  return [ContentShareInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasShareType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareType", self.shareType];
  }
  if (self.hasShareTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareTitle", self.shareTitle];
  }
  if (self.hasShareLinkUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareLinkUrl", self.shareLinkUrl];
  }
  if (self.hasShareDes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareDes", self.shareDes];
  }
  if (self.hasShareImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareImageUrl", self.shareImageUrl];
  }
  if (self.hasNeedRealNameFlg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"needRealNameFlg", self.needRealNameFlg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasShareType) {
    [dictionary setObject: self.shareType forKey: @"shareType"];
  }
  if (self.hasShareTitle) {
    [dictionary setObject: self.shareTitle forKey: @"shareTitle"];
  }
  if (self.hasShareLinkUrl) {
    [dictionary setObject: self.shareLinkUrl forKey: @"shareLinkUrl"];
  }
  if (self.hasShareDes) {
    [dictionary setObject: self.shareDes forKey: @"shareDes"];
  }
  if (self.hasShareImageUrl) {
    [dictionary setObject: self.shareImageUrl forKey: @"shareImageUrl"];
  }
  if (self.hasNeedRealNameFlg) {
    [dictionary setObject: self.needRealNameFlg forKey: @"needRealNameFlg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentShareInfo class]]) {
    return NO;
  }
  ContentShareInfo *otherMessage = other;
  return
      self.hasShareType == otherMessage.hasShareType &&
      (!self.hasShareType || [self.shareType isEqual:otherMessage.shareType]) &&
      self.hasShareTitle == otherMessage.hasShareTitle &&
      (!self.hasShareTitle || [self.shareTitle isEqual:otherMessage.shareTitle]) &&
      self.hasShareLinkUrl == otherMessage.hasShareLinkUrl &&
      (!self.hasShareLinkUrl || [self.shareLinkUrl isEqual:otherMessage.shareLinkUrl]) &&
      self.hasShareDes == otherMessage.hasShareDes &&
      (!self.hasShareDes || [self.shareDes isEqual:otherMessage.shareDes]) &&
      self.hasShareImageUrl == otherMessage.hasShareImageUrl &&
      (!self.hasShareImageUrl || [self.shareImageUrl isEqual:otherMessage.shareImageUrl]) &&
      self.hasNeedRealNameFlg == otherMessage.hasNeedRealNameFlg &&
      (!self.hasNeedRealNameFlg || [self.needRealNameFlg isEqual:otherMessage.needRealNameFlg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasShareType) {
    hashCode = hashCode * 31 + [self.shareType hash];
  }
  if (self.hasShareTitle) {
    hashCode = hashCode * 31 + [self.shareTitle hash];
  }
  if (self.hasShareLinkUrl) {
    hashCode = hashCode * 31 + [self.shareLinkUrl hash];
  }
  if (self.hasShareDes) {
    hashCode = hashCode * 31 + [self.shareDes hash];
  }
  if (self.hasShareImageUrl) {
    hashCode = hashCode * 31 + [self.shareImageUrl hash];
  }
  if (self.hasNeedRealNameFlg) {
    hashCode = hashCode * 31 + [self.needRealNameFlg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentShareInfoBuilder()
@property (strong) ContentShareInfo* resultShareInfo;
@end

@implementation ContentShareInfoBuilder
@synthesize resultShareInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultShareInfo = [[ContentShareInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultShareInfo;
}
- (ContentShareInfoBuilder*) clear {
  self.resultShareInfo = [[ContentShareInfo alloc] init];
  return self;
}
- (ContentShareInfoBuilder*) clone {
  return [ContentShareInfo builderWithPrototype:resultShareInfo];
}
- (ContentShareInfo*) defaultInstance {
  return [ContentShareInfo defaultInstance];
}
- (ContentShareInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentShareInfo*) buildPartial {
  ContentShareInfo* returnMe = resultShareInfo;
  self.resultShareInfo = nil;
  return returnMe;
}
- (ContentShareInfoBuilder*) mergeFrom:(ContentShareInfo*) other {
  if (other == [ContentShareInfo defaultInstance]) {
    return self;
  }
  if (other.hasShareType) {
    [self setShareType:other.shareType];
  }
  if (other.hasShareTitle) {
    [self setShareTitle:other.shareTitle];
  }
  if (other.hasShareLinkUrl) {
    [self setShareLinkUrl:other.shareLinkUrl];
  }
  if (other.hasShareDes) {
    [self setShareDes:other.shareDes];
  }
  if (other.hasShareImageUrl) {
    [self setShareImageUrl:other.shareImageUrl];
  }
  if (other.hasNeedRealNameFlg) {
    [self setNeedRealNameFlg:other.needRealNameFlg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentShareInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentShareInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setShareType:[input readString]];
        break;
      }
      case 18: {
        [self setShareTitle:[input readString]];
        break;
      }
      case 26: {
        [self setShareLinkUrl:[input readString]];
        break;
      }
      case 34: {
        [self setShareDes:[input readString]];
        break;
      }
      case 42: {
        [self setShareImageUrl:[input readString]];
        break;
      }
      case 50: {
        [self setNeedRealNameFlg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasShareType {
  return resultShareInfo.hasShareType;
}
- (NSString*) shareType {
  return resultShareInfo.shareType;
}
- (ContentShareInfoBuilder*) setShareType:(NSString*) value {
  resultShareInfo.hasShareType = YES;
  resultShareInfo.shareType = value;
  return self;
}
- (ContentShareInfoBuilder*) clearShareType {
  resultShareInfo.hasShareType = NO;
  resultShareInfo.shareType = @"";
  return self;
}
- (BOOL) hasShareTitle {
  return resultShareInfo.hasShareTitle;
}
- (NSString*) shareTitle {
  return resultShareInfo.shareTitle;
}
- (ContentShareInfoBuilder*) setShareTitle:(NSString*) value {
  resultShareInfo.hasShareTitle = YES;
  resultShareInfo.shareTitle = value;
  return self;
}
- (ContentShareInfoBuilder*) clearShareTitle {
  resultShareInfo.hasShareTitle = NO;
  resultShareInfo.shareTitle = @"";
  return self;
}
- (BOOL) hasShareLinkUrl {
  return resultShareInfo.hasShareLinkUrl;
}
- (NSString*) shareLinkUrl {
  return resultShareInfo.shareLinkUrl;
}
- (ContentShareInfoBuilder*) setShareLinkUrl:(NSString*) value {
  resultShareInfo.hasShareLinkUrl = YES;
  resultShareInfo.shareLinkUrl = value;
  return self;
}
- (ContentShareInfoBuilder*) clearShareLinkUrl {
  resultShareInfo.hasShareLinkUrl = NO;
  resultShareInfo.shareLinkUrl = @"";
  return self;
}
- (BOOL) hasShareDes {
  return resultShareInfo.hasShareDes;
}
- (NSString*) shareDes {
  return resultShareInfo.shareDes;
}
- (ContentShareInfoBuilder*) setShareDes:(NSString*) value {
  resultShareInfo.hasShareDes = YES;
  resultShareInfo.shareDes = value;
  return self;
}
- (ContentShareInfoBuilder*) clearShareDes {
  resultShareInfo.hasShareDes = NO;
  resultShareInfo.shareDes = @"";
  return self;
}
- (BOOL) hasShareImageUrl {
  return resultShareInfo.hasShareImageUrl;
}
- (NSString*) shareImageUrl {
  return resultShareInfo.shareImageUrl;
}
- (ContentShareInfoBuilder*) setShareImageUrl:(NSString*) value {
  resultShareInfo.hasShareImageUrl = YES;
  resultShareInfo.shareImageUrl = value;
  return self;
}
- (ContentShareInfoBuilder*) clearShareImageUrl {
  resultShareInfo.hasShareImageUrl = NO;
  resultShareInfo.shareImageUrl = @"";
  return self;
}
- (BOOL) hasNeedRealNameFlg {
  return resultShareInfo.hasNeedRealNameFlg;
}
- (NSString*) needRealNameFlg {
  return resultShareInfo.needRealNameFlg;
}
- (ContentShareInfoBuilder*) setNeedRealNameFlg:(NSString*) value {
  resultShareInfo.hasNeedRealNameFlg = YES;
  resultShareInfo.needRealNameFlg = value;
  return self;
}
- (ContentShareInfoBuilder*) clearNeedRealNameFlg {
  resultShareInfo.hasNeedRealNameFlg = NO;
  resultShareInfo.needRealNameFlg = @"";
  return self;
}
@end

@interface ContentUserAppLoginInfo ()
@property (strong) NSString* loginType;
@property (strong) NSString* loginTime;
@property (strong) NSString* wifiName;
@property (strong) NSString* wifiDomain;
@property (strong) NSString* loginResult;
@end

@implementation ContentUserAppLoginInfo

- (BOOL) hasLoginType {
  return !!hasLoginType_;
}
- (void) setHasLoginType:(BOOL) _value_ {
  hasLoginType_ = !!_value_;
}
@synthesize loginType;
- (BOOL) hasLoginTime {
  return !!hasLoginTime_;
}
- (void) setHasLoginTime:(BOOL) _value_ {
  hasLoginTime_ = !!_value_;
}
@synthesize loginTime;
- (BOOL) hasWifiName {
  return !!hasWifiName_;
}
- (void) setHasWifiName:(BOOL) _value_ {
  hasWifiName_ = !!_value_;
}
@synthesize wifiName;
- (BOOL) hasWifiDomain {
  return !!hasWifiDomain_;
}
- (void) setHasWifiDomain:(BOOL) _value_ {
  hasWifiDomain_ = !!_value_;
}
@synthesize wifiDomain;
- (BOOL) hasLoginResult {
  return !!hasLoginResult_;
}
- (void) setHasLoginResult:(BOOL) _value_ {
  hasLoginResult_ = !!_value_;
}
@synthesize loginResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.loginType = @"";
    self.loginTime = @"";
    self.wifiName = @"";
    self.wifiDomain = @"";
    self.loginResult = @"";
  }
  return self;
}
static ContentUserAppLoginInfo* defaultContentUserAppLoginInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentUserAppLoginInfo class]) {
    defaultContentUserAppLoginInfoInstance = [[ContentUserAppLoginInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentUserAppLoginInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentUserAppLoginInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLoginType) {
    [output writeString:1 value:self.loginType];
  }
  if (self.hasLoginTime) {
    [output writeString:2 value:self.loginTime];
  }
  if (self.hasWifiName) {
    [output writeString:3 value:self.wifiName];
  }
  if (self.hasWifiDomain) {
    [output writeString:4 value:self.wifiDomain];
  }
  if (self.hasLoginResult) {
    [output writeString:5 value:self.loginResult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLoginType) {
    size_ += computeStringSize(1, self.loginType);
  }
  if (self.hasLoginTime) {
    size_ += computeStringSize(2, self.loginTime);
  }
  if (self.hasWifiName) {
    size_ += computeStringSize(3, self.wifiName);
  }
  if (self.hasWifiDomain) {
    size_ += computeStringSize(4, self.wifiDomain);
  }
  if (self.hasLoginResult) {
    size_ += computeStringSize(5, self.loginResult);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentUserAppLoginInfo*) parseFromData:(NSData*) data {
  return (ContentUserAppLoginInfo*)[[[ContentUserAppLoginInfo builder] mergeFromData:data] build];
}
+ (ContentUserAppLoginInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentUserAppLoginInfo*)[[[ContentUserAppLoginInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentUserAppLoginInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentUserAppLoginInfo*)[[[ContentUserAppLoginInfo builder] mergeFromInputStream:input] build];
}
+ (ContentUserAppLoginInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentUserAppLoginInfo*)[[[ContentUserAppLoginInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentUserAppLoginInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentUserAppLoginInfo*)[[[ContentUserAppLoginInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentUserAppLoginInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentUserAppLoginInfo*)[[[ContentUserAppLoginInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentUserAppLoginInfoBuilder*) builder {
  return [[ContentUserAppLoginInfoBuilder alloc] init];
}
+ (ContentUserAppLoginInfoBuilder*) builderWithPrototype:(ContentUserAppLoginInfo*) prototype {
  return [[ContentUserAppLoginInfo builder] mergeFrom:prototype];
}
- (ContentUserAppLoginInfoBuilder*) builder {
  return [ContentUserAppLoginInfo builder];
}
- (ContentUserAppLoginInfoBuilder*) toBuilder {
  return [ContentUserAppLoginInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLoginType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginType", self.loginType];
  }
  if (self.hasLoginTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginTime", self.loginTime];
  }
  if (self.hasWifiName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wifiName", self.wifiName];
  }
  if (self.hasWifiDomain) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wifiDomain", self.wifiDomain];
  }
  if (self.hasLoginResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginResult", self.loginResult];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLoginType) {
    [dictionary setObject: self.loginType forKey: @"loginType"];
  }
  if (self.hasLoginTime) {
    [dictionary setObject: self.loginTime forKey: @"loginTime"];
  }
  if (self.hasWifiName) {
    [dictionary setObject: self.wifiName forKey: @"wifiName"];
  }
  if (self.hasWifiDomain) {
    [dictionary setObject: self.wifiDomain forKey: @"wifiDomain"];
  }
  if (self.hasLoginResult) {
    [dictionary setObject: self.loginResult forKey: @"loginResult"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentUserAppLoginInfo class]]) {
    return NO;
  }
  ContentUserAppLoginInfo *otherMessage = other;
  return
      self.hasLoginType == otherMessage.hasLoginType &&
      (!self.hasLoginType || [self.loginType isEqual:otherMessage.loginType]) &&
      self.hasLoginTime == otherMessage.hasLoginTime &&
      (!self.hasLoginTime || [self.loginTime isEqual:otherMessage.loginTime]) &&
      self.hasWifiName == otherMessage.hasWifiName &&
      (!self.hasWifiName || [self.wifiName isEqual:otherMessage.wifiName]) &&
      self.hasWifiDomain == otherMessage.hasWifiDomain &&
      (!self.hasWifiDomain || [self.wifiDomain isEqual:otherMessage.wifiDomain]) &&
      self.hasLoginResult == otherMessage.hasLoginResult &&
      (!self.hasLoginResult || [self.loginResult isEqual:otherMessage.loginResult]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLoginType) {
    hashCode = hashCode * 31 + [self.loginType hash];
  }
  if (self.hasLoginTime) {
    hashCode = hashCode * 31 + [self.loginTime hash];
  }
  if (self.hasWifiName) {
    hashCode = hashCode * 31 + [self.wifiName hash];
  }
  if (self.hasWifiDomain) {
    hashCode = hashCode * 31 + [self.wifiDomain hash];
  }
  if (self.hasLoginResult) {
    hashCode = hashCode * 31 + [self.loginResult hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentUserAppLoginInfoBuilder()
@property (strong) ContentUserAppLoginInfo* resultUserAppLoginInfo;
@end

@implementation ContentUserAppLoginInfoBuilder
@synthesize resultUserAppLoginInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserAppLoginInfo = [[ContentUserAppLoginInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserAppLoginInfo;
}
- (ContentUserAppLoginInfoBuilder*) clear {
  self.resultUserAppLoginInfo = [[ContentUserAppLoginInfo alloc] init];
  return self;
}
- (ContentUserAppLoginInfoBuilder*) clone {
  return [ContentUserAppLoginInfo builderWithPrototype:resultUserAppLoginInfo];
}
- (ContentUserAppLoginInfo*) defaultInstance {
  return [ContentUserAppLoginInfo defaultInstance];
}
- (ContentUserAppLoginInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentUserAppLoginInfo*) buildPartial {
  ContentUserAppLoginInfo* returnMe = resultUserAppLoginInfo;
  self.resultUserAppLoginInfo = nil;
  return returnMe;
}
- (ContentUserAppLoginInfoBuilder*) mergeFrom:(ContentUserAppLoginInfo*) other {
  if (other == [ContentUserAppLoginInfo defaultInstance]) {
    return self;
  }
  if (other.hasLoginType) {
    [self setLoginType:other.loginType];
  }
  if (other.hasLoginTime) {
    [self setLoginTime:other.loginTime];
  }
  if (other.hasWifiName) {
    [self setWifiName:other.wifiName];
  }
  if (other.hasWifiDomain) {
    [self setWifiDomain:other.wifiDomain];
  }
  if (other.hasLoginResult) {
    [self setLoginResult:other.loginResult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentUserAppLoginInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentUserAppLoginInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setLoginType:[input readString]];
        break;
      }
      case 18: {
        [self setLoginTime:[input readString]];
        break;
      }
      case 26: {
        [self setWifiName:[input readString]];
        break;
      }
      case 34: {
        [self setWifiDomain:[input readString]];
        break;
      }
      case 42: {
        [self setLoginResult:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLoginType {
  return resultUserAppLoginInfo.hasLoginType;
}
- (NSString*) loginType {
  return resultUserAppLoginInfo.loginType;
}
- (ContentUserAppLoginInfoBuilder*) setLoginType:(NSString*) value {
  resultUserAppLoginInfo.hasLoginType = YES;
  resultUserAppLoginInfo.loginType = value;
  return self;
}
- (ContentUserAppLoginInfoBuilder*) clearLoginType {
  resultUserAppLoginInfo.hasLoginType = NO;
  resultUserAppLoginInfo.loginType = @"";
  return self;
}
- (BOOL) hasLoginTime {
  return resultUserAppLoginInfo.hasLoginTime;
}
- (NSString*) loginTime {
  return resultUserAppLoginInfo.loginTime;
}
- (ContentUserAppLoginInfoBuilder*) setLoginTime:(NSString*) value {
  resultUserAppLoginInfo.hasLoginTime = YES;
  resultUserAppLoginInfo.loginTime = value;
  return self;
}
- (ContentUserAppLoginInfoBuilder*) clearLoginTime {
  resultUserAppLoginInfo.hasLoginTime = NO;
  resultUserAppLoginInfo.loginTime = @"";
  return self;
}
- (BOOL) hasWifiName {
  return resultUserAppLoginInfo.hasWifiName;
}
- (NSString*) wifiName {
  return resultUserAppLoginInfo.wifiName;
}
- (ContentUserAppLoginInfoBuilder*) setWifiName:(NSString*) value {
  resultUserAppLoginInfo.hasWifiName = YES;
  resultUserAppLoginInfo.wifiName = value;
  return self;
}
- (ContentUserAppLoginInfoBuilder*) clearWifiName {
  resultUserAppLoginInfo.hasWifiName = NO;
  resultUserAppLoginInfo.wifiName = @"";
  return self;
}
- (BOOL) hasWifiDomain {
  return resultUserAppLoginInfo.hasWifiDomain;
}
- (NSString*) wifiDomain {
  return resultUserAppLoginInfo.wifiDomain;
}
- (ContentUserAppLoginInfoBuilder*) setWifiDomain:(NSString*) value {
  resultUserAppLoginInfo.hasWifiDomain = YES;
  resultUserAppLoginInfo.wifiDomain = value;
  return self;
}
- (ContentUserAppLoginInfoBuilder*) clearWifiDomain {
  resultUserAppLoginInfo.hasWifiDomain = NO;
  resultUserAppLoginInfo.wifiDomain = @"";
  return self;
}
- (BOOL) hasLoginResult {
  return resultUserAppLoginInfo.hasLoginResult;
}
- (NSString*) loginResult {
  return resultUserAppLoginInfo.loginResult;
}
- (ContentUserAppLoginInfoBuilder*) setLoginResult:(NSString*) value {
  resultUserAppLoginInfo.hasLoginResult = YES;
  resultUserAppLoginInfo.loginResult = value;
  return self;
}
- (ContentUserAppLoginInfoBuilder*) clearLoginResult {
  resultUserAppLoginInfo.hasLoginResult = NO;
  resultUserAppLoginInfo.loginResult = @"";
  return self;
}
@end

@interface ContentCardInfo ()
@property (strong) NSString* phoneNo;
@property (strong) NSString* holderName;
@property (strong) NSString* id;
@property (strong) NSString* pan;
@property (strong) NSString* bankId;
@property (strong) NSString* cardType;
@property (strong) NSString* bankName;
@end

@implementation ContentCardInfo

- (BOOL) hasPhoneNo {
  return !!hasPhoneNo_;
}
- (void) setHasPhoneNo:(BOOL) _value_ {
  hasPhoneNo_ = !!_value_;
}
@synthesize phoneNo;
- (BOOL) hasHolderName {
  return !!hasHolderName_;
}
- (void) setHasHolderName:(BOOL) _value_ {
  hasHolderName_ = !!_value_;
}
@synthesize holderName;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasPan {
  return !!hasPan_;
}
- (void) setHasPan:(BOOL) _value_ {
  hasPan_ = !!_value_;
}
@synthesize pan;
- (BOOL) hasBankId {
  return !!hasBankId_;
}
- (void) setHasBankId:(BOOL) _value_ {
  hasBankId_ = !!_value_;
}
@synthesize bankId;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) _value_ {
  hasCardType_ = !!_value_;
}
@synthesize cardType;
- (BOOL) hasBankName {
  return !!hasBankName_;
}
- (void) setHasBankName:(BOOL) _value_ {
  hasBankName_ = !!_value_;
}
@synthesize bankName;
- (instancetype) init {
  if ((self = [super init])) {
    self.phoneNo = @"";
    self.holderName = @"";
    self.id = @"";
    self.pan = @"";
    self.bankId = @"";
    self.cardType = @"";
    self.bankName = @"";
  }
  return self;
}
static ContentCardInfo* defaultContentCardInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentCardInfo class]) {
    defaultContentCardInfoInstance = [[ContentCardInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentCardInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentCardInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhoneNo) {
    [output writeString:1 value:self.phoneNo];
  }
  if (self.hasHolderName) {
    [output writeString:2 value:self.holderName];
  }
  if (self.hasId) {
    [output writeString:3 value:self.id];
  }
  if (self.hasPan) {
    [output writeString:4 value:self.pan];
  }
  if (self.hasBankId) {
    [output writeString:5 value:self.bankId];
  }
  if (self.hasCardType) {
    [output writeString:6 value:self.cardType];
  }
  if (self.hasBankName) {
    [output writeString:7 value:self.bankName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPhoneNo) {
    size_ += computeStringSize(1, self.phoneNo);
  }
  if (self.hasHolderName) {
    size_ += computeStringSize(2, self.holderName);
  }
  if (self.hasId) {
    size_ += computeStringSize(3, self.id);
  }
  if (self.hasPan) {
    size_ += computeStringSize(4, self.pan);
  }
  if (self.hasBankId) {
    size_ += computeStringSize(5, self.bankId);
  }
  if (self.hasCardType) {
    size_ += computeStringSize(6, self.cardType);
  }
  if (self.hasBankName) {
    size_ += computeStringSize(7, self.bankName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentCardInfo*) parseFromData:(NSData*) data {
  return (ContentCardInfo*)[[[ContentCardInfo builder] mergeFromData:data] build];
}
+ (ContentCardInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCardInfo*)[[[ContentCardInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentCardInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentCardInfo*)[[[ContentCardInfo builder] mergeFromInputStream:input] build];
}
+ (ContentCardInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCardInfo*)[[[ContentCardInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentCardInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentCardInfo*)[[[ContentCardInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentCardInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCardInfo*)[[[ContentCardInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentCardInfoBuilder*) builder {
  return [[ContentCardInfoBuilder alloc] init];
}
+ (ContentCardInfoBuilder*) builderWithPrototype:(ContentCardInfo*) prototype {
  return [[ContentCardInfo builder] mergeFrom:prototype];
}
- (ContentCardInfoBuilder*) builder {
  return [ContentCardInfo builder];
}
- (ContentCardInfoBuilder*) toBuilder {
  return [ContentCardInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPhoneNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNo", self.phoneNo];
  }
  if (self.hasHolderName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"holderName", self.holderName];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pan", self.pan];
  }
  if (self.hasBankId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankId", self.bankId];
  }
  if (self.hasCardType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardType", self.cardType];
  }
  if (self.hasBankName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankName", self.bankName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPhoneNo) {
    [dictionary setObject: self.phoneNo forKey: @"phoneNo"];
  }
  if (self.hasHolderName) {
    [dictionary setObject: self.holderName forKey: @"holderName"];
  }
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasPan) {
    [dictionary setObject: self.pan forKey: @"pan"];
  }
  if (self.hasBankId) {
    [dictionary setObject: self.bankId forKey: @"bankId"];
  }
  if (self.hasCardType) {
    [dictionary setObject: self.cardType forKey: @"cardType"];
  }
  if (self.hasBankName) {
    [dictionary setObject: self.bankName forKey: @"bankName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentCardInfo class]]) {
    return NO;
  }
  ContentCardInfo *otherMessage = other;
  return
      self.hasPhoneNo == otherMessage.hasPhoneNo &&
      (!self.hasPhoneNo || [self.phoneNo isEqual:otherMessage.phoneNo]) &&
      self.hasHolderName == otherMessage.hasHolderName &&
      (!self.hasHolderName || [self.holderName isEqual:otherMessage.holderName]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasPan == otherMessage.hasPan &&
      (!self.hasPan || [self.pan isEqual:otherMessage.pan]) &&
      self.hasBankId == otherMessage.hasBankId &&
      (!self.hasBankId || [self.bankId isEqual:otherMessage.bankId]) &&
      self.hasCardType == otherMessage.hasCardType &&
      (!self.hasCardType || [self.cardType isEqual:otherMessage.cardType]) &&
      self.hasBankName == otherMessage.hasBankName &&
      (!self.hasBankName || [self.bankName isEqual:otherMessage.bankName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPhoneNo) {
    hashCode = hashCode * 31 + [self.phoneNo hash];
  }
  if (self.hasHolderName) {
    hashCode = hashCode * 31 + [self.holderName hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasPan) {
    hashCode = hashCode * 31 + [self.pan hash];
  }
  if (self.hasBankId) {
    hashCode = hashCode * 31 + [self.bankId hash];
  }
  if (self.hasCardType) {
    hashCode = hashCode * 31 + [self.cardType hash];
  }
  if (self.hasBankName) {
    hashCode = hashCode * 31 + [self.bankName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentCardInfoBuilder()
@property (strong) ContentCardInfo* resultCardInfo;
@end

@implementation ContentCardInfoBuilder
@synthesize resultCardInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCardInfo = [[ContentCardInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCardInfo;
}
- (ContentCardInfoBuilder*) clear {
  self.resultCardInfo = [[ContentCardInfo alloc] init];
  return self;
}
- (ContentCardInfoBuilder*) clone {
  return [ContentCardInfo builderWithPrototype:resultCardInfo];
}
- (ContentCardInfo*) defaultInstance {
  return [ContentCardInfo defaultInstance];
}
- (ContentCardInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentCardInfo*) buildPartial {
  ContentCardInfo* returnMe = resultCardInfo;
  self.resultCardInfo = nil;
  return returnMe;
}
- (ContentCardInfoBuilder*) mergeFrom:(ContentCardInfo*) other {
  if (other == [ContentCardInfo defaultInstance]) {
    return self;
  }
  if (other.hasPhoneNo) {
    [self setPhoneNo:other.phoneNo];
  }
  if (other.hasHolderName) {
    [self setHolderName:other.holderName];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPan) {
    [self setPan:other.pan];
  }
  if (other.hasBankId) {
    [self setBankId:other.bankId];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  if (other.hasBankName) {
    [self setBankName:other.bankName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentCardInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentCardInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPhoneNo:[input readString]];
        break;
      }
      case 18: {
        [self setHolderName:[input readString]];
        break;
      }
      case 26: {
        [self setId:[input readString]];
        break;
      }
      case 34: {
        [self setPan:[input readString]];
        break;
      }
      case 42: {
        [self setBankId:[input readString]];
        break;
      }
      case 50: {
        [self setCardType:[input readString]];
        break;
      }
      case 58: {
        [self setBankName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPhoneNo {
  return resultCardInfo.hasPhoneNo;
}
- (NSString*) phoneNo {
  return resultCardInfo.phoneNo;
}
- (ContentCardInfoBuilder*) setPhoneNo:(NSString*) value {
  resultCardInfo.hasPhoneNo = YES;
  resultCardInfo.phoneNo = value;
  return self;
}
- (ContentCardInfoBuilder*) clearPhoneNo {
  resultCardInfo.hasPhoneNo = NO;
  resultCardInfo.phoneNo = @"";
  return self;
}
- (BOOL) hasHolderName {
  return resultCardInfo.hasHolderName;
}
- (NSString*) holderName {
  return resultCardInfo.holderName;
}
- (ContentCardInfoBuilder*) setHolderName:(NSString*) value {
  resultCardInfo.hasHolderName = YES;
  resultCardInfo.holderName = value;
  return self;
}
- (ContentCardInfoBuilder*) clearHolderName {
  resultCardInfo.hasHolderName = NO;
  resultCardInfo.holderName = @"";
  return self;
}
- (BOOL) hasId {
  return resultCardInfo.hasId;
}
- (NSString*) id {
  return resultCardInfo.id;
}
- (ContentCardInfoBuilder*) setId:(NSString*) value {
  resultCardInfo.hasId = YES;
  resultCardInfo.id = value;
  return self;
}
- (ContentCardInfoBuilder*) clearId {
  resultCardInfo.hasId = NO;
  resultCardInfo.id = @"";
  return self;
}
- (BOOL) hasPan {
  return resultCardInfo.hasPan;
}
- (NSString*) pan {
  return resultCardInfo.pan;
}
- (ContentCardInfoBuilder*) setPan:(NSString*) value {
  resultCardInfo.hasPan = YES;
  resultCardInfo.pan = value;
  return self;
}
- (ContentCardInfoBuilder*) clearPan {
  resultCardInfo.hasPan = NO;
  resultCardInfo.pan = @"";
  return self;
}
- (BOOL) hasBankId {
  return resultCardInfo.hasBankId;
}
- (NSString*) bankId {
  return resultCardInfo.bankId;
}
- (ContentCardInfoBuilder*) setBankId:(NSString*) value {
  resultCardInfo.hasBankId = YES;
  resultCardInfo.bankId = value;
  return self;
}
- (ContentCardInfoBuilder*) clearBankId {
  resultCardInfo.hasBankId = NO;
  resultCardInfo.bankId = @"";
  return self;
}
- (BOOL) hasCardType {
  return resultCardInfo.hasCardType;
}
- (NSString*) cardType {
  return resultCardInfo.cardType;
}
- (ContentCardInfoBuilder*) setCardType:(NSString*) value {
  resultCardInfo.hasCardType = YES;
  resultCardInfo.cardType = value;
  return self;
}
- (ContentCardInfoBuilder*) clearCardType {
  resultCardInfo.hasCardType = NO;
  resultCardInfo.cardType = @"";
  return self;
}
- (BOOL) hasBankName {
  return resultCardInfo.hasBankName;
}
- (NSString*) bankName {
  return resultCardInfo.bankName;
}
- (ContentCardInfoBuilder*) setBankName:(NSString*) value {
  resultCardInfo.hasBankName = YES;
  resultCardInfo.bankName = value;
  return self;
}
- (ContentCardInfoBuilder*) clearBankName {
  resultCardInfo.hasBankName = NO;
  resultCardInfo.bankName = @"";
  return self;
}
@end

@interface ContentSummarizeInfo ()
@property (strong) NSString* memAcctcodeBalance;
@property (strong) NSString* fpdBalance;
@property (strong) NSString* totalAmt;
@property (strong) NSString* totalAssets;
@property (strong) NSString* kyhStatus;
@property (strong) NSString* amt;
@property (strong) NSString* fee;
@property (strong) NSString* leftCashCreditAmt;
@property (strong) NSString* voucherCount;
@property (strong) NSString* ticketCount;
@property (strong) NSString* cardCount;
@property (strong) NSString* accStatus;
@property (strong) NSString* totalFee;
@property (strong) NSString* cashCreditUrl;
@property (strong) NSString* kyhFrozenStatus;
@property (strong) NSString* isShowPreQuotaAmt;
@property (strong) NSString* preFcsAmt;
@property (strong) NSString* preFcsUrl;
@property (strong) NSString* interestsBackBalance;
@property (strong) NSString* leftFcsCreditAmt;
@property (strong) NSString* isShowCashInstallment;
@property (strong) NSString* quotaShowType;
@property (strong) NSString* cashCreditAmtStatus;
@property (strong) NSString* leftCreditAmtName;
@property (strong) NSString* leftCashCreditAmtName;
@property (strong) NSString* leftFcsCreditName;
@property (strong) NSString* bankCardCount;
@property (strong) NSString* kyhFrozenUrl;
@property (strong) NSString* msxfOverdueInd;
@property (strong) NSString* msxfApplyStatus;
@end

@implementation ContentSummarizeInfo

- (BOOL) hasMemAcctcodeBalance {
  return !!hasMemAcctcodeBalance_;
}
- (void) setHasMemAcctcodeBalance:(BOOL) _value_ {
  hasMemAcctcodeBalance_ = !!_value_;
}
@synthesize memAcctcodeBalance;
- (BOOL) hasFpdBalance {
  return !!hasFpdBalance_;
}
- (void) setHasFpdBalance:(BOOL) _value_ {
  hasFpdBalance_ = !!_value_;
}
@synthesize fpdBalance;
- (BOOL) hasTotalAmt {
  return !!hasTotalAmt_;
}
- (void) setHasTotalAmt:(BOOL) _value_ {
  hasTotalAmt_ = !!_value_;
}
@synthesize totalAmt;
- (BOOL) hasTotalAssets {
  return !!hasTotalAssets_;
}
- (void) setHasTotalAssets:(BOOL) _value_ {
  hasTotalAssets_ = !!_value_;
}
@synthesize totalAssets;
- (BOOL) hasKyhStatus {
  return !!hasKyhStatus_;
}
- (void) setHasKyhStatus:(BOOL) _value_ {
  hasKyhStatus_ = !!_value_;
}
@synthesize kyhStatus;
- (BOOL) hasAmt {
  return !!hasAmt_;
}
- (void) setHasAmt:(BOOL) _value_ {
  hasAmt_ = !!_value_;
}
@synthesize amt;
- (BOOL) hasFee {
  return !!hasFee_;
}
- (void) setHasFee:(BOOL) _value_ {
  hasFee_ = !!_value_;
}
@synthesize fee;
- (BOOL) hasLeftCashCreditAmt {
  return !!hasLeftCashCreditAmt_;
}
- (void) setHasLeftCashCreditAmt:(BOOL) _value_ {
  hasLeftCashCreditAmt_ = !!_value_;
}
@synthesize leftCashCreditAmt;
- (BOOL) hasVoucherCount {
  return !!hasVoucherCount_;
}
- (void) setHasVoucherCount:(BOOL) _value_ {
  hasVoucherCount_ = !!_value_;
}
@synthesize voucherCount;
- (BOOL) hasTicketCount {
  return !!hasTicketCount_;
}
- (void) setHasTicketCount:(BOOL) _value_ {
  hasTicketCount_ = !!_value_;
}
@synthesize ticketCount;
- (BOOL) hasCardCount {
  return !!hasCardCount_;
}
- (void) setHasCardCount:(BOOL) _value_ {
  hasCardCount_ = !!_value_;
}
@synthesize cardCount;
- (BOOL) hasAccStatus {
  return !!hasAccStatus_;
}
- (void) setHasAccStatus:(BOOL) _value_ {
  hasAccStatus_ = !!_value_;
}
@synthesize accStatus;
- (BOOL) hasTotalFee {
  return !!hasTotalFee_;
}
- (void) setHasTotalFee:(BOOL) _value_ {
  hasTotalFee_ = !!_value_;
}
@synthesize totalFee;
- (BOOL) hasCashCreditUrl {
  return !!hasCashCreditUrl_;
}
- (void) setHasCashCreditUrl:(BOOL) _value_ {
  hasCashCreditUrl_ = !!_value_;
}
@synthesize cashCreditUrl;
- (BOOL) hasKyhFrozenStatus {
  return !!hasKyhFrozenStatus_;
}
- (void) setHasKyhFrozenStatus:(BOOL) _value_ {
  hasKyhFrozenStatus_ = !!_value_;
}
@synthesize kyhFrozenStatus;
- (BOOL) hasIsShowPreQuotaAmt {
  return !!hasIsShowPreQuotaAmt_;
}
- (void) setHasIsShowPreQuotaAmt:(BOOL) _value_ {
  hasIsShowPreQuotaAmt_ = !!_value_;
}
@synthesize isShowPreQuotaAmt;
- (BOOL) hasPreFcsAmt {
  return !!hasPreFcsAmt_;
}
- (void) setHasPreFcsAmt:(BOOL) _value_ {
  hasPreFcsAmt_ = !!_value_;
}
@synthesize preFcsAmt;
- (BOOL) hasPreFcsUrl {
  return !!hasPreFcsUrl_;
}
- (void) setHasPreFcsUrl:(BOOL) _value_ {
  hasPreFcsUrl_ = !!_value_;
}
@synthesize preFcsUrl;
- (BOOL) hasInterestsBackBalance {
  return !!hasInterestsBackBalance_;
}
- (void) setHasInterestsBackBalance:(BOOL) _value_ {
  hasInterestsBackBalance_ = !!_value_;
}
@synthesize interestsBackBalance;
- (BOOL) hasLeftFcsCreditAmt {
  return !!hasLeftFcsCreditAmt_;
}
- (void) setHasLeftFcsCreditAmt:(BOOL) _value_ {
  hasLeftFcsCreditAmt_ = !!_value_;
}
@synthesize leftFcsCreditAmt;
- (BOOL) hasIsShowCashInstallment {
  return !!hasIsShowCashInstallment_;
}
- (void) setHasIsShowCashInstallment:(BOOL) _value_ {
  hasIsShowCashInstallment_ = !!_value_;
}
@synthesize isShowCashInstallment;
- (BOOL) hasQuotaShowType {
  return !!hasQuotaShowType_;
}
- (void) setHasQuotaShowType:(BOOL) _value_ {
  hasQuotaShowType_ = !!_value_;
}
@synthesize quotaShowType;
- (BOOL) hasCashCreditAmtStatus {
  return !!hasCashCreditAmtStatus_;
}
- (void) setHasCashCreditAmtStatus:(BOOL) _value_ {
  hasCashCreditAmtStatus_ = !!_value_;
}
@synthesize cashCreditAmtStatus;
- (BOOL) hasLeftCreditAmtName {
  return !!hasLeftCreditAmtName_;
}
- (void) setHasLeftCreditAmtName:(BOOL) _value_ {
  hasLeftCreditAmtName_ = !!_value_;
}
@synthesize leftCreditAmtName;
- (BOOL) hasLeftCashCreditAmtName {
  return !!hasLeftCashCreditAmtName_;
}
- (void) setHasLeftCashCreditAmtName:(BOOL) _value_ {
  hasLeftCashCreditAmtName_ = !!_value_;
}
@synthesize leftCashCreditAmtName;
- (BOOL) hasLeftFcsCreditName {
  return !!hasLeftFcsCreditName_;
}
- (void) setHasLeftFcsCreditName:(BOOL) _value_ {
  hasLeftFcsCreditName_ = !!_value_;
}
@synthesize leftFcsCreditName;
- (BOOL) hasBankCardCount {
  return !!hasBankCardCount_;
}
- (void) setHasBankCardCount:(BOOL) _value_ {
  hasBankCardCount_ = !!_value_;
}
@synthesize bankCardCount;
- (BOOL) hasKyhFrozenUrl {
  return !!hasKyhFrozenUrl_;
}
- (void) setHasKyhFrozenUrl:(BOOL) _value_ {
  hasKyhFrozenUrl_ = !!_value_;
}
@synthesize kyhFrozenUrl;
- (BOOL) hasMsxfOverdueInd {
  return !!hasMsxfOverdueInd_;
}
- (void) setHasMsxfOverdueInd:(BOOL) _value_ {
  hasMsxfOverdueInd_ = !!_value_;
}
@synthesize msxfOverdueInd;
- (BOOL) hasMsxfApplyStatus {
  return !!hasMsxfApplyStatus_;
}
- (void) setHasMsxfApplyStatus:(BOOL) _value_ {
  hasMsxfApplyStatus_ = !!_value_;
}
@synthesize msxfApplyStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.memAcctcodeBalance = @"";
    self.fpdBalance = @"";
    self.totalAmt = @"";
    self.totalAssets = @"";
    self.kyhStatus = @"";
    self.amt = @"";
    self.fee = @"";
    self.leftCashCreditAmt = @"";
    self.voucherCount = @"";
    self.ticketCount = @"";
    self.cardCount = @"";
    self.accStatus = @"";
    self.totalFee = @"";
    self.cashCreditUrl = @"";
    self.kyhFrozenStatus = @"";
    self.isShowPreQuotaAmt = @"";
    self.preFcsAmt = @"";
    self.preFcsUrl = @"";
    self.interestsBackBalance = @"";
    self.leftFcsCreditAmt = @"";
    self.isShowCashInstallment = @"";
    self.quotaShowType = @"";
    self.cashCreditAmtStatus = @"";
    self.leftCreditAmtName = @"";
    self.leftCashCreditAmtName = @"";
    self.leftFcsCreditName = @"";
    self.bankCardCount = @"";
    self.kyhFrozenUrl = @"";
    self.msxfOverdueInd = @"";
    self.msxfApplyStatus = @"";
  }
  return self;
}
static ContentSummarizeInfo* defaultContentSummarizeInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentSummarizeInfo class]) {
    defaultContentSummarizeInfoInstance = [[ContentSummarizeInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentSummarizeInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentSummarizeInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMemAcctcodeBalance) {
    [output writeString:1 value:self.memAcctcodeBalance];
  }
  if (self.hasFpdBalance) {
    [output writeString:2 value:self.fpdBalance];
  }
  if (self.hasTotalAmt) {
    [output writeString:3 value:self.totalAmt];
  }
  if (self.hasTotalAssets) {
    [output writeString:4 value:self.totalAssets];
  }
  if (self.hasKyhStatus) {
    [output writeString:5 value:self.kyhStatus];
  }
  if (self.hasAmt) {
    [output writeString:6 value:self.amt];
  }
  if (self.hasFee) {
    [output writeString:7 value:self.fee];
  }
  if (self.hasLeftCashCreditAmt) {
    [output writeString:8 value:self.leftCashCreditAmt];
  }
  if (self.hasVoucherCount) {
    [output writeString:9 value:self.voucherCount];
  }
  if (self.hasTicketCount) {
    [output writeString:10 value:self.ticketCount];
  }
  if (self.hasCardCount) {
    [output writeString:11 value:self.cardCount];
  }
  if (self.hasAccStatus) {
    [output writeString:12 value:self.accStatus];
  }
  if (self.hasTotalFee) {
    [output writeString:13 value:self.totalFee];
  }
  if (self.hasCashCreditUrl) {
    [output writeString:14 value:self.cashCreditUrl];
  }
  if (self.hasKyhFrozenStatus) {
    [output writeString:15 value:self.kyhFrozenStatus];
  }
  if (self.hasIsShowPreQuotaAmt) {
    [output writeString:16 value:self.isShowPreQuotaAmt];
  }
  if (self.hasPreFcsAmt) {
    [output writeString:17 value:self.preFcsAmt];
  }
  if (self.hasPreFcsUrl) {
    [output writeString:18 value:self.preFcsUrl];
  }
  if (self.hasInterestsBackBalance) {
    [output writeString:19 value:self.interestsBackBalance];
  }
  if (self.hasLeftFcsCreditAmt) {
    [output writeString:20 value:self.leftFcsCreditAmt];
  }
  if (self.hasIsShowCashInstallment) {
    [output writeString:21 value:self.isShowCashInstallment];
  }
  if (self.hasQuotaShowType) {
    [output writeString:22 value:self.quotaShowType];
  }
  if (self.hasCashCreditAmtStatus) {
    [output writeString:23 value:self.cashCreditAmtStatus];
  }
  if (self.hasLeftCreditAmtName) {
    [output writeString:24 value:self.leftCreditAmtName];
  }
  if (self.hasLeftCashCreditAmtName) {
    [output writeString:25 value:self.leftCashCreditAmtName];
  }
  if (self.hasLeftFcsCreditName) {
    [output writeString:26 value:self.leftFcsCreditName];
  }
  if (self.hasBankCardCount) {
    [output writeString:27 value:self.bankCardCount];
  }
  if (self.hasKyhFrozenUrl) {
    [output writeString:28 value:self.kyhFrozenUrl];
  }
  if (self.hasMsxfOverdueInd) {
    [output writeString:29 value:self.msxfOverdueInd];
  }
  if (self.hasMsxfApplyStatus) {
    [output writeString:30 value:self.msxfApplyStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMemAcctcodeBalance) {
    size_ += computeStringSize(1, self.memAcctcodeBalance);
  }
  if (self.hasFpdBalance) {
    size_ += computeStringSize(2, self.fpdBalance);
  }
  if (self.hasTotalAmt) {
    size_ += computeStringSize(3, self.totalAmt);
  }
  if (self.hasTotalAssets) {
    size_ += computeStringSize(4, self.totalAssets);
  }
  if (self.hasKyhStatus) {
    size_ += computeStringSize(5, self.kyhStatus);
  }
  if (self.hasAmt) {
    size_ += computeStringSize(6, self.amt);
  }
  if (self.hasFee) {
    size_ += computeStringSize(7, self.fee);
  }
  if (self.hasLeftCashCreditAmt) {
    size_ += computeStringSize(8, self.leftCashCreditAmt);
  }
  if (self.hasVoucherCount) {
    size_ += computeStringSize(9, self.voucherCount);
  }
  if (self.hasTicketCount) {
    size_ += computeStringSize(10, self.ticketCount);
  }
  if (self.hasCardCount) {
    size_ += computeStringSize(11, self.cardCount);
  }
  if (self.hasAccStatus) {
    size_ += computeStringSize(12, self.accStatus);
  }
  if (self.hasTotalFee) {
    size_ += computeStringSize(13, self.totalFee);
  }
  if (self.hasCashCreditUrl) {
    size_ += computeStringSize(14, self.cashCreditUrl);
  }
  if (self.hasKyhFrozenStatus) {
    size_ += computeStringSize(15, self.kyhFrozenStatus);
  }
  if (self.hasIsShowPreQuotaAmt) {
    size_ += computeStringSize(16, self.isShowPreQuotaAmt);
  }
  if (self.hasPreFcsAmt) {
    size_ += computeStringSize(17, self.preFcsAmt);
  }
  if (self.hasPreFcsUrl) {
    size_ += computeStringSize(18, self.preFcsUrl);
  }
  if (self.hasInterestsBackBalance) {
    size_ += computeStringSize(19, self.interestsBackBalance);
  }
  if (self.hasLeftFcsCreditAmt) {
    size_ += computeStringSize(20, self.leftFcsCreditAmt);
  }
  if (self.hasIsShowCashInstallment) {
    size_ += computeStringSize(21, self.isShowCashInstallment);
  }
  if (self.hasQuotaShowType) {
    size_ += computeStringSize(22, self.quotaShowType);
  }
  if (self.hasCashCreditAmtStatus) {
    size_ += computeStringSize(23, self.cashCreditAmtStatus);
  }
  if (self.hasLeftCreditAmtName) {
    size_ += computeStringSize(24, self.leftCreditAmtName);
  }
  if (self.hasLeftCashCreditAmtName) {
    size_ += computeStringSize(25, self.leftCashCreditAmtName);
  }
  if (self.hasLeftFcsCreditName) {
    size_ += computeStringSize(26, self.leftFcsCreditName);
  }
  if (self.hasBankCardCount) {
    size_ += computeStringSize(27, self.bankCardCount);
  }
  if (self.hasKyhFrozenUrl) {
    size_ += computeStringSize(28, self.kyhFrozenUrl);
  }
  if (self.hasMsxfOverdueInd) {
    size_ += computeStringSize(29, self.msxfOverdueInd);
  }
  if (self.hasMsxfApplyStatus) {
    size_ += computeStringSize(30, self.msxfApplyStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentSummarizeInfo*) parseFromData:(NSData*) data {
  return (ContentSummarizeInfo*)[[[ContentSummarizeInfo builder] mergeFromData:data] build];
}
+ (ContentSummarizeInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSummarizeInfo*)[[[ContentSummarizeInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentSummarizeInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentSummarizeInfo*)[[[ContentSummarizeInfo builder] mergeFromInputStream:input] build];
}
+ (ContentSummarizeInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSummarizeInfo*)[[[ContentSummarizeInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentSummarizeInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentSummarizeInfo*)[[[ContentSummarizeInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentSummarizeInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSummarizeInfo*)[[[ContentSummarizeInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentSummarizeInfoBuilder*) builder {
  return [[ContentSummarizeInfoBuilder alloc] init];
}
+ (ContentSummarizeInfoBuilder*) builderWithPrototype:(ContentSummarizeInfo*) prototype {
  return [[ContentSummarizeInfo builder] mergeFrom:prototype];
}
- (ContentSummarizeInfoBuilder*) builder {
  return [ContentSummarizeInfo builder];
}
- (ContentSummarizeInfoBuilder*) toBuilder {
  return [ContentSummarizeInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMemAcctcodeBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memAcctcodeBalance", self.memAcctcodeBalance];
  }
  if (self.hasFpdBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fpdBalance", self.fpdBalance];
  }
  if (self.hasTotalAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalAmt", self.totalAmt];
  }
  if (self.hasTotalAssets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalAssets", self.totalAssets];
  }
  if (self.hasKyhStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kyhStatus", self.kyhStatus];
  }
  if (self.hasAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amt", self.amt];
  }
  if (self.hasFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fee", self.fee];
  }
  if (self.hasLeftCashCreditAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftCashCreditAmt", self.leftCashCreditAmt];
  }
  if (self.hasVoucherCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherCount", self.voucherCount];
  }
  if (self.hasTicketCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ticketCount", self.ticketCount];
  }
  if (self.hasCardCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardCount", self.cardCount];
  }
  if (self.hasAccStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accStatus", self.accStatus];
  }
  if (self.hasTotalFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalFee", self.totalFee];
  }
  if (self.hasCashCreditUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashCreditUrl", self.cashCreditUrl];
  }
  if (self.hasKyhFrozenStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kyhFrozenStatus", self.kyhFrozenStatus];
  }
  if (self.hasIsShowPreQuotaAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isShowPreQuotaAmt", self.isShowPreQuotaAmt];
  }
  if (self.hasPreFcsAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preFcsAmt", self.preFcsAmt];
  }
  if (self.hasPreFcsUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preFcsUrl", self.preFcsUrl];
  }
  if (self.hasInterestsBackBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"interestsBackBalance", self.interestsBackBalance];
  }
  if (self.hasLeftFcsCreditAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftFcsCreditAmt", self.leftFcsCreditAmt];
  }
  if (self.hasIsShowCashInstallment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isShowCashInstallment", self.isShowCashInstallment];
  }
  if (self.hasQuotaShowType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"quotaShowType", self.quotaShowType];
  }
  if (self.hasCashCreditAmtStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashCreditAmtStatus", self.cashCreditAmtStatus];
  }
  if (self.hasLeftCreditAmtName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftCreditAmtName", self.leftCreditAmtName];
  }
  if (self.hasLeftCashCreditAmtName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftCashCreditAmtName", self.leftCashCreditAmtName];
  }
  if (self.hasLeftFcsCreditName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftFcsCreditName", self.leftFcsCreditName];
  }
  if (self.hasBankCardCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankCardCount", self.bankCardCount];
  }
  if (self.hasKyhFrozenUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kyhFrozenUrl", self.kyhFrozenUrl];
  }
  if (self.hasMsxfOverdueInd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msxfOverdueInd", self.msxfOverdueInd];
  }
  if (self.hasMsxfApplyStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msxfApplyStatus", self.msxfApplyStatus];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMemAcctcodeBalance) {
    [dictionary setObject: self.memAcctcodeBalance forKey: @"memAcctcodeBalance"];
  }
  if (self.hasFpdBalance) {
    [dictionary setObject: self.fpdBalance forKey: @"fpdBalance"];
  }
  if (self.hasTotalAmt) {
    [dictionary setObject: self.totalAmt forKey: @"totalAmt"];
  }
  if (self.hasTotalAssets) {
    [dictionary setObject: self.totalAssets forKey: @"totalAssets"];
  }
  if (self.hasKyhStatus) {
    [dictionary setObject: self.kyhStatus forKey: @"kyhStatus"];
  }
  if (self.hasAmt) {
    [dictionary setObject: self.amt forKey: @"amt"];
  }
  if (self.hasFee) {
    [dictionary setObject: self.fee forKey: @"fee"];
  }
  if (self.hasLeftCashCreditAmt) {
    [dictionary setObject: self.leftCashCreditAmt forKey: @"leftCashCreditAmt"];
  }
  if (self.hasVoucherCount) {
    [dictionary setObject: self.voucherCount forKey: @"voucherCount"];
  }
  if (self.hasTicketCount) {
    [dictionary setObject: self.ticketCount forKey: @"ticketCount"];
  }
  if (self.hasCardCount) {
    [dictionary setObject: self.cardCount forKey: @"cardCount"];
  }
  if (self.hasAccStatus) {
    [dictionary setObject: self.accStatus forKey: @"accStatus"];
  }
  if (self.hasTotalFee) {
    [dictionary setObject: self.totalFee forKey: @"totalFee"];
  }
  if (self.hasCashCreditUrl) {
    [dictionary setObject: self.cashCreditUrl forKey: @"cashCreditUrl"];
  }
  if (self.hasKyhFrozenStatus) {
    [dictionary setObject: self.kyhFrozenStatus forKey: @"kyhFrozenStatus"];
  }
  if (self.hasIsShowPreQuotaAmt) {
    [dictionary setObject: self.isShowPreQuotaAmt forKey: @"isShowPreQuotaAmt"];
  }
  if (self.hasPreFcsAmt) {
    [dictionary setObject: self.preFcsAmt forKey: @"preFcsAmt"];
  }
  if (self.hasPreFcsUrl) {
    [dictionary setObject: self.preFcsUrl forKey: @"preFcsUrl"];
  }
  if (self.hasInterestsBackBalance) {
    [dictionary setObject: self.interestsBackBalance forKey: @"interestsBackBalance"];
  }
  if (self.hasLeftFcsCreditAmt) {
    [dictionary setObject: self.leftFcsCreditAmt forKey: @"leftFcsCreditAmt"];
  }
  if (self.hasIsShowCashInstallment) {
    [dictionary setObject: self.isShowCashInstallment forKey: @"isShowCashInstallment"];
  }
  if (self.hasQuotaShowType) {
    [dictionary setObject: self.quotaShowType forKey: @"quotaShowType"];
  }
  if (self.hasCashCreditAmtStatus) {
    [dictionary setObject: self.cashCreditAmtStatus forKey: @"cashCreditAmtStatus"];
  }
  if (self.hasLeftCreditAmtName) {
    [dictionary setObject: self.leftCreditAmtName forKey: @"leftCreditAmtName"];
  }
  if (self.hasLeftCashCreditAmtName) {
    [dictionary setObject: self.leftCashCreditAmtName forKey: @"leftCashCreditAmtName"];
  }
  if (self.hasLeftFcsCreditName) {
    [dictionary setObject: self.leftFcsCreditName forKey: @"leftFcsCreditName"];
  }
  if (self.hasBankCardCount) {
    [dictionary setObject: self.bankCardCount forKey: @"bankCardCount"];
  }
  if (self.hasKyhFrozenUrl) {
    [dictionary setObject: self.kyhFrozenUrl forKey: @"kyhFrozenUrl"];
  }
  if (self.hasMsxfOverdueInd) {
    [dictionary setObject: self.msxfOverdueInd forKey: @"msxfOverdueInd"];
  }
  if (self.hasMsxfApplyStatus) {
    [dictionary setObject: self.msxfApplyStatus forKey: @"msxfApplyStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentSummarizeInfo class]]) {
    return NO;
  }
  ContentSummarizeInfo *otherMessage = other;
  return
      self.hasMemAcctcodeBalance == otherMessage.hasMemAcctcodeBalance &&
      (!self.hasMemAcctcodeBalance || [self.memAcctcodeBalance isEqual:otherMessage.memAcctcodeBalance]) &&
      self.hasFpdBalance == otherMessage.hasFpdBalance &&
      (!self.hasFpdBalance || [self.fpdBalance isEqual:otherMessage.fpdBalance]) &&
      self.hasTotalAmt == otherMessage.hasTotalAmt &&
      (!self.hasTotalAmt || [self.totalAmt isEqual:otherMessage.totalAmt]) &&
      self.hasTotalAssets == otherMessage.hasTotalAssets &&
      (!self.hasTotalAssets || [self.totalAssets isEqual:otherMessage.totalAssets]) &&
      self.hasKyhStatus == otherMessage.hasKyhStatus &&
      (!self.hasKyhStatus || [self.kyhStatus isEqual:otherMessage.kyhStatus]) &&
      self.hasAmt == otherMessage.hasAmt &&
      (!self.hasAmt || [self.amt isEqual:otherMessage.amt]) &&
      self.hasFee == otherMessage.hasFee &&
      (!self.hasFee || [self.fee isEqual:otherMessage.fee]) &&
      self.hasLeftCashCreditAmt == otherMessage.hasLeftCashCreditAmt &&
      (!self.hasLeftCashCreditAmt || [self.leftCashCreditAmt isEqual:otherMessage.leftCashCreditAmt]) &&
      self.hasVoucherCount == otherMessage.hasVoucherCount &&
      (!self.hasVoucherCount || [self.voucherCount isEqual:otherMessage.voucherCount]) &&
      self.hasTicketCount == otherMessage.hasTicketCount &&
      (!self.hasTicketCount || [self.ticketCount isEqual:otherMessage.ticketCount]) &&
      self.hasCardCount == otherMessage.hasCardCount &&
      (!self.hasCardCount || [self.cardCount isEqual:otherMessage.cardCount]) &&
      self.hasAccStatus == otherMessage.hasAccStatus &&
      (!self.hasAccStatus || [self.accStatus isEqual:otherMessage.accStatus]) &&
      self.hasTotalFee == otherMessage.hasTotalFee &&
      (!self.hasTotalFee || [self.totalFee isEqual:otherMessage.totalFee]) &&
      self.hasCashCreditUrl == otherMessage.hasCashCreditUrl &&
      (!self.hasCashCreditUrl || [self.cashCreditUrl isEqual:otherMessage.cashCreditUrl]) &&
      self.hasKyhFrozenStatus == otherMessage.hasKyhFrozenStatus &&
      (!self.hasKyhFrozenStatus || [self.kyhFrozenStatus isEqual:otherMessage.kyhFrozenStatus]) &&
      self.hasIsShowPreQuotaAmt == otherMessage.hasIsShowPreQuotaAmt &&
      (!self.hasIsShowPreQuotaAmt || [self.isShowPreQuotaAmt isEqual:otherMessage.isShowPreQuotaAmt]) &&
      self.hasPreFcsAmt == otherMessage.hasPreFcsAmt &&
      (!self.hasPreFcsAmt || [self.preFcsAmt isEqual:otherMessage.preFcsAmt]) &&
      self.hasPreFcsUrl == otherMessage.hasPreFcsUrl &&
      (!self.hasPreFcsUrl || [self.preFcsUrl isEqual:otherMessage.preFcsUrl]) &&
      self.hasInterestsBackBalance == otherMessage.hasInterestsBackBalance &&
      (!self.hasInterestsBackBalance || [self.interestsBackBalance isEqual:otherMessage.interestsBackBalance]) &&
      self.hasLeftFcsCreditAmt == otherMessage.hasLeftFcsCreditAmt &&
      (!self.hasLeftFcsCreditAmt || [self.leftFcsCreditAmt isEqual:otherMessage.leftFcsCreditAmt]) &&
      self.hasIsShowCashInstallment == otherMessage.hasIsShowCashInstallment &&
      (!self.hasIsShowCashInstallment || [self.isShowCashInstallment isEqual:otherMessage.isShowCashInstallment]) &&
      self.hasQuotaShowType == otherMessage.hasQuotaShowType &&
      (!self.hasQuotaShowType || [self.quotaShowType isEqual:otherMessage.quotaShowType]) &&
      self.hasCashCreditAmtStatus == otherMessage.hasCashCreditAmtStatus &&
      (!self.hasCashCreditAmtStatus || [self.cashCreditAmtStatus isEqual:otherMessage.cashCreditAmtStatus]) &&
      self.hasLeftCreditAmtName == otherMessage.hasLeftCreditAmtName &&
      (!self.hasLeftCreditAmtName || [self.leftCreditAmtName isEqual:otherMessage.leftCreditAmtName]) &&
      self.hasLeftCashCreditAmtName == otherMessage.hasLeftCashCreditAmtName &&
      (!self.hasLeftCashCreditAmtName || [self.leftCashCreditAmtName isEqual:otherMessage.leftCashCreditAmtName]) &&
      self.hasLeftFcsCreditName == otherMessage.hasLeftFcsCreditName &&
      (!self.hasLeftFcsCreditName || [self.leftFcsCreditName isEqual:otherMessage.leftFcsCreditName]) &&
      self.hasBankCardCount == otherMessage.hasBankCardCount &&
      (!self.hasBankCardCount || [self.bankCardCount isEqual:otherMessage.bankCardCount]) &&
      self.hasKyhFrozenUrl == otherMessage.hasKyhFrozenUrl &&
      (!self.hasKyhFrozenUrl || [self.kyhFrozenUrl isEqual:otherMessage.kyhFrozenUrl]) &&
      self.hasMsxfOverdueInd == otherMessage.hasMsxfOverdueInd &&
      (!self.hasMsxfOverdueInd || [self.msxfOverdueInd isEqual:otherMessage.msxfOverdueInd]) &&
      self.hasMsxfApplyStatus == otherMessage.hasMsxfApplyStatus &&
      (!self.hasMsxfApplyStatus || [self.msxfApplyStatus isEqual:otherMessage.msxfApplyStatus]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMemAcctcodeBalance) {
    hashCode = hashCode * 31 + [self.memAcctcodeBalance hash];
  }
  if (self.hasFpdBalance) {
    hashCode = hashCode * 31 + [self.fpdBalance hash];
  }
  if (self.hasTotalAmt) {
    hashCode = hashCode * 31 + [self.totalAmt hash];
  }
  if (self.hasTotalAssets) {
    hashCode = hashCode * 31 + [self.totalAssets hash];
  }
  if (self.hasKyhStatus) {
    hashCode = hashCode * 31 + [self.kyhStatus hash];
  }
  if (self.hasAmt) {
    hashCode = hashCode * 31 + [self.amt hash];
  }
  if (self.hasFee) {
    hashCode = hashCode * 31 + [self.fee hash];
  }
  if (self.hasLeftCashCreditAmt) {
    hashCode = hashCode * 31 + [self.leftCashCreditAmt hash];
  }
  if (self.hasVoucherCount) {
    hashCode = hashCode * 31 + [self.voucherCount hash];
  }
  if (self.hasTicketCount) {
    hashCode = hashCode * 31 + [self.ticketCount hash];
  }
  if (self.hasCardCount) {
    hashCode = hashCode * 31 + [self.cardCount hash];
  }
  if (self.hasAccStatus) {
    hashCode = hashCode * 31 + [self.accStatus hash];
  }
  if (self.hasTotalFee) {
    hashCode = hashCode * 31 + [self.totalFee hash];
  }
  if (self.hasCashCreditUrl) {
    hashCode = hashCode * 31 + [self.cashCreditUrl hash];
  }
  if (self.hasKyhFrozenStatus) {
    hashCode = hashCode * 31 + [self.kyhFrozenStatus hash];
  }
  if (self.hasIsShowPreQuotaAmt) {
    hashCode = hashCode * 31 + [self.isShowPreQuotaAmt hash];
  }
  if (self.hasPreFcsAmt) {
    hashCode = hashCode * 31 + [self.preFcsAmt hash];
  }
  if (self.hasPreFcsUrl) {
    hashCode = hashCode * 31 + [self.preFcsUrl hash];
  }
  if (self.hasInterestsBackBalance) {
    hashCode = hashCode * 31 + [self.interestsBackBalance hash];
  }
  if (self.hasLeftFcsCreditAmt) {
    hashCode = hashCode * 31 + [self.leftFcsCreditAmt hash];
  }
  if (self.hasIsShowCashInstallment) {
    hashCode = hashCode * 31 + [self.isShowCashInstallment hash];
  }
  if (self.hasQuotaShowType) {
    hashCode = hashCode * 31 + [self.quotaShowType hash];
  }
  if (self.hasCashCreditAmtStatus) {
    hashCode = hashCode * 31 + [self.cashCreditAmtStatus hash];
  }
  if (self.hasLeftCreditAmtName) {
    hashCode = hashCode * 31 + [self.leftCreditAmtName hash];
  }
  if (self.hasLeftCashCreditAmtName) {
    hashCode = hashCode * 31 + [self.leftCashCreditAmtName hash];
  }
  if (self.hasLeftFcsCreditName) {
    hashCode = hashCode * 31 + [self.leftFcsCreditName hash];
  }
  if (self.hasBankCardCount) {
    hashCode = hashCode * 31 + [self.bankCardCount hash];
  }
  if (self.hasKyhFrozenUrl) {
    hashCode = hashCode * 31 + [self.kyhFrozenUrl hash];
  }
  if (self.hasMsxfOverdueInd) {
    hashCode = hashCode * 31 + [self.msxfOverdueInd hash];
  }
  if (self.hasMsxfApplyStatus) {
    hashCode = hashCode * 31 + [self.msxfApplyStatus hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentSummarizeInfoBuilder()
@property (strong) ContentSummarizeInfo* resultSummarizeInfo;
@end

@implementation ContentSummarizeInfoBuilder
@synthesize resultSummarizeInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSummarizeInfo = [[ContentSummarizeInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSummarizeInfo;
}
- (ContentSummarizeInfoBuilder*) clear {
  self.resultSummarizeInfo = [[ContentSummarizeInfo alloc] init];
  return self;
}
- (ContentSummarizeInfoBuilder*) clone {
  return [ContentSummarizeInfo builderWithPrototype:resultSummarizeInfo];
}
- (ContentSummarizeInfo*) defaultInstance {
  return [ContentSummarizeInfo defaultInstance];
}
- (ContentSummarizeInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentSummarizeInfo*) buildPartial {
  ContentSummarizeInfo* returnMe = resultSummarizeInfo;
  self.resultSummarizeInfo = nil;
  return returnMe;
}
- (ContentSummarizeInfoBuilder*) mergeFrom:(ContentSummarizeInfo*) other {
  if (other == [ContentSummarizeInfo defaultInstance]) {
    return self;
  }
  if (other.hasMemAcctcodeBalance) {
    [self setMemAcctcodeBalance:other.memAcctcodeBalance];
  }
  if (other.hasFpdBalance) {
    [self setFpdBalance:other.fpdBalance];
  }
  if (other.hasTotalAmt) {
    [self setTotalAmt:other.totalAmt];
  }
  if (other.hasTotalAssets) {
    [self setTotalAssets:other.totalAssets];
  }
  if (other.hasKyhStatus) {
    [self setKyhStatus:other.kyhStatus];
  }
  if (other.hasAmt) {
    [self setAmt:other.amt];
  }
  if (other.hasFee) {
    [self setFee:other.fee];
  }
  if (other.hasLeftCashCreditAmt) {
    [self setLeftCashCreditAmt:other.leftCashCreditAmt];
  }
  if (other.hasVoucherCount) {
    [self setVoucherCount:other.voucherCount];
  }
  if (other.hasTicketCount) {
    [self setTicketCount:other.ticketCount];
  }
  if (other.hasCardCount) {
    [self setCardCount:other.cardCount];
  }
  if (other.hasAccStatus) {
    [self setAccStatus:other.accStatus];
  }
  if (other.hasTotalFee) {
    [self setTotalFee:other.totalFee];
  }
  if (other.hasCashCreditUrl) {
    [self setCashCreditUrl:other.cashCreditUrl];
  }
  if (other.hasKyhFrozenStatus) {
    [self setKyhFrozenStatus:other.kyhFrozenStatus];
  }
  if (other.hasIsShowPreQuotaAmt) {
    [self setIsShowPreQuotaAmt:other.isShowPreQuotaAmt];
  }
  if (other.hasPreFcsAmt) {
    [self setPreFcsAmt:other.preFcsAmt];
  }
  if (other.hasPreFcsUrl) {
    [self setPreFcsUrl:other.preFcsUrl];
  }
  if (other.hasInterestsBackBalance) {
    [self setInterestsBackBalance:other.interestsBackBalance];
  }
  if (other.hasLeftFcsCreditAmt) {
    [self setLeftFcsCreditAmt:other.leftFcsCreditAmt];
  }
  if (other.hasIsShowCashInstallment) {
    [self setIsShowCashInstallment:other.isShowCashInstallment];
  }
  if (other.hasQuotaShowType) {
    [self setQuotaShowType:other.quotaShowType];
  }
  if (other.hasCashCreditAmtStatus) {
    [self setCashCreditAmtStatus:other.cashCreditAmtStatus];
  }
  if (other.hasLeftCreditAmtName) {
    [self setLeftCreditAmtName:other.leftCreditAmtName];
  }
  if (other.hasLeftCashCreditAmtName) {
    [self setLeftCashCreditAmtName:other.leftCashCreditAmtName];
  }
  if (other.hasLeftFcsCreditName) {
    [self setLeftFcsCreditName:other.leftFcsCreditName];
  }
  if (other.hasBankCardCount) {
    [self setBankCardCount:other.bankCardCount];
  }
  if (other.hasKyhFrozenUrl) {
    [self setKyhFrozenUrl:other.kyhFrozenUrl];
  }
  if (other.hasMsxfOverdueInd) {
    [self setMsxfOverdueInd:other.msxfOverdueInd];
  }
  if (other.hasMsxfApplyStatus) {
    [self setMsxfApplyStatus:other.msxfApplyStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentSummarizeInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentSummarizeInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMemAcctcodeBalance:[input readString]];
        break;
      }
      case 18: {
        [self setFpdBalance:[input readString]];
        break;
      }
      case 26: {
        [self setTotalAmt:[input readString]];
        break;
      }
      case 34: {
        [self setTotalAssets:[input readString]];
        break;
      }
      case 42: {
        [self setKyhStatus:[input readString]];
        break;
      }
      case 50: {
        [self setAmt:[input readString]];
        break;
      }
      case 58: {
        [self setFee:[input readString]];
        break;
      }
      case 66: {
        [self setLeftCashCreditAmt:[input readString]];
        break;
      }
      case 74: {
        [self setVoucherCount:[input readString]];
        break;
      }
      case 82: {
        [self setTicketCount:[input readString]];
        break;
      }
      case 90: {
        [self setCardCount:[input readString]];
        break;
      }
      case 98: {
        [self setAccStatus:[input readString]];
        break;
      }
      case 106: {
        [self setTotalFee:[input readString]];
        break;
      }
      case 114: {
        [self setCashCreditUrl:[input readString]];
        break;
      }
      case 122: {
        [self setKyhFrozenStatus:[input readString]];
        break;
      }
      case 130: {
        [self setIsShowPreQuotaAmt:[input readString]];
        break;
      }
      case 138: {
        [self setPreFcsAmt:[input readString]];
        break;
      }
      case 146: {
        [self setPreFcsUrl:[input readString]];
        break;
      }
      case 154: {
        [self setInterestsBackBalance:[input readString]];
        break;
      }
      case 162: {
        [self setLeftFcsCreditAmt:[input readString]];
        break;
      }
      case 170: {
        [self setIsShowCashInstallment:[input readString]];
        break;
      }
      case 178: {
        [self setQuotaShowType:[input readString]];
        break;
      }
      case 186: {
        [self setCashCreditAmtStatus:[input readString]];
        break;
      }
      case 194: {
        [self setLeftCreditAmtName:[input readString]];
        break;
      }
      case 202: {
        [self setLeftCashCreditAmtName:[input readString]];
        break;
      }
      case 210: {
        [self setLeftFcsCreditName:[input readString]];
        break;
      }
      case 218: {
        [self setBankCardCount:[input readString]];
        break;
      }
      case 226: {
        [self setKyhFrozenUrl:[input readString]];
        break;
      }
      case 234: {
        [self setMsxfOverdueInd:[input readString]];
        break;
      }
      case 242: {
        [self setMsxfApplyStatus:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMemAcctcodeBalance {
  return resultSummarizeInfo.hasMemAcctcodeBalance;
}
- (NSString*) memAcctcodeBalance {
  return resultSummarizeInfo.memAcctcodeBalance;
}
- (ContentSummarizeInfoBuilder*) setMemAcctcodeBalance:(NSString*) value {
  resultSummarizeInfo.hasMemAcctcodeBalance = YES;
  resultSummarizeInfo.memAcctcodeBalance = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearMemAcctcodeBalance {
  resultSummarizeInfo.hasMemAcctcodeBalance = NO;
  resultSummarizeInfo.memAcctcodeBalance = @"";
  return self;
}
- (BOOL) hasFpdBalance {
  return resultSummarizeInfo.hasFpdBalance;
}
- (NSString*) fpdBalance {
  return resultSummarizeInfo.fpdBalance;
}
- (ContentSummarizeInfoBuilder*) setFpdBalance:(NSString*) value {
  resultSummarizeInfo.hasFpdBalance = YES;
  resultSummarizeInfo.fpdBalance = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearFpdBalance {
  resultSummarizeInfo.hasFpdBalance = NO;
  resultSummarizeInfo.fpdBalance = @"";
  return self;
}
- (BOOL) hasTotalAmt {
  return resultSummarizeInfo.hasTotalAmt;
}
- (NSString*) totalAmt {
  return resultSummarizeInfo.totalAmt;
}
- (ContentSummarizeInfoBuilder*) setTotalAmt:(NSString*) value {
  resultSummarizeInfo.hasTotalAmt = YES;
  resultSummarizeInfo.totalAmt = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearTotalAmt {
  resultSummarizeInfo.hasTotalAmt = NO;
  resultSummarizeInfo.totalAmt = @"";
  return self;
}
- (BOOL) hasTotalAssets {
  return resultSummarizeInfo.hasTotalAssets;
}
- (NSString*) totalAssets {
  return resultSummarizeInfo.totalAssets;
}
- (ContentSummarizeInfoBuilder*) setTotalAssets:(NSString*) value {
  resultSummarizeInfo.hasTotalAssets = YES;
  resultSummarizeInfo.totalAssets = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearTotalAssets {
  resultSummarizeInfo.hasTotalAssets = NO;
  resultSummarizeInfo.totalAssets = @"";
  return self;
}
- (BOOL) hasKyhStatus {
  return resultSummarizeInfo.hasKyhStatus;
}
- (NSString*) kyhStatus {
  return resultSummarizeInfo.kyhStatus;
}
- (ContentSummarizeInfoBuilder*) setKyhStatus:(NSString*) value {
  resultSummarizeInfo.hasKyhStatus = YES;
  resultSummarizeInfo.kyhStatus = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearKyhStatus {
  resultSummarizeInfo.hasKyhStatus = NO;
  resultSummarizeInfo.kyhStatus = @"";
  return self;
}
- (BOOL) hasAmt {
  return resultSummarizeInfo.hasAmt;
}
- (NSString*) amt {
  return resultSummarizeInfo.amt;
}
- (ContentSummarizeInfoBuilder*) setAmt:(NSString*) value {
  resultSummarizeInfo.hasAmt = YES;
  resultSummarizeInfo.amt = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearAmt {
  resultSummarizeInfo.hasAmt = NO;
  resultSummarizeInfo.amt = @"";
  return self;
}
- (BOOL) hasFee {
  return resultSummarizeInfo.hasFee;
}
- (NSString*) fee {
  return resultSummarizeInfo.fee;
}
- (ContentSummarizeInfoBuilder*) setFee:(NSString*) value {
  resultSummarizeInfo.hasFee = YES;
  resultSummarizeInfo.fee = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearFee {
  resultSummarizeInfo.hasFee = NO;
  resultSummarizeInfo.fee = @"";
  return self;
}
- (BOOL) hasLeftCashCreditAmt {
  return resultSummarizeInfo.hasLeftCashCreditAmt;
}
- (NSString*) leftCashCreditAmt {
  return resultSummarizeInfo.leftCashCreditAmt;
}
- (ContentSummarizeInfoBuilder*) setLeftCashCreditAmt:(NSString*) value {
  resultSummarizeInfo.hasLeftCashCreditAmt = YES;
  resultSummarizeInfo.leftCashCreditAmt = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearLeftCashCreditAmt {
  resultSummarizeInfo.hasLeftCashCreditAmt = NO;
  resultSummarizeInfo.leftCashCreditAmt = @"";
  return self;
}
- (BOOL) hasVoucherCount {
  return resultSummarizeInfo.hasVoucherCount;
}
- (NSString*) voucherCount {
  return resultSummarizeInfo.voucherCount;
}
- (ContentSummarizeInfoBuilder*) setVoucherCount:(NSString*) value {
  resultSummarizeInfo.hasVoucherCount = YES;
  resultSummarizeInfo.voucherCount = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearVoucherCount {
  resultSummarizeInfo.hasVoucherCount = NO;
  resultSummarizeInfo.voucherCount = @"";
  return self;
}
- (BOOL) hasTicketCount {
  return resultSummarizeInfo.hasTicketCount;
}
- (NSString*) ticketCount {
  return resultSummarizeInfo.ticketCount;
}
- (ContentSummarizeInfoBuilder*) setTicketCount:(NSString*) value {
  resultSummarizeInfo.hasTicketCount = YES;
  resultSummarizeInfo.ticketCount = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearTicketCount {
  resultSummarizeInfo.hasTicketCount = NO;
  resultSummarizeInfo.ticketCount = @"";
  return self;
}
- (BOOL) hasCardCount {
  return resultSummarizeInfo.hasCardCount;
}
- (NSString*) cardCount {
  return resultSummarizeInfo.cardCount;
}
- (ContentSummarizeInfoBuilder*) setCardCount:(NSString*) value {
  resultSummarizeInfo.hasCardCount = YES;
  resultSummarizeInfo.cardCount = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearCardCount {
  resultSummarizeInfo.hasCardCount = NO;
  resultSummarizeInfo.cardCount = @"";
  return self;
}
- (BOOL) hasAccStatus {
  return resultSummarizeInfo.hasAccStatus;
}
- (NSString*) accStatus {
  return resultSummarizeInfo.accStatus;
}
- (ContentSummarizeInfoBuilder*) setAccStatus:(NSString*) value {
  resultSummarizeInfo.hasAccStatus = YES;
  resultSummarizeInfo.accStatus = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearAccStatus {
  resultSummarizeInfo.hasAccStatus = NO;
  resultSummarizeInfo.accStatus = @"";
  return self;
}
- (BOOL) hasTotalFee {
  return resultSummarizeInfo.hasTotalFee;
}
- (NSString*) totalFee {
  return resultSummarizeInfo.totalFee;
}
- (ContentSummarizeInfoBuilder*) setTotalFee:(NSString*) value {
  resultSummarizeInfo.hasTotalFee = YES;
  resultSummarizeInfo.totalFee = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearTotalFee {
  resultSummarizeInfo.hasTotalFee = NO;
  resultSummarizeInfo.totalFee = @"";
  return self;
}
- (BOOL) hasCashCreditUrl {
  return resultSummarizeInfo.hasCashCreditUrl;
}
- (NSString*) cashCreditUrl {
  return resultSummarizeInfo.cashCreditUrl;
}
- (ContentSummarizeInfoBuilder*) setCashCreditUrl:(NSString*) value {
  resultSummarizeInfo.hasCashCreditUrl = YES;
  resultSummarizeInfo.cashCreditUrl = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearCashCreditUrl {
  resultSummarizeInfo.hasCashCreditUrl = NO;
  resultSummarizeInfo.cashCreditUrl = @"";
  return self;
}
- (BOOL) hasKyhFrozenStatus {
  return resultSummarizeInfo.hasKyhFrozenStatus;
}
- (NSString*) kyhFrozenStatus {
  return resultSummarizeInfo.kyhFrozenStatus;
}
- (ContentSummarizeInfoBuilder*) setKyhFrozenStatus:(NSString*) value {
  resultSummarizeInfo.hasKyhFrozenStatus = YES;
  resultSummarizeInfo.kyhFrozenStatus = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearKyhFrozenStatus {
  resultSummarizeInfo.hasKyhFrozenStatus = NO;
  resultSummarizeInfo.kyhFrozenStatus = @"";
  return self;
}
- (BOOL) hasIsShowPreQuotaAmt {
  return resultSummarizeInfo.hasIsShowPreQuotaAmt;
}
- (NSString*) isShowPreQuotaAmt {
  return resultSummarizeInfo.isShowPreQuotaAmt;
}
- (ContentSummarizeInfoBuilder*) setIsShowPreQuotaAmt:(NSString*) value {
  resultSummarizeInfo.hasIsShowPreQuotaAmt = YES;
  resultSummarizeInfo.isShowPreQuotaAmt = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearIsShowPreQuotaAmt {
  resultSummarizeInfo.hasIsShowPreQuotaAmt = NO;
  resultSummarizeInfo.isShowPreQuotaAmt = @"";
  return self;
}
- (BOOL) hasPreFcsAmt {
  return resultSummarizeInfo.hasPreFcsAmt;
}
- (NSString*) preFcsAmt {
  return resultSummarizeInfo.preFcsAmt;
}
- (ContentSummarizeInfoBuilder*) setPreFcsAmt:(NSString*) value {
  resultSummarizeInfo.hasPreFcsAmt = YES;
  resultSummarizeInfo.preFcsAmt = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearPreFcsAmt {
  resultSummarizeInfo.hasPreFcsAmt = NO;
  resultSummarizeInfo.preFcsAmt = @"";
  return self;
}
- (BOOL) hasPreFcsUrl {
  return resultSummarizeInfo.hasPreFcsUrl;
}
- (NSString*) preFcsUrl {
  return resultSummarizeInfo.preFcsUrl;
}
- (ContentSummarizeInfoBuilder*) setPreFcsUrl:(NSString*) value {
  resultSummarizeInfo.hasPreFcsUrl = YES;
  resultSummarizeInfo.preFcsUrl = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearPreFcsUrl {
  resultSummarizeInfo.hasPreFcsUrl = NO;
  resultSummarizeInfo.preFcsUrl = @"";
  return self;
}
- (BOOL) hasInterestsBackBalance {
  return resultSummarizeInfo.hasInterestsBackBalance;
}
- (NSString*) interestsBackBalance {
  return resultSummarizeInfo.interestsBackBalance;
}
- (ContentSummarizeInfoBuilder*) setInterestsBackBalance:(NSString*) value {
  resultSummarizeInfo.hasInterestsBackBalance = YES;
  resultSummarizeInfo.interestsBackBalance = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearInterestsBackBalance {
  resultSummarizeInfo.hasInterestsBackBalance = NO;
  resultSummarizeInfo.interestsBackBalance = @"";
  return self;
}
- (BOOL) hasLeftFcsCreditAmt {
  return resultSummarizeInfo.hasLeftFcsCreditAmt;
}
- (NSString*) leftFcsCreditAmt {
  return resultSummarizeInfo.leftFcsCreditAmt;
}
- (ContentSummarizeInfoBuilder*) setLeftFcsCreditAmt:(NSString*) value {
  resultSummarizeInfo.hasLeftFcsCreditAmt = YES;
  resultSummarizeInfo.leftFcsCreditAmt = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearLeftFcsCreditAmt {
  resultSummarizeInfo.hasLeftFcsCreditAmt = NO;
  resultSummarizeInfo.leftFcsCreditAmt = @"";
  return self;
}
- (BOOL) hasIsShowCashInstallment {
  return resultSummarizeInfo.hasIsShowCashInstallment;
}
- (NSString*) isShowCashInstallment {
  return resultSummarizeInfo.isShowCashInstallment;
}
- (ContentSummarizeInfoBuilder*) setIsShowCashInstallment:(NSString*) value {
  resultSummarizeInfo.hasIsShowCashInstallment = YES;
  resultSummarizeInfo.isShowCashInstallment = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearIsShowCashInstallment {
  resultSummarizeInfo.hasIsShowCashInstallment = NO;
  resultSummarizeInfo.isShowCashInstallment = @"";
  return self;
}
- (BOOL) hasQuotaShowType {
  return resultSummarizeInfo.hasQuotaShowType;
}
- (NSString*) quotaShowType {
  return resultSummarizeInfo.quotaShowType;
}
- (ContentSummarizeInfoBuilder*) setQuotaShowType:(NSString*) value {
  resultSummarizeInfo.hasQuotaShowType = YES;
  resultSummarizeInfo.quotaShowType = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearQuotaShowType {
  resultSummarizeInfo.hasQuotaShowType = NO;
  resultSummarizeInfo.quotaShowType = @"";
  return self;
}
- (BOOL) hasCashCreditAmtStatus {
  return resultSummarizeInfo.hasCashCreditAmtStatus;
}
- (NSString*) cashCreditAmtStatus {
  return resultSummarizeInfo.cashCreditAmtStatus;
}
- (ContentSummarizeInfoBuilder*) setCashCreditAmtStatus:(NSString*) value {
  resultSummarizeInfo.hasCashCreditAmtStatus = YES;
  resultSummarizeInfo.cashCreditAmtStatus = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearCashCreditAmtStatus {
  resultSummarizeInfo.hasCashCreditAmtStatus = NO;
  resultSummarizeInfo.cashCreditAmtStatus = @"";
  return self;
}
- (BOOL) hasLeftCreditAmtName {
  return resultSummarizeInfo.hasLeftCreditAmtName;
}
- (NSString*) leftCreditAmtName {
  return resultSummarizeInfo.leftCreditAmtName;
}
- (ContentSummarizeInfoBuilder*) setLeftCreditAmtName:(NSString*) value {
  resultSummarizeInfo.hasLeftCreditAmtName = YES;
  resultSummarizeInfo.leftCreditAmtName = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearLeftCreditAmtName {
  resultSummarizeInfo.hasLeftCreditAmtName = NO;
  resultSummarizeInfo.leftCreditAmtName = @"";
  return self;
}
- (BOOL) hasLeftCashCreditAmtName {
  return resultSummarizeInfo.hasLeftCashCreditAmtName;
}
- (NSString*) leftCashCreditAmtName {
  return resultSummarizeInfo.leftCashCreditAmtName;
}
- (ContentSummarizeInfoBuilder*) setLeftCashCreditAmtName:(NSString*) value {
  resultSummarizeInfo.hasLeftCashCreditAmtName = YES;
  resultSummarizeInfo.leftCashCreditAmtName = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearLeftCashCreditAmtName {
  resultSummarizeInfo.hasLeftCashCreditAmtName = NO;
  resultSummarizeInfo.leftCashCreditAmtName = @"";
  return self;
}
- (BOOL) hasLeftFcsCreditName {
  return resultSummarizeInfo.hasLeftFcsCreditName;
}
- (NSString*) leftFcsCreditName {
  return resultSummarizeInfo.leftFcsCreditName;
}
- (ContentSummarizeInfoBuilder*) setLeftFcsCreditName:(NSString*) value {
  resultSummarizeInfo.hasLeftFcsCreditName = YES;
  resultSummarizeInfo.leftFcsCreditName = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearLeftFcsCreditName {
  resultSummarizeInfo.hasLeftFcsCreditName = NO;
  resultSummarizeInfo.leftFcsCreditName = @"";
  return self;
}
- (BOOL) hasBankCardCount {
  return resultSummarizeInfo.hasBankCardCount;
}
- (NSString*) bankCardCount {
  return resultSummarizeInfo.bankCardCount;
}
- (ContentSummarizeInfoBuilder*) setBankCardCount:(NSString*) value {
  resultSummarizeInfo.hasBankCardCount = YES;
  resultSummarizeInfo.bankCardCount = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearBankCardCount {
  resultSummarizeInfo.hasBankCardCount = NO;
  resultSummarizeInfo.bankCardCount = @"";
  return self;
}
- (BOOL) hasKyhFrozenUrl {
  return resultSummarizeInfo.hasKyhFrozenUrl;
}
- (NSString*) kyhFrozenUrl {
  return resultSummarizeInfo.kyhFrozenUrl;
}
- (ContentSummarizeInfoBuilder*) setKyhFrozenUrl:(NSString*) value {
  resultSummarizeInfo.hasKyhFrozenUrl = YES;
  resultSummarizeInfo.kyhFrozenUrl = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearKyhFrozenUrl {
  resultSummarizeInfo.hasKyhFrozenUrl = NO;
  resultSummarizeInfo.kyhFrozenUrl = @"";
  return self;
}
- (BOOL) hasMsxfOverdueInd {
  return resultSummarizeInfo.hasMsxfOverdueInd;
}
- (NSString*) msxfOverdueInd {
  return resultSummarizeInfo.msxfOverdueInd;
}
- (ContentSummarizeInfoBuilder*) setMsxfOverdueInd:(NSString*) value {
  resultSummarizeInfo.hasMsxfOverdueInd = YES;
  resultSummarizeInfo.msxfOverdueInd = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearMsxfOverdueInd {
  resultSummarizeInfo.hasMsxfOverdueInd = NO;
  resultSummarizeInfo.msxfOverdueInd = @"";
  return self;
}
- (BOOL) hasMsxfApplyStatus {
  return resultSummarizeInfo.hasMsxfApplyStatus;
}
- (NSString*) msxfApplyStatus {
  return resultSummarizeInfo.msxfApplyStatus;
}
- (ContentSummarizeInfoBuilder*) setMsxfApplyStatus:(NSString*) value {
  resultSummarizeInfo.hasMsxfApplyStatus = YES;
  resultSummarizeInfo.msxfApplyStatus = value;
  return self;
}
- (ContentSummarizeInfoBuilder*) clearMsxfApplyStatus {
  resultSummarizeInfo.hasMsxfApplyStatus = NO;
  resultSummarizeInfo.msxfApplyStatus = @"";
  return self;
}
@end

@interface ContentTxnInfo ()
@property (strong) NSString* merchantName;
@property (strong) NSString* amt;
@property (strong) NSString* txnTime;
@property (strong) NSString* idTxnCtrl;
@property (strong) NSString* extTraceNo;
@property (strong) NSString* txnStatus;
@property (strong) NSString* txnStatusDisplay;
@property (strong) NSString* txnTrueStatus;
@property (strong) NSString* txnType;
@property (strong) NSString* txnTypeDisplay;
@property (strong) NSString* recieveTime;
@end

@implementation ContentTxnInfo

- (BOOL) hasMerchantName {
  return !!hasMerchantName_;
}
- (void) setHasMerchantName:(BOOL) _value_ {
  hasMerchantName_ = !!_value_;
}
@synthesize merchantName;
- (BOOL) hasAmt {
  return !!hasAmt_;
}
- (void) setHasAmt:(BOOL) _value_ {
  hasAmt_ = !!_value_;
}
@synthesize amt;
- (BOOL) hasTxnTime {
  return !!hasTxnTime_;
}
- (void) setHasTxnTime:(BOOL) _value_ {
  hasTxnTime_ = !!_value_;
}
@synthesize txnTime;
- (BOOL) hasIdTxnCtrl {
  return !!hasIdTxnCtrl_;
}
- (void) setHasIdTxnCtrl:(BOOL) _value_ {
  hasIdTxnCtrl_ = !!_value_;
}
@synthesize idTxnCtrl;
- (BOOL) hasExtTraceNo {
  return !!hasExtTraceNo_;
}
- (void) setHasExtTraceNo:(BOOL) _value_ {
  hasExtTraceNo_ = !!_value_;
}
@synthesize extTraceNo;
- (BOOL) hasTxnStatus {
  return !!hasTxnStatus_;
}
- (void) setHasTxnStatus:(BOOL) _value_ {
  hasTxnStatus_ = !!_value_;
}
@synthesize txnStatus;
- (BOOL) hasTxnStatusDisplay {
  return !!hasTxnStatusDisplay_;
}
- (void) setHasTxnStatusDisplay:(BOOL) _value_ {
  hasTxnStatusDisplay_ = !!_value_;
}
@synthesize txnStatusDisplay;
- (BOOL) hasTxnTrueStatus {
  return !!hasTxnTrueStatus_;
}
- (void) setHasTxnTrueStatus:(BOOL) _value_ {
  hasTxnTrueStatus_ = !!_value_;
}
@synthesize txnTrueStatus;
- (BOOL) hasTxnType {
  return !!hasTxnType_;
}
- (void) setHasTxnType:(BOOL) _value_ {
  hasTxnType_ = !!_value_;
}
@synthesize txnType;
- (BOOL) hasTxnTypeDisplay {
  return !!hasTxnTypeDisplay_;
}
- (void) setHasTxnTypeDisplay:(BOOL) _value_ {
  hasTxnTypeDisplay_ = !!_value_;
}
@synthesize txnTypeDisplay;
- (BOOL) hasRecieveTime {
  return !!hasRecieveTime_;
}
- (void) setHasRecieveTime:(BOOL) _value_ {
  hasRecieveTime_ = !!_value_;
}
@synthesize recieveTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.merchantName = @"";
    self.amt = @"";
    self.txnTime = @"";
    self.idTxnCtrl = @"";
    self.extTraceNo = @"";
    self.txnStatus = @"";
    self.txnStatusDisplay = @"";
    self.txnTrueStatus = @"";
    self.txnType = @"";
    self.txnTypeDisplay = @"";
    self.recieveTime = @"";
  }
  return self;
}
static ContentTxnInfo* defaultContentTxnInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentTxnInfo class]) {
    defaultContentTxnInfoInstance = [[ContentTxnInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentTxnInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentTxnInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMerchantName) {
    [output writeString:1 value:self.merchantName];
  }
  if (self.hasAmt) {
    [output writeString:2 value:self.amt];
  }
  if (self.hasTxnTime) {
    [output writeString:3 value:self.txnTime];
  }
  if (self.hasIdTxnCtrl) {
    [output writeString:4 value:self.idTxnCtrl];
  }
  if (self.hasExtTraceNo) {
    [output writeString:5 value:self.extTraceNo];
  }
  if (self.hasTxnStatus) {
    [output writeString:6 value:self.txnStatus];
  }
  if (self.hasTxnStatusDisplay) {
    [output writeString:7 value:self.txnStatusDisplay];
  }
  if (self.hasTxnTrueStatus) {
    [output writeString:8 value:self.txnTrueStatus];
  }
  if (self.hasTxnType) {
    [output writeString:9 value:self.txnType];
  }
  if (self.hasTxnTypeDisplay) {
    [output writeString:10 value:self.txnTypeDisplay];
  }
  if (self.hasRecieveTime) {
    [output writeString:11 value:self.recieveTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMerchantName) {
    size_ += computeStringSize(1, self.merchantName);
  }
  if (self.hasAmt) {
    size_ += computeStringSize(2, self.amt);
  }
  if (self.hasTxnTime) {
    size_ += computeStringSize(3, self.txnTime);
  }
  if (self.hasIdTxnCtrl) {
    size_ += computeStringSize(4, self.idTxnCtrl);
  }
  if (self.hasExtTraceNo) {
    size_ += computeStringSize(5, self.extTraceNo);
  }
  if (self.hasTxnStatus) {
    size_ += computeStringSize(6, self.txnStatus);
  }
  if (self.hasTxnStatusDisplay) {
    size_ += computeStringSize(7, self.txnStatusDisplay);
  }
  if (self.hasTxnTrueStatus) {
    size_ += computeStringSize(8, self.txnTrueStatus);
  }
  if (self.hasTxnType) {
    size_ += computeStringSize(9, self.txnType);
  }
  if (self.hasTxnTypeDisplay) {
    size_ += computeStringSize(10, self.txnTypeDisplay);
  }
  if (self.hasRecieveTime) {
    size_ += computeStringSize(11, self.recieveTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentTxnInfo*) parseFromData:(NSData*) data {
  return (ContentTxnInfo*)[[[ContentTxnInfo builder] mergeFromData:data] build];
}
+ (ContentTxnInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentTxnInfo*)[[[ContentTxnInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentTxnInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentTxnInfo*)[[[ContentTxnInfo builder] mergeFromInputStream:input] build];
}
+ (ContentTxnInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentTxnInfo*)[[[ContentTxnInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentTxnInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentTxnInfo*)[[[ContentTxnInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentTxnInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentTxnInfo*)[[[ContentTxnInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentTxnInfoBuilder*) builder {
  return [[ContentTxnInfoBuilder alloc] init];
}
+ (ContentTxnInfoBuilder*) builderWithPrototype:(ContentTxnInfo*) prototype {
  return [[ContentTxnInfo builder] mergeFrom:prototype];
}
- (ContentTxnInfoBuilder*) builder {
  return [ContentTxnInfo builder];
}
- (ContentTxnInfoBuilder*) toBuilder {
  return [ContentTxnInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMerchantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantName", self.merchantName];
  }
  if (self.hasAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amt", self.amt];
  }
  if (self.hasTxnTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnTime", self.txnTime];
  }
  if (self.hasIdTxnCtrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idTxnCtrl", self.idTxnCtrl];
  }
  if (self.hasExtTraceNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extTraceNo", self.extTraceNo];
  }
  if (self.hasTxnStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnStatus", self.txnStatus];
  }
  if (self.hasTxnStatusDisplay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnStatusDisplay", self.txnStatusDisplay];
  }
  if (self.hasTxnTrueStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnTrueStatus", self.txnTrueStatus];
  }
  if (self.hasTxnType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnType", self.txnType];
  }
  if (self.hasTxnTypeDisplay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnTypeDisplay", self.txnTypeDisplay];
  }
  if (self.hasRecieveTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recieveTime", self.recieveTime];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMerchantName) {
    [dictionary setObject: self.merchantName forKey: @"merchantName"];
  }
  if (self.hasAmt) {
    [dictionary setObject: self.amt forKey: @"amt"];
  }
  if (self.hasTxnTime) {
    [dictionary setObject: self.txnTime forKey: @"txnTime"];
  }
  if (self.hasIdTxnCtrl) {
    [dictionary setObject: self.idTxnCtrl forKey: @"idTxnCtrl"];
  }
  if (self.hasExtTraceNo) {
    [dictionary setObject: self.extTraceNo forKey: @"extTraceNo"];
  }
  if (self.hasTxnStatus) {
    [dictionary setObject: self.txnStatus forKey: @"txnStatus"];
  }
  if (self.hasTxnStatusDisplay) {
    [dictionary setObject: self.txnStatusDisplay forKey: @"txnStatusDisplay"];
  }
  if (self.hasTxnTrueStatus) {
    [dictionary setObject: self.txnTrueStatus forKey: @"txnTrueStatus"];
  }
  if (self.hasTxnType) {
    [dictionary setObject: self.txnType forKey: @"txnType"];
  }
  if (self.hasTxnTypeDisplay) {
    [dictionary setObject: self.txnTypeDisplay forKey: @"txnTypeDisplay"];
  }
  if (self.hasRecieveTime) {
    [dictionary setObject: self.recieveTime forKey: @"recieveTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentTxnInfo class]]) {
    return NO;
  }
  ContentTxnInfo *otherMessage = other;
  return
      self.hasMerchantName == otherMessage.hasMerchantName &&
      (!self.hasMerchantName || [self.merchantName isEqual:otherMessage.merchantName]) &&
      self.hasAmt == otherMessage.hasAmt &&
      (!self.hasAmt || [self.amt isEqual:otherMessage.amt]) &&
      self.hasTxnTime == otherMessage.hasTxnTime &&
      (!self.hasTxnTime || [self.txnTime isEqual:otherMessage.txnTime]) &&
      self.hasIdTxnCtrl == otherMessage.hasIdTxnCtrl &&
      (!self.hasIdTxnCtrl || [self.idTxnCtrl isEqual:otherMessage.idTxnCtrl]) &&
      self.hasExtTraceNo == otherMessage.hasExtTraceNo &&
      (!self.hasExtTraceNo || [self.extTraceNo isEqual:otherMessage.extTraceNo]) &&
      self.hasTxnStatus == otherMessage.hasTxnStatus &&
      (!self.hasTxnStatus || [self.txnStatus isEqual:otherMessage.txnStatus]) &&
      self.hasTxnStatusDisplay == otherMessage.hasTxnStatusDisplay &&
      (!self.hasTxnStatusDisplay || [self.txnStatusDisplay isEqual:otherMessage.txnStatusDisplay]) &&
      self.hasTxnTrueStatus == otherMessage.hasTxnTrueStatus &&
      (!self.hasTxnTrueStatus || [self.txnTrueStatus isEqual:otherMessage.txnTrueStatus]) &&
      self.hasTxnType == otherMessage.hasTxnType &&
      (!self.hasTxnType || [self.txnType isEqual:otherMessage.txnType]) &&
      self.hasTxnTypeDisplay == otherMessage.hasTxnTypeDisplay &&
      (!self.hasTxnTypeDisplay || [self.txnTypeDisplay isEqual:otherMessage.txnTypeDisplay]) &&
      self.hasRecieveTime == otherMessage.hasRecieveTime &&
      (!self.hasRecieveTime || [self.recieveTime isEqual:otherMessage.recieveTime]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMerchantName) {
    hashCode = hashCode * 31 + [self.merchantName hash];
  }
  if (self.hasAmt) {
    hashCode = hashCode * 31 + [self.amt hash];
  }
  if (self.hasTxnTime) {
    hashCode = hashCode * 31 + [self.txnTime hash];
  }
  if (self.hasIdTxnCtrl) {
    hashCode = hashCode * 31 + [self.idTxnCtrl hash];
  }
  if (self.hasExtTraceNo) {
    hashCode = hashCode * 31 + [self.extTraceNo hash];
  }
  if (self.hasTxnStatus) {
    hashCode = hashCode * 31 + [self.txnStatus hash];
  }
  if (self.hasTxnStatusDisplay) {
    hashCode = hashCode * 31 + [self.txnStatusDisplay hash];
  }
  if (self.hasTxnTrueStatus) {
    hashCode = hashCode * 31 + [self.txnTrueStatus hash];
  }
  if (self.hasTxnType) {
    hashCode = hashCode * 31 + [self.txnType hash];
  }
  if (self.hasTxnTypeDisplay) {
    hashCode = hashCode * 31 + [self.txnTypeDisplay hash];
  }
  if (self.hasRecieveTime) {
    hashCode = hashCode * 31 + [self.recieveTime hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentTxnInfoBuilder()
@property (strong) ContentTxnInfo* resultTxnInfo;
@end

@implementation ContentTxnInfoBuilder
@synthesize resultTxnInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTxnInfo = [[ContentTxnInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTxnInfo;
}
- (ContentTxnInfoBuilder*) clear {
  self.resultTxnInfo = [[ContentTxnInfo alloc] init];
  return self;
}
- (ContentTxnInfoBuilder*) clone {
  return [ContentTxnInfo builderWithPrototype:resultTxnInfo];
}
- (ContentTxnInfo*) defaultInstance {
  return [ContentTxnInfo defaultInstance];
}
- (ContentTxnInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentTxnInfo*) buildPartial {
  ContentTxnInfo* returnMe = resultTxnInfo;
  self.resultTxnInfo = nil;
  return returnMe;
}
- (ContentTxnInfoBuilder*) mergeFrom:(ContentTxnInfo*) other {
  if (other == [ContentTxnInfo defaultInstance]) {
    return self;
  }
  if (other.hasMerchantName) {
    [self setMerchantName:other.merchantName];
  }
  if (other.hasAmt) {
    [self setAmt:other.amt];
  }
  if (other.hasTxnTime) {
    [self setTxnTime:other.txnTime];
  }
  if (other.hasIdTxnCtrl) {
    [self setIdTxnCtrl:other.idTxnCtrl];
  }
  if (other.hasExtTraceNo) {
    [self setExtTraceNo:other.extTraceNo];
  }
  if (other.hasTxnStatus) {
    [self setTxnStatus:other.txnStatus];
  }
  if (other.hasTxnStatusDisplay) {
    [self setTxnStatusDisplay:other.txnStatusDisplay];
  }
  if (other.hasTxnTrueStatus) {
    [self setTxnTrueStatus:other.txnTrueStatus];
  }
  if (other.hasTxnType) {
    [self setTxnType:other.txnType];
  }
  if (other.hasTxnTypeDisplay) {
    [self setTxnTypeDisplay:other.txnTypeDisplay];
  }
  if (other.hasRecieveTime) {
    [self setRecieveTime:other.recieveTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentTxnInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentTxnInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMerchantName:[input readString]];
        break;
      }
      case 18: {
        [self setAmt:[input readString]];
        break;
      }
      case 26: {
        [self setTxnTime:[input readString]];
        break;
      }
      case 34: {
        [self setIdTxnCtrl:[input readString]];
        break;
      }
      case 42: {
        [self setExtTraceNo:[input readString]];
        break;
      }
      case 50: {
        [self setTxnStatus:[input readString]];
        break;
      }
      case 58: {
        [self setTxnStatusDisplay:[input readString]];
        break;
      }
      case 66: {
        [self setTxnTrueStatus:[input readString]];
        break;
      }
      case 74: {
        [self setTxnType:[input readString]];
        break;
      }
      case 82: {
        [self setTxnTypeDisplay:[input readString]];
        break;
      }
      case 90: {
        [self setRecieveTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMerchantName {
  return resultTxnInfo.hasMerchantName;
}
- (NSString*) merchantName {
  return resultTxnInfo.merchantName;
}
- (ContentTxnInfoBuilder*) setMerchantName:(NSString*) value {
  resultTxnInfo.hasMerchantName = YES;
  resultTxnInfo.merchantName = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearMerchantName {
  resultTxnInfo.hasMerchantName = NO;
  resultTxnInfo.merchantName = @"";
  return self;
}
- (BOOL) hasAmt {
  return resultTxnInfo.hasAmt;
}
- (NSString*) amt {
  return resultTxnInfo.amt;
}
- (ContentTxnInfoBuilder*) setAmt:(NSString*) value {
  resultTxnInfo.hasAmt = YES;
  resultTxnInfo.amt = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearAmt {
  resultTxnInfo.hasAmt = NO;
  resultTxnInfo.amt = @"";
  return self;
}
- (BOOL) hasTxnTime {
  return resultTxnInfo.hasTxnTime;
}
- (NSString*) txnTime {
  return resultTxnInfo.txnTime;
}
- (ContentTxnInfoBuilder*) setTxnTime:(NSString*) value {
  resultTxnInfo.hasTxnTime = YES;
  resultTxnInfo.txnTime = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearTxnTime {
  resultTxnInfo.hasTxnTime = NO;
  resultTxnInfo.txnTime = @"";
  return self;
}
- (BOOL) hasIdTxnCtrl {
  return resultTxnInfo.hasIdTxnCtrl;
}
- (NSString*) idTxnCtrl {
  return resultTxnInfo.idTxnCtrl;
}
- (ContentTxnInfoBuilder*) setIdTxnCtrl:(NSString*) value {
  resultTxnInfo.hasIdTxnCtrl = YES;
  resultTxnInfo.idTxnCtrl = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearIdTxnCtrl {
  resultTxnInfo.hasIdTxnCtrl = NO;
  resultTxnInfo.idTxnCtrl = @"";
  return self;
}
- (BOOL) hasExtTraceNo {
  return resultTxnInfo.hasExtTraceNo;
}
- (NSString*) extTraceNo {
  return resultTxnInfo.extTraceNo;
}
- (ContentTxnInfoBuilder*) setExtTraceNo:(NSString*) value {
  resultTxnInfo.hasExtTraceNo = YES;
  resultTxnInfo.extTraceNo = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearExtTraceNo {
  resultTxnInfo.hasExtTraceNo = NO;
  resultTxnInfo.extTraceNo = @"";
  return self;
}
- (BOOL) hasTxnStatus {
  return resultTxnInfo.hasTxnStatus;
}
- (NSString*) txnStatus {
  return resultTxnInfo.txnStatus;
}
- (ContentTxnInfoBuilder*) setTxnStatus:(NSString*) value {
  resultTxnInfo.hasTxnStatus = YES;
  resultTxnInfo.txnStatus = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearTxnStatus {
  resultTxnInfo.hasTxnStatus = NO;
  resultTxnInfo.txnStatus = @"";
  return self;
}
- (BOOL) hasTxnStatusDisplay {
  return resultTxnInfo.hasTxnStatusDisplay;
}
- (NSString*) txnStatusDisplay {
  return resultTxnInfo.txnStatusDisplay;
}
- (ContentTxnInfoBuilder*) setTxnStatusDisplay:(NSString*) value {
  resultTxnInfo.hasTxnStatusDisplay = YES;
  resultTxnInfo.txnStatusDisplay = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearTxnStatusDisplay {
  resultTxnInfo.hasTxnStatusDisplay = NO;
  resultTxnInfo.txnStatusDisplay = @"";
  return self;
}
- (BOOL) hasTxnTrueStatus {
  return resultTxnInfo.hasTxnTrueStatus;
}
- (NSString*) txnTrueStatus {
  return resultTxnInfo.txnTrueStatus;
}
- (ContentTxnInfoBuilder*) setTxnTrueStatus:(NSString*) value {
  resultTxnInfo.hasTxnTrueStatus = YES;
  resultTxnInfo.txnTrueStatus = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearTxnTrueStatus {
  resultTxnInfo.hasTxnTrueStatus = NO;
  resultTxnInfo.txnTrueStatus = @"";
  return self;
}
- (BOOL) hasTxnType {
  return resultTxnInfo.hasTxnType;
}
- (NSString*) txnType {
  return resultTxnInfo.txnType;
}
- (ContentTxnInfoBuilder*) setTxnType:(NSString*) value {
  resultTxnInfo.hasTxnType = YES;
  resultTxnInfo.txnType = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearTxnType {
  resultTxnInfo.hasTxnType = NO;
  resultTxnInfo.txnType = @"";
  return self;
}
- (BOOL) hasTxnTypeDisplay {
  return resultTxnInfo.hasTxnTypeDisplay;
}
- (NSString*) txnTypeDisplay {
  return resultTxnInfo.txnTypeDisplay;
}
- (ContentTxnInfoBuilder*) setTxnTypeDisplay:(NSString*) value {
  resultTxnInfo.hasTxnTypeDisplay = YES;
  resultTxnInfo.txnTypeDisplay = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearTxnTypeDisplay {
  resultTxnInfo.hasTxnTypeDisplay = NO;
  resultTxnInfo.txnTypeDisplay = @"";
  return self;
}
- (BOOL) hasRecieveTime {
  return resultTxnInfo.hasRecieveTime;
}
- (NSString*) recieveTime {
  return resultTxnInfo.recieveTime;
}
- (ContentTxnInfoBuilder*) setRecieveTime:(NSString*) value {
  resultTxnInfo.hasRecieveTime = YES;
  resultTxnInfo.recieveTime = value;
  return self;
}
- (ContentTxnInfoBuilder*) clearRecieveTime {
  resultTxnInfo.hasRecieveTime = NO;
  resultTxnInfo.recieveTime = @"";
  return self;
}
@end

@interface ContentCreditOrder ()
@property (strong) NSString* billOrderId;
@property (strong) NSString* tradeId;
@property (strong) NSString* txnAcctNo;
@property (strong) NSString* txnStatus;
@property (strong) NSString* txnAmt;
@property (strong) NSString* txnTime;
@property (strong) NSString* merchantName;
@property (strong) NSString* stages;
@property (strong) NSString* txnStatusName;
@property (strong) NSString* fcsCreditAmtType;
@end

@implementation ContentCreditOrder

- (BOOL) hasBillOrderId {
  return !!hasBillOrderId_;
}
- (void) setHasBillOrderId:(BOOL) _value_ {
  hasBillOrderId_ = !!_value_;
}
@synthesize billOrderId;
- (BOOL) hasTradeId {
  return !!hasTradeId_;
}
- (void) setHasTradeId:(BOOL) _value_ {
  hasTradeId_ = !!_value_;
}
@synthesize tradeId;
- (BOOL) hasTxnAcctNo {
  return !!hasTxnAcctNo_;
}
- (void) setHasTxnAcctNo:(BOOL) _value_ {
  hasTxnAcctNo_ = !!_value_;
}
@synthesize txnAcctNo;
- (BOOL) hasTxnStatus {
  return !!hasTxnStatus_;
}
- (void) setHasTxnStatus:(BOOL) _value_ {
  hasTxnStatus_ = !!_value_;
}
@synthesize txnStatus;
- (BOOL) hasTxnAmt {
  return !!hasTxnAmt_;
}
- (void) setHasTxnAmt:(BOOL) _value_ {
  hasTxnAmt_ = !!_value_;
}
@synthesize txnAmt;
- (BOOL) hasTxnTime {
  return !!hasTxnTime_;
}
- (void) setHasTxnTime:(BOOL) _value_ {
  hasTxnTime_ = !!_value_;
}
@synthesize txnTime;
- (BOOL) hasMerchantName {
  return !!hasMerchantName_;
}
- (void) setHasMerchantName:(BOOL) _value_ {
  hasMerchantName_ = !!_value_;
}
@synthesize merchantName;
- (BOOL) hasStages {
  return !!hasStages_;
}
- (void) setHasStages:(BOOL) _value_ {
  hasStages_ = !!_value_;
}
@synthesize stages;
- (BOOL) hasTxnStatusName {
  return !!hasTxnStatusName_;
}
- (void) setHasTxnStatusName:(BOOL) _value_ {
  hasTxnStatusName_ = !!_value_;
}
@synthesize txnStatusName;
- (BOOL) hasFcsCreditAmtType {
  return !!hasFcsCreditAmtType_;
}
- (void) setHasFcsCreditAmtType:(BOOL) _value_ {
  hasFcsCreditAmtType_ = !!_value_;
}
@synthesize fcsCreditAmtType;
- (instancetype) init {
  if ((self = [super init])) {
    self.billOrderId = @"";
    self.tradeId = @"";
    self.txnAcctNo = @"";
    self.txnStatus = @"";
    self.txnAmt = @"";
    self.txnTime = @"";
    self.merchantName = @"";
    self.stages = @"";
    self.txnStatusName = @"";
    self.fcsCreditAmtType = @"";
  }
  return self;
}
static ContentCreditOrder* defaultContentCreditOrderInstance = nil;
+ (void) initialize {
  if (self == [ContentCreditOrder class]) {
    defaultContentCreditOrderInstance = [[ContentCreditOrder alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentCreditOrderInstance;
}
- (instancetype) defaultInstance {
  return defaultContentCreditOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBillOrderId) {
    [output writeString:1 value:self.billOrderId];
  }
  if (self.hasTradeId) {
    [output writeString:2 value:self.tradeId];
  }
  if (self.hasTxnAcctNo) {
    [output writeString:3 value:self.txnAcctNo];
  }
  if (self.hasTxnStatus) {
    [output writeString:4 value:self.txnStatus];
  }
  if (self.hasTxnAmt) {
    [output writeString:5 value:self.txnAmt];
  }
  if (self.hasTxnTime) {
    [output writeString:6 value:self.txnTime];
  }
  if (self.hasMerchantName) {
    [output writeString:7 value:self.merchantName];
  }
  if (self.hasStages) {
    [output writeString:8 value:self.stages];
  }
  if (self.hasTxnStatusName) {
    [output writeString:9 value:self.txnStatusName];
  }
  if (self.hasFcsCreditAmtType) {
    [output writeString:10 value:self.fcsCreditAmtType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBillOrderId) {
    size_ += computeStringSize(1, self.billOrderId);
  }
  if (self.hasTradeId) {
    size_ += computeStringSize(2, self.tradeId);
  }
  if (self.hasTxnAcctNo) {
    size_ += computeStringSize(3, self.txnAcctNo);
  }
  if (self.hasTxnStatus) {
    size_ += computeStringSize(4, self.txnStatus);
  }
  if (self.hasTxnAmt) {
    size_ += computeStringSize(5, self.txnAmt);
  }
  if (self.hasTxnTime) {
    size_ += computeStringSize(6, self.txnTime);
  }
  if (self.hasMerchantName) {
    size_ += computeStringSize(7, self.merchantName);
  }
  if (self.hasStages) {
    size_ += computeStringSize(8, self.stages);
  }
  if (self.hasTxnStatusName) {
    size_ += computeStringSize(9, self.txnStatusName);
  }
  if (self.hasFcsCreditAmtType) {
    size_ += computeStringSize(10, self.fcsCreditAmtType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentCreditOrder*) parseFromData:(NSData*) data {
  return (ContentCreditOrder*)[[[ContentCreditOrder builder] mergeFromData:data] build];
}
+ (ContentCreditOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCreditOrder*)[[[ContentCreditOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentCreditOrder*) parseFromInputStream:(NSInputStream*) input {
  return (ContentCreditOrder*)[[[ContentCreditOrder builder] mergeFromInputStream:input] build];
}
+ (ContentCreditOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCreditOrder*)[[[ContentCreditOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentCreditOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentCreditOrder*)[[[ContentCreditOrder builder] mergeFromCodedInputStream:input] build];
}
+ (ContentCreditOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentCreditOrder*)[[[ContentCreditOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentCreditOrderBuilder*) builder {
  return [[ContentCreditOrderBuilder alloc] init];
}
+ (ContentCreditOrderBuilder*) builderWithPrototype:(ContentCreditOrder*) prototype {
  return [[ContentCreditOrder builder] mergeFrom:prototype];
}
- (ContentCreditOrderBuilder*) builder {
  return [ContentCreditOrder builder];
}
- (ContentCreditOrderBuilder*) toBuilder {
  return [ContentCreditOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBillOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"billOrderId", self.billOrderId];
  }
  if (self.hasTradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeId", self.tradeId];
  }
  if (self.hasTxnAcctNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnAcctNo", self.txnAcctNo];
  }
  if (self.hasTxnStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnStatus", self.txnStatus];
  }
  if (self.hasTxnAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnAmt", self.txnAmt];
  }
  if (self.hasTxnTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnTime", self.txnTime];
  }
  if (self.hasMerchantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantName", self.merchantName];
  }
  if (self.hasStages) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stages", self.stages];
  }
  if (self.hasTxnStatusName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnStatusName", self.txnStatusName];
  }
  if (self.hasFcsCreditAmtType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsCreditAmtType", self.fcsCreditAmtType];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBillOrderId) {
    [dictionary setObject: self.billOrderId forKey: @"billOrderId"];
  }
  if (self.hasTradeId) {
    [dictionary setObject: self.tradeId forKey: @"tradeId"];
  }
  if (self.hasTxnAcctNo) {
    [dictionary setObject: self.txnAcctNo forKey: @"txnAcctNo"];
  }
  if (self.hasTxnStatus) {
    [dictionary setObject: self.txnStatus forKey: @"txnStatus"];
  }
  if (self.hasTxnAmt) {
    [dictionary setObject: self.txnAmt forKey: @"txnAmt"];
  }
  if (self.hasTxnTime) {
    [dictionary setObject: self.txnTime forKey: @"txnTime"];
  }
  if (self.hasMerchantName) {
    [dictionary setObject: self.merchantName forKey: @"merchantName"];
  }
  if (self.hasStages) {
    [dictionary setObject: self.stages forKey: @"stages"];
  }
  if (self.hasTxnStatusName) {
    [dictionary setObject: self.txnStatusName forKey: @"txnStatusName"];
  }
  if (self.hasFcsCreditAmtType) {
    [dictionary setObject: self.fcsCreditAmtType forKey: @"fcsCreditAmtType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentCreditOrder class]]) {
    return NO;
  }
  ContentCreditOrder *otherMessage = other;
  return
      self.hasBillOrderId == otherMessage.hasBillOrderId &&
      (!self.hasBillOrderId || [self.billOrderId isEqual:otherMessage.billOrderId]) &&
      self.hasTradeId == otherMessage.hasTradeId &&
      (!self.hasTradeId || [self.tradeId isEqual:otherMessage.tradeId]) &&
      self.hasTxnAcctNo == otherMessage.hasTxnAcctNo &&
      (!self.hasTxnAcctNo || [self.txnAcctNo isEqual:otherMessage.txnAcctNo]) &&
      self.hasTxnStatus == otherMessage.hasTxnStatus &&
      (!self.hasTxnStatus || [self.txnStatus isEqual:otherMessage.txnStatus]) &&
      self.hasTxnAmt == otherMessage.hasTxnAmt &&
      (!self.hasTxnAmt || [self.txnAmt isEqual:otherMessage.txnAmt]) &&
      self.hasTxnTime == otherMessage.hasTxnTime &&
      (!self.hasTxnTime || [self.txnTime isEqual:otherMessage.txnTime]) &&
      self.hasMerchantName == otherMessage.hasMerchantName &&
      (!self.hasMerchantName || [self.merchantName isEqual:otherMessage.merchantName]) &&
      self.hasStages == otherMessage.hasStages &&
      (!self.hasStages || [self.stages isEqual:otherMessage.stages]) &&
      self.hasTxnStatusName == otherMessage.hasTxnStatusName &&
      (!self.hasTxnStatusName || [self.txnStatusName isEqual:otherMessage.txnStatusName]) &&
      self.hasFcsCreditAmtType == otherMessage.hasFcsCreditAmtType &&
      (!self.hasFcsCreditAmtType || [self.fcsCreditAmtType isEqual:otherMessage.fcsCreditAmtType]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBillOrderId) {
    hashCode = hashCode * 31 + [self.billOrderId hash];
  }
  if (self.hasTradeId) {
    hashCode = hashCode * 31 + [self.tradeId hash];
  }
  if (self.hasTxnAcctNo) {
    hashCode = hashCode * 31 + [self.txnAcctNo hash];
  }
  if (self.hasTxnStatus) {
    hashCode = hashCode * 31 + [self.txnStatus hash];
  }
  if (self.hasTxnAmt) {
    hashCode = hashCode * 31 + [self.txnAmt hash];
  }
  if (self.hasTxnTime) {
    hashCode = hashCode * 31 + [self.txnTime hash];
  }
  if (self.hasMerchantName) {
    hashCode = hashCode * 31 + [self.merchantName hash];
  }
  if (self.hasStages) {
    hashCode = hashCode * 31 + [self.stages hash];
  }
  if (self.hasTxnStatusName) {
    hashCode = hashCode * 31 + [self.txnStatusName hash];
  }
  if (self.hasFcsCreditAmtType) {
    hashCode = hashCode * 31 + [self.fcsCreditAmtType hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentCreditOrderBuilder()
@property (strong) ContentCreditOrder* resultCreditOrder;
@end

@implementation ContentCreditOrderBuilder
@synthesize resultCreditOrder;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreditOrder = [[ContentCreditOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreditOrder;
}
- (ContentCreditOrderBuilder*) clear {
  self.resultCreditOrder = [[ContentCreditOrder alloc] init];
  return self;
}
- (ContentCreditOrderBuilder*) clone {
  return [ContentCreditOrder builderWithPrototype:resultCreditOrder];
}
- (ContentCreditOrder*) defaultInstance {
  return [ContentCreditOrder defaultInstance];
}
- (ContentCreditOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentCreditOrder*) buildPartial {
  ContentCreditOrder* returnMe = resultCreditOrder;
  self.resultCreditOrder = nil;
  return returnMe;
}
- (ContentCreditOrderBuilder*) mergeFrom:(ContentCreditOrder*) other {
  if (other == [ContentCreditOrder defaultInstance]) {
    return self;
  }
  if (other.hasBillOrderId) {
    [self setBillOrderId:other.billOrderId];
  }
  if (other.hasTradeId) {
    [self setTradeId:other.tradeId];
  }
  if (other.hasTxnAcctNo) {
    [self setTxnAcctNo:other.txnAcctNo];
  }
  if (other.hasTxnStatus) {
    [self setTxnStatus:other.txnStatus];
  }
  if (other.hasTxnAmt) {
    [self setTxnAmt:other.txnAmt];
  }
  if (other.hasTxnTime) {
    [self setTxnTime:other.txnTime];
  }
  if (other.hasMerchantName) {
    [self setMerchantName:other.merchantName];
  }
  if (other.hasStages) {
    [self setStages:other.stages];
  }
  if (other.hasTxnStatusName) {
    [self setTxnStatusName:other.txnStatusName];
  }
  if (other.hasFcsCreditAmtType) {
    [self setFcsCreditAmtType:other.fcsCreditAmtType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentCreditOrderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentCreditOrderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBillOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setTradeId:[input readString]];
        break;
      }
      case 26: {
        [self setTxnAcctNo:[input readString]];
        break;
      }
      case 34: {
        [self setTxnStatus:[input readString]];
        break;
      }
      case 42: {
        [self setTxnAmt:[input readString]];
        break;
      }
      case 50: {
        [self setTxnTime:[input readString]];
        break;
      }
      case 58: {
        [self setMerchantName:[input readString]];
        break;
      }
      case 66: {
        [self setStages:[input readString]];
        break;
      }
      case 74: {
        [self setTxnStatusName:[input readString]];
        break;
      }
      case 82: {
        [self setFcsCreditAmtType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBillOrderId {
  return resultCreditOrder.hasBillOrderId;
}
- (NSString*) billOrderId {
  return resultCreditOrder.billOrderId;
}
- (ContentCreditOrderBuilder*) setBillOrderId:(NSString*) value {
  resultCreditOrder.hasBillOrderId = YES;
  resultCreditOrder.billOrderId = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearBillOrderId {
  resultCreditOrder.hasBillOrderId = NO;
  resultCreditOrder.billOrderId = @"";
  return self;
}
- (BOOL) hasTradeId {
  return resultCreditOrder.hasTradeId;
}
- (NSString*) tradeId {
  return resultCreditOrder.tradeId;
}
- (ContentCreditOrderBuilder*) setTradeId:(NSString*) value {
  resultCreditOrder.hasTradeId = YES;
  resultCreditOrder.tradeId = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearTradeId {
  resultCreditOrder.hasTradeId = NO;
  resultCreditOrder.tradeId = @"";
  return self;
}
- (BOOL) hasTxnAcctNo {
  return resultCreditOrder.hasTxnAcctNo;
}
- (NSString*) txnAcctNo {
  return resultCreditOrder.txnAcctNo;
}
- (ContentCreditOrderBuilder*) setTxnAcctNo:(NSString*) value {
  resultCreditOrder.hasTxnAcctNo = YES;
  resultCreditOrder.txnAcctNo = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearTxnAcctNo {
  resultCreditOrder.hasTxnAcctNo = NO;
  resultCreditOrder.txnAcctNo = @"";
  return self;
}
- (BOOL) hasTxnStatus {
  return resultCreditOrder.hasTxnStatus;
}
- (NSString*) txnStatus {
  return resultCreditOrder.txnStatus;
}
- (ContentCreditOrderBuilder*) setTxnStatus:(NSString*) value {
  resultCreditOrder.hasTxnStatus = YES;
  resultCreditOrder.txnStatus = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearTxnStatus {
  resultCreditOrder.hasTxnStatus = NO;
  resultCreditOrder.txnStatus = @"";
  return self;
}
- (BOOL) hasTxnAmt {
  return resultCreditOrder.hasTxnAmt;
}
- (NSString*) txnAmt {
  return resultCreditOrder.txnAmt;
}
- (ContentCreditOrderBuilder*) setTxnAmt:(NSString*) value {
  resultCreditOrder.hasTxnAmt = YES;
  resultCreditOrder.txnAmt = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearTxnAmt {
  resultCreditOrder.hasTxnAmt = NO;
  resultCreditOrder.txnAmt = @"";
  return self;
}
- (BOOL) hasTxnTime {
  return resultCreditOrder.hasTxnTime;
}
- (NSString*) txnTime {
  return resultCreditOrder.txnTime;
}
- (ContentCreditOrderBuilder*) setTxnTime:(NSString*) value {
  resultCreditOrder.hasTxnTime = YES;
  resultCreditOrder.txnTime = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearTxnTime {
  resultCreditOrder.hasTxnTime = NO;
  resultCreditOrder.txnTime = @"";
  return self;
}
- (BOOL) hasMerchantName {
  return resultCreditOrder.hasMerchantName;
}
- (NSString*) merchantName {
  return resultCreditOrder.merchantName;
}
- (ContentCreditOrderBuilder*) setMerchantName:(NSString*) value {
  resultCreditOrder.hasMerchantName = YES;
  resultCreditOrder.merchantName = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearMerchantName {
  resultCreditOrder.hasMerchantName = NO;
  resultCreditOrder.merchantName = @"";
  return self;
}
- (BOOL) hasStages {
  return resultCreditOrder.hasStages;
}
- (NSString*) stages {
  return resultCreditOrder.stages;
}
- (ContentCreditOrderBuilder*) setStages:(NSString*) value {
  resultCreditOrder.hasStages = YES;
  resultCreditOrder.stages = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearStages {
  resultCreditOrder.hasStages = NO;
  resultCreditOrder.stages = @"";
  return self;
}
- (BOOL) hasTxnStatusName {
  return resultCreditOrder.hasTxnStatusName;
}
- (NSString*) txnStatusName {
  return resultCreditOrder.txnStatusName;
}
- (ContentCreditOrderBuilder*) setTxnStatusName:(NSString*) value {
  resultCreditOrder.hasTxnStatusName = YES;
  resultCreditOrder.txnStatusName = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearTxnStatusName {
  resultCreditOrder.hasTxnStatusName = NO;
  resultCreditOrder.txnStatusName = @"";
  return self;
}
- (BOOL) hasFcsCreditAmtType {
  return resultCreditOrder.hasFcsCreditAmtType;
}
- (NSString*) fcsCreditAmtType {
  return resultCreditOrder.fcsCreditAmtType;
}
- (ContentCreditOrderBuilder*) setFcsCreditAmtType:(NSString*) value {
  resultCreditOrder.hasFcsCreditAmtType = YES;
  resultCreditOrder.fcsCreditAmtType = value;
  return self;
}
- (ContentCreditOrderBuilder*) clearFcsCreditAmtType {
  resultCreditOrder.hasFcsCreditAmtType = NO;
  resultCreditOrder.fcsCreditAmtType = @"";
  return self;
}
@end

@interface ContentDivide ()
@property (strong) NSString* currentStage;
@property (strong) NSString* divideTxnNo;
@property (strong) NSString* divideTxnStatus;
@property (strong) NSString* divideTxnAmt;
@property (strong) NSString* divideFee;
@property (strong) NSString* divideInterest;
@property (strong) NSString* divideReturnAmt;
@property (strong) NSString* divideRepayDate;
@property (strong) NSString* statusShow;
@property (strong) NSString* divideRepayAmt;
@property (strong) NSString* leftDays;
@property (strong) NSString* totalAmt;
@property (strong) NSString* divideTxnStatusName;
@end

@implementation ContentDivide

- (BOOL) hasCurrentStage {
  return !!hasCurrentStage_;
}
- (void) setHasCurrentStage:(BOOL) _value_ {
  hasCurrentStage_ = !!_value_;
}
@synthesize currentStage;
- (BOOL) hasDivideTxnNo {
  return !!hasDivideTxnNo_;
}
- (void) setHasDivideTxnNo:(BOOL) _value_ {
  hasDivideTxnNo_ = !!_value_;
}
@synthesize divideTxnNo;
- (BOOL) hasDivideTxnStatus {
  return !!hasDivideTxnStatus_;
}
- (void) setHasDivideTxnStatus:(BOOL) _value_ {
  hasDivideTxnStatus_ = !!_value_;
}
@synthesize divideTxnStatus;
- (BOOL) hasDivideTxnAmt {
  return !!hasDivideTxnAmt_;
}
- (void) setHasDivideTxnAmt:(BOOL) _value_ {
  hasDivideTxnAmt_ = !!_value_;
}
@synthesize divideTxnAmt;
- (BOOL) hasDivideFee {
  return !!hasDivideFee_;
}
- (void) setHasDivideFee:(BOOL) _value_ {
  hasDivideFee_ = !!_value_;
}
@synthesize divideFee;
- (BOOL) hasDivideInterest {
  return !!hasDivideInterest_;
}
- (void) setHasDivideInterest:(BOOL) _value_ {
  hasDivideInterest_ = !!_value_;
}
@synthesize divideInterest;
- (BOOL) hasDivideReturnAmt {
  return !!hasDivideReturnAmt_;
}
- (void) setHasDivideReturnAmt:(BOOL) _value_ {
  hasDivideReturnAmt_ = !!_value_;
}
@synthesize divideReturnAmt;
- (BOOL) hasDivideRepayDate {
  return !!hasDivideRepayDate_;
}
- (void) setHasDivideRepayDate:(BOOL) _value_ {
  hasDivideRepayDate_ = !!_value_;
}
@synthesize divideRepayDate;
- (BOOL) hasStatusShow {
  return !!hasStatusShow_;
}
- (void) setHasStatusShow:(BOOL) _value_ {
  hasStatusShow_ = !!_value_;
}
@synthesize statusShow;
- (BOOL) hasDivideRepayAmt {
  return !!hasDivideRepayAmt_;
}
- (void) setHasDivideRepayAmt:(BOOL) _value_ {
  hasDivideRepayAmt_ = !!_value_;
}
@synthesize divideRepayAmt;
- (BOOL) hasLeftDays {
  return !!hasLeftDays_;
}
- (void) setHasLeftDays:(BOOL) _value_ {
  hasLeftDays_ = !!_value_;
}
@synthesize leftDays;
- (BOOL) hasTotalAmt {
  return !!hasTotalAmt_;
}
- (void) setHasTotalAmt:(BOOL) _value_ {
  hasTotalAmt_ = !!_value_;
}
@synthesize totalAmt;
- (BOOL) hasDivideTxnStatusName {
  return !!hasDivideTxnStatusName_;
}
- (void) setHasDivideTxnStatusName:(BOOL) _value_ {
  hasDivideTxnStatusName_ = !!_value_;
}
@synthesize divideTxnStatusName;
- (instancetype) init {
  if ((self = [super init])) {
    self.currentStage = @"";
    self.divideTxnNo = @"";
    self.divideTxnStatus = @"";
    self.divideTxnAmt = @"";
    self.divideFee = @"";
    self.divideInterest = @"";
    self.divideReturnAmt = @"";
    self.divideRepayDate = @"";
    self.statusShow = @"";
    self.divideRepayAmt = @"";
    self.leftDays = @"";
    self.totalAmt = @"";
    self.divideTxnStatusName = @"";
  }
  return self;
}
static ContentDivide* defaultContentDivideInstance = nil;
+ (void) initialize {
  if (self == [ContentDivide class]) {
    defaultContentDivideInstance = [[ContentDivide alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentDivideInstance;
}
- (instancetype) defaultInstance {
  return defaultContentDivideInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCurrentStage) {
    [output writeString:1 value:self.currentStage];
  }
  if (self.hasDivideTxnNo) {
    [output writeString:2 value:self.divideTxnNo];
  }
  if (self.hasDivideTxnStatus) {
    [output writeString:3 value:self.divideTxnStatus];
  }
  if (self.hasDivideTxnAmt) {
    [output writeString:4 value:self.divideTxnAmt];
  }
  if (self.hasDivideFee) {
    [output writeString:5 value:self.divideFee];
  }
  if (self.hasDivideInterest) {
    [output writeString:6 value:self.divideInterest];
  }
  if (self.hasDivideReturnAmt) {
    [output writeString:7 value:self.divideReturnAmt];
  }
  if (self.hasDivideRepayDate) {
    [output writeString:8 value:self.divideRepayDate];
  }
  if (self.hasStatusShow) {
    [output writeString:9 value:self.statusShow];
  }
  if (self.hasDivideRepayAmt) {
    [output writeString:10 value:self.divideRepayAmt];
  }
  if (self.hasLeftDays) {
    [output writeString:11 value:self.leftDays];
  }
  if (self.hasTotalAmt) {
    [output writeString:12 value:self.totalAmt];
  }
  if (self.hasDivideTxnStatusName) {
    [output writeString:13 value:self.divideTxnStatusName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCurrentStage) {
    size_ += computeStringSize(1, self.currentStage);
  }
  if (self.hasDivideTxnNo) {
    size_ += computeStringSize(2, self.divideTxnNo);
  }
  if (self.hasDivideTxnStatus) {
    size_ += computeStringSize(3, self.divideTxnStatus);
  }
  if (self.hasDivideTxnAmt) {
    size_ += computeStringSize(4, self.divideTxnAmt);
  }
  if (self.hasDivideFee) {
    size_ += computeStringSize(5, self.divideFee);
  }
  if (self.hasDivideInterest) {
    size_ += computeStringSize(6, self.divideInterest);
  }
  if (self.hasDivideReturnAmt) {
    size_ += computeStringSize(7, self.divideReturnAmt);
  }
  if (self.hasDivideRepayDate) {
    size_ += computeStringSize(8, self.divideRepayDate);
  }
  if (self.hasStatusShow) {
    size_ += computeStringSize(9, self.statusShow);
  }
  if (self.hasDivideRepayAmt) {
    size_ += computeStringSize(10, self.divideRepayAmt);
  }
  if (self.hasLeftDays) {
    size_ += computeStringSize(11, self.leftDays);
  }
  if (self.hasTotalAmt) {
    size_ += computeStringSize(12, self.totalAmt);
  }
  if (self.hasDivideTxnStatusName) {
    size_ += computeStringSize(13, self.divideTxnStatusName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentDivide*) parseFromData:(NSData*) data {
  return (ContentDivide*)[[[ContentDivide builder] mergeFromData:data] build];
}
+ (ContentDivide*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentDivide*)[[[ContentDivide builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentDivide*) parseFromInputStream:(NSInputStream*) input {
  return (ContentDivide*)[[[ContentDivide builder] mergeFromInputStream:input] build];
}
+ (ContentDivide*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentDivide*)[[[ContentDivide builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentDivide*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentDivide*)[[[ContentDivide builder] mergeFromCodedInputStream:input] build];
}
+ (ContentDivide*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentDivide*)[[[ContentDivide builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentDivideBuilder*) builder {
  return [[ContentDivideBuilder alloc] init];
}
+ (ContentDivideBuilder*) builderWithPrototype:(ContentDivide*) prototype {
  return [[ContentDivide builder] mergeFrom:prototype];
}
- (ContentDivideBuilder*) builder {
  return [ContentDivide builder];
}
- (ContentDivideBuilder*) toBuilder {
  return [ContentDivide builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCurrentStage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentStage", self.currentStage];
  }
  if (self.hasDivideTxnNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideTxnNo", self.divideTxnNo];
  }
  if (self.hasDivideTxnStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideTxnStatus", self.divideTxnStatus];
  }
  if (self.hasDivideTxnAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideTxnAmt", self.divideTxnAmt];
  }
  if (self.hasDivideFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideFee", self.divideFee];
  }
  if (self.hasDivideInterest) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideInterest", self.divideInterest];
  }
  if (self.hasDivideReturnAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideReturnAmt", self.divideReturnAmt];
  }
  if (self.hasDivideRepayDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideRepayDate", self.divideRepayDate];
  }
  if (self.hasStatusShow) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusShow", self.statusShow];
  }
  if (self.hasDivideRepayAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideRepayAmt", self.divideRepayAmt];
  }
  if (self.hasLeftDays) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftDays", self.leftDays];
  }
  if (self.hasTotalAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalAmt", self.totalAmt];
  }
  if (self.hasDivideTxnStatusName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"divideTxnStatusName", self.divideTxnStatusName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCurrentStage) {
    [dictionary setObject: self.currentStage forKey: @"currentStage"];
  }
  if (self.hasDivideTxnNo) {
    [dictionary setObject: self.divideTxnNo forKey: @"divideTxnNo"];
  }
  if (self.hasDivideTxnStatus) {
    [dictionary setObject: self.divideTxnStatus forKey: @"divideTxnStatus"];
  }
  if (self.hasDivideTxnAmt) {
    [dictionary setObject: self.divideTxnAmt forKey: @"divideTxnAmt"];
  }
  if (self.hasDivideFee) {
    [dictionary setObject: self.divideFee forKey: @"divideFee"];
  }
  if (self.hasDivideInterest) {
    [dictionary setObject: self.divideInterest forKey: @"divideInterest"];
  }
  if (self.hasDivideReturnAmt) {
    [dictionary setObject: self.divideReturnAmt forKey: @"divideReturnAmt"];
  }
  if (self.hasDivideRepayDate) {
    [dictionary setObject: self.divideRepayDate forKey: @"divideRepayDate"];
  }
  if (self.hasStatusShow) {
    [dictionary setObject: self.statusShow forKey: @"statusShow"];
  }
  if (self.hasDivideRepayAmt) {
    [dictionary setObject: self.divideRepayAmt forKey: @"divideRepayAmt"];
  }
  if (self.hasLeftDays) {
    [dictionary setObject: self.leftDays forKey: @"leftDays"];
  }
  if (self.hasTotalAmt) {
    [dictionary setObject: self.totalAmt forKey: @"totalAmt"];
  }
  if (self.hasDivideTxnStatusName) {
    [dictionary setObject: self.divideTxnStatusName forKey: @"divideTxnStatusName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentDivide class]]) {
    return NO;
  }
  ContentDivide *otherMessage = other;
  return
      self.hasCurrentStage == otherMessage.hasCurrentStage &&
      (!self.hasCurrentStage || [self.currentStage isEqual:otherMessage.currentStage]) &&
      self.hasDivideTxnNo == otherMessage.hasDivideTxnNo &&
      (!self.hasDivideTxnNo || [self.divideTxnNo isEqual:otherMessage.divideTxnNo]) &&
      self.hasDivideTxnStatus == otherMessage.hasDivideTxnStatus &&
      (!self.hasDivideTxnStatus || [self.divideTxnStatus isEqual:otherMessage.divideTxnStatus]) &&
      self.hasDivideTxnAmt == otherMessage.hasDivideTxnAmt &&
      (!self.hasDivideTxnAmt || [self.divideTxnAmt isEqual:otherMessage.divideTxnAmt]) &&
      self.hasDivideFee == otherMessage.hasDivideFee &&
      (!self.hasDivideFee || [self.divideFee isEqual:otherMessage.divideFee]) &&
      self.hasDivideInterest == otherMessage.hasDivideInterest &&
      (!self.hasDivideInterest || [self.divideInterest isEqual:otherMessage.divideInterest]) &&
      self.hasDivideReturnAmt == otherMessage.hasDivideReturnAmt &&
      (!self.hasDivideReturnAmt || [self.divideReturnAmt isEqual:otherMessage.divideReturnAmt]) &&
      self.hasDivideRepayDate == otherMessage.hasDivideRepayDate &&
      (!self.hasDivideRepayDate || [self.divideRepayDate isEqual:otherMessage.divideRepayDate]) &&
      self.hasStatusShow == otherMessage.hasStatusShow &&
      (!self.hasStatusShow || [self.statusShow isEqual:otherMessage.statusShow]) &&
      self.hasDivideRepayAmt == otherMessage.hasDivideRepayAmt &&
      (!self.hasDivideRepayAmt || [self.divideRepayAmt isEqual:otherMessage.divideRepayAmt]) &&
      self.hasLeftDays == otherMessage.hasLeftDays &&
      (!self.hasLeftDays || [self.leftDays isEqual:otherMessage.leftDays]) &&
      self.hasTotalAmt == otherMessage.hasTotalAmt &&
      (!self.hasTotalAmt || [self.totalAmt isEqual:otherMessage.totalAmt]) &&
      self.hasDivideTxnStatusName == otherMessage.hasDivideTxnStatusName &&
      (!self.hasDivideTxnStatusName || [self.divideTxnStatusName isEqual:otherMessage.divideTxnStatusName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCurrentStage) {
    hashCode = hashCode * 31 + [self.currentStage hash];
  }
  if (self.hasDivideTxnNo) {
    hashCode = hashCode * 31 + [self.divideTxnNo hash];
  }
  if (self.hasDivideTxnStatus) {
    hashCode = hashCode * 31 + [self.divideTxnStatus hash];
  }
  if (self.hasDivideTxnAmt) {
    hashCode = hashCode * 31 + [self.divideTxnAmt hash];
  }
  if (self.hasDivideFee) {
    hashCode = hashCode * 31 + [self.divideFee hash];
  }
  if (self.hasDivideInterest) {
    hashCode = hashCode * 31 + [self.divideInterest hash];
  }
  if (self.hasDivideReturnAmt) {
    hashCode = hashCode * 31 + [self.divideReturnAmt hash];
  }
  if (self.hasDivideRepayDate) {
    hashCode = hashCode * 31 + [self.divideRepayDate hash];
  }
  if (self.hasStatusShow) {
    hashCode = hashCode * 31 + [self.statusShow hash];
  }
  if (self.hasDivideRepayAmt) {
    hashCode = hashCode * 31 + [self.divideRepayAmt hash];
  }
  if (self.hasLeftDays) {
    hashCode = hashCode * 31 + [self.leftDays hash];
  }
  if (self.hasTotalAmt) {
    hashCode = hashCode * 31 + [self.totalAmt hash];
  }
  if (self.hasDivideTxnStatusName) {
    hashCode = hashCode * 31 + [self.divideTxnStatusName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentDivideBuilder()
@property (strong) ContentDivide* resultDivide;
@end

@implementation ContentDivideBuilder
@synthesize resultDivide;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDivide = [[ContentDivide alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDivide;
}
- (ContentDivideBuilder*) clear {
  self.resultDivide = [[ContentDivide alloc] init];
  return self;
}
- (ContentDivideBuilder*) clone {
  return [ContentDivide builderWithPrototype:resultDivide];
}
- (ContentDivide*) defaultInstance {
  return [ContentDivide defaultInstance];
}
- (ContentDivide*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentDivide*) buildPartial {
  ContentDivide* returnMe = resultDivide;
  self.resultDivide = nil;
  return returnMe;
}
- (ContentDivideBuilder*) mergeFrom:(ContentDivide*) other {
  if (other == [ContentDivide defaultInstance]) {
    return self;
  }
  if (other.hasCurrentStage) {
    [self setCurrentStage:other.currentStage];
  }
  if (other.hasDivideTxnNo) {
    [self setDivideTxnNo:other.divideTxnNo];
  }
  if (other.hasDivideTxnStatus) {
    [self setDivideTxnStatus:other.divideTxnStatus];
  }
  if (other.hasDivideTxnAmt) {
    [self setDivideTxnAmt:other.divideTxnAmt];
  }
  if (other.hasDivideFee) {
    [self setDivideFee:other.divideFee];
  }
  if (other.hasDivideInterest) {
    [self setDivideInterest:other.divideInterest];
  }
  if (other.hasDivideReturnAmt) {
    [self setDivideReturnAmt:other.divideReturnAmt];
  }
  if (other.hasDivideRepayDate) {
    [self setDivideRepayDate:other.divideRepayDate];
  }
  if (other.hasStatusShow) {
    [self setStatusShow:other.statusShow];
  }
  if (other.hasDivideRepayAmt) {
    [self setDivideRepayAmt:other.divideRepayAmt];
  }
  if (other.hasLeftDays) {
    [self setLeftDays:other.leftDays];
  }
  if (other.hasTotalAmt) {
    [self setTotalAmt:other.totalAmt];
  }
  if (other.hasDivideTxnStatusName) {
    [self setDivideTxnStatusName:other.divideTxnStatusName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentDivideBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentDivideBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCurrentStage:[input readString]];
        break;
      }
      case 18: {
        [self setDivideTxnNo:[input readString]];
        break;
      }
      case 26: {
        [self setDivideTxnStatus:[input readString]];
        break;
      }
      case 34: {
        [self setDivideTxnAmt:[input readString]];
        break;
      }
      case 42: {
        [self setDivideFee:[input readString]];
        break;
      }
      case 50: {
        [self setDivideInterest:[input readString]];
        break;
      }
      case 58: {
        [self setDivideReturnAmt:[input readString]];
        break;
      }
      case 66: {
        [self setDivideRepayDate:[input readString]];
        break;
      }
      case 74: {
        [self setStatusShow:[input readString]];
        break;
      }
      case 82: {
        [self setDivideRepayAmt:[input readString]];
        break;
      }
      case 90: {
        [self setLeftDays:[input readString]];
        break;
      }
      case 98: {
        [self setTotalAmt:[input readString]];
        break;
      }
      case 106: {
        [self setDivideTxnStatusName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCurrentStage {
  return resultDivide.hasCurrentStage;
}
- (NSString*) currentStage {
  return resultDivide.currentStage;
}
- (ContentDivideBuilder*) setCurrentStage:(NSString*) value {
  resultDivide.hasCurrentStage = YES;
  resultDivide.currentStage = value;
  return self;
}
- (ContentDivideBuilder*) clearCurrentStage {
  resultDivide.hasCurrentStage = NO;
  resultDivide.currentStage = @"";
  return self;
}
- (BOOL) hasDivideTxnNo {
  return resultDivide.hasDivideTxnNo;
}
- (NSString*) divideTxnNo {
  return resultDivide.divideTxnNo;
}
- (ContentDivideBuilder*) setDivideTxnNo:(NSString*) value {
  resultDivide.hasDivideTxnNo = YES;
  resultDivide.divideTxnNo = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideTxnNo {
  resultDivide.hasDivideTxnNo = NO;
  resultDivide.divideTxnNo = @"";
  return self;
}
- (BOOL) hasDivideTxnStatus {
  return resultDivide.hasDivideTxnStatus;
}
- (NSString*) divideTxnStatus {
  return resultDivide.divideTxnStatus;
}
- (ContentDivideBuilder*) setDivideTxnStatus:(NSString*) value {
  resultDivide.hasDivideTxnStatus = YES;
  resultDivide.divideTxnStatus = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideTxnStatus {
  resultDivide.hasDivideTxnStatus = NO;
  resultDivide.divideTxnStatus = @"";
  return self;
}
- (BOOL) hasDivideTxnAmt {
  return resultDivide.hasDivideTxnAmt;
}
- (NSString*) divideTxnAmt {
  return resultDivide.divideTxnAmt;
}
- (ContentDivideBuilder*) setDivideTxnAmt:(NSString*) value {
  resultDivide.hasDivideTxnAmt = YES;
  resultDivide.divideTxnAmt = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideTxnAmt {
  resultDivide.hasDivideTxnAmt = NO;
  resultDivide.divideTxnAmt = @"";
  return self;
}
- (BOOL) hasDivideFee {
  return resultDivide.hasDivideFee;
}
- (NSString*) divideFee {
  return resultDivide.divideFee;
}
- (ContentDivideBuilder*) setDivideFee:(NSString*) value {
  resultDivide.hasDivideFee = YES;
  resultDivide.divideFee = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideFee {
  resultDivide.hasDivideFee = NO;
  resultDivide.divideFee = @"";
  return self;
}
- (BOOL) hasDivideInterest {
  return resultDivide.hasDivideInterest;
}
- (NSString*) divideInterest {
  return resultDivide.divideInterest;
}
- (ContentDivideBuilder*) setDivideInterest:(NSString*) value {
  resultDivide.hasDivideInterest = YES;
  resultDivide.divideInterest = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideInterest {
  resultDivide.hasDivideInterest = NO;
  resultDivide.divideInterest = @"";
  return self;
}
- (BOOL) hasDivideReturnAmt {
  return resultDivide.hasDivideReturnAmt;
}
- (NSString*) divideReturnAmt {
  return resultDivide.divideReturnAmt;
}
- (ContentDivideBuilder*) setDivideReturnAmt:(NSString*) value {
  resultDivide.hasDivideReturnAmt = YES;
  resultDivide.divideReturnAmt = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideReturnAmt {
  resultDivide.hasDivideReturnAmt = NO;
  resultDivide.divideReturnAmt = @"";
  return self;
}
- (BOOL) hasDivideRepayDate {
  return resultDivide.hasDivideRepayDate;
}
- (NSString*) divideRepayDate {
  return resultDivide.divideRepayDate;
}
- (ContentDivideBuilder*) setDivideRepayDate:(NSString*) value {
  resultDivide.hasDivideRepayDate = YES;
  resultDivide.divideRepayDate = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideRepayDate {
  resultDivide.hasDivideRepayDate = NO;
  resultDivide.divideRepayDate = @"";
  return self;
}
- (BOOL) hasStatusShow {
  return resultDivide.hasStatusShow;
}
- (NSString*) statusShow {
  return resultDivide.statusShow;
}
- (ContentDivideBuilder*) setStatusShow:(NSString*) value {
  resultDivide.hasStatusShow = YES;
  resultDivide.statusShow = value;
  return self;
}
- (ContentDivideBuilder*) clearStatusShow {
  resultDivide.hasStatusShow = NO;
  resultDivide.statusShow = @"";
  return self;
}
- (BOOL) hasDivideRepayAmt {
  return resultDivide.hasDivideRepayAmt;
}
- (NSString*) divideRepayAmt {
  return resultDivide.divideRepayAmt;
}
- (ContentDivideBuilder*) setDivideRepayAmt:(NSString*) value {
  resultDivide.hasDivideRepayAmt = YES;
  resultDivide.divideRepayAmt = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideRepayAmt {
  resultDivide.hasDivideRepayAmt = NO;
  resultDivide.divideRepayAmt = @"";
  return self;
}
- (BOOL) hasLeftDays {
  return resultDivide.hasLeftDays;
}
- (NSString*) leftDays {
  return resultDivide.leftDays;
}
- (ContentDivideBuilder*) setLeftDays:(NSString*) value {
  resultDivide.hasLeftDays = YES;
  resultDivide.leftDays = value;
  return self;
}
- (ContentDivideBuilder*) clearLeftDays {
  resultDivide.hasLeftDays = NO;
  resultDivide.leftDays = @"";
  return self;
}
- (BOOL) hasTotalAmt {
  return resultDivide.hasTotalAmt;
}
- (NSString*) totalAmt {
  return resultDivide.totalAmt;
}
- (ContentDivideBuilder*) setTotalAmt:(NSString*) value {
  resultDivide.hasTotalAmt = YES;
  resultDivide.totalAmt = value;
  return self;
}
- (ContentDivideBuilder*) clearTotalAmt {
  resultDivide.hasTotalAmt = NO;
  resultDivide.totalAmt = @"";
  return self;
}
- (BOOL) hasDivideTxnStatusName {
  return resultDivide.hasDivideTxnStatusName;
}
- (NSString*) divideTxnStatusName {
  return resultDivide.divideTxnStatusName;
}
- (ContentDivideBuilder*) setDivideTxnStatusName:(NSString*) value {
  resultDivide.hasDivideTxnStatusName = YES;
  resultDivide.divideTxnStatusName = value;
  return self;
}
- (ContentDivideBuilder*) clearDivideTxnStatusName {
  resultDivide.hasDivideTxnStatusName = NO;
  resultDivide.divideTxnStatusName = @"";
  return self;
}
@end

@interface ContentRepayOrder ()
@property (strong) NSString* billOrderId;
@property (strong) NSString* tradeId;
@property (strong) NSString* txnAcctNo;
@property (strong) NSString* leftDays;
@property (strong) NSString* txnAmt;
@property (strong) NSString* txnTime;
@property (strong) NSString* stage;
@property (strong) NSString* currentStage;
@property (strong) NSString* repayDate;
@property (strong) NSString* merchantName;
@property (strong) NSString* isDivide;
@property (strong) NSString* stageInfo;
@property (strong) NSString* repayInfo;
@property (strong) NSString* txnStatus;
@property (strong) NSString* txnStatusName;
@property (strong) NSString* fcsCreditAmtType;
@end

@implementation ContentRepayOrder

- (BOOL) hasBillOrderId {
  return !!hasBillOrderId_;
}
- (void) setHasBillOrderId:(BOOL) _value_ {
  hasBillOrderId_ = !!_value_;
}
@synthesize billOrderId;
- (BOOL) hasTradeId {
  return !!hasTradeId_;
}
- (void) setHasTradeId:(BOOL) _value_ {
  hasTradeId_ = !!_value_;
}
@synthesize tradeId;
- (BOOL) hasTxnAcctNo {
  return !!hasTxnAcctNo_;
}
- (void) setHasTxnAcctNo:(BOOL) _value_ {
  hasTxnAcctNo_ = !!_value_;
}
@synthesize txnAcctNo;
- (BOOL) hasLeftDays {
  return !!hasLeftDays_;
}
- (void) setHasLeftDays:(BOOL) _value_ {
  hasLeftDays_ = !!_value_;
}
@synthesize leftDays;
- (BOOL) hasTxnAmt {
  return !!hasTxnAmt_;
}
- (void) setHasTxnAmt:(BOOL) _value_ {
  hasTxnAmt_ = !!_value_;
}
@synthesize txnAmt;
- (BOOL) hasTxnTime {
  return !!hasTxnTime_;
}
- (void) setHasTxnTime:(BOOL) _value_ {
  hasTxnTime_ = !!_value_;
}
@synthesize txnTime;
- (BOOL) hasStage {
  return !!hasStage_;
}
- (void) setHasStage:(BOOL) _value_ {
  hasStage_ = !!_value_;
}
@synthesize stage;
- (BOOL) hasCurrentStage {
  return !!hasCurrentStage_;
}
- (void) setHasCurrentStage:(BOOL) _value_ {
  hasCurrentStage_ = !!_value_;
}
@synthesize currentStage;
- (BOOL) hasRepayDate {
  return !!hasRepayDate_;
}
- (void) setHasRepayDate:(BOOL) _value_ {
  hasRepayDate_ = !!_value_;
}
@synthesize repayDate;
- (BOOL) hasMerchantName {
  return !!hasMerchantName_;
}
- (void) setHasMerchantName:(BOOL) _value_ {
  hasMerchantName_ = !!_value_;
}
@synthesize merchantName;
- (BOOL) hasIsDivide {
  return !!hasIsDivide_;
}
- (void) setHasIsDivide:(BOOL) _value_ {
  hasIsDivide_ = !!_value_;
}
@synthesize isDivide;
- (BOOL) hasStageInfo {
  return !!hasStageInfo_;
}
- (void) setHasStageInfo:(BOOL) _value_ {
  hasStageInfo_ = !!_value_;
}
@synthesize stageInfo;
- (BOOL) hasRepayInfo {
  return !!hasRepayInfo_;
}
- (void) setHasRepayInfo:(BOOL) _value_ {
  hasRepayInfo_ = !!_value_;
}
@synthesize repayInfo;
- (BOOL) hasTxnStatus {
  return !!hasTxnStatus_;
}
- (void) setHasTxnStatus:(BOOL) _value_ {
  hasTxnStatus_ = !!_value_;
}
@synthesize txnStatus;
- (BOOL) hasTxnStatusName {
  return !!hasTxnStatusName_;
}
- (void) setHasTxnStatusName:(BOOL) _value_ {
  hasTxnStatusName_ = !!_value_;
}
@synthesize txnStatusName;
- (BOOL) hasFcsCreditAmtType {
  return !!hasFcsCreditAmtType_;
}
- (void) setHasFcsCreditAmtType:(BOOL) _value_ {
  hasFcsCreditAmtType_ = !!_value_;
}
@synthesize fcsCreditAmtType;
- (instancetype) init {
  if ((self = [super init])) {
    self.billOrderId = @"";
    self.tradeId = @"";
    self.txnAcctNo = @"";
    self.leftDays = @"";
    self.txnAmt = @"";
    self.txnTime = @"";
    self.stage = @"";
    self.currentStage = @"";
    self.repayDate = @"";
    self.merchantName = @"";
    self.isDivide = @"";
    self.stageInfo = @"";
    self.repayInfo = @"";
    self.txnStatus = @"";
    self.txnStatusName = @"";
    self.fcsCreditAmtType = @"";
  }
  return self;
}
static ContentRepayOrder* defaultContentRepayOrderInstance = nil;
+ (void) initialize {
  if (self == [ContentRepayOrder class]) {
    defaultContentRepayOrderInstance = [[ContentRepayOrder alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentRepayOrderInstance;
}
- (instancetype) defaultInstance {
  return defaultContentRepayOrderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBillOrderId) {
    [output writeString:1 value:self.billOrderId];
  }
  if (self.hasTradeId) {
    [output writeString:2 value:self.tradeId];
  }
  if (self.hasTxnAcctNo) {
    [output writeString:3 value:self.txnAcctNo];
  }
  if (self.hasLeftDays) {
    [output writeString:4 value:self.leftDays];
  }
  if (self.hasTxnAmt) {
    [output writeString:5 value:self.txnAmt];
  }
  if (self.hasTxnTime) {
    [output writeString:6 value:self.txnTime];
  }
  if (self.hasStage) {
    [output writeString:7 value:self.stage];
  }
  if (self.hasCurrentStage) {
    [output writeString:8 value:self.currentStage];
  }
  if (self.hasRepayDate) {
    [output writeString:9 value:self.repayDate];
  }
  if (self.hasMerchantName) {
    [output writeString:10 value:self.merchantName];
  }
  if (self.hasIsDivide) {
    [output writeString:11 value:self.isDivide];
  }
  if (self.hasStageInfo) {
    [output writeString:12 value:self.stageInfo];
  }
  if (self.hasRepayInfo) {
    [output writeString:13 value:self.repayInfo];
  }
  if (self.hasTxnStatus) {
    [output writeString:14 value:self.txnStatus];
  }
  if (self.hasTxnStatusName) {
    [output writeString:15 value:self.txnStatusName];
  }
  if (self.hasFcsCreditAmtType) {
    [output writeString:16 value:self.fcsCreditAmtType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBillOrderId) {
    size_ += computeStringSize(1, self.billOrderId);
  }
  if (self.hasTradeId) {
    size_ += computeStringSize(2, self.tradeId);
  }
  if (self.hasTxnAcctNo) {
    size_ += computeStringSize(3, self.txnAcctNo);
  }
  if (self.hasLeftDays) {
    size_ += computeStringSize(4, self.leftDays);
  }
  if (self.hasTxnAmt) {
    size_ += computeStringSize(5, self.txnAmt);
  }
  if (self.hasTxnTime) {
    size_ += computeStringSize(6, self.txnTime);
  }
  if (self.hasStage) {
    size_ += computeStringSize(7, self.stage);
  }
  if (self.hasCurrentStage) {
    size_ += computeStringSize(8, self.currentStage);
  }
  if (self.hasRepayDate) {
    size_ += computeStringSize(9, self.repayDate);
  }
  if (self.hasMerchantName) {
    size_ += computeStringSize(10, self.merchantName);
  }
  if (self.hasIsDivide) {
    size_ += computeStringSize(11, self.isDivide);
  }
  if (self.hasStageInfo) {
    size_ += computeStringSize(12, self.stageInfo);
  }
  if (self.hasRepayInfo) {
    size_ += computeStringSize(13, self.repayInfo);
  }
  if (self.hasTxnStatus) {
    size_ += computeStringSize(14, self.txnStatus);
  }
  if (self.hasTxnStatusName) {
    size_ += computeStringSize(15, self.txnStatusName);
  }
  if (self.hasFcsCreditAmtType) {
    size_ += computeStringSize(16, self.fcsCreditAmtType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentRepayOrder*) parseFromData:(NSData*) data {
  return (ContentRepayOrder*)[[[ContentRepayOrder builder] mergeFromData:data] build];
}
+ (ContentRepayOrder*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentRepayOrder*)[[[ContentRepayOrder builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentRepayOrder*) parseFromInputStream:(NSInputStream*) input {
  return (ContentRepayOrder*)[[[ContentRepayOrder builder] mergeFromInputStream:input] build];
}
+ (ContentRepayOrder*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentRepayOrder*)[[[ContentRepayOrder builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentRepayOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentRepayOrder*)[[[ContentRepayOrder builder] mergeFromCodedInputStream:input] build];
}
+ (ContentRepayOrder*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentRepayOrder*)[[[ContentRepayOrder builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentRepayOrderBuilder*) builder {
  return [[ContentRepayOrderBuilder alloc] init];
}
+ (ContentRepayOrderBuilder*) builderWithPrototype:(ContentRepayOrder*) prototype {
  return [[ContentRepayOrder builder] mergeFrom:prototype];
}
- (ContentRepayOrderBuilder*) builder {
  return [ContentRepayOrder builder];
}
- (ContentRepayOrderBuilder*) toBuilder {
  return [ContentRepayOrder builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBillOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"billOrderId", self.billOrderId];
  }
  if (self.hasTradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tradeId", self.tradeId];
  }
  if (self.hasTxnAcctNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnAcctNo", self.txnAcctNo];
  }
  if (self.hasLeftDays) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leftDays", self.leftDays];
  }
  if (self.hasTxnAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnAmt", self.txnAmt];
  }
  if (self.hasTxnTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnTime", self.txnTime];
  }
  if (self.hasStage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stage", self.stage];
  }
  if (self.hasCurrentStage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentStage", self.currentStage];
  }
  if (self.hasRepayDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayDate", self.repayDate];
  }
  if (self.hasMerchantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantName", self.merchantName];
  }
  if (self.hasIsDivide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDivide", self.isDivide];
  }
  if (self.hasStageInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageInfo", self.stageInfo];
  }
  if (self.hasRepayInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayInfo", self.repayInfo];
  }
  if (self.hasTxnStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnStatus", self.txnStatus];
  }
  if (self.hasTxnStatusName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txnStatusName", self.txnStatusName];
  }
  if (self.hasFcsCreditAmtType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fcsCreditAmtType", self.fcsCreditAmtType];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBillOrderId) {
    [dictionary setObject: self.billOrderId forKey: @"billOrderId"];
  }
  if (self.hasTradeId) {
    [dictionary setObject: self.tradeId forKey: @"tradeId"];
  }
  if (self.hasTxnAcctNo) {
    [dictionary setObject: self.txnAcctNo forKey: @"txnAcctNo"];
  }
  if (self.hasLeftDays) {
    [dictionary setObject: self.leftDays forKey: @"leftDays"];
  }
  if (self.hasTxnAmt) {
    [dictionary setObject: self.txnAmt forKey: @"txnAmt"];
  }
  if (self.hasTxnTime) {
    [dictionary setObject: self.txnTime forKey: @"txnTime"];
  }
  if (self.hasStage) {
    [dictionary setObject: self.stage forKey: @"stage"];
  }
  if (self.hasCurrentStage) {
    [dictionary setObject: self.currentStage forKey: @"currentStage"];
  }
  if (self.hasRepayDate) {
    [dictionary setObject: self.repayDate forKey: @"repayDate"];
  }
  if (self.hasMerchantName) {
    [dictionary setObject: self.merchantName forKey: @"merchantName"];
  }
  if (self.hasIsDivide) {
    [dictionary setObject: self.isDivide forKey: @"isDivide"];
  }
  if (self.hasStageInfo) {
    [dictionary setObject: self.stageInfo forKey: @"stageInfo"];
  }
  if (self.hasRepayInfo) {
    [dictionary setObject: self.repayInfo forKey: @"repayInfo"];
  }
  if (self.hasTxnStatus) {
    [dictionary setObject: self.txnStatus forKey: @"txnStatus"];
  }
  if (self.hasTxnStatusName) {
    [dictionary setObject: self.txnStatusName forKey: @"txnStatusName"];
  }
  if (self.hasFcsCreditAmtType) {
    [dictionary setObject: self.fcsCreditAmtType forKey: @"fcsCreditAmtType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentRepayOrder class]]) {
    return NO;
  }
  ContentRepayOrder *otherMessage = other;
  return
      self.hasBillOrderId == otherMessage.hasBillOrderId &&
      (!self.hasBillOrderId || [self.billOrderId isEqual:otherMessage.billOrderId]) &&
      self.hasTradeId == otherMessage.hasTradeId &&
      (!self.hasTradeId || [self.tradeId isEqual:otherMessage.tradeId]) &&
      self.hasTxnAcctNo == otherMessage.hasTxnAcctNo &&
      (!self.hasTxnAcctNo || [self.txnAcctNo isEqual:otherMessage.txnAcctNo]) &&
      self.hasLeftDays == otherMessage.hasLeftDays &&
      (!self.hasLeftDays || [self.leftDays isEqual:otherMessage.leftDays]) &&
      self.hasTxnAmt == otherMessage.hasTxnAmt &&
      (!self.hasTxnAmt || [self.txnAmt isEqual:otherMessage.txnAmt]) &&
      self.hasTxnTime == otherMessage.hasTxnTime &&
      (!self.hasTxnTime || [self.txnTime isEqual:otherMessage.txnTime]) &&
      self.hasStage == otherMessage.hasStage &&
      (!self.hasStage || [self.stage isEqual:otherMessage.stage]) &&
      self.hasCurrentStage == otherMessage.hasCurrentStage &&
      (!self.hasCurrentStage || [self.currentStage isEqual:otherMessage.currentStage]) &&
      self.hasRepayDate == otherMessage.hasRepayDate &&
      (!self.hasRepayDate || [self.repayDate isEqual:otherMessage.repayDate]) &&
      self.hasMerchantName == otherMessage.hasMerchantName &&
      (!self.hasMerchantName || [self.merchantName isEqual:otherMessage.merchantName]) &&
      self.hasIsDivide == otherMessage.hasIsDivide &&
      (!self.hasIsDivide || [self.isDivide isEqual:otherMessage.isDivide]) &&
      self.hasStageInfo == otherMessage.hasStageInfo &&
      (!self.hasStageInfo || [self.stageInfo isEqual:otherMessage.stageInfo]) &&
      self.hasRepayInfo == otherMessage.hasRepayInfo &&
      (!self.hasRepayInfo || [self.repayInfo isEqual:otherMessage.repayInfo]) &&
      self.hasTxnStatus == otherMessage.hasTxnStatus &&
      (!self.hasTxnStatus || [self.txnStatus isEqual:otherMessage.txnStatus]) &&
      self.hasTxnStatusName == otherMessage.hasTxnStatusName &&
      (!self.hasTxnStatusName || [self.txnStatusName isEqual:otherMessage.txnStatusName]) &&
      self.hasFcsCreditAmtType == otherMessage.hasFcsCreditAmtType &&
      (!self.hasFcsCreditAmtType || [self.fcsCreditAmtType isEqual:otherMessage.fcsCreditAmtType]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBillOrderId) {
    hashCode = hashCode * 31 + [self.billOrderId hash];
  }
  if (self.hasTradeId) {
    hashCode = hashCode * 31 + [self.tradeId hash];
  }
  if (self.hasTxnAcctNo) {
    hashCode = hashCode * 31 + [self.txnAcctNo hash];
  }
  if (self.hasLeftDays) {
    hashCode = hashCode * 31 + [self.leftDays hash];
  }
  if (self.hasTxnAmt) {
    hashCode = hashCode * 31 + [self.txnAmt hash];
  }
  if (self.hasTxnTime) {
    hashCode = hashCode * 31 + [self.txnTime hash];
  }
  if (self.hasStage) {
    hashCode = hashCode * 31 + [self.stage hash];
  }
  if (self.hasCurrentStage) {
    hashCode = hashCode * 31 + [self.currentStage hash];
  }
  if (self.hasRepayDate) {
    hashCode = hashCode * 31 + [self.repayDate hash];
  }
  if (self.hasMerchantName) {
    hashCode = hashCode * 31 + [self.merchantName hash];
  }
  if (self.hasIsDivide) {
    hashCode = hashCode * 31 + [self.isDivide hash];
  }
  if (self.hasStageInfo) {
    hashCode = hashCode * 31 + [self.stageInfo hash];
  }
  if (self.hasRepayInfo) {
    hashCode = hashCode * 31 + [self.repayInfo hash];
  }
  if (self.hasTxnStatus) {
    hashCode = hashCode * 31 + [self.txnStatus hash];
  }
  if (self.hasTxnStatusName) {
    hashCode = hashCode * 31 + [self.txnStatusName hash];
  }
  if (self.hasFcsCreditAmtType) {
    hashCode = hashCode * 31 + [self.fcsCreditAmtType hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentRepayOrderBuilder()
@property (strong) ContentRepayOrder* resultRepayOrder;
@end

@implementation ContentRepayOrderBuilder
@synthesize resultRepayOrder;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepayOrder = [[ContentRepayOrder alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepayOrder;
}
- (ContentRepayOrderBuilder*) clear {
  self.resultRepayOrder = [[ContentRepayOrder alloc] init];
  return self;
}
- (ContentRepayOrderBuilder*) clone {
  return [ContentRepayOrder builderWithPrototype:resultRepayOrder];
}
- (ContentRepayOrder*) defaultInstance {
  return [ContentRepayOrder defaultInstance];
}
- (ContentRepayOrder*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentRepayOrder*) buildPartial {
  ContentRepayOrder* returnMe = resultRepayOrder;
  self.resultRepayOrder = nil;
  return returnMe;
}
- (ContentRepayOrderBuilder*) mergeFrom:(ContentRepayOrder*) other {
  if (other == [ContentRepayOrder defaultInstance]) {
    return self;
  }
  if (other.hasBillOrderId) {
    [self setBillOrderId:other.billOrderId];
  }
  if (other.hasTradeId) {
    [self setTradeId:other.tradeId];
  }
  if (other.hasTxnAcctNo) {
    [self setTxnAcctNo:other.txnAcctNo];
  }
  if (other.hasLeftDays) {
    [self setLeftDays:other.leftDays];
  }
  if (other.hasTxnAmt) {
    [self setTxnAmt:other.txnAmt];
  }
  if (other.hasTxnTime) {
    [self setTxnTime:other.txnTime];
  }
  if (other.hasStage) {
    [self setStage:other.stage];
  }
  if (other.hasCurrentStage) {
    [self setCurrentStage:other.currentStage];
  }
  if (other.hasRepayDate) {
    [self setRepayDate:other.repayDate];
  }
  if (other.hasMerchantName) {
    [self setMerchantName:other.merchantName];
  }
  if (other.hasIsDivide) {
    [self setIsDivide:other.isDivide];
  }
  if (other.hasStageInfo) {
    [self setStageInfo:other.stageInfo];
  }
  if (other.hasRepayInfo) {
    [self setRepayInfo:other.repayInfo];
  }
  if (other.hasTxnStatus) {
    [self setTxnStatus:other.txnStatus];
  }
  if (other.hasTxnStatusName) {
    [self setTxnStatusName:other.txnStatusName];
  }
  if (other.hasFcsCreditAmtType) {
    [self setFcsCreditAmtType:other.fcsCreditAmtType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentRepayOrderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentRepayOrderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBillOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setTradeId:[input readString]];
        break;
      }
      case 26: {
        [self setTxnAcctNo:[input readString]];
        break;
      }
      case 34: {
        [self setLeftDays:[input readString]];
        break;
      }
      case 42: {
        [self setTxnAmt:[input readString]];
        break;
      }
      case 50: {
        [self setTxnTime:[input readString]];
        break;
      }
      case 58: {
        [self setStage:[input readString]];
        break;
      }
      case 66: {
        [self setCurrentStage:[input readString]];
        break;
      }
      case 74: {
        [self setRepayDate:[input readString]];
        break;
      }
      case 82: {
        [self setMerchantName:[input readString]];
        break;
      }
      case 90: {
        [self setIsDivide:[input readString]];
        break;
      }
      case 98: {
        [self setStageInfo:[input readString]];
        break;
      }
      case 106: {
        [self setRepayInfo:[input readString]];
        break;
      }
      case 114: {
        [self setTxnStatus:[input readString]];
        break;
      }
      case 122: {
        [self setTxnStatusName:[input readString]];
        break;
      }
      case 130: {
        [self setFcsCreditAmtType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBillOrderId {
  return resultRepayOrder.hasBillOrderId;
}
- (NSString*) billOrderId {
  return resultRepayOrder.billOrderId;
}
- (ContentRepayOrderBuilder*) setBillOrderId:(NSString*) value {
  resultRepayOrder.hasBillOrderId = YES;
  resultRepayOrder.billOrderId = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearBillOrderId {
  resultRepayOrder.hasBillOrderId = NO;
  resultRepayOrder.billOrderId = @"";
  return self;
}
- (BOOL) hasTradeId {
  return resultRepayOrder.hasTradeId;
}
- (NSString*) tradeId {
  return resultRepayOrder.tradeId;
}
- (ContentRepayOrderBuilder*) setTradeId:(NSString*) value {
  resultRepayOrder.hasTradeId = YES;
  resultRepayOrder.tradeId = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearTradeId {
  resultRepayOrder.hasTradeId = NO;
  resultRepayOrder.tradeId = @"";
  return self;
}
- (BOOL) hasTxnAcctNo {
  return resultRepayOrder.hasTxnAcctNo;
}
- (NSString*) txnAcctNo {
  return resultRepayOrder.txnAcctNo;
}
- (ContentRepayOrderBuilder*) setTxnAcctNo:(NSString*) value {
  resultRepayOrder.hasTxnAcctNo = YES;
  resultRepayOrder.txnAcctNo = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearTxnAcctNo {
  resultRepayOrder.hasTxnAcctNo = NO;
  resultRepayOrder.txnAcctNo = @"";
  return self;
}
- (BOOL) hasLeftDays {
  return resultRepayOrder.hasLeftDays;
}
- (NSString*) leftDays {
  return resultRepayOrder.leftDays;
}
- (ContentRepayOrderBuilder*) setLeftDays:(NSString*) value {
  resultRepayOrder.hasLeftDays = YES;
  resultRepayOrder.leftDays = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearLeftDays {
  resultRepayOrder.hasLeftDays = NO;
  resultRepayOrder.leftDays = @"";
  return self;
}
- (BOOL) hasTxnAmt {
  return resultRepayOrder.hasTxnAmt;
}
- (NSString*) txnAmt {
  return resultRepayOrder.txnAmt;
}
- (ContentRepayOrderBuilder*) setTxnAmt:(NSString*) value {
  resultRepayOrder.hasTxnAmt = YES;
  resultRepayOrder.txnAmt = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearTxnAmt {
  resultRepayOrder.hasTxnAmt = NO;
  resultRepayOrder.txnAmt = @"";
  return self;
}
- (BOOL) hasTxnTime {
  return resultRepayOrder.hasTxnTime;
}
- (NSString*) txnTime {
  return resultRepayOrder.txnTime;
}
- (ContentRepayOrderBuilder*) setTxnTime:(NSString*) value {
  resultRepayOrder.hasTxnTime = YES;
  resultRepayOrder.txnTime = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearTxnTime {
  resultRepayOrder.hasTxnTime = NO;
  resultRepayOrder.txnTime = @"";
  return self;
}
- (BOOL) hasStage {
  return resultRepayOrder.hasStage;
}
- (NSString*) stage {
  return resultRepayOrder.stage;
}
- (ContentRepayOrderBuilder*) setStage:(NSString*) value {
  resultRepayOrder.hasStage = YES;
  resultRepayOrder.stage = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearStage {
  resultRepayOrder.hasStage = NO;
  resultRepayOrder.stage = @"";
  return self;
}
- (BOOL) hasCurrentStage {
  return resultRepayOrder.hasCurrentStage;
}
- (NSString*) currentStage {
  return resultRepayOrder.currentStage;
}
- (ContentRepayOrderBuilder*) setCurrentStage:(NSString*) value {
  resultRepayOrder.hasCurrentStage = YES;
  resultRepayOrder.currentStage = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearCurrentStage {
  resultRepayOrder.hasCurrentStage = NO;
  resultRepayOrder.currentStage = @"";
  return self;
}
- (BOOL) hasRepayDate {
  return resultRepayOrder.hasRepayDate;
}
- (NSString*) repayDate {
  return resultRepayOrder.repayDate;
}
- (ContentRepayOrderBuilder*) setRepayDate:(NSString*) value {
  resultRepayOrder.hasRepayDate = YES;
  resultRepayOrder.repayDate = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearRepayDate {
  resultRepayOrder.hasRepayDate = NO;
  resultRepayOrder.repayDate = @"";
  return self;
}
- (BOOL) hasMerchantName {
  return resultRepayOrder.hasMerchantName;
}
- (NSString*) merchantName {
  return resultRepayOrder.merchantName;
}
- (ContentRepayOrderBuilder*) setMerchantName:(NSString*) value {
  resultRepayOrder.hasMerchantName = YES;
  resultRepayOrder.merchantName = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearMerchantName {
  resultRepayOrder.hasMerchantName = NO;
  resultRepayOrder.merchantName = @"";
  return self;
}
- (BOOL) hasIsDivide {
  return resultRepayOrder.hasIsDivide;
}
- (NSString*) isDivide {
  return resultRepayOrder.isDivide;
}
- (ContentRepayOrderBuilder*) setIsDivide:(NSString*) value {
  resultRepayOrder.hasIsDivide = YES;
  resultRepayOrder.isDivide = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearIsDivide {
  resultRepayOrder.hasIsDivide = NO;
  resultRepayOrder.isDivide = @"";
  return self;
}
- (BOOL) hasStageInfo {
  return resultRepayOrder.hasStageInfo;
}
- (NSString*) stageInfo {
  return resultRepayOrder.stageInfo;
}
- (ContentRepayOrderBuilder*) setStageInfo:(NSString*) value {
  resultRepayOrder.hasStageInfo = YES;
  resultRepayOrder.stageInfo = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearStageInfo {
  resultRepayOrder.hasStageInfo = NO;
  resultRepayOrder.stageInfo = @"";
  return self;
}
- (BOOL) hasRepayInfo {
  return resultRepayOrder.hasRepayInfo;
}
- (NSString*) repayInfo {
  return resultRepayOrder.repayInfo;
}
- (ContentRepayOrderBuilder*) setRepayInfo:(NSString*) value {
  resultRepayOrder.hasRepayInfo = YES;
  resultRepayOrder.repayInfo = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearRepayInfo {
  resultRepayOrder.hasRepayInfo = NO;
  resultRepayOrder.repayInfo = @"";
  return self;
}
- (BOOL) hasTxnStatus {
  return resultRepayOrder.hasTxnStatus;
}
- (NSString*) txnStatus {
  return resultRepayOrder.txnStatus;
}
- (ContentRepayOrderBuilder*) setTxnStatus:(NSString*) value {
  resultRepayOrder.hasTxnStatus = YES;
  resultRepayOrder.txnStatus = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearTxnStatus {
  resultRepayOrder.hasTxnStatus = NO;
  resultRepayOrder.txnStatus = @"";
  return self;
}
- (BOOL) hasTxnStatusName {
  return resultRepayOrder.hasTxnStatusName;
}
- (NSString*) txnStatusName {
  return resultRepayOrder.txnStatusName;
}
- (ContentRepayOrderBuilder*) setTxnStatusName:(NSString*) value {
  resultRepayOrder.hasTxnStatusName = YES;
  resultRepayOrder.txnStatusName = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearTxnStatusName {
  resultRepayOrder.hasTxnStatusName = NO;
  resultRepayOrder.txnStatusName = @"";
  return self;
}
- (BOOL) hasFcsCreditAmtType {
  return resultRepayOrder.hasFcsCreditAmtType;
}
- (NSString*) fcsCreditAmtType {
  return resultRepayOrder.fcsCreditAmtType;
}
- (ContentRepayOrderBuilder*) setFcsCreditAmtType:(NSString*) value {
  resultRepayOrder.hasFcsCreditAmtType = YES;
  resultRepayOrder.fcsCreditAmtType = value;
  return self;
}
- (ContentRepayOrderBuilder*) clearFcsCreditAmtType {
  resultRepayOrder.hasFcsCreditAmtType = NO;
  resultRepayOrder.fcsCreditAmtType = @"";
  return self;
}
@end

@interface ContentRepayRecord ()
@property (strong) NSString* repayAmt;
@property (strong) NSString* repayTime;
@property (strong) NSString* repayName;
@property (strong) NSString* status;
@end

@implementation ContentRepayRecord

- (BOOL) hasRepayAmt {
  return !!hasRepayAmt_;
}
- (void) setHasRepayAmt:(BOOL) _value_ {
  hasRepayAmt_ = !!_value_;
}
@synthesize repayAmt;
- (BOOL) hasRepayTime {
  return !!hasRepayTime_;
}
- (void) setHasRepayTime:(BOOL) _value_ {
  hasRepayTime_ = !!_value_;
}
@synthesize repayTime;
- (BOOL) hasRepayName {
  return !!hasRepayName_;
}
- (void) setHasRepayName:(BOOL) _value_ {
  hasRepayName_ = !!_value_;
}
@synthesize repayName;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.repayAmt = @"";
    self.repayTime = @"";
    self.repayName = @"";
    self.status = @"";
  }
  return self;
}
static ContentRepayRecord* defaultContentRepayRecordInstance = nil;
+ (void) initialize {
  if (self == [ContentRepayRecord class]) {
    defaultContentRepayRecordInstance = [[ContentRepayRecord alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentRepayRecordInstance;
}
- (instancetype) defaultInstance {
  return defaultContentRepayRecordInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRepayAmt) {
    [output writeString:1 value:self.repayAmt];
  }
  if (self.hasRepayTime) {
    [output writeString:2 value:self.repayTime];
  }
  if (self.hasRepayName) {
    [output writeString:3 value:self.repayName];
  }
  if (self.hasStatus) {
    [output writeString:4 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRepayAmt) {
    size_ += computeStringSize(1, self.repayAmt);
  }
  if (self.hasRepayTime) {
    size_ += computeStringSize(2, self.repayTime);
  }
  if (self.hasRepayName) {
    size_ += computeStringSize(3, self.repayName);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(4, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentRepayRecord*) parseFromData:(NSData*) data {
  return (ContentRepayRecord*)[[[ContentRepayRecord builder] mergeFromData:data] build];
}
+ (ContentRepayRecord*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentRepayRecord*)[[[ContentRepayRecord builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentRepayRecord*) parseFromInputStream:(NSInputStream*) input {
  return (ContentRepayRecord*)[[[ContentRepayRecord builder] mergeFromInputStream:input] build];
}
+ (ContentRepayRecord*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentRepayRecord*)[[[ContentRepayRecord builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentRepayRecord*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentRepayRecord*)[[[ContentRepayRecord builder] mergeFromCodedInputStream:input] build];
}
+ (ContentRepayRecord*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentRepayRecord*)[[[ContentRepayRecord builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentRepayRecordBuilder*) builder {
  return [[ContentRepayRecordBuilder alloc] init];
}
+ (ContentRepayRecordBuilder*) builderWithPrototype:(ContentRepayRecord*) prototype {
  return [[ContentRepayRecord builder] mergeFrom:prototype];
}
- (ContentRepayRecordBuilder*) builder {
  return [ContentRepayRecord builder];
}
- (ContentRepayRecordBuilder*) toBuilder {
  return [ContentRepayRecord builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRepayAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayAmt", self.repayAmt];
  }
  if (self.hasRepayTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayTime", self.repayTime];
  }
  if (self.hasRepayName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repayName", self.repayName];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRepayAmt) {
    [dictionary setObject: self.repayAmt forKey: @"repayAmt"];
  }
  if (self.hasRepayTime) {
    [dictionary setObject: self.repayTime forKey: @"repayTime"];
  }
  if (self.hasRepayName) {
    [dictionary setObject: self.repayName forKey: @"repayName"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentRepayRecord class]]) {
    return NO;
  }
  ContentRepayRecord *otherMessage = other;
  return
      self.hasRepayAmt == otherMessage.hasRepayAmt &&
      (!self.hasRepayAmt || [self.repayAmt isEqual:otherMessage.repayAmt]) &&
      self.hasRepayTime == otherMessage.hasRepayTime &&
      (!self.hasRepayTime || [self.repayTime isEqual:otherMessage.repayTime]) &&
      self.hasRepayName == otherMessage.hasRepayName &&
      (!self.hasRepayName || [self.repayName isEqual:otherMessage.repayName]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRepayAmt) {
    hashCode = hashCode * 31 + [self.repayAmt hash];
  }
  if (self.hasRepayTime) {
    hashCode = hashCode * 31 + [self.repayTime hash];
  }
  if (self.hasRepayName) {
    hashCode = hashCode * 31 + [self.repayName hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentRepayRecordBuilder()
@property (strong) ContentRepayRecord* resultRepayRecord;
@end

@implementation ContentRepayRecordBuilder
@synthesize resultRepayRecord;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepayRecord = [[ContentRepayRecord alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepayRecord;
}
- (ContentRepayRecordBuilder*) clear {
  self.resultRepayRecord = [[ContentRepayRecord alloc] init];
  return self;
}
- (ContentRepayRecordBuilder*) clone {
  return [ContentRepayRecord builderWithPrototype:resultRepayRecord];
}
- (ContentRepayRecord*) defaultInstance {
  return [ContentRepayRecord defaultInstance];
}
- (ContentRepayRecord*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentRepayRecord*) buildPartial {
  ContentRepayRecord* returnMe = resultRepayRecord;
  self.resultRepayRecord = nil;
  return returnMe;
}
- (ContentRepayRecordBuilder*) mergeFrom:(ContentRepayRecord*) other {
  if (other == [ContentRepayRecord defaultInstance]) {
    return self;
  }
  if (other.hasRepayAmt) {
    [self setRepayAmt:other.repayAmt];
  }
  if (other.hasRepayTime) {
    [self setRepayTime:other.repayTime];
  }
  if (other.hasRepayName) {
    [self setRepayName:other.repayName];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentRepayRecordBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentRepayRecordBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRepayAmt:[input readString]];
        break;
      }
      case 18: {
        [self setRepayTime:[input readString]];
        break;
      }
      case 26: {
        [self setRepayName:[input readString]];
        break;
      }
      case 34: {
        [self setStatus:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRepayAmt {
  return resultRepayRecord.hasRepayAmt;
}
- (NSString*) repayAmt {
  return resultRepayRecord.repayAmt;
}
- (ContentRepayRecordBuilder*) setRepayAmt:(NSString*) value {
  resultRepayRecord.hasRepayAmt = YES;
  resultRepayRecord.repayAmt = value;
  return self;
}
- (ContentRepayRecordBuilder*) clearRepayAmt {
  resultRepayRecord.hasRepayAmt = NO;
  resultRepayRecord.repayAmt = @"";
  return self;
}
- (BOOL) hasRepayTime {
  return resultRepayRecord.hasRepayTime;
}
- (NSString*) repayTime {
  return resultRepayRecord.repayTime;
}
- (ContentRepayRecordBuilder*) setRepayTime:(NSString*) value {
  resultRepayRecord.hasRepayTime = YES;
  resultRepayRecord.repayTime = value;
  return self;
}
- (ContentRepayRecordBuilder*) clearRepayTime {
  resultRepayRecord.hasRepayTime = NO;
  resultRepayRecord.repayTime = @"";
  return self;
}
- (BOOL) hasRepayName {
  return resultRepayRecord.hasRepayName;
}
- (NSString*) repayName {
  return resultRepayRecord.repayName;
}
- (ContentRepayRecordBuilder*) setRepayName:(NSString*) value {
  resultRepayRecord.hasRepayName = YES;
  resultRepayRecord.repayName = value;
  return self;
}
- (ContentRepayRecordBuilder*) clearRepayName {
  resultRepayRecord.hasRepayName = NO;
  resultRepayRecord.repayName = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultRepayRecord.hasStatus;
}
- (NSString*) status {
  return resultRepayRecord.status;
}
- (ContentRepayRecordBuilder*) setStatus:(NSString*) value {
  resultRepayRecord.hasStatus = YES;
  resultRepayRecord.status = value;
  return self;
}
- (ContentRepayRecordBuilder*) clearStatus {
  resultRepayRecord.hasStatus = NO;
  resultRepayRecord.status = @"";
  return self;
}
@end

@interface ContentPayType ()
@property (strong) NSString* payType;
@property (strong) NSString* payTypeName;
@end

@implementation ContentPayType

- (BOOL) hasPayType {
  return !!hasPayType_;
}
- (void) setHasPayType:(BOOL) _value_ {
  hasPayType_ = !!_value_;
}
@synthesize payType;
- (BOOL) hasPayTypeName {
  return !!hasPayTypeName_;
}
- (void) setHasPayTypeName:(BOOL) _value_ {
  hasPayTypeName_ = !!_value_;
}
@synthesize payTypeName;
- (instancetype) init {
  if ((self = [super init])) {
    self.payType = @"";
    self.payTypeName = @"";
  }
  return self;
}
static ContentPayType* defaultContentPayTypeInstance = nil;
+ (void) initialize {
  if (self == [ContentPayType class]) {
    defaultContentPayTypeInstance = [[ContentPayType alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentPayTypeInstance;
}
- (instancetype) defaultInstance {
  return defaultContentPayTypeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPayType) {
    [output writeString:1 value:self.payType];
  }
  if (self.hasPayTypeName) {
    [output writeString:2 value:self.payTypeName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPayType) {
    size_ += computeStringSize(1, self.payType);
  }
  if (self.hasPayTypeName) {
    size_ += computeStringSize(2, self.payTypeName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentPayType*) parseFromData:(NSData*) data {
  return (ContentPayType*)[[[ContentPayType builder] mergeFromData:data] build];
}
+ (ContentPayType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentPayType*)[[[ContentPayType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentPayType*) parseFromInputStream:(NSInputStream*) input {
  return (ContentPayType*)[[[ContentPayType builder] mergeFromInputStream:input] build];
}
+ (ContentPayType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentPayType*)[[[ContentPayType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentPayType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentPayType*)[[[ContentPayType builder] mergeFromCodedInputStream:input] build];
}
+ (ContentPayType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentPayType*)[[[ContentPayType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentPayTypeBuilder*) builder {
  return [[ContentPayTypeBuilder alloc] init];
}
+ (ContentPayTypeBuilder*) builderWithPrototype:(ContentPayType*) prototype {
  return [[ContentPayType builder] mergeFrom:prototype];
}
- (ContentPayTypeBuilder*) builder {
  return [ContentPayType builder];
}
- (ContentPayTypeBuilder*) toBuilder {
  return [ContentPayType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPayType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payType", self.payType];
  }
  if (self.hasPayTypeName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payTypeName", self.payTypeName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPayType) {
    [dictionary setObject: self.payType forKey: @"payType"];
  }
  if (self.hasPayTypeName) {
    [dictionary setObject: self.payTypeName forKey: @"payTypeName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentPayType class]]) {
    return NO;
  }
  ContentPayType *otherMessage = other;
  return
      self.hasPayType == otherMessage.hasPayType &&
      (!self.hasPayType || [self.payType isEqual:otherMessage.payType]) &&
      self.hasPayTypeName == otherMessage.hasPayTypeName &&
      (!self.hasPayTypeName || [self.payTypeName isEqual:otherMessage.payTypeName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPayType) {
    hashCode = hashCode * 31 + [self.payType hash];
  }
  if (self.hasPayTypeName) {
    hashCode = hashCode * 31 + [self.payTypeName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentPayTypeBuilder()
@property (strong) ContentPayType* resultPayType;
@end

@implementation ContentPayTypeBuilder
@synthesize resultPayType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPayType = [[ContentPayType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPayType;
}
- (ContentPayTypeBuilder*) clear {
  self.resultPayType = [[ContentPayType alloc] init];
  return self;
}
- (ContentPayTypeBuilder*) clone {
  return [ContentPayType builderWithPrototype:resultPayType];
}
- (ContentPayType*) defaultInstance {
  return [ContentPayType defaultInstance];
}
- (ContentPayType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentPayType*) buildPartial {
  ContentPayType* returnMe = resultPayType;
  self.resultPayType = nil;
  return returnMe;
}
- (ContentPayTypeBuilder*) mergeFrom:(ContentPayType*) other {
  if (other == [ContentPayType defaultInstance]) {
    return self;
  }
  if (other.hasPayType) {
    [self setPayType:other.payType];
  }
  if (other.hasPayTypeName) {
    [self setPayTypeName:other.payTypeName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentPayTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentPayTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPayType:[input readString]];
        break;
      }
      case 18: {
        [self setPayTypeName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPayType {
  return resultPayType.hasPayType;
}
- (NSString*) payType {
  return resultPayType.payType;
}
- (ContentPayTypeBuilder*) setPayType:(NSString*) value {
  resultPayType.hasPayType = YES;
  resultPayType.payType = value;
  return self;
}
- (ContentPayTypeBuilder*) clearPayType {
  resultPayType.hasPayType = NO;
  resultPayType.payType = @"";
  return self;
}
- (BOOL) hasPayTypeName {
  return resultPayType.hasPayTypeName;
}
- (NSString*) payTypeName {
  return resultPayType.payTypeName;
}
- (ContentPayTypeBuilder*) setPayTypeName:(NSString*) value {
  resultPayType.hasPayTypeName = YES;
  resultPayType.payTypeName = value;
  return self;
}
- (ContentPayTypeBuilder*) clearPayTypeName {
  resultPayType.hasPayTypeName = NO;
  resultPayType.payTypeName = @"";
  return self;
}
@end

@interface ContentContract ()
@property (strong) NSString* name;
@property (strong) NSString* url;
@end

@implementation ContentContract

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.url = @"";
  }
  return self;
}
static ContentContract* defaultContentContractInstance = nil;
+ (void) initialize {
  if (self == [ContentContract class]) {
    defaultContentContractInstance = [[ContentContract alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentContractInstance;
}
- (instancetype) defaultInstance {
  return defaultContentContractInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasUrl) {
    [output writeString:2 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(2, self.url);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentContract*) parseFromData:(NSData*) data {
  return (ContentContract*)[[[ContentContract builder] mergeFromData:data] build];
}
+ (ContentContract*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentContract*)[[[ContentContract builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentContract*) parseFromInputStream:(NSInputStream*) input {
  return (ContentContract*)[[[ContentContract builder] mergeFromInputStream:input] build];
}
+ (ContentContract*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentContract*)[[[ContentContract builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentContract*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentContract*)[[[ContentContract builder] mergeFromCodedInputStream:input] build];
}
+ (ContentContract*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentContract*)[[[ContentContract builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentContractBuilder*) builder {
  return [[ContentContractBuilder alloc] init];
}
+ (ContentContractBuilder*) builderWithPrototype:(ContentContract*) prototype {
  return [[ContentContract builder] mergeFrom:prototype];
}
- (ContentContractBuilder*) builder {
  return [ContentContract builder];
}
- (ContentContractBuilder*) toBuilder {
  return [ContentContract builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentContract class]]) {
    return NO;
  }
  ContentContract *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentContractBuilder()
@property (strong) ContentContract* resultContract;
@end

@implementation ContentContractBuilder
@synthesize resultContract;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultContract = [[ContentContract alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultContract;
}
- (ContentContractBuilder*) clear {
  self.resultContract = [[ContentContract alloc] init];
  return self;
}
- (ContentContractBuilder*) clone {
  return [ContentContract builderWithPrototype:resultContract];
}
- (ContentContract*) defaultInstance {
  return [ContentContract defaultInstance];
}
- (ContentContract*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentContract*) buildPartial {
  ContentContract* returnMe = resultContract;
  self.resultContract = nil;
  return returnMe;
}
- (ContentContractBuilder*) mergeFrom:(ContentContract*) other {
  if (other == [ContentContract defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentContractBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentContractBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultContract.hasName;
}
- (NSString*) name {
  return resultContract.name;
}
- (ContentContractBuilder*) setName:(NSString*) value {
  resultContract.hasName = YES;
  resultContract.name = value;
  return self;
}
- (ContentContractBuilder*) clearName {
  resultContract.hasName = NO;
  resultContract.name = @"";
  return self;
}
- (BOOL) hasUrl {
  return resultContract.hasUrl;
}
- (NSString*) url {
  return resultContract.url;
}
- (ContentContractBuilder*) setUrl:(NSString*) value {
  resultContract.hasUrl = YES;
  resultContract.url = value;
  return self;
}
- (ContentContractBuilder*) clearUrl {
  resultContract.hasUrl = NO;
  resultContract.url = @"";
  return self;
}
@end

@interface ContentFrozenInfo ()
@property (strong) NSString* status;
@property (strong) NSString* desc;
@property (strong) NSString* url;
@end

@implementation ContentFrozenInfo

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = @"";
    self.desc = @"";
    self.url = @"";
  }
  return self;
}
static ContentFrozenInfo* defaultContentFrozenInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentFrozenInfo class]) {
    defaultContentFrozenInfoInstance = [[ContentFrozenInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentFrozenInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentFrozenInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeString:1 value:self.status];
  }
  if (self.hasDesc) {
    [output writeString:2 value:self.desc];
  }
  if (self.hasUrl) {
    [output writeString:3 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeStringSize(1, self.status);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(2, self.desc);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(3, self.url);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentFrozenInfo*) parseFromData:(NSData*) data {
  return (ContentFrozenInfo*)[[[ContentFrozenInfo builder] mergeFromData:data] build];
}
+ (ContentFrozenInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentFrozenInfo*)[[[ContentFrozenInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentFrozenInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentFrozenInfo*)[[[ContentFrozenInfo builder] mergeFromInputStream:input] build];
}
+ (ContentFrozenInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentFrozenInfo*)[[[ContentFrozenInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentFrozenInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentFrozenInfo*)[[[ContentFrozenInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentFrozenInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentFrozenInfo*)[[[ContentFrozenInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentFrozenInfoBuilder*) builder {
  return [[ContentFrozenInfoBuilder alloc] init];
}
+ (ContentFrozenInfoBuilder*) builderWithPrototype:(ContentFrozenInfo*) prototype {
  return [[ContentFrozenInfo builder] mergeFrom:prototype];
}
- (ContentFrozenInfoBuilder*) builder {
  return [ContentFrozenInfo builder];
}
- (ContentFrozenInfoBuilder*) toBuilder {
  return [ContentFrozenInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  if (self.hasDesc) {
    [dictionary setObject: self.desc forKey: @"desc"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentFrozenInfo class]]) {
    return NO;
  }
  ContentFrozenInfo *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentFrozenInfoBuilder()
@property (strong) ContentFrozenInfo* resultFrozenInfo;
@end

@implementation ContentFrozenInfoBuilder
@synthesize resultFrozenInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFrozenInfo = [[ContentFrozenInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFrozenInfo;
}
- (ContentFrozenInfoBuilder*) clear {
  self.resultFrozenInfo = [[ContentFrozenInfo alloc] init];
  return self;
}
- (ContentFrozenInfoBuilder*) clone {
  return [ContentFrozenInfo builderWithPrototype:resultFrozenInfo];
}
- (ContentFrozenInfo*) defaultInstance {
  return [ContentFrozenInfo defaultInstance];
}
- (ContentFrozenInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentFrozenInfo*) buildPartial {
  ContentFrozenInfo* returnMe = resultFrozenInfo;
  self.resultFrozenInfo = nil;
  return returnMe;
}
- (ContentFrozenInfoBuilder*) mergeFrom:(ContentFrozenInfo*) other {
  if (other == [ContentFrozenInfo defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentFrozenInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentFrozenInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setStatus:[input readString]];
        break;
      }
      case 18: {
        [self setDesc:[input readString]];
        break;
      }
      case 26: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultFrozenInfo.hasStatus;
}
- (NSString*) status {
  return resultFrozenInfo.status;
}
- (ContentFrozenInfoBuilder*) setStatus:(NSString*) value {
  resultFrozenInfo.hasStatus = YES;
  resultFrozenInfo.status = value;
  return self;
}
- (ContentFrozenInfoBuilder*) clearStatus {
  resultFrozenInfo.hasStatus = NO;
  resultFrozenInfo.status = @"";
  return self;
}
- (BOOL) hasDesc {
  return resultFrozenInfo.hasDesc;
}
- (NSString*) desc {
  return resultFrozenInfo.desc;
}
- (ContentFrozenInfoBuilder*) setDesc:(NSString*) value {
  resultFrozenInfo.hasDesc = YES;
  resultFrozenInfo.desc = value;
  return self;
}
- (ContentFrozenInfoBuilder*) clearDesc {
  resultFrozenInfo.hasDesc = NO;
  resultFrozenInfo.desc = @"";
  return self;
}
- (BOOL) hasUrl {
  return resultFrozenInfo.hasUrl;
}
- (NSString*) url {
  return resultFrozenInfo.url;
}
- (ContentFrozenInfoBuilder*) setUrl:(NSString*) value {
  resultFrozenInfo.hasUrl = YES;
  resultFrozenInfo.url = value;
  return self;
}
- (ContentFrozenInfoBuilder*) clearUrl {
  resultFrozenInfo.hasUrl = NO;
  resultFrozenInfo.url = @"";
  return self;
}
@end

@interface ContentResult ()
@property (strong) NSString* itemId;
@property (strong) NSString* name;
@property (strong) NSString* imageDefaultId;
@property (strong) NSString* price;
@property (strong) NSString* sort;
@property (strong) NSString* creditSort;
@property (strong) NSString* tag;
@property (strong) NSString* isStages;
@property (strong) NSString* stagesApp;
@end

@implementation ContentResult

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) _value_ {
  hasItemId_ = !!_value_;
}
@synthesize itemId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasImageDefaultId {
  return !!hasImageDefaultId_;
}
- (void) setHasImageDefaultId:(BOOL) _value_ {
  hasImageDefaultId_ = !!_value_;
}
@synthesize imageDefaultId;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasSort {
  return !!hasSort_;
}
- (void) setHasSort:(BOOL) _value_ {
  hasSort_ = !!_value_;
}
@synthesize sort;
- (BOOL) hasCreditSort {
  return !!hasCreditSort_;
}
- (void) setHasCreditSort:(BOOL) _value_ {
  hasCreditSort_ = !!_value_;
}
@synthesize creditSort;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) _value_ {
  hasTag_ = !!_value_;
}
@synthesize tag;
- (BOOL) hasIsStages {
  return !!hasIsStages_;
}
- (void) setHasIsStages:(BOOL) _value_ {
  hasIsStages_ = !!_value_;
}
@synthesize isStages;
- (BOOL) hasStagesApp {
  return !!hasStagesApp_;
}
- (void) setHasStagesApp:(BOOL) _value_ {
  hasStagesApp_ = !!_value_;
}
@synthesize stagesApp;
- (instancetype) init {
  if ((self = [super init])) {
    self.itemId = @"";
    self.name = @"";
    self.imageDefaultId = @"";
    self.price = @"";
    self.sort = @"";
    self.creditSort = @"";
    self.tag = @"";
    self.isStages = @"";
    self.stagesApp = @"";
  }
  return self;
}
static ContentResult* defaultContentResultInstance = nil;
+ (void) initialize {
  if (self == [ContentResult class]) {
    defaultContentResultInstance = [[ContentResult alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentResultInstance;
}
- (instancetype) defaultInstance {
  return defaultContentResultInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeString:1 value:self.itemId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasImageDefaultId) {
    [output writeString:3 value:self.imageDefaultId];
  }
  if (self.hasPrice) {
    [output writeString:4 value:self.price];
  }
  if (self.hasSort) {
    [output writeString:5 value:self.sort];
  }
  if (self.hasCreditSort) {
    [output writeString:6 value:self.creditSort];
  }
  if (self.hasTag) {
    [output writeString:7 value:self.tag];
  }
  if (self.hasIsStages) {
    [output writeString:8 value:self.isStages];
  }
  if (self.hasStagesApp) {
    [output writeString:9 value:self.stagesApp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItemId) {
    size_ += computeStringSize(1, self.itemId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasImageDefaultId) {
    size_ += computeStringSize(3, self.imageDefaultId);
  }
  if (self.hasPrice) {
    size_ += computeStringSize(4, self.price);
  }
  if (self.hasSort) {
    size_ += computeStringSize(5, self.sort);
  }
  if (self.hasCreditSort) {
    size_ += computeStringSize(6, self.creditSort);
  }
  if (self.hasTag) {
    size_ += computeStringSize(7, self.tag);
  }
  if (self.hasIsStages) {
    size_ += computeStringSize(8, self.isStages);
  }
  if (self.hasStagesApp) {
    size_ += computeStringSize(9, self.stagesApp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentResult*) parseFromData:(NSData*) data {
  return (ContentResult*)[[[ContentResult builder] mergeFromData:data] build];
}
+ (ContentResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentResult*)[[[ContentResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentResult*) parseFromInputStream:(NSInputStream*) input {
  return (ContentResult*)[[[ContentResult builder] mergeFromInputStream:input] build];
}
+ (ContentResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentResult*)[[[ContentResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentResult*)[[[ContentResult builder] mergeFromCodedInputStream:input] build];
}
+ (ContentResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentResult*)[[[ContentResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentResultBuilder*) builder {
  return [[ContentResultBuilder alloc] init];
}
+ (ContentResultBuilder*) builderWithPrototype:(ContentResult*) prototype {
  return [[ContentResult builder] mergeFrom:prototype];
}
- (ContentResultBuilder*) builder {
  return [ContentResult builder];
}
- (ContentResultBuilder*) toBuilder {
  return [ContentResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", self.itemId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasImageDefaultId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageDefaultId", self.imageDefaultId];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", self.price];
  }
  if (self.hasSort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sort", self.sort];
  }
  if (self.hasCreditSort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"creditSort", self.creditSort];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", self.tag];
  }
  if (self.hasIsStages) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isStages", self.isStages];
  }
  if (self.hasStagesApp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stagesApp", self.stagesApp];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasItemId) {
    [dictionary setObject: self.itemId forKey: @"itemId"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasImageDefaultId) {
    [dictionary setObject: self.imageDefaultId forKey: @"imageDefaultId"];
  }
  if (self.hasPrice) {
    [dictionary setObject: self.price forKey: @"price"];
  }
  if (self.hasSort) {
    [dictionary setObject: self.sort forKey: @"sort"];
  }
  if (self.hasCreditSort) {
    [dictionary setObject: self.creditSort forKey: @"creditSort"];
  }
  if (self.hasTag) {
    [dictionary setObject: self.tag forKey: @"tag"];
  }
  if (self.hasIsStages) {
    [dictionary setObject: self.isStages forKey: @"isStages"];
  }
  if (self.hasStagesApp) {
    [dictionary setObject: self.stagesApp forKey: @"stagesApp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentResult class]]) {
    return NO;
  }
  ContentResult *otherMessage = other;
  return
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || [self.itemId isEqual:otherMessage.itemId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasImageDefaultId == otherMessage.hasImageDefaultId &&
      (!self.hasImageDefaultId || [self.imageDefaultId isEqual:otherMessage.imageDefaultId]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || [self.price isEqual:otherMessage.price]) &&
      self.hasSort == otherMessage.hasSort &&
      (!self.hasSort || [self.sort isEqual:otherMessage.sort]) &&
      self.hasCreditSort == otherMessage.hasCreditSort &&
      (!self.hasCreditSort || [self.creditSort isEqual:otherMessage.creditSort]) &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || [self.tag isEqual:otherMessage.tag]) &&
      self.hasIsStages == otherMessage.hasIsStages &&
      (!self.hasIsStages || [self.isStages isEqual:otherMessage.isStages]) &&
      self.hasStagesApp == otherMessage.hasStagesApp &&
      (!self.hasStagesApp || [self.stagesApp isEqual:otherMessage.stagesApp]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [self.itemId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasImageDefaultId) {
    hashCode = hashCode * 31 + [self.imageDefaultId hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [self.price hash];
  }
  if (self.hasSort) {
    hashCode = hashCode * 31 + [self.sort hash];
  }
  if (self.hasCreditSort) {
    hashCode = hashCode * 31 + [self.creditSort hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [self.tag hash];
  }
  if (self.hasIsStages) {
    hashCode = hashCode * 31 + [self.isStages hash];
  }
  if (self.hasStagesApp) {
    hashCode = hashCode * 31 + [self.stagesApp hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentResultBuilder()
@property (strong) ContentResult* resultResult;
@end

@implementation ContentResultBuilder
@synthesize resultResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResult = [[ContentResult alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResult;
}
- (ContentResultBuilder*) clear {
  self.resultResult = [[ContentResult alloc] init];
  return self;
}
- (ContentResultBuilder*) clone {
  return [ContentResult builderWithPrototype:resultResult];
}
- (ContentResult*) defaultInstance {
  return [ContentResult defaultInstance];
}
- (ContentResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentResult*) buildPartial {
  ContentResult* returnMe = resultResult;
  self.resultResult = nil;
  return returnMe;
}
- (ContentResultBuilder*) mergeFrom:(ContentResult*) other {
  if (other == [ContentResult defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasImageDefaultId) {
    [self setImageDefaultId:other.imageDefaultId];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasSort) {
    [self setSort:other.sort];
  }
  if (other.hasCreditSort) {
    [self setCreditSort:other.creditSort];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasIsStages) {
    [self setIsStages:other.isStages];
  }
  if (other.hasStagesApp) {
    [self setStagesApp:other.stagesApp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setItemId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setImageDefaultId:[input readString]];
        break;
      }
      case 34: {
        [self setPrice:[input readString]];
        break;
      }
      case 42: {
        [self setSort:[input readString]];
        break;
      }
      case 50: {
        [self setCreditSort:[input readString]];
        break;
      }
      case 58: {
        [self setTag:[input readString]];
        break;
      }
      case 66: {
        [self setIsStages:[input readString]];
        break;
      }
      case 74: {
        [self setStagesApp:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return resultResult.hasItemId;
}
- (NSString*) itemId {
  return resultResult.itemId;
}
- (ContentResultBuilder*) setItemId:(NSString*) value {
  resultResult.hasItemId = YES;
  resultResult.itemId = value;
  return self;
}
- (ContentResultBuilder*) clearItemId {
  resultResult.hasItemId = NO;
  resultResult.itemId = @"";
  return self;
}
- (BOOL) hasName {
  return resultResult.hasName;
}
- (NSString*) name {
  return resultResult.name;
}
- (ContentResultBuilder*) setName:(NSString*) value {
  resultResult.hasName = YES;
  resultResult.name = value;
  return self;
}
- (ContentResultBuilder*) clearName {
  resultResult.hasName = NO;
  resultResult.name = @"";
  return self;
}
- (BOOL) hasImageDefaultId {
  return resultResult.hasImageDefaultId;
}
- (NSString*) imageDefaultId {
  return resultResult.imageDefaultId;
}
- (ContentResultBuilder*) setImageDefaultId:(NSString*) value {
  resultResult.hasImageDefaultId = YES;
  resultResult.imageDefaultId = value;
  return self;
}
- (ContentResultBuilder*) clearImageDefaultId {
  resultResult.hasImageDefaultId = NO;
  resultResult.imageDefaultId = @"";
  return self;
}
- (BOOL) hasPrice {
  return resultResult.hasPrice;
}
- (NSString*) price {
  return resultResult.price;
}
- (ContentResultBuilder*) setPrice:(NSString*) value {
  resultResult.hasPrice = YES;
  resultResult.price = value;
  return self;
}
- (ContentResultBuilder*) clearPrice {
  resultResult.hasPrice = NO;
  resultResult.price = @"";
  return self;
}
- (BOOL) hasSort {
  return resultResult.hasSort;
}
- (NSString*) sort {
  return resultResult.sort;
}
- (ContentResultBuilder*) setSort:(NSString*) value {
  resultResult.hasSort = YES;
  resultResult.sort = value;
  return self;
}
- (ContentResultBuilder*) clearSort {
  resultResult.hasSort = NO;
  resultResult.sort = @"";
  return self;
}
- (BOOL) hasCreditSort {
  return resultResult.hasCreditSort;
}
- (NSString*) creditSort {
  return resultResult.creditSort;
}
- (ContentResultBuilder*) setCreditSort:(NSString*) value {
  resultResult.hasCreditSort = YES;
  resultResult.creditSort = value;
  return self;
}
- (ContentResultBuilder*) clearCreditSort {
  resultResult.hasCreditSort = NO;
  resultResult.creditSort = @"";
  return self;
}
- (BOOL) hasTag {
  return resultResult.hasTag;
}
- (NSString*) tag {
  return resultResult.tag;
}
- (ContentResultBuilder*) setTag:(NSString*) value {
  resultResult.hasTag = YES;
  resultResult.tag = value;
  return self;
}
- (ContentResultBuilder*) clearTag {
  resultResult.hasTag = NO;
  resultResult.tag = @"";
  return self;
}
- (BOOL) hasIsStages {
  return resultResult.hasIsStages;
}
- (NSString*) isStages {
  return resultResult.isStages;
}
- (ContentResultBuilder*) setIsStages:(NSString*) value {
  resultResult.hasIsStages = YES;
  resultResult.isStages = value;
  return self;
}
- (ContentResultBuilder*) clearIsStages {
  resultResult.hasIsStages = NO;
  resultResult.isStages = @"";
  return self;
}
- (BOOL) hasStagesApp {
  return resultResult.hasStagesApp;
}
- (NSString*) stagesApp {
  return resultResult.stagesApp;
}
- (ContentResultBuilder*) setStagesApp:(NSString*) value {
  resultResult.hasStagesApp = YES;
  resultResult.stagesApp = value;
  return self;
}
- (ContentResultBuilder*) clearStagesApp {
  resultResult.hasStagesApp = NO;
  resultResult.stagesApp = @"";
  return self;
}
@end

@interface ContentOrderInfo ()
@property (strong) NSString* orderAmount;
@property (strong) NSString* orderTime;
@property (strong) NSString* pan;
@property (strong) NSString* outOrderNo;
@property (strong) NSString* merchantCode;
@property (strong) NSString* orderType;
@property (strong) NSString* merchantName;
@property (strong) NSString* payAmount;
@property (strong) NSString* cardAmount;
@property (strong) NSString* equityAmount;
@property (strong) NSString* orderStatus;
@property (strong) NSString* payMode;
@property (strong) ContentBankInfo* bankInfo;
@property (strong) NSString* crtTime;
@property (strong) NSString* orderErrorCode;
@property (strong) NSString* orderErrorInfo;
@property (strong) NSString* payDisplay;
@end

@implementation ContentOrderInfo

- (BOOL) hasOrderAmount {
  return !!hasOrderAmount_;
}
- (void) setHasOrderAmount:(BOOL) _value_ {
  hasOrderAmount_ = !!_value_;
}
@synthesize orderAmount;
- (BOOL) hasOrderTime {
  return !!hasOrderTime_;
}
- (void) setHasOrderTime:(BOOL) _value_ {
  hasOrderTime_ = !!_value_;
}
@synthesize orderTime;
- (BOOL) hasPan {
  return !!hasPan_;
}
- (void) setHasPan:(BOOL) _value_ {
  hasPan_ = !!_value_;
}
@synthesize pan;
- (BOOL) hasOutOrderNo {
  return !!hasOutOrderNo_;
}
- (void) setHasOutOrderNo:(BOOL) _value_ {
  hasOutOrderNo_ = !!_value_;
}
@synthesize outOrderNo;
- (BOOL) hasMerchantCode {
  return !!hasMerchantCode_;
}
- (void) setHasMerchantCode:(BOOL) _value_ {
  hasMerchantCode_ = !!_value_;
}
@synthesize merchantCode;
- (BOOL) hasOrderType {
  return !!hasOrderType_;
}
- (void) setHasOrderType:(BOOL) _value_ {
  hasOrderType_ = !!_value_;
}
@synthesize orderType;
- (BOOL) hasMerchantName {
  return !!hasMerchantName_;
}
- (void) setHasMerchantName:(BOOL) _value_ {
  hasMerchantName_ = !!_value_;
}
@synthesize merchantName;
- (BOOL) hasPayAmount {
  return !!hasPayAmount_;
}
- (void) setHasPayAmount:(BOOL) _value_ {
  hasPayAmount_ = !!_value_;
}
@synthesize payAmount;
- (BOOL) hasCardAmount {
  return !!hasCardAmount_;
}
- (void) setHasCardAmount:(BOOL) _value_ {
  hasCardAmount_ = !!_value_;
}
@synthesize cardAmount;
- (BOOL) hasEquityAmount {
  return !!hasEquityAmount_;
}
- (void) setHasEquityAmount:(BOOL) _value_ {
  hasEquityAmount_ = !!_value_;
}
@synthesize equityAmount;
- (BOOL) hasOrderStatus {
  return !!hasOrderStatus_;
}
- (void) setHasOrderStatus:(BOOL) _value_ {
  hasOrderStatus_ = !!_value_;
}
@synthesize orderStatus;
- (BOOL) hasPayMode {
  return !!hasPayMode_;
}
- (void) setHasPayMode:(BOOL) _value_ {
  hasPayMode_ = !!_value_;
}
@synthesize payMode;
- (BOOL) hasBankInfo {
  return !!hasBankInfo_;
}
- (void) setHasBankInfo:(BOOL) _value_ {
  hasBankInfo_ = !!_value_;
}
@synthesize bankInfo;
- (BOOL) hasCrtTime {
  return !!hasCrtTime_;
}
- (void) setHasCrtTime:(BOOL) _value_ {
  hasCrtTime_ = !!_value_;
}
@synthesize crtTime;
- (BOOL) hasOrderErrorCode {
  return !!hasOrderErrorCode_;
}
- (void) setHasOrderErrorCode:(BOOL) _value_ {
  hasOrderErrorCode_ = !!_value_;
}
@synthesize orderErrorCode;
- (BOOL) hasOrderErrorInfo {
  return !!hasOrderErrorInfo_;
}
- (void) setHasOrderErrorInfo:(BOOL) _value_ {
  hasOrderErrorInfo_ = !!_value_;
}
@synthesize orderErrorInfo;
- (BOOL) hasPayDisplay {
  return !!hasPayDisplay_;
}
- (void) setHasPayDisplay:(BOOL) _value_ {
  hasPayDisplay_ = !!_value_;
}
@synthesize payDisplay;
- (instancetype) init {
  if ((self = [super init])) {
    self.orderAmount = @"";
    self.orderTime = @"";
    self.pan = @"";
    self.outOrderNo = @"";
    self.merchantCode = @"";
    self.orderType = @"";
    self.merchantName = @"";
    self.payAmount = @"";
    self.cardAmount = @"";
    self.equityAmount = @"";
    self.orderStatus = @"";
    self.payMode = @"";
    self.bankInfo = [ContentBankInfo defaultInstance];
    self.crtTime = @"";
    self.orderErrorCode = @"";
    self.orderErrorInfo = @"";
    self.payDisplay = @"";
  }
  return self;
}
static ContentOrderInfo* defaultContentOrderInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentOrderInfo class]) {
    defaultContentOrderInfoInstance = [[ContentOrderInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentOrderInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentOrderInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderAmount) {
    [output writeString:1 value:self.orderAmount];
  }
  if (self.hasOrderTime) {
    [output writeString:2 value:self.orderTime];
  }
  if (self.hasPan) {
    [output writeString:3 value:self.pan];
  }
  if (self.hasOutOrderNo) {
    [output writeString:4 value:self.outOrderNo];
  }
  if (self.hasMerchantCode) {
    [output writeString:5 value:self.merchantCode];
  }
  if (self.hasOrderType) {
    [output writeString:6 value:self.orderType];
  }
  if (self.hasMerchantName) {
    [output writeString:7 value:self.merchantName];
  }
  if (self.hasPayAmount) {
    [output writeString:8 value:self.payAmount];
  }
  if (self.hasCardAmount) {
    [output writeString:9 value:self.cardAmount];
  }
  if (self.hasEquityAmount) {
    [output writeString:10 value:self.equityAmount];
  }
  if (self.hasOrderStatus) {
    [output writeString:11 value:self.orderStatus];
  }
  if (self.hasPayMode) {
    [output writeString:12 value:self.payMode];
  }
  if (self.hasBankInfo) {
    [output writeMessage:13 value:self.bankInfo];
  }
  if (self.hasCrtTime) {
    [output writeString:14 value:self.crtTime];
  }
  if (self.hasOrderErrorCode) {
    [output writeString:15 value:self.orderErrorCode];
  }
  if (self.hasOrderErrorInfo) {
    [output writeString:16 value:self.orderErrorInfo];
  }
  if (self.hasPayDisplay) {
    [output writeString:17 value:self.payDisplay];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOrderAmount) {
    size_ += computeStringSize(1, self.orderAmount);
  }
  if (self.hasOrderTime) {
    size_ += computeStringSize(2, self.orderTime);
  }
  if (self.hasPan) {
    size_ += computeStringSize(3, self.pan);
  }
  if (self.hasOutOrderNo) {
    size_ += computeStringSize(4, self.outOrderNo);
  }
  if (self.hasMerchantCode) {
    size_ += computeStringSize(5, self.merchantCode);
  }
  if (self.hasOrderType) {
    size_ += computeStringSize(6, self.orderType);
  }
  if (self.hasMerchantName) {
    size_ += computeStringSize(7, self.merchantName);
  }
  if (self.hasPayAmount) {
    size_ += computeStringSize(8, self.payAmount);
  }
  if (self.hasCardAmount) {
    size_ += computeStringSize(9, self.cardAmount);
  }
  if (self.hasEquityAmount) {
    size_ += computeStringSize(10, self.equityAmount);
  }
  if (self.hasOrderStatus) {
    size_ += computeStringSize(11, self.orderStatus);
  }
  if (self.hasPayMode) {
    size_ += computeStringSize(12, self.payMode);
  }
  if (self.hasBankInfo) {
    size_ += computeMessageSize(13, self.bankInfo);
  }
  if (self.hasCrtTime) {
    size_ += computeStringSize(14, self.crtTime);
  }
  if (self.hasOrderErrorCode) {
    size_ += computeStringSize(15, self.orderErrorCode);
  }
  if (self.hasOrderErrorInfo) {
    size_ += computeStringSize(16, self.orderErrorInfo);
  }
  if (self.hasPayDisplay) {
    size_ += computeStringSize(17, self.payDisplay);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentOrderInfo*) parseFromData:(NSData*) data {
  return (ContentOrderInfo*)[[[ContentOrderInfo builder] mergeFromData:data] build];
}
+ (ContentOrderInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentOrderInfo*)[[[ContentOrderInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentOrderInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentOrderInfo*)[[[ContentOrderInfo builder] mergeFromInputStream:input] build];
}
+ (ContentOrderInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentOrderInfo*)[[[ContentOrderInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentOrderInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentOrderInfo*)[[[ContentOrderInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentOrderInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentOrderInfo*)[[[ContentOrderInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentOrderInfoBuilder*) builder {
  return [[ContentOrderInfoBuilder alloc] init];
}
+ (ContentOrderInfoBuilder*) builderWithPrototype:(ContentOrderInfo*) prototype {
  return [[ContentOrderInfo builder] mergeFrom:prototype];
}
- (ContentOrderInfoBuilder*) builder {
  return [ContentOrderInfo builder];
}
- (ContentOrderInfoBuilder*) toBuilder {
  return [ContentOrderInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderAmount", self.orderAmount];
  }
  if (self.hasOrderTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderTime", self.orderTime];
  }
  if (self.hasPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pan", self.pan];
  }
  if (self.hasOutOrderNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outOrderNo", self.outOrderNo];
  }
  if (self.hasMerchantCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantCode", self.merchantCode];
  }
  if (self.hasOrderType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderType", self.orderType];
  }
  if (self.hasMerchantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"merchantName", self.merchantName];
  }
  if (self.hasPayAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payAmount", self.payAmount];
  }
  if (self.hasCardAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardAmount", self.cardAmount];
  }
  if (self.hasEquityAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"equityAmount", self.equityAmount];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderStatus", self.orderStatus];
  }
  if (self.hasPayMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payMode", self.payMode];
  }
  if (self.hasBankInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"bankInfo"];
    [self.bankInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCrtTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"crtTime", self.crtTime];
  }
  if (self.hasOrderErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderErrorCode", self.orderErrorCode];
  }
  if (self.hasOrderErrorInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderErrorInfo", self.orderErrorInfo];
  }
  if (self.hasPayDisplay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payDisplay", self.payDisplay];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOrderAmount) {
    [dictionary setObject: self.orderAmount forKey: @"orderAmount"];
  }
  if (self.hasOrderTime) {
    [dictionary setObject: self.orderTime forKey: @"orderTime"];
  }
  if (self.hasPan) {
    [dictionary setObject: self.pan forKey: @"pan"];
  }
  if (self.hasOutOrderNo) {
    [dictionary setObject: self.outOrderNo forKey: @"outOrderNo"];
  }
  if (self.hasMerchantCode) {
    [dictionary setObject: self.merchantCode forKey: @"merchantCode"];
  }
  if (self.hasOrderType) {
    [dictionary setObject: self.orderType forKey: @"orderType"];
  }
  if (self.hasMerchantName) {
    [dictionary setObject: self.merchantName forKey: @"merchantName"];
  }
  if (self.hasPayAmount) {
    [dictionary setObject: self.payAmount forKey: @"payAmount"];
  }
  if (self.hasCardAmount) {
    [dictionary setObject: self.cardAmount forKey: @"cardAmount"];
  }
  if (self.hasEquityAmount) {
    [dictionary setObject: self.equityAmount forKey: @"equityAmount"];
  }
  if (self.hasOrderStatus) {
    [dictionary setObject: self.orderStatus forKey: @"orderStatus"];
  }
  if (self.hasPayMode) {
    [dictionary setObject: self.payMode forKey: @"payMode"];
  }
  if (self.hasBankInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.bankInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"bankInfo"];
  }
  if (self.hasCrtTime) {
    [dictionary setObject: self.crtTime forKey: @"crtTime"];
  }
  if (self.hasOrderErrorCode) {
    [dictionary setObject: self.orderErrorCode forKey: @"orderErrorCode"];
  }
  if (self.hasOrderErrorInfo) {
    [dictionary setObject: self.orderErrorInfo forKey: @"orderErrorInfo"];
  }
  if (self.hasPayDisplay) {
    [dictionary setObject: self.payDisplay forKey: @"payDisplay"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentOrderInfo class]]) {
    return NO;
  }
  ContentOrderInfo *otherMessage = other;
  return
      self.hasOrderAmount == otherMessage.hasOrderAmount &&
      (!self.hasOrderAmount || [self.orderAmount isEqual:otherMessage.orderAmount]) &&
      self.hasOrderTime == otherMessage.hasOrderTime &&
      (!self.hasOrderTime || [self.orderTime isEqual:otherMessage.orderTime]) &&
      self.hasPan == otherMessage.hasPan &&
      (!self.hasPan || [self.pan isEqual:otherMessage.pan]) &&
      self.hasOutOrderNo == otherMessage.hasOutOrderNo &&
      (!self.hasOutOrderNo || [self.outOrderNo isEqual:otherMessage.outOrderNo]) &&
      self.hasMerchantCode == otherMessage.hasMerchantCode &&
      (!self.hasMerchantCode || [self.merchantCode isEqual:otherMessage.merchantCode]) &&
      self.hasOrderType == otherMessage.hasOrderType &&
      (!self.hasOrderType || [self.orderType isEqual:otherMessage.orderType]) &&
      self.hasMerchantName == otherMessage.hasMerchantName &&
      (!self.hasMerchantName || [self.merchantName isEqual:otherMessage.merchantName]) &&
      self.hasPayAmount == otherMessage.hasPayAmount &&
      (!self.hasPayAmount || [self.payAmount isEqual:otherMessage.payAmount]) &&
      self.hasCardAmount == otherMessage.hasCardAmount &&
      (!self.hasCardAmount || [self.cardAmount isEqual:otherMessage.cardAmount]) &&
      self.hasEquityAmount == otherMessage.hasEquityAmount &&
      (!self.hasEquityAmount || [self.equityAmount isEqual:otherMessage.equityAmount]) &&
      self.hasOrderStatus == otherMessage.hasOrderStatus &&
      (!self.hasOrderStatus || [self.orderStatus isEqual:otherMessage.orderStatus]) &&
      self.hasPayMode == otherMessage.hasPayMode &&
      (!self.hasPayMode || [self.payMode isEqual:otherMessage.payMode]) &&
      self.hasBankInfo == otherMessage.hasBankInfo &&
      (!self.hasBankInfo || [self.bankInfo isEqual:otherMessage.bankInfo]) &&
      self.hasCrtTime == otherMessage.hasCrtTime &&
      (!self.hasCrtTime || [self.crtTime isEqual:otherMessage.crtTime]) &&
      self.hasOrderErrorCode == otherMessage.hasOrderErrorCode &&
      (!self.hasOrderErrorCode || [self.orderErrorCode isEqual:otherMessage.orderErrorCode]) &&
      self.hasOrderErrorInfo == otherMessage.hasOrderErrorInfo &&
      (!self.hasOrderErrorInfo || [self.orderErrorInfo isEqual:otherMessage.orderErrorInfo]) &&
      self.hasPayDisplay == otherMessage.hasPayDisplay &&
      (!self.hasPayDisplay || [self.payDisplay isEqual:otherMessage.payDisplay]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOrderAmount) {
    hashCode = hashCode * 31 + [self.orderAmount hash];
  }
  if (self.hasOrderTime) {
    hashCode = hashCode * 31 + [self.orderTime hash];
  }
  if (self.hasPan) {
    hashCode = hashCode * 31 + [self.pan hash];
  }
  if (self.hasOutOrderNo) {
    hashCode = hashCode * 31 + [self.outOrderNo hash];
  }
  if (self.hasMerchantCode) {
    hashCode = hashCode * 31 + [self.merchantCode hash];
  }
  if (self.hasOrderType) {
    hashCode = hashCode * 31 + [self.orderType hash];
  }
  if (self.hasMerchantName) {
    hashCode = hashCode * 31 + [self.merchantName hash];
  }
  if (self.hasPayAmount) {
    hashCode = hashCode * 31 + [self.payAmount hash];
  }
  if (self.hasCardAmount) {
    hashCode = hashCode * 31 + [self.cardAmount hash];
  }
  if (self.hasEquityAmount) {
    hashCode = hashCode * 31 + [self.equityAmount hash];
  }
  if (self.hasOrderStatus) {
    hashCode = hashCode * 31 + [self.orderStatus hash];
  }
  if (self.hasPayMode) {
    hashCode = hashCode * 31 + [self.payMode hash];
  }
  if (self.hasBankInfo) {
    hashCode = hashCode * 31 + [self.bankInfo hash];
  }
  if (self.hasCrtTime) {
    hashCode = hashCode * 31 + [self.crtTime hash];
  }
  if (self.hasOrderErrorCode) {
    hashCode = hashCode * 31 + [self.orderErrorCode hash];
  }
  if (self.hasOrderErrorInfo) {
    hashCode = hashCode * 31 + [self.orderErrorInfo hash];
  }
  if (self.hasPayDisplay) {
    hashCode = hashCode * 31 + [self.payDisplay hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentOrderInfoBuilder()
@property (strong) ContentOrderInfo* resultOrderInfo;
@end

@implementation ContentOrderInfoBuilder
@synthesize resultOrderInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOrderInfo = [[ContentOrderInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOrderInfo;
}
- (ContentOrderInfoBuilder*) clear {
  self.resultOrderInfo = [[ContentOrderInfo alloc] init];
  return self;
}
- (ContentOrderInfoBuilder*) clone {
  return [ContentOrderInfo builderWithPrototype:resultOrderInfo];
}
- (ContentOrderInfo*) defaultInstance {
  return [ContentOrderInfo defaultInstance];
}
- (ContentOrderInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentOrderInfo*) buildPartial {
  ContentOrderInfo* returnMe = resultOrderInfo;
  self.resultOrderInfo = nil;
  return returnMe;
}
- (ContentOrderInfoBuilder*) mergeFrom:(ContentOrderInfo*) other {
  if (other == [ContentOrderInfo defaultInstance]) {
    return self;
  }
  if (other.hasOrderAmount) {
    [self setOrderAmount:other.orderAmount];
  }
  if (other.hasOrderTime) {
    [self setOrderTime:other.orderTime];
  }
  if (other.hasPan) {
    [self setPan:other.pan];
  }
  if (other.hasOutOrderNo) {
    [self setOutOrderNo:other.outOrderNo];
  }
  if (other.hasMerchantCode) {
    [self setMerchantCode:other.merchantCode];
  }
  if (other.hasOrderType) {
    [self setOrderType:other.orderType];
  }
  if (other.hasMerchantName) {
    [self setMerchantName:other.merchantName];
  }
  if (other.hasPayAmount) {
    [self setPayAmount:other.payAmount];
  }
  if (other.hasCardAmount) {
    [self setCardAmount:other.cardAmount];
  }
  if (other.hasEquityAmount) {
    [self setEquityAmount:other.equityAmount];
  }
  if (other.hasOrderStatus) {
    [self setOrderStatus:other.orderStatus];
  }
  if (other.hasPayMode) {
    [self setPayMode:other.payMode];
  }
  if (other.hasBankInfo) {
    [self mergeBankInfo:other.bankInfo];
  }
  if (other.hasCrtTime) {
    [self setCrtTime:other.crtTime];
  }
  if (other.hasOrderErrorCode) {
    [self setOrderErrorCode:other.orderErrorCode];
  }
  if (other.hasOrderErrorInfo) {
    [self setOrderErrorInfo:other.orderErrorInfo];
  }
  if (other.hasPayDisplay) {
    [self setPayDisplay:other.payDisplay];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentOrderInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentOrderInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setOrderAmount:[input readString]];
        break;
      }
      case 18: {
        [self setOrderTime:[input readString]];
        break;
      }
      case 26: {
        [self setPan:[input readString]];
        break;
      }
      case 34: {
        [self setOutOrderNo:[input readString]];
        break;
      }
      case 42: {
        [self setMerchantCode:[input readString]];
        break;
      }
      case 50: {
        [self setOrderType:[input readString]];
        break;
      }
      case 58: {
        [self setMerchantName:[input readString]];
        break;
      }
      case 66: {
        [self setPayAmount:[input readString]];
        break;
      }
      case 74: {
        [self setCardAmount:[input readString]];
        break;
      }
      case 82: {
        [self setEquityAmount:[input readString]];
        break;
      }
      case 90: {
        [self setOrderStatus:[input readString]];
        break;
      }
      case 98: {
        [self setPayMode:[input readString]];
        break;
      }
      case 106: {
        ContentBankInfoBuilder* subBuilder = [ContentBankInfo builder];
        if (self.hasBankInfo) {
          [subBuilder mergeFrom:self.bankInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBankInfo:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        [self setCrtTime:[input readString]];
        break;
      }
      case 122: {
        [self setOrderErrorCode:[input readString]];
        break;
      }
      case 130: {
        [self setOrderErrorInfo:[input readString]];
        break;
      }
      case 138: {
        [self setPayDisplay:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOrderAmount {
  return resultOrderInfo.hasOrderAmount;
}
- (NSString*) orderAmount {
  return resultOrderInfo.orderAmount;
}
- (ContentOrderInfoBuilder*) setOrderAmount:(NSString*) value {
  resultOrderInfo.hasOrderAmount = YES;
  resultOrderInfo.orderAmount = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearOrderAmount {
  resultOrderInfo.hasOrderAmount = NO;
  resultOrderInfo.orderAmount = @"";
  return self;
}
- (BOOL) hasOrderTime {
  return resultOrderInfo.hasOrderTime;
}
- (NSString*) orderTime {
  return resultOrderInfo.orderTime;
}
- (ContentOrderInfoBuilder*) setOrderTime:(NSString*) value {
  resultOrderInfo.hasOrderTime = YES;
  resultOrderInfo.orderTime = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearOrderTime {
  resultOrderInfo.hasOrderTime = NO;
  resultOrderInfo.orderTime = @"";
  return self;
}
- (BOOL) hasPan {
  return resultOrderInfo.hasPan;
}
- (NSString*) pan {
  return resultOrderInfo.pan;
}
- (ContentOrderInfoBuilder*) setPan:(NSString*) value {
  resultOrderInfo.hasPan = YES;
  resultOrderInfo.pan = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearPan {
  resultOrderInfo.hasPan = NO;
  resultOrderInfo.pan = @"";
  return self;
}
- (BOOL) hasOutOrderNo {
  return resultOrderInfo.hasOutOrderNo;
}
- (NSString*) outOrderNo {
  return resultOrderInfo.outOrderNo;
}
- (ContentOrderInfoBuilder*) setOutOrderNo:(NSString*) value {
  resultOrderInfo.hasOutOrderNo = YES;
  resultOrderInfo.outOrderNo = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearOutOrderNo {
  resultOrderInfo.hasOutOrderNo = NO;
  resultOrderInfo.outOrderNo = @"";
  return self;
}
- (BOOL) hasMerchantCode {
  return resultOrderInfo.hasMerchantCode;
}
- (NSString*) merchantCode {
  return resultOrderInfo.merchantCode;
}
- (ContentOrderInfoBuilder*) setMerchantCode:(NSString*) value {
  resultOrderInfo.hasMerchantCode = YES;
  resultOrderInfo.merchantCode = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearMerchantCode {
  resultOrderInfo.hasMerchantCode = NO;
  resultOrderInfo.merchantCode = @"";
  return self;
}
- (BOOL) hasOrderType {
  return resultOrderInfo.hasOrderType;
}
- (NSString*) orderType {
  return resultOrderInfo.orderType;
}
- (ContentOrderInfoBuilder*) setOrderType:(NSString*) value {
  resultOrderInfo.hasOrderType = YES;
  resultOrderInfo.orderType = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearOrderType {
  resultOrderInfo.hasOrderType = NO;
  resultOrderInfo.orderType = @"";
  return self;
}
- (BOOL) hasMerchantName {
  return resultOrderInfo.hasMerchantName;
}
- (NSString*) merchantName {
  return resultOrderInfo.merchantName;
}
- (ContentOrderInfoBuilder*) setMerchantName:(NSString*) value {
  resultOrderInfo.hasMerchantName = YES;
  resultOrderInfo.merchantName = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearMerchantName {
  resultOrderInfo.hasMerchantName = NO;
  resultOrderInfo.merchantName = @"";
  return self;
}
- (BOOL) hasPayAmount {
  return resultOrderInfo.hasPayAmount;
}
- (NSString*) payAmount {
  return resultOrderInfo.payAmount;
}
- (ContentOrderInfoBuilder*) setPayAmount:(NSString*) value {
  resultOrderInfo.hasPayAmount = YES;
  resultOrderInfo.payAmount = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearPayAmount {
  resultOrderInfo.hasPayAmount = NO;
  resultOrderInfo.payAmount = @"";
  return self;
}
- (BOOL) hasCardAmount {
  return resultOrderInfo.hasCardAmount;
}
- (NSString*) cardAmount {
  return resultOrderInfo.cardAmount;
}
- (ContentOrderInfoBuilder*) setCardAmount:(NSString*) value {
  resultOrderInfo.hasCardAmount = YES;
  resultOrderInfo.cardAmount = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearCardAmount {
  resultOrderInfo.hasCardAmount = NO;
  resultOrderInfo.cardAmount = @"";
  return self;
}
- (BOOL) hasEquityAmount {
  return resultOrderInfo.hasEquityAmount;
}
- (NSString*) equityAmount {
  return resultOrderInfo.equityAmount;
}
- (ContentOrderInfoBuilder*) setEquityAmount:(NSString*) value {
  resultOrderInfo.hasEquityAmount = YES;
  resultOrderInfo.equityAmount = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearEquityAmount {
  resultOrderInfo.hasEquityAmount = NO;
  resultOrderInfo.equityAmount = @"";
  return self;
}
- (BOOL) hasOrderStatus {
  return resultOrderInfo.hasOrderStatus;
}
- (NSString*) orderStatus {
  return resultOrderInfo.orderStatus;
}
- (ContentOrderInfoBuilder*) setOrderStatus:(NSString*) value {
  resultOrderInfo.hasOrderStatus = YES;
  resultOrderInfo.orderStatus = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearOrderStatus {
  resultOrderInfo.hasOrderStatus = NO;
  resultOrderInfo.orderStatus = @"";
  return self;
}
- (BOOL) hasPayMode {
  return resultOrderInfo.hasPayMode;
}
- (NSString*) payMode {
  return resultOrderInfo.payMode;
}
- (ContentOrderInfoBuilder*) setPayMode:(NSString*) value {
  resultOrderInfo.hasPayMode = YES;
  resultOrderInfo.payMode = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearPayMode {
  resultOrderInfo.hasPayMode = NO;
  resultOrderInfo.payMode = @"";
  return self;
}
- (BOOL) hasBankInfo {
  return resultOrderInfo.hasBankInfo;
}
- (ContentBankInfo*) bankInfo {
  return resultOrderInfo.bankInfo;
}
- (ContentOrderInfoBuilder*) setBankInfo:(ContentBankInfo*) value {
  resultOrderInfo.hasBankInfo = YES;
  resultOrderInfo.bankInfo = value;
  return self;
}
- (ContentOrderInfoBuilder*) setBankInfoBuilder:(ContentBankInfoBuilder*) builderForValue {
  return [self setBankInfo:[builderForValue build]];
}
- (ContentOrderInfoBuilder*) mergeBankInfo:(ContentBankInfo*) value {
  if (resultOrderInfo.hasBankInfo &&
      resultOrderInfo.bankInfo != [ContentBankInfo defaultInstance]) {
    resultOrderInfo.bankInfo =
      [[[ContentBankInfo builderWithPrototype:resultOrderInfo.bankInfo] mergeFrom:value] buildPartial];
  } else {
    resultOrderInfo.bankInfo = value;
  }
  resultOrderInfo.hasBankInfo = YES;
  return self;
}
- (ContentOrderInfoBuilder*) clearBankInfo {
  resultOrderInfo.hasBankInfo = NO;
  resultOrderInfo.bankInfo = [ContentBankInfo defaultInstance];
  return self;
}
- (BOOL) hasCrtTime {
  return resultOrderInfo.hasCrtTime;
}
- (NSString*) crtTime {
  return resultOrderInfo.crtTime;
}
- (ContentOrderInfoBuilder*) setCrtTime:(NSString*) value {
  resultOrderInfo.hasCrtTime = YES;
  resultOrderInfo.crtTime = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearCrtTime {
  resultOrderInfo.hasCrtTime = NO;
  resultOrderInfo.crtTime = @"";
  return self;
}
- (BOOL) hasOrderErrorCode {
  return resultOrderInfo.hasOrderErrorCode;
}
- (NSString*) orderErrorCode {
  return resultOrderInfo.orderErrorCode;
}
- (ContentOrderInfoBuilder*) setOrderErrorCode:(NSString*) value {
  resultOrderInfo.hasOrderErrorCode = YES;
  resultOrderInfo.orderErrorCode = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearOrderErrorCode {
  resultOrderInfo.hasOrderErrorCode = NO;
  resultOrderInfo.orderErrorCode = @"";
  return self;
}
- (BOOL) hasOrderErrorInfo {
  return resultOrderInfo.hasOrderErrorInfo;
}
- (NSString*) orderErrorInfo {
  return resultOrderInfo.orderErrorInfo;
}
- (ContentOrderInfoBuilder*) setOrderErrorInfo:(NSString*) value {
  resultOrderInfo.hasOrderErrorInfo = YES;
  resultOrderInfo.orderErrorInfo = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearOrderErrorInfo {
  resultOrderInfo.hasOrderErrorInfo = NO;
  resultOrderInfo.orderErrorInfo = @"";
  return self;
}
- (BOOL) hasPayDisplay {
  return resultOrderInfo.hasPayDisplay;
}
- (NSString*) payDisplay {
  return resultOrderInfo.payDisplay;
}
- (ContentOrderInfoBuilder*) setPayDisplay:(NSString*) value {
  resultOrderInfo.hasPayDisplay = YES;
  resultOrderInfo.payDisplay = value;
  return self;
}
- (ContentOrderInfoBuilder*) clearPayDisplay {
  resultOrderInfo.hasPayDisplay = NO;
  resultOrderInfo.payDisplay = @"";
  return self;
}
@end

@interface ContentBankInfo ()
@property (strong) NSString* bankName;
@property (strong) NSString* bankAccId;
@end

@implementation ContentBankInfo

- (BOOL) hasBankName {
  return !!hasBankName_;
}
- (void) setHasBankName:(BOOL) _value_ {
  hasBankName_ = !!_value_;
}
@synthesize bankName;
- (BOOL) hasBankAccId {
  return !!hasBankAccId_;
}
- (void) setHasBankAccId:(BOOL) _value_ {
  hasBankAccId_ = !!_value_;
}
@synthesize bankAccId;
- (instancetype) init {
  if ((self = [super init])) {
    self.bankName = @"";
    self.bankAccId = @"";
  }
  return self;
}
static ContentBankInfo* defaultContentBankInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentBankInfo class]) {
    defaultContentBankInfoInstance = [[ContentBankInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentBankInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentBankInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBankName) {
    [output writeString:1 value:self.bankName];
  }
  if (self.hasBankAccId) {
    [output writeString:2 value:self.bankAccId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBankName) {
    size_ += computeStringSize(1, self.bankName);
  }
  if (self.hasBankAccId) {
    size_ += computeStringSize(2, self.bankAccId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentBankInfo*) parseFromData:(NSData*) data {
  return (ContentBankInfo*)[[[ContentBankInfo builder] mergeFromData:data] build];
}
+ (ContentBankInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBankInfo*)[[[ContentBankInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentBankInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentBankInfo*)[[[ContentBankInfo builder] mergeFromInputStream:input] build];
}
+ (ContentBankInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBankInfo*)[[[ContentBankInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentBankInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentBankInfo*)[[[ContentBankInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentBankInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentBankInfo*)[[[ContentBankInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentBankInfoBuilder*) builder {
  return [[ContentBankInfoBuilder alloc] init];
}
+ (ContentBankInfoBuilder*) builderWithPrototype:(ContentBankInfo*) prototype {
  return [[ContentBankInfo builder] mergeFrom:prototype];
}
- (ContentBankInfoBuilder*) builder {
  return [ContentBankInfo builder];
}
- (ContentBankInfoBuilder*) toBuilder {
  return [ContentBankInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBankName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankName", self.bankName];
  }
  if (self.hasBankAccId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankAccId", self.bankAccId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBankName) {
    [dictionary setObject: self.bankName forKey: @"bankName"];
  }
  if (self.hasBankAccId) {
    [dictionary setObject: self.bankAccId forKey: @"bankAccId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentBankInfo class]]) {
    return NO;
  }
  ContentBankInfo *otherMessage = other;
  return
      self.hasBankName == otherMessage.hasBankName &&
      (!self.hasBankName || [self.bankName isEqual:otherMessage.bankName]) &&
      self.hasBankAccId == otherMessage.hasBankAccId &&
      (!self.hasBankAccId || [self.bankAccId isEqual:otherMessage.bankAccId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBankName) {
    hashCode = hashCode * 31 + [self.bankName hash];
  }
  if (self.hasBankAccId) {
    hashCode = hashCode * 31 + [self.bankAccId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentBankInfoBuilder()
@property (strong) ContentBankInfo* resultBankInfo;
@end

@implementation ContentBankInfoBuilder
@synthesize resultBankInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBankInfo = [[ContentBankInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBankInfo;
}
- (ContentBankInfoBuilder*) clear {
  self.resultBankInfo = [[ContentBankInfo alloc] init];
  return self;
}
- (ContentBankInfoBuilder*) clone {
  return [ContentBankInfo builderWithPrototype:resultBankInfo];
}
- (ContentBankInfo*) defaultInstance {
  return [ContentBankInfo defaultInstance];
}
- (ContentBankInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentBankInfo*) buildPartial {
  ContentBankInfo* returnMe = resultBankInfo;
  self.resultBankInfo = nil;
  return returnMe;
}
- (ContentBankInfoBuilder*) mergeFrom:(ContentBankInfo*) other {
  if (other == [ContentBankInfo defaultInstance]) {
    return self;
  }
  if (other.hasBankName) {
    [self setBankName:other.bankName];
  }
  if (other.hasBankAccId) {
    [self setBankAccId:other.bankAccId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentBankInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentBankInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBankName:[input readString]];
        break;
      }
      case 18: {
        [self setBankAccId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBankName {
  return resultBankInfo.hasBankName;
}
- (NSString*) bankName {
  return resultBankInfo.bankName;
}
- (ContentBankInfoBuilder*) setBankName:(NSString*) value {
  resultBankInfo.hasBankName = YES;
  resultBankInfo.bankName = value;
  return self;
}
- (ContentBankInfoBuilder*) clearBankName {
  resultBankInfo.hasBankName = NO;
  resultBankInfo.bankName = @"";
  return self;
}
- (BOOL) hasBankAccId {
  return resultBankInfo.hasBankAccId;
}
- (NSString*) bankAccId {
  return resultBankInfo.bankAccId;
}
- (ContentBankInfoBuilder*) setBankAccId:(NSString*) value {
  resultBankInfo.hasBankAccId = YES;
  resultBankInfo.bankAccId = value;
  return self;
}
- (ContentBankInfoBuilder*) clearBankAccId {
  resultBankInfo.hasBankAccId = NO;
  resultBankInfo.bankAccId = @"";
  return self;
}
@end

@interface ContentWithdrawLimit ()
@property (strong) NSString* bankCard;
@property (strong) NSString* bankId;
@property (strong) NSString* displayName;
@property (strong) NSString* amtLimit;
@end

@implementation ContentWithdrawLimit

- (BOOL) hasBankCard {
  return !!hasBankCard_;
}
- (void) setHasBankCard:(BOOL) _value_ {
  hasBankCard_ = !!_value_;
}
@synthesize bankCard;
- (BOOL) hasBankId {
  return !!hasBankId_;
}
- (void) setHasBankId:(BOOL) _value_ {
  hasBankId_ = !!_value_;
}
@synthesize bankId;
- (BOOL) hasDisplayName {
  return !!hasDisplayName_;
}
- (void) setHasDisplayName:(BOOL) _value_ {
  hasDisplayName_ = !!_value_;
}
@synthesize displayName;
- (BOOL) hasAmtLimit {
  return !!hasAmtLimit_;
}
- (void) setHasAmtLimit:(BOOL) _value_ {
  hasAmtLimit_ = !!_value_;
}
@synthesize amtLimit;
- (instancetype) init {
  if ((self = [super init])) {
    self.bankCard = @"";
    self.bankId = @"";
    self.displayName = @"";
    self.amtLimit = @"";
  }
  return self;
}
static ContentWithdrawLimit* defaultContentWithdrawLimitInstance = nil;
+ (void) initialize {
  if (self == [ContentWithdrawLimit class]) {
    defaultContentWithdrawLimitInstance = [[ContentWithdrawLimit alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentWithdrawLimitInstance;
}
- (instancetype) defaultInstance {
  return defaultContentWithdrawLimitInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBankCard) {
    [output writeString:1 value:self.bankCard];
  }
  if (self.hasBankId) {
    [output writeString:2 value:self.bankId];
  }
  if (self.hasDisplayName) {
    [output writeString:3 value:self.displayName];
  }
  if (self.hasAmtLimit) {
    [output writeString:4 value:self.amtLimit];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBankCard) {
    size_ += computeStringSize(1, self.bankCard);
  }
  if (self.hasBankId) {
    size_ += computeStringSize(2, self.bankId);
  }
  if (self.hasDisplayName) {
    size_ += computeStringSize(3, self.displayName);
  }
  if (self.hasAmtLimit) {
    size_ += computeStringSize(4, self.amtLimit);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentWithdrawLimit*) parseFromData:(NSData*) data {
  return (ContentWithdrawLimit*)[[[ContentWithdrawLimit builder] mergeFromData:data] build];
}
+ (ContentWithdrawLimit*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentWithdrawLimit*)[[[ContentWithdrawLimit builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentWithdrawLimit*) parseFromInputStream:(NSInputStream*) input {
  return (ContentWithdrawLimit*)[[[ContentWithdrawLimit builder] mergeFromInputStream:input] build];
}
+ (ContentWithdrawLimit*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentWithdrawLimit*)[[[ContentWithdrawLimit builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentWithdrawLimit*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentWithdrawLimit*)[[[ContentWithdrawLimit builder] mergeFromCodedInputStream:input] build];
}
+ (ContentWithdrawLimit*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentWithdrawLimit*)[[[ContentWithdrawLimit builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentWithdrawLimitBuilder*) builder {
  return [[ContentWithdrawLimitBuilder alloc] init];
}
+ (ContentWithdrawLimitBuilder*) builderWithPrototype:(ContentWithdrawLimit*) prototype {
  return [[ContentWithdrawLimit builder] mergeFrom:prototype];
}
- (ContentWithdrawLimitBuilder*) builder {
  return [ContentWithdrawLimit builder];
}
- (ContentWithdrawLimitBuilder*) toBuilder {
  return [ContentWithdrawLimit builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBankCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankCard", self.bankCard];
  }
  if (self.hasBankId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bankId", self.bankId];
  }
  if (self.hasDisplayName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"displayName", self.displayName];
  }
  if (self.hasAmtLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amtLimit", self.amtLimit];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBankCard) {
    [dictionary setObject: self.bankCard forKey: @"bankCard"];
  }
  if (self.hasBankId) {
    [dictionary setObject: self.bankId forKey: @"bankId"];
  }
  if (self.hasDisplayName) {
    [dictionary setObject: self.displayName forKey: @"displayName"];
  }
  if (self.hasAmtLimit) {
    [dictionary setObject: self.amtLimit forKey: @"amtLimit"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentWithdrawLimit class]]) {
    return NO;
  }
  ContentWithdrawLimit *otherMessage = other;
  return
      self.hasBankCard == otherMessage.hasBankCard &&
      (!self.hasBankCard || [self.bankCard isEqual:otherMessage.bankCard]) &&
      self.hasBankId == otherMessage.hasBankId &&
      (!self.hasBankId || [self.bankId isEqual:otherMessage.bankId]) &&
      self.hasDisplayName == otherMessage.hasDisplayName &&
      (!self.hasDisplayName || [self.displayName isEqual:otherMessage.displayName]) &&
      self.hasAmtLimit == otherMessage.hasAmtLimit &&
      (!self.hasAmtLimit || [self.amtLimit isEqual:otherMessage.amtLimit]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBankCard) {
    hashCode = hashCode * 31 + [self.bankCard hash];
  }
  if (self.hasBankId) {
    hashCode = hashCode * 31 + [self.bankId hash];
  }
  if (self.hasDisplayName) {
    hashCode = hashCode * 31 + [self.displayName hash];
  }
  if (self.hasAmtLimit) {
    hashCode = hashCode * 31 + [self.amtLimit hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentWithdrawLimitBuilder()
@property (strong) ContentWithdrawLimit* resultWithdrawLimit;
@end

@implementation ContentWithdrawLimitBuilder
@synthesize resultWithdrawLimit;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWithdrawLimit = [[ContentWithdrawLimit alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWithdrawLimit;
}
- (ContentWithdrawLimitBuilder*) clear {
  self.resultWithdrawLimit = [[ContentWithdrawLimit alloc] init];
  return self;
}
- (ContentWithdrawLimitBuilder*) clone {
  return [ContentWithdrawLimit builderWithPrototype:resultWithdrawLimit];
}
- (ContentWithdrawLimit*) defaultInstance {
  return [ContentWithdrawLimit defaultInstance];
}
- (ContentWithdrawLimit*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentWithdrawLimit*) buildPartial {
  ContentWithdrawLimit* returnMe = resultWithdrawLimit;
  self.resultWithdrawLimit = nil;
  return returnMe;
}
- (ContentWithdrawLimitBuilder*) mergeFrom:(ContentWithdrawLimit*) other {
  if (other == [ContentWithdrawLimit defaultInstance]) {
    return self;
  }
  if (other.hasBankCard) {
    [self setBankCard:other.bankCard];
  }
  if (other.hasBankId) {
    [self setBankId:other.bankId];
  }
  if (other.hasDisplayName) {
    [self setDisplayName:other.displayName];
  }
  if (other.hasAmtLimit) {
    [self setAmtLimit:other.amtLimit];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentWithdrawLimitBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentWithdrawLimitBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBankCard:[input readString]];
        break;
      }
      case 18: {
        [self setBankId:[input readString]];
        break;
      }
      case 26: {
        [self setDisplayName:[input readString]];
        break;
      }
      case 34: {
        [self setAmtLimit:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBankCard {
  return resultWithdrawLimit.hasBankCard;
}
- (NSString*) bankCard {
  return resultWithdrawLimit.bankCard;
}
- (ContentWithdrawLimitBuilder*) setBankCard:(NSString*) value {
  resultWithdrawLimit.hasBankCard = YES;
  resultWithdrawLimit.bankCard = value;
  return self;
}
- (ContentWithdrawLimitBuilder*) clearBankCard {
  resultWithdrawLimit.hasBankCard = NO;
  resultWithdrawLimit.bankCard = @"";
  return self;
}
- (BOOL) hasBankId {
  return resultWithdrawLimit.hasBankId;
}
- (NSString*) bankId {
  return resultWithdrawLimit.bankId;
}
- (ContentWithdrawLimitBuilder*) setBankId:(NSString*) value {
  resultWithdrawLimit.hasBankId = YES;
  resultWithdrawLimit.bankId = value;
  return self;
}
- (ContentWithdrawLimitBuilder*) clearBankId {
  resultWithdrawLimit.hasBankId = NO;
  resultWithdrawLimit.bankId = @"";
  return self;
}
- (BOOL) hasDisplayName {
  return resultWithdrawLimit.hasDisplayName;
}
- (NSString*) displayName {
  return resultWithdrawLimit.displayName;
}
- (ContentWithdrawLimitBuilder*) setDisplayName:(NSString*) value {
  resultWithdrawLimit.hasDisplayName = YES;
  resultWithdrawLimit.displayName = value;
  return self;
}
- (ContentWithdrawLimitBuilder*) clearDisplayName {
  resultWithdrawLimit.hasDisplayName = NO;
  resultWithdrawLimit.displayName = @"";
  return self;
}
- (BOOL) hasAmtLimit {
  return resultWithdrawLimit.hasAmtLimit;
}
- (NSString*) amtLimit {
  return resultWithdrawLimit.amtLimit;
}
- (ContentWithdrawLimitBuilder*) setAmtLimit:(NSString*) value {
  resultWithdrawLimit.hasAmtLimit = YES;
  resultWithdrawLimit.amtLimit = value;
  return self;
}
- (ContentWithdrawLimitBuilder*) clearAmtLimit {
  resultWithdrawLimit.hasAmtLimit = NO;
  resultWithdrawLimit.amtLimit = @"";
  return self;
}
@end

@interface ContentEquityInfo ()
@property (strong) NSString* equitySource;
@property (strong) NSString* equityType;
@property (strong) NSString* equityAmount;
@property (strong) NSString* spnsrId;
@property (strong) NSString* id;
@property (strong) NSString* desc;
@property (strong) NSString* addnInfo;
@end

@implementation ContentEquityInfo

- (BOOL) hasEquitySource {
  return !!hasEquitySource_;
}
- (void) setHasEquitySource:(BOOL) _value_ {
  hasEquitySource_ = !!_value_;
}
@synthesize equitySource;
- (BOOL) hasEquityType {
  return !!hasEquityType_;
}
- (void) setHasEquityType:(BOOL) _value_ {
  hasEquityType_ = !!_value_;
}
@synthesize equityType;
- (BOOL) hasEquityAmount {
  return !!hasEquityAmount_;
}
- (void) setHasEquityAmount:(BOOL) _value_ {
  hasEquityAmount_ = !!_value_;
}
@synthesize equityAmount;
- (BOOL) hasSpnsrId {
  return !!hasSpnsrId_;
}
- (void) setHasSpnsrId:(BOOL) _value_ {
  hasSpnsrId_ = !!_value_;
}
@synthesize spnsrId;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasAddnInfo {
  return !!hasAddnInfo_;
}
- (void) setHasAddnInfo:(BOOL) _value_ {
  hasAddnInfo_ = !!_value_;
}
@synthesize addnInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.equitySource = @"";
    self.equityType = @"";
    self.equityAmount = @"";
    self.spnsrId = @"";
    self.id = @"";
    self.desc = @"";
    self.addnInfo = @"";
  }
  return self;
}
static ContentEquityInfo* defaultContentEquityInfoInstance = nil;
+ (void) initialize {
  if (self == [ContentEquityInfo class]) {
    defaultContentEquityInfoInstance = [[ContentEquityInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentEquityInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultContentEquityInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEquitySource) {
    [output writeString:1 value:self.equitySource];
  }
  if (self.hasEquityType) {
    [output writeString:2 value:self.equityType];
  }
  if (self.hasEquityAmount) {
    [output writeString:3 value:self.equityAmount];
  }
  if (self.hasSpnsrId) {
    [output writeString:4 value:self.spnsrId];
  }
  if (self.hasId) {
    [output writeString:5 value:self.id];
  }
  if (self.hasDesc) {
    [output writeString:6 value:self.desc];
  }
  if (self.hasAddnInfo) {
    [output writeString:7 value:self.addnInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEquitySource) {
    size_ += computeStringSize(1, self.equitySource);
  }
  if (self.hasEquityType) {
    size_ += computeStringSize(2, self.equityType);
  }
  if (self.hasEquityAmount) {
    size_ += computeStringSize(3, self.equityAmount);
  }
  if (self.hasSpnsrId) {
    size_ += computeStringSize(4, self.spnsrId);
  }
  if (self.hasId) {
    size_ += computeStringSize(5, self.id);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(6, self.desc);
  }
  if (self.hasAddnInfo) {
    size_ += computeStringSize(7, self.addnInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentEquityInfo*) parseFromData:(NSData*) data {
  return (ContentEquityInfo*)[[[ContentEquityInfo builder] mergeFromData:data] build];
}
+ (ContentEquityInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentEquityInfo*)[[[ContentEquityInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentEquityInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ContentEquityInfo*)[[[ContentEquityInfo builder] mergeFromInputStream:input] build];
}
+ (ContentEquityInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentEquityInfo*)[[[ContentEquityInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentEquityInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentEquityInfo*)[[[ContentEquityInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ContentEquityInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentEquityInfo*)[[[ContentEquityInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentEquityInfoBuilder*) builder {
  return [[ContentEquityInfoBuilder alloc] init];
}
+ (ContentEquityInfoBuilder*) builderWithPrototype:(ContentEquityInfo*) prototype {
  return [[ContentEquityInfo builder] mergeFrom:prototype];
}
- (ContentEquityInfoBuilder*) builder {
  return [ContentEquityInfo builder];
}
- (ContentEquityInfoBuilder*) toBuilder {
  return [ContentEquityInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEquitySource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"equitySource", self.equitySource];
  }
  if (self.hasEquityType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"equityType", self.equityType];
  }
  if (self.hasEquityAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"equityAmount", self.equityAmount];
  }
  if (self.hasSpnsrId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spnsrId", self.spnsrId];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasAddnInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addnInfo", self.addnInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEquitySource) {
    [dictionary setObject: self.equitySource forKey: @"equitySource"];
  }
  if (self.hasEquityType) {
    [dictionary setObject: self.equityType forKey: @"equityType"];
  }
  if (self.hasEquityAmount) {
    [dictionary setObject: self.equityAmount forKey: @"equityAmount"];
  }
  if (self.hasSpnsrId) {
    [dictionary setObject: self.spnsrId forKey: @"spnsrId"];
  }
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasDesc) {
    [dictionary setObject: self.desc forKey: @"desc"];
  }
  if (self.hasAddnInfo) {
    [dictionary setObject: self.addnInfo forKey: @"addnInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentEquityInfo class]]) {
    return NO;
  }
  ContentEquityInfo *otherMessage = other;
  return
      self.hasEquitySource == otherMessage.hasEquitySource &&
      (!self.hasEquitySource || [self.equitySource isEqual:otherMessage.equitySource]) &&
      self.hasEquityType == otherMessage.hasEquityType &&
      (!self.hasEquityType || [self.equityType isEqual:otherMessage.equityType]) &&
      self.hasEquityAmount == otherMessage.hasEquityAmount &&
      (!self.hasEquityAmount || [self.equityAmount isEqual:otherMessage.equityAmount]) &&
      self.hasSpnsrId == otherMessage.hasSpnsrId &&
      (!self.hasSpnsrId || [self.spnsrId isEqual:otherMessage.spnsrId]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasAddnInfo == otherMessage.hasAddnInfo &&
      (!self.hasAddnInfo || [self.addnInfo isEqual:otherMessage.addnInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEquitySource) {
    hashCode = hashCode * 31 + [self.equitySource hash];
  }
  if (self.hasEquityType) {
    hashCode = hashCode * 31 + [self.equityType hash];
  }
  if (self.hasEquityAmount) {
    hashCode = hashCode * 31 + [self.equityAmount hash];
  }
  if (self.hasSpnsrId) {
    hashCode = hashCode * 31 + [self.spnsrId hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasAddnInfo) {
    hashCode = hashCode * 31 + [self.addnInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentEquityInfoBuilder()
@property (strong) ContentEquityInfo* resultEquityInfo;
@end

@implementation ContentEquityInfoBuilder
@synthesize resultEquityInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEquityInfo = [[ContentEquityInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEquityInfo;
}
- (ContentEquityInfoBuilder*) clear {
  self.resultEquityInfo = [[ContentEquityInfo alloc] init];
  return self;
}
- (ContentEquityInfoBuilder*) clone {
  return [ContentEquityInfo builderWithPrototype:resultEquityInfo];
}
- (ContentEquityInfo*) defaultInstance {
  return [ContentEquityInfo defaultInstance];
}
- (ContentEquityInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentEquityInfo*) buildPartial {
  ContentEquityInfo* returnMe = resultEquityInfo;
  self.resultEquityInfo = nil;
  return returnMe;
}
- (ContentEquityInfoBuilder*) mergeFrom:(ContentEquityInfo*) other {
  if (other == [ContentEquityInfo defaultInstance]) {
    return self;
  }
  if (other.hasEquitySource) {
    [self setEquitySource:other.equitySource];
  }
  if (other.hasEquityType) {
    [self setEquityType:other.equityType];
  }
  if (other.hasEquityAmount) {
    [self setEquityAmount:other.equityAmount];
  }
  if (other.hasSpnsrId) {
    [self setSpnsrId:other.spnsrId];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasAddnInfo) {
    [self setAddnInfo:other.addnInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentEquityInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentEquityInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEquitySource:[input readString]];
        break;
      }
      case 18: {
        [self setEquityType:[input readString]];
        break;
      }
      case 26: {
        [self setEquityAmount:[input readString]];
        break;
      }
      case 34: {
        [self setSpnsrId:[input readString]];
        break;
      }
      case 42: {
        [self setId:[input readString]];
        break;
      }
      case 50: {
        [self setDesc:[input readString]];
        break;
      }
      case 58: {
        [self setAddnInfo:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEquitySource {
  return resultEquityInfo.hasEquitySource;
}
- (NSString*) equitySource {
  return resultEquityInfo.equitySource;
}
- (ContentEquityInfoBuilder*) setEquitySource:(NSString*) value {
  resultEquityInfo.hasEquitySource = YES;
  resultEquityInfo.equitySource = value;
  return self;
}
- (ContentEquityInfoBuilder*) clearEquitySource {
  resultEquityInfo.hasEquitySource = NO;
  resultEquityInfo.equitySource = @"";
  return self;
}
- (BOOL) hasEquityType {
  return resultEquityInfo.hasEquityType;
}
- (NSString*) equityType {
  return resultEquityInfo.equityType;
}
- (ContentEquityInfoBuilder*) setEquityType:(NSString*) value {
  resultEquityInfo.hasEquityType = YES;
  resultEquityInfo.equityType = value;
  return self;
}
- (ContentEquityInfoBuilder*) clearEquityType {
  resultEquityInfo.hasEquityType = NO;
  resultEquityInfo.equityType = @"";
  return self;
}
- (BOOL) hasEquityAmount {
  return resultEquityInfo.hasEquityAmount;
}
- (NSString*) equityAmount {
  return resultEquityInfo.equityAmount;
}
- (ContentEquityInfoBuilder*) setEquityAmount:(NSString*) value {
  resultEquityInfo.hasEquityAmount = YES;
  resultEquityInfo.equityAmount = value;
  return self;
}
- (ContentEquityInfoBuilder*) clearEquityAmount {
  resultEquityInfo.hasEquityAmount = NO;
  resultEquityInfo.equityAmount = @"";
  return self;
}
- (BOOL) hasSpnsrId {
  return resultEquityInfo.hasSpnsrId;
}
- (NSString*) spnsrId {
  return resultEquityInfo.spnsrId;
}
- (ContentEquityInfoBuilder*) setSpnsrId:(NSString*) value {
  resultEquityInfo.hasSpnsrId = YES;
  resultEquityInfo.spnsrId = value;
  return self;
}
- (ContentEquityInfoBuilder*) clearSpnsrId {
  resultEquityInfo.hasSpnsrId = NO;
  resultEquityInfo.spnsrId = @"";
  return self;
}
- (BOOL) hasId {
  return resultEquityInfo.hasId;
}
- (NSString*) id {
  return resultEquityInfo.id;
}
- (ContentEquityInfoBuilder*) setId:(NSString*) value {
  resultEquityInfo.hasId = YES;
  resultEquityInfo.id = value;
  return self;
}
- (ContentEquityInfoBuilder*) clearId {
  resultEquityInfo.hasId = NO;
  resultEquityInfo.id = @"";
  return self;
}
- (BOOL) hasDesc {
  return resultEquityInfo.hasDesc;
}
- (NSString*) desc {
  return resultEquityInfo.desc;
}
- (ContentEquityInfoBuilder*) setDesc:(NSString*) value {
  resultEquityInfo.hasDesc = YES;
  resultEquityInfo.desc = value;
  return self;
}
- (ContentEquityInfoBuilder*) clearDesc {
  resultEquityInfo.hasDesc = NO;
  resultEquityInfo.desc = @"";
  return self;
}
- (BOOL) hasAddnInfo {
  return resultEquityInfo.hasAddnInfo;
}
- (NSString*) addnInfo {
  return resultEquityInfo.addnInfo;
}
- (ContentEquityInfoBuilder*) setAddnInfo:(NSString*) value {
  resultEquityInfo.hasAddnInfo = YES;
  resultEquityInfo.addnInfo = value;
  return self;
}
- (ContentEquityInfoBuilder*) clearAddnInfo {
  resultEquityInfo.hasAddnInfo = NO;
  resultEquityInfo.addnInfo = @"";
  return self;
}
@end

@interface ContentActivity ()
@property (strong) NSString* activeId;
@property (strong) NSString* shortMsg;
@property (strong) NSString* message;
@property (strong) NSMutableArray * payTypeArray;
@end

@implementation ContentActivity

- (BOOL) hasActiveId {
  return !!hasActiveId_;
}
- (void) setHasActiveId:(BOOL) _value_ {
  hasActiveId_ = !!_value_;
}
@synthesize activeId;
- (BOOL) hasShortMsg {
  return !!hasShortMsg_;
}
- (void) setHasShortMsg:(BOOL) _value_ {
  hasShortMsg_ = !!_value_;
}
@synthesize shortMsg;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
@synthesize payTypeArray;
@dynamic payType;
- (instancetype) init {
  if ((self = [super init])) {
    self.activeId = @"";
    self.shortMsg = @"";
    self.message = @"";
  }
  return self;
}
static ContentActivity* defaultContentActivityInstance = nil;
+ (void) initialize {
  if (self == [ContentActivity class]) {
    defaultContentActivityInstance = [[ContentActivity alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentActivityInstance;
}
- (instancetype) defaultInstance {
  return defaultContentActivityInstance;
}
- (NSArray *)payType {
  return payTypeArray;
}
- (NSString*)payTypeAtIndex:(NSUInteger)index {
  return [payTypeArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasActiveId) {
    [output writeString:1 value:self.activeId];
  }
  if (self.hasShortMsg) {
    [output writeString:2 value:self.shortMsg];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  [self.payTypeArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:4 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasActiveId) {
    size_ += computeStringSize(1, self.activeId);
  }
  if (self.hasShortMsg) {
    size_ += computeStringSize(2, self.shortMsg);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(3, self.message);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.payTypeArray.count;
    [self.payTypeArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentActivity*) parseFromData:(NSData*) data {
  return (ContentActivity*)[[[ContentActivity builder] mergeFromData:data] build];
}
+ (ContentActivity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentActivity*)[[[ContentActivity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentActivity*) parseFromInputStream:(NSInputStream*) input {
  return (ContentActivity*)[[[ContentActivity builder] mergeFromInputStream:input] build];
}
+ (ContentActivity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentActivity*)[[[ContentActivity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentActivity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentActivity*)[[[ContentActivity builder] mergeFromCodedInputStream:input] build];
}
+ (ContentActivity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentActivity*)[[[ContentActivity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentActivityBuilder*) builder {
  return [[ContentActivityBuilder alloc] init];
}
+ (ContentActivityBuilder*) builderWithPrototype:(ContentActivity*) prototype {
  return [[ContentActivity builder] mergeFrom:prototype];
}
- (ContentActivityBuilder*) builder {
  return [ContentActivity builder];
}
- (ContentActivityBuilder*) toBuilder {
  return [ContentActivity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasActiveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"activeId", self.activeId];
  }
  if (self.hasShortMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shortMsg", self.shortMsg];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.payTypeArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payType", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasActiveId) {
    [dictionary setObject: self.activeId forKey: @"activeId"];
  }
  if (self.hasShortMsg) {
    [dictionary setObject: self.shortMsg forKey: @"shortMsg"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  [dictionary setObject:self.payType forKey: @"payType"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentActivity class]]) {
    return NO;
  }
  ContentActivity *otherMessage = other;
  return
      self.hasActiveId == otherMessage.hasActiveId &&
      (!self.hasActiveId || [self.activeId isEqual:otherMessage.activeId]) &&
      self.hasShortMsg == otherMessage.hasShortMsg &&
      (!self.hasShortMsg || [self.shortMsg isEqual:otherMessage.shortMsg]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      [self.payTypeArray isEqualToArray:otherMessage.payTypeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasActiveId) {
    hashCode = hashCode * 31 + [self.activeId hash];
  }
  if (self.hasShortMsg) {
    hashCode = hashCode * 31 + [self.shortMsg hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  [self.payTypeArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentActivityBuilder()
@property (strong) ContentActivity* resultActivity;
@end

@implementation ContentActivityBuilder
@synthesize resultActivity;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultActivity = [[ContentActivity alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultActivity;
}
- (ContentActivityBuilder*) clear {
  self.resultActivity = [[ContentActivity alloc] init];
  return self;
}
- (ContentActivityBuilder*) clone {
  return [ContentActivity builderWithPrototype:resultActivity];
}
- (ContentActivity*) defaultInstance {
  return [ContentActivity defaultInstance];
}
- (ContentActivity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentActivity*) buildPartial {
  ContentActivity* returnMe = resultActivity;
  self.resultActivity = nil;
  return returnMe;
}
- (ContentActivityBuilder*) mergeFrom:(ContentActivity*) other {
  if (other == [ContentActivity defaultInstance]) {
    return self;
  }
  if (other.hasActiveId) {
    [self setActiveId:other.activeId];
  }
  if (other.hasShortMsg) {
    [self setShortMsg:other.shortMsg];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.payTypeArray.count > 0) {
    if (resultActivity.payTypeArray == nil) {
      resultActivity.payTypeArray = [[NSMutableArray alloc] initWithArray:other.payTypeArray];
    } else {
      [resultActivity.payTypeArray addObjectsFromArray:other.payTypeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentActivityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentActivityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setActiveId:[input readString]];
        break;
      }
      case 18: {
        [self setShortMsg:[input readString]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
      case 34: {
        [self addPayType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasActiveId {
  return resultActivity.hasActiveId;
}
- (NSString*) activeId {
  return resultActivity.activeId;
}
- (ContentActivityBuilder*) setActiveId:(NSString*) value {
  resultActivity.hasActiveId = YES;
  resultActivity.activeId = value;
  return self;
}
- (ContentActivityBuilder*) clearActiveId {
  resultActivity.hasActiveId = NO;
  resultActivity.activeId = @"";
  return self;
}
- (BOOL) hasShortMsg {
  return resultActivity.hasShortMsg;
}
- (NSString*) shortMsg {
  return resultActivity.shortMsg;
}
- (ContentActivityBuilder*) setShortMsg:(NSString*) value {
  resultActivity.hasShortMsg = YES;
  resultActivity.shortMsg = value;
  return self;
}
- (ContentActivityBuilder*) clearShortMsg {
  resultActivity.hasShortMsg = NO;
  resultActivity.shortMsg = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultActivity.hasMessage;
}
- (NSString*) message {
  return resultActivity.message;
}
- (ContentActivityBuilder*) setMessage:(NSString*) value {
  resultActivity.hasMessage = YES;
  resultActivity.message = value;
  return self;
}
- (ContentActivityBuilder*) clearMessage {
  resultActivity.hasMessage = NO;
  resultActivity.message = @"";
  return self;
}
- (NSMutableArray *)payType {
  return resultActivity.payTypeArray;
}
- (NSString*)payTypeAtIndex:(NSUInteger)index {
  return [resultActivity payTypeAtIndex:index];
}
- (ContentActivityBuilder *)addPayType:(NSString*)value {
  if (resultActivity.payTypeArray == nil) {
    resultActivity.payTypeArray = [[NSMutableArray alloc]init];
  }
  [resultActivity.payTypeArray addObject:value];
  return self;
}
- (ContentActivityBuilder *)setPayTypeArray:(NSArray *)array {
  resultActivity.payTypeArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ContentActivityBuilder *)clearPayType {
  resultActivity.payTypeArray = nil;
  return self;
}
@end

@interface ContentExtMap ()
@property (strong) NSString* key;
@property (strong) NSString* value;
@end

@implementation ContentExtMap

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = @"";
  }
  return self;
}
static ContentExtMap* defaultContentExtMapInstance = nil;
+ (void) initialize {
  if (self == [ContentExtMap class]) {
    defaultContentExtMapInstance = [[ContentExtMap alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentExtMapInstance;
}
- (instancetype) defaultInstance {
  return defaultContentExtMapInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentExtMap*) parseFromData:(NSData*) data {
  return (ContentExtMap*)[[[ContentExtMap builder] mergeFromData:data] build];
}
+ (ContentExtMap*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentExtMap*)[[[ContentExtMap builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentExtMap*) parseFromInputStream:(NSInputStream*) input {
  return (ContentExtMap*)[[[ContentExtMap builder] mergeFromInputStream:input] build];
}
+ (ContentExtMap*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentExtMap*)[[[ContentExtMap builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentExtMap*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentExtMap*)[[[ContentExtMap builder] mergeFromCodedInputStream:input] build];
}
+ (ContentExtMap*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentExtMap*)[[[ContentExtMap builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentExtMapBuilder*) builder {
  return [[ContentExtMapBuilder alloc] init];
}
+ (ContentExtMapBuilder*) builderWithPrototype:(ContentExtMap*) prototype {
  return [[ContentExtMap builder] mergeFrom:prototype];
}
- (ContentExtMapBuilder*) builder {
  return [ContentExtMap builder];
}
- (ContentExtMapBuilder*) toBuilder {
  return [ContentExtMap builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentExtMap class]]) {
    return NO;
  }
  ContentExtMap *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentExtMapBuilder()
@property (strong) ContentExtMap* resultExtMap;
@end

@implementation ContentExtMapBuilder
@synthesize resultExtMap;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultExtMap = [[ContentExtMap alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultExtMap;
}
- (ContentExtMapBuilder*) clear {
  self.resultExtMap = [[ContentExtMap alloc] init];
  return self;
}
- (ContentExtMapBuilder*) clone {
  return [ContentExtMap builderWithPrototype:resultExtMap];
}
- (ContentExtMap*) defaultInstance {
  return [ContentExtMap defaultInstance];
}
- (ContentExtMap*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentExtMap*) buildPartial {
  ContentExtMap* returnMe = resultExtMap;
  self.resultExtMap = nil;
  return returnMe;
}
- (ContentExtMapBuilder*) mergeFrom:(ContentExtMap*) other {
  if (other == [ContentExtMap defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentExtMapBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentExtMapBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultExtMap.hasKey;
}
- (NSString*) key {
  return resultExtMap.key;
}
- (ContentExtMapBuilder*) setKey:(NSString*) value {
  resultExtMap.hasKey = YES;
  resultExtMap.key = value;
  return self;
}
- (ContentExtMapBuilder*) clearKey {
  resultExtMap.hasKey = NO;
  resultExtMap.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultExtMap.hasValue;
}
- (NSString*) value {
  return resultExtMap.value;
}
- (ContentExtMapBuilder*) setValue:(NSString*) value {
  resultExtMap.hasValue = YES;
  resultExtMap.value = value;
  return self;
}
- (ContentExtMapBuilder*) clearValue {
  resultExtMap.hasValue = NO;
  resultExtMap.value = @"";
  return self;
}
@end

@interface ContentInterest ()
@property (strong) NSString* discountAmount;
@property (strong) NSString* expDate;
@property (strong) NSString* instruction;
@property (strong) NSString* name;
@property (strong) NSString* oid;
@property (strong) NSString* payAmount;
@property (strong) NSString* voucherType;
@property (strong) NSString* status;
@property (strong) NSMutableArray * supportedMethodIdListArray;
@property (strong) NSString* interestInfo;
@property (strong) NSString* sourceFrom;
@end

@implementation ContentInterest

- (BOOL) hasDiscountAmount {
  return !!hasDiscountAmount_;
}
- (void) setHasDiscountAmount:(BOOL) _value_ {
  hasDiscountAmount_ = !!_value_;
}
@synthesize discountAmount;
- (BOOL) hasExpDate {
  return !!hasExpDate_;
}
- (void) setHasExpDate:(BOOL) _value_ {
  hasExpDate_ = !!_value_;
}
@synthesize expDate;
- (BOOL) hasInstruction {
  return !!hasInstruction_;
}
- (void) setHasInstruction:(BOOL) _value_ {
  hasInstruction_ = !!_value_;
}
@synthesize instruction;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasOid {
  return !!hasOid_;
}
- (void) setHasOid:(BOOL) _value_ {
  hasOid_ = !!_value_;
}
@synthesize oid;
- (BOOL) hasPayAmount {
  return !!hasPayAmount_;
}
- (void) setHasPayAmount:(BOOL) _value_ {
  hasPayAmount_ = !!_value_;
}
@synthesize payAmount;
- (BOOL) hasVoucherType {
  return !!hasVoucherType_;
}
- (void) setHasVoucherType:(BOOL) _value_ {
  hasVoucherType_ = !!_value_;
}
@synthesize voucherType;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
@synthesize supportedMethodIdListArray;
@dynamic supportedMethodIdList;
- (BOOL) hasInterestInfo {
  return !!hasInterestInfo_;
}
- (void) setHasInterestInfo:(BOOL) _value_ {
  hasInterestInfo_ = !!_value_;
}
@synthesize interestInfo;
- (BOOL) hasSourceFrom {
  return !!hasSourceFrom_;
}
- (void) setHasSourceFrom:(BOOL) _value_ {
  hasSourceFrom_ = !!_value_;
}
@synthesize sourceFrom;
- (instancetype) init {
  if ((self = [super init])) {
    self.discountAmount = @"";
    self.expDate = @"";
    self.instruction = @"";
    self.name = @"";
    self.oid = @"";
    self.payAmount = @"";
    self.voucherType = @"";
    self.status = @"";
    self.interestInfo = @"";
    self.sourceFrom = @"";
  }
  return self;
}
static ContentInterest* defaultContentInterestInstance = nil;
+ (void) initialize {
  if (self == [ContentInterest class]) {
    defaultContentInterestInstance = [[ContentInterest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentInterestInstance;
}
- (instancetype) defaultInstance {
  return defaultContentInterestInstance;
}
- (NSArray *)supportedMethodIdList {
  return supportedMethodIdListArray;
}
- (NSString*)supportedMethodIdListAtIndex:(NSUInteger)index {
  return [supportedMethodIdListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDiscountAmount) {
    [output writeString:1 value:self.discountAmount];
  }
  if (self.hasExpDate) {
    [output writeString:2 value:self.expDate];
  }
  if (self.hasInstruction) {
    [output writeString:3 value:self.instruction];
  }
  if (self.hasName) {
    [output writeString:4 value:self.name];
  }
  if (self.hasOid) {
    [output writeString:5 value:self.oid];
  }
  if (self.hasPayAmount) {
    [output writeString:6 value:self.payAmount];
  }
  if (self.hasVoucherType) {
    [output writeString:7 value:self.voucherType];
  }
  if (self.hasStatus) {
    [output writeString:8 value:self.status];
  }
  [self.supportedMethodIdListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:9 value:element];
  }];
  if (self.hasInterestInfo) {
    [output writeString:10 value:self.interestInfo];
  }
  if (self.hasSourceFrom) {
    [output writeString:11 value:self.sourceFrom];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDiscountAmount) {
    size_ += computeStringSize(1, self.discountAmount);
  }
  if (self.hasExpDate) {
    size_ += computeStringSize(2, self.expDate);
  }
  if (self.hasInstruction) {
    size_ += computeStringSize(3, self.instruction);
  }
  if (self.hasName) {
    size_ += computeStringSize(4, self.name);
  }
  if (self.hasOid) {
    size_ += computeStringSize(5, self.oid);
  }
  if (self.hasPayAmount) {
    size_ += computeStringSize(6, self.payAmount);
  }
  if (self.hasVoucherType) {
    size_ += computeStringSize(7, self.voucherType);
  }
  if (self.hasStatus) {
    size_ += computeStringSize(8, self.status);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.supportedMethodIdListArray.count;
    [self.supportedMethodIdListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasInterestInfo) {
    size_ += computeStringSize(10, self.interestInfo);
  }
  if (self.hasSourceFrom) {
    size_ += computeStringSize(11, self.sourceFrom);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentInterest*) parseFromData:(NSData*) data {
  return (ContentInterest*)[[[ContentInterest builder] mergeFromData:data] build];
}
+ (ContentInterest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentInterest*)[[[ContentInterest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentInterest*) parseFromInputStream:(NSInputStream*) input {
  return (ContentInterest*)[[[ContentInterest builder] mergeFromInputStream:input] build];
}
+ (ContentInterest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentInterest*)[[[ContentInterest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentInterest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentInterest*)[[[ContentInterest builder] mergeFromCodedInputStream:input] build];
}
+ (ContentInterest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentInterest*)[[[ContentInterest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentInterestBuilder*) builder {
  return [[ContentInterestBuilder alloc] init];
}
+ (ContentInterestBuilder*) builderWithPrototype:(ContentInterest*) prototype {
  return [[ContentInterest builder] mergeFrom:prototype];
}
- (ContentInterestBuilder*) builder {
  return [ContentInterest builder];
}
- (ContentInterestBuilder*) toBuilder {
  return [ContentInterest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDiscountAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"discountAmount", self.discountAmount];
  }
  if (self.hasExpDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expDate", self.expDate];
  }
  if (self.hasInstruction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"instruction", self.instruction];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasOid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oid", self.oid];
  }
  if (self.hasPayAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payAmount", self.payAmount];
  }
  if (self.hasVoucherType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherType", self.voucherType];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", self.status];
  }
  [self.supportedMethodIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportedMethodIdList", obj];
  }];
  if (self.hasInterestInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"interestInfo", self.interestInfo];
  }
  if (self.hasSourceFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceFrom", self.sourceFrom];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDiscountAmount) {
    [dictionary setObject: self.discountAmount forKey: @"discountAmount"];
  }
  if (self.hasExpDate) {
    [dictionary setObject: self.expDate forKey: @"expDate"];
  }
  if (self.hasInstruction) {
    [dictionary setObject: self.instruction forKey: @"instruction"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasOid) {
    [dictionary setObject: self.oid forKey: @"oid"];
  }
  if (self.hasPayAmount) {
    [dictionary setObject: self.payAmount forKey: @"payAmount"];
  }
  if (self.hasVoucherType) {
    [dictionary setObject: self.voucherType forKey: @"voucherType"];
  }
  if (self.hasStatus) {
    [dictionary setObject: self.status forKey: @"status"];
  }
  [dictionary setObject:self.supportedMethodIdList forKey: @"supportedMethodIdList"];
  if (self.hasInterestInfo) {
    [dictionary setObject: self.interestInfo forKey: @"interestInfo"];
  }
  if (self.hasSourceFrom) {
    [dictionary setObject: self.sourceFrom forKey: @"sourceFrom"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentInterest class]]) {
    return NO;
  }
  ContentInterest *otherMessage = other;
  return
      self.hasDiscountAmount == otherMessage.hasDiscountAmount &&
      (!self.hasDiscountAmount || [self.discountAmount isEqual:otherMessage.discountAmount]) &&
      self.hasExpDate == otherMessage.hasExpDate &&
      (!self.hasExpDate || [self.expDate isEqual:otherMessage.expDate]) &&
      self.hasInstruction == otherMessage.hasInstruction &&
      (!self.hasInstruction || [self.instruction isEqual:otherMessage.instruction]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasOid == otherMessage.hasOid &&
      (!self.hasOid || [self.oid isEqual:otherMessage.oid]) &&
      self.hasPayAmount == otherMessage.hasPayAmount &&
      (!self.hasPayAmount || [self.payAmount isEqual:otherMessage.payAmount]) &&
      self.hasVoucherType == otherMessage.hasVoucherType &&
      (!self.hasVoucherType || [self.voucherType isEqual:otherMessage.voucherType]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      [self.supportedMethodIdListArray isEqualToArray:otherMessage.supportedMethodIdListArray] &&
      self.hasInterestInfo == otherMessage.hasInterestInfo &&
      (!self.hasInterestInfo || [self.interestInfo isEqual:otherMessage.interestInfo]) &&
      self.hasSourceFrom == otherMessage.hasSourceFrom &&
      (!self.hasSourceFrom || [self.sourceFrom isEqual:otherMessage.sourceFrom]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDiscountAmount) {
    hashCode = hashCode * 31 + [self.discountAmount hash];
  }
  if (self.hasExpDate) {
    hashCode = hashCode * 31 + [self.expDate hash];
  }
  if (self.hasInstruction) {
    hashCode = hashCode * 31 + [self.instruction hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasOid) {
    hashCode = hashCode * 31 + [self.oid hash];
  }
  if (self.hasPayAmount) {
    hashCode = hashCode * 31 + [self.payAmount hash];
  }
  if (self.hasVoucherType) {
    hashCode = hashCode * 31 + [self.voucherType hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  [self.supportedMethodIdListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasInterestInfo) {
    hashCode = hashCode * 31 + [self.interestInfo hash];
  }
  if (self.hasSourceFrom) {
    hashCode = hashCode * 31 + [self.sourceFrom hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentInterestBuilder()
@property (strong) ContentInterest* resultInterest;
@end

@implementation ContentInterestBuilder
@synthesize resultInterest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultInterest = [[ContentInterest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultInterest;
}
- (ContentInterestBuilder*) clear {
  self.resultInterest = [[ContentInterest alloc] init];
  return self;
}
- (ContentInterestBuilder*) clone {
  return [ContentInterest builderWithPrototype:resultInterest];
}
- (ContentInterest*) defaultInstance {
  return [ContentInterest defaultInstance];
}
- (ContentInterest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentInterest*) buildPartial {
  ContentInterest* returnMe = resultInterest;
  self.resultInterest = nil;
  return returnMe;
}
- (ContentInterestBuilder*) mergeFrom:(ContentInterest*) other {
  if (other == [ContentInterest defaultInstance]) {
    return self;
  }
  if (other.hasDiscountAmount) {
    [self setDiscountAmount:other.discountAmount];
  }
  if (other.hasExpDate) {
    [self setExpDate:other.expDate];
  }
  if (other.hasInstruction) {
    [self setInstruction:other.instruction];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasOid) {
    [self setOid:other.oid];
  }
  if (other.hasPayAmount) {
    [self setPayAmount:other.payAmount];
  }
  if (other.hasVoucherType) {
    [self setVoucherType:other.voucherType];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.supportedMethodIdListArray.count > 0) {
    if (resultInterest.supportedMethodIdListArray == nil) {
      resultInterest.supportedMethodIdListArray = [[NSMutableArray alloc] initWithArray:other.supportedMethodIdListArray];
    } else {
      [resultInterest.supportedMethodIdListArray addObjectsFromArray:other.supportedMethodIdListArray];
    }
  }
  if (other.hasInterestInfo) {
    [self setInterestInfo:other.interestInfo];
  }
  if (other.hasSourceFrom) {
    [self setSourceFrom:other.sourceFrom];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentInterestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentInterestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDiscountAmount:[input readString]];
        break;
      }
      case 18: {
        [self setExpDate:[input readString]];
        break;
      }
      case 26: {
        [self setInstruction:[input readString]];
        break;
      }
      case 34: {
        [self setName:[input readString]];
        break;
      }
      case 42: {
        [self setOid:[input readString]];
        break;
      }
      case 50: {
        [self setPayAmount:[input readString]];
        break;
      }
      case 58: {
        [self setVoucherType:[input readString]];
        break;
      }
      case 66: {
        [self setStatus:[input readString]];
        break;
      }
      case 74: {
        [self addSupportedMethodIdList:[input readString]];
        break;
      }
      case 82: {
        [self setInterestInfo:[input readString]];
        break;
      }
      case 90: {
        [self setSourceFrom:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDiscountAmount {
  return resultInterest.hasDiscountAmount;
}
- (NSString*) discountAmount {
  return resultInterest.discountAmount;
}
- (ContentInterestBuilder*) setDiscountAmount:(NSString*) value {
  resultInterest.hasDiscountAmount = YES;
  resultInterest.discountAmount = value;
  return self;
}
- (ContentInterestBuilder*) clearDiscountAmount {
  resultInterest.hasDiscountAmount = NO;
  resultInterest.discountAmount = @"";
  return self;
}
- (BOOL) hasExpDate {
  return resultInterest.hasExpDate;
}
- (NSString*) expDate {
  return resultInterest.expDate;
}
- (ContentInterestBuilder*) setExpDate:(NSString*) value {
  resultInterest.hasExpDate = YES;
  resultInterest.expDate = value;
  return self;
}
- (ContentInterestBuilder*) clearExpDate {
  resultInterest.hasExpDate = NO;
  resultInterest.expDate = @"";
  return self;
}
- (BOOL) hasInstruction {
  return resultInterest.hasInstruction;
}
- (NSString*) instruction {
  return resultInterest.instruction;
}
- (ContentInterestBuilder*) setInstruction:(NSString*) value {
  resultInterest.hasInstruction = YES;
  resultInterest.instruction = value;
  return self;
}
- (ContentInterestBuilder*) clearInstruction {
  resultInterest.hasInstruction = NO;
  resultInterest.instruction = @"";
  return self;
}
- (BOOL) hasName {
  return resultInterest.hasName;
}
- (NSString*) name {
  return resultInterest.name;
}
- (ContentInterestBuilder*) setName:(NSString*) value {
  resultInterest.hasName = YES;
  resultInterest.name = value;
  return self;
}
- (ContentInterestBuilder*) clearName {
  resultInterest.hasName = NO;
  resultInterest.name = @"";
  return self;
}
- (BOOL) hasOid {
  return resultInterest.hasOid;
}
- (NSString*) oid {
  return resultInterest.oid;
}
- (ContentInterestBuilder*) setOid:(NSString*) value {
  resultInterest.hasOid = YES;
  resultInterest.oid = value;
  return self;
}
- (ContentInterestBuilder*) clearOid {
  resultInterest.hasOid = NO;
  resultInterest.oid = @"";
  return self;
}
- (BOOL) hasPayAmount {
  return resultInterest.hasPayAmount;
}
- (NSString*) payAmount {
  return resultInterest.payAmount;
}
- (ContentInterestBuilder*) setPayAmount:(NSString*) value {
  resultInterest.hasPayAmount = YES;
  resultInterest.payAmount = value;
  return self;
}
- (ContentInterestBuilder*) clearPayAmount {
  resultInterest.hasPayAmount = NO;
  resultInterest.payAmount = @"";
  return self;
}
- (BOOL) hasVoucherType {
  return resultInterest.hasVoucherType;
}
- (NSString*) voucherType {
  return resultInterest.voucherType;
}
- (ContentInterestBuilder*) setVoucherType:(NSString*) value {
  resultInterest.hasVoucherType = YES;
  resultInterest.voucherType = value;
  return self;
}
- (ContentInterestBuilder*) clearVoucherType {
  resultInterest.hasVoucherType = NO;
  resultInterest.voucherType = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultInterest.hasStatus;
}
- (NSString*) status {
  return resultInterest.status;
}
- (ContentInterestBuilder*) setStatus:(NSString*) value {
  resultInterest.hasStatus = YES;
  resultInterest.status = value;
  return self;
}
- (ContentInterestBuilder*) clearStatus {
  resultInterest.hasStatus = NO;
  resultInterest.status = @"";
  return self;
}
- (NSMutableArray *)supportedMethodIdList {
  return resultInterest.supportedMethodIdListArray;
}
- (NSString*)supportedMethodIdListAtIndex:(NSUInteger)index {
  return [resultInterest supportedMethodIdListAtIndex:index];
}
- (ContentInterestBuilder *)addSupportedMethodIdList:(NSString*)value {
  if (resultInterest.supportedMethodIdListArray == nil) {
    resultInterest.supportedMethodIdListArray = [[NSMutableArray alloc]init];
  }
  [resultInterest.supportedMethodIdListArray addObject:value];
  return self;
}
- (ContentInterestBuilder *)setSupportedMethodIdListArray:(NSArray *)array {
  resultInterest.supportedMethodIdListArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ContentInterestBuilder *)clearSupportedMethodIdList {
  resultInterest.supportedMethodIdListArray = nil;
  return self;
}
- (BOOL) hasInterestInfo {
  return resultInterest.hasInterestInfo;
}
- (NSString*) interestInfo {
  return resultInterest.interestInfo;
}
- (ContentInterestBuilder*) setInterestInfo:(NSString*) value {
  resultInterest.hasInterestInfo = YES;
  resultInterest.interestInfo = value;
  return self;
}
- (ContentInterestBuilder*) clearInterestInfo {
  resultInterest.hasInterestInfo = NO;
  resultInterest.interestInfo = @"";
  return self;
}
- (BOOL) hasSourceFrom {
  return resultInterest.hasSourceFrom;
}
- (NSString*) sourceFrom {
  return resultInterest.sourceFrom;
}
- (ContentInterestBuilder*) setSourceFrom:(NSString*) value {
  resultInterest.hasSourceFrom = YES;
  resultInterest.sourceFrom = value;
  return self;
}
- (ContentInterestBuilder*) clearSourceFrom {
  resultInterest.hasSourceFrom = NO;
  resultInterest.sourceFrom = @"";
  return self;
}
@end

@interface ContentSeedData ()
@property (strong) NSString* displayName;
@property (strong) NSString* fpeKey;
@property (strong) NSString* rate;
@property (strong) NSString* seed;
@property (strong) NSString* sessionKey;
@property (strong) NSString* verifyPin;
@property (strong) NSString* seedValidTime;
@property (strong) NSString* tweak;
@end

@implementation ContentSeedData

- (BOOL) hasDisplayName {
  return !!hasDisplayName_;
}
- (void) setHasDisplayName:(BOOL) _value_ {
  hasDisplayName_ = !!_value_;
}
@synthesize displayName;
- (BOOL) hasFpeKey {
  return !!hasFpeKey_;
}
- (void) setHasFpeKey:(BOOL) _value_ {
  hasFpeKey_ = !!_value_;
}
@synthesize fpeKey;
- (BOOL) hasRate {
  return !!hasRate_;
}
- (void) setHasRate:(BOOL) _value_ {
  hasRate_ = !!_value_;
}
@synthesize rate;
- (BOOL) hasSeed {
  return !!hasSeed_;
}
- (void) setHasSeed:(BOOL) _value_ {
  hasSeed_ = !!_value_;
}
@synthesize seed;
- (BOOL) hasSessionKey {
  return !!hasSessionKey_;
}
- (void) setHasSessionKey:(BOOL) _value_ {
  hasSessionKey_ = !!_value_;
}
@synthesize sessionKey;
- (BOOL) hasVerifyPin {
  return !!hasVerifyPin_;
}
- (void) setHasVerifyPin:(BOOL) _value_ {
  hasVerifyPin_ = !!_value_;
}
@synthesize verifyPin;
- (BOOL) hasSeedValidTime {
  return !!hasSeedValidTime_;
}
- (void) setHasSeedValidTime:(BOOL) _value_ {
  hasSeedValidTime_ = !!_value_;
}
@synthesize seedValidTime;
- (BOOL) hasTweak {
  return !!hasTweak_;
}
- (void) setHasTweak:(BOOL) _value_ {
  hasTweak_ = !!_value_;
}
@synthesize tweak;
- (instancetype) init {
  if ((self = [super init])) {
    self.displayName = @"";
    self.fpeKey = @"";
    self.rate = @"";
    self.seed = @"";
    self.sessionKey = @"";
    self.verifyPin = @"";
    self.seedValidTime = @"";
    self.tweak = @"";
  }
  return self;
}
static ContentSeedData* defaultContentSeedDataInstance = nil;
+ (void) initialize {
  if (self == [ContentSeedData class]) {
    defaultContentSeedDataInstance = [[ContentSeedData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentSeedDataInstance;
}
- (instancetype) defaultInstance {
  return defaultContentSeedDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDisplayName) {
    [output writeString:1 value:self.displayName];
  }
  if (self.hasFpeKey) {
    [output writeString:2 value:self.fpeKey];
  }
  if (self.hasRate) {
    [output writeString:3 value:self.rate];
  }
  if (self.hasSeed) {
    [output writeString:4 value:self.seed];
  }
  if (self.hasSessionKey) {
    [output writeString:5 value:self.sessionKey];
  }
  if (self.hasVerifyPin) {
    [output writeString:6 value:self.verifyPin];
  }
  if (self.hasSeedValidTime) {
    [output writeString:7 value:self.seedValidTime];
  }
  if (self.hasTweak) {
    [output writeString:8 value:self.tweak];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDisplayName) {
    size_ += computeStringSize(1, self.displayName);
  }
  if (self.hasFpeKey) {
    size_ += computeStringSize(2, self.fpeKey);
  }
  if (self.hasRate) {
    size_ += computeStringSize(3, self.rate);
  }
  if (self.hasSeed) {
    size_ += computeStringSize(4, self.seed);
  }
  if (self.hasSessionKey) {
    size_ += computeStringSize(5, self.sessionKey);
  }
  if (self.hasVerifyPin) {
    size_ += computeStringSize(6, self.verifyPin);
  }
  if (self.hasSeedValidTime) {
    size_ += computeStringSize(7, self.seedValidTime);
  }
  if (self.hasTweak) {
    size_ += computeStringSize(8, self.tweak);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ContentSeedData*) parseFromData:(NSData*) data {
  return (ContentSeedData*)[[[ContentSeedData builder] mergeFromData:data] build];
}
+ (ContentSeedData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSeedData*)[[[ContentSeedData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContentSeedData*) parseFromInputStream:(NSInputStream*) input {
  return (ContentSeedData*)[[[ContentSeedData builder] mergeFromInputStream:input] build];
}
+ (ContentSeedData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSeedData*)[[[ContentSeedData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentSeedData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContentSeedData*)[[[ContentSeedData builder] mergeFromCodedInputStream:input] build];
}
+ (ContentSeedData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContentSeedData*)[[[ContentSeedData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentSeedDataBuilder*) builder {
  return [[ContentSeedDataBuilder alloc] init];
}
+ (ContentSeedDataBuilder*) builderWithPrototype:(ContentSeedData*) prototype {
  return [[ContentSeedData builder] mergeFrom:prototype];
}
- (ContentSeedDataBuilder*) builder {
  return [ContentSeedData builder];
}
- (ContentSeedDataBuilder*) toBuilder {
  return [ContentSeedData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDisplayName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"displayName", self.displayName];
  }
  if (self.hasFpeKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fpeKey", self.fpeKey];
  }
  if (self.hasRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rate", self.rate];
  }
  if (self.hasSeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seed", self.seed];
  }
  if (self.hasSessionKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionKey", self.sessionKey];
  }
  if (self.hasVerifyPin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verifyPin", self.verifyPin];
  }
  if (self.hasSeedValidTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seedValidTime", self.seedValidTime];
  }
  if (self.hasTweak) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tweak", self.tweak];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDisplayName) {
    [dictionary setObject: self.displayName forKey: @"displayName"];
  }
  if (self.hasFpeKey) {
    [dictionary setObject: self.fpeKey forKey: @"fpeKey"];
  }
  if (self.hasRate) {
    [dictionary setObject: self.rate forKey: @"rate"];
  }
  if (self.hasSeed) {
    [dictionary setObject: self.seed forKey: @"seed"];
  }
  if (self.hasSessionKey) {
    [dictionary setObject: self.sessionKey forKey: @"sessionKey"];
  }
  if (self.hasVerifyPin) {
    [dictionary setObject: self.verifyPin forKey: @"verifyPin"];
  }
  if (self.hasSeedValidTime) {
    [dictionary setObject: self.seedValidTime forKey: @"seedValidTime"];
  }
  if (self.hasTweak) {
    [dictionary setObject: self.tweak forKey: @"tweak"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ContentSeedData class]]) {
    return NO;
  }
  ContentSeedData *otherMessage = other;
  return
      self.hasDisplayName == otherMessage.hasDisplayName &&
      (!self.hasDisplayName || [self.displayName isEqual:otherMessage.displayName]) &&
      self.hasFpeKey == otherMessage.hasFpeKey &&
      (!self.hasFpeKey || [self.fpeKey isEqual:otherMessage.fpeKey]) &&
      self.hasRate == otherMessage.hasRate &&
      (!self.hasRate || [self.rate isEqual:otherMessage.rate]) &&
      self.hasSeed == otherMessage.hasSeed &&
      (!self.hasSeed || [self.seed isEqual:otherMessage.seed]) &&
      self.hasSessionKey == otherMessage.hasSessionKey &&
      (!self.hasSessionKey || [self.sessionKey isEqual:otherMessage.sessionKey]) &&
      self.hasVerifyPin == otherMessage.hasVerifyPin &&
      (!self.hasVerifyPin || [self.verifyPin isEqual:otherMessage.verifyPin]) &&
      self.hasSeedValidTime == otherMessage.hasSeedValidTime &&
      (!self.hasSeedValidTime || [self.seedValidTime isEqual:otherMessage.seedValidTime]) &&
      self.hasTweak == otherMessage.hasTweak &&
      (!self.hasTweak || [self.tweak isEqual:otherMessage.tweak]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDisplayName) {
    hashCode = hashCode * 31 + [self.displayName hash];
  }
  if (self.hasFpeKey) {
    hashCode = hashCode * 31 + [self.fpeKey hash];
  }
  if (self.hasRate) {
    hashCode = hashCode * 31 + [self.rate hash];
  }
  if (self.hasSeed) {
    hashCode = hashCode * 31 + [self.seed hash];
  }
  if (self.hasSessionKey) {
    hashCode = hashCode * 31 + [self.sessionKey hash];
  }
  if (self.hasVerifyPin) {
    hashCode = hashCode * 31 + [self.verifyPin hash];
  }
  if (self.hasSeedValidTime) {
    hashCode = hashCode * 31 + [self.seedValidTime hash];
  }
  if (self.hasTweak) {
    hashCode = hashCode * 31 + [self.tweak hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentSeedDataBuilder()
@property (strong) ContentSeedData* resultSeedData;
@end

@implementation ContentSeedDataBuilder
@synthesize resultSeedData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSeedData = [[ContentSeedData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSeedData;
}
- (ContentSeedDataBuilder*) clear {
  self.resultSeedData = [[ContentSeedData alloc] init];
  return self;
}
- (ContentSeedDataBuilder*) clone {
  return [ContentSeedData builderWithPrototype:resultSeedData];
}
- (ContentSeedData*) defaultInstance {
  return [ContentSeedData defaultInstance];
}
- (ContentSeedData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContentSeedData*) buildPartial {
  ContentSeedData* returnMe = resultSeedData;
  self.resultSeedData = nil;
  return returnMe;
}
- (ContentSeedDataBuilder*) mergeFrom:(ContentSeedData*) other {
  if (other == [ContentSeedData defaultInstance]) {
    return self;
  }
  if (other.hasDisplayName) {
    [self setDisplayName:other.displayName];
  }
  if (other.hasFpeKey) {
    [self setFpeKey:other.fpeKey];
  }
  if (other.hasRate) {
    [self setRate:other.rate];
  }
  if (other.hasSeed) {
    [self setSeed:other.seed];
  }
  if (other.hasSessionKey) {
    [self setSessionKey:other.sessionKey];
  }
  if (other.hasVerifyPin) {
    [self setVerifyPin:other.verifyPin];
  }
  if (other.hasSeedValidTime) {
    [self setSeedValidTime:other.seedValidTime];
  }
  if (other.hasTweak) {
    [self setTweak:other.tweak];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentSeedDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentSeedDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDisplayName:[input readString]];
        break;
      }
      case 18: {
        [self setFpeKey:[input readString]];
        break;
      }
      case 26: {
        [self setRate:[input readString]];
        break;
      }
      case 34: {
        [self setSeed:[input readString]];
        break;
      }
      case 42: {
        [self setSessionKey:[input readString]];
        break;
      }
      case 50: {
        [self setVerifyPin:[input readString]];
        break;
      }
      case 58: {
        [self setSeedValidTime:[input readString]];
        break;
      }
      case 66: {
        [self setTweak:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDisplayName {
  return resultSeedData.hasDisplayName;
}
- (NSString*) displayName {
  return resultSeedData.displayName;
}
- (ContentSeedDataBuilder*) setDisplayName:(NSString*) value {
  resultSeedData.hasDisplayName = YES;
  resultSeedData.displayName = value;
  return self;
}
- (ContentSeedDataBuilder*) clearDisplayName {
  resultSeedData.hasDisplayName = NO;
  resultSeedData.displayName = @"";
  return self;
}
- (BOOL) hasFpeKey {
  return resultSeedData.hasFpeKey;
}
- (NSString*) fpeKey {
  return resultSeedData.fpeKey;
}
- (ContentSeedDataBuilder*) setFpeKey:(NSString*) value {
  resultSeedData.hasFpeKey = YES;
  resultSeedData.fpeKey = value;
  return self;
}
- (ContentSeedDataBuilder*) clearFpeKey {
  resultSeedData.hasFpeKey = NO;
  resultSeedData.fpeKey = @"";
  return self;
}
- (BOOL) hasRate {
  return resultSeedData.hasRate;
}
- (NSString*) rate {
  return resultSeedData.rate;
}
- (ContentSeedDataBuilder*) setRate:(NSString*) value {
  resultSeedData.hasRate = YES;
  resultSeedData.rate = value;
  return self;
}
- (ContentSeedDataBuilder*) clearRate {
  resultSeedData.hasRate = NO;
  resultSeedData.rate = @"";
  return self;
}
- (BOOL) hasSeed {
  return resultSeedData.hasSeed;
}
- (NSString*) seed {
  return resultSeedData.seed;
}
- (ContentSeedDataBuilder*) setSeed:(NSString*) value {
  resultSeedData.hasSeed = YES;
  resultSeedData.seed = value;
  return self;
}
- (ContentSeedDataBuilder*) clearSeed {
  resultSeedData.hasSeed = NO;
  resultSeedData.seed = @"";
  return self;
}
- (BOOL) hasSessionKey {
  return resultSeedData.hasSessionKey;
}
- (NSString*) sessionKey {
  return resultSeedData.sessionKey;
}
- (ContentSeedDataBuilder*) setSessionKey:(NSString*) value {
  resultSeedData.hasSessionKey = YES;
  resultSeedData.sessionKey = value;
  return self;
}
- (ContentSeedDataBuilder*) clearSessionKey {
  resultSeedData.hasSessionKey = NO;
  resultSeedData.sessionKey = @"";
  return self;
}
- (BOOL) hasVerifyPin {
  return resultSeedData.hasVerifyPin;
}
- (NSString*) verifyPin {
  return resultSeedData.verifyPin;
}
- (ContentSeedDataBuilder*) setVerifyPin:(NSString*) value {
  resultSeedData.hasVerifyPin = YES;
  resultSeedData.verifyPin = value;
  return self;
}
- (ContentSeedDataBuilder*) clearVerifyPin {
  resultSeedData.hasVerifyPin = NO;
  resultSeedData.verifyPin = @"";
  return self;
}
- (BOOL) hasSeedValidTime {
  return resultSeedData.hasSeedValidTime;
}
- (NSString*) seedValidTime {
  return resultSeedData.seedValidTime;
}
- (ContentSeedDataBuilder*) setSeedValidTime:(NSString*) value {
  resultSeedData.hasSeedValidTime = YES;
  resultSeedData.seedValidTime = value;
  return self;
}
- (ContentSeedDataBuilder*) clearSeedValidTime {
  resultSeedData.hasSeedValidTime = NO;
  resultSeedData.seedValidTime = @"";
  return self;
}
- (BOOL) hasTweak {
  return resultSeedData.hasTweak;
}
- (NSString*) tweak {
  return resultSeedData.tweak;
}
- (ContentSeedDataBuilder*) setTweak:(NSString*) value {
  resultSeedData.hasTweak = YES;
  resultSeedData.tweak = value;
  return self;
}
- (ContentSeedDataBuilder*) clearTweak {
  resultSeedData.hasTweak = NO;
  resultSeedData.tweak = @"";
  return self;
}
@end

@interface ContentBuilder()
@property (strong) Content* resultContent;
@end

@implementation ContentBuilder
@synthesize resultContent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultContent = [[Content alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultContent;
}
- (ContentBuilder*) clear {
  self.resultContent = [[Content alloc] init];
  return self;
}
- (ContentBuilder*) clone {
  return [Content builderWithPrototype:resultContent];
}
- (Content*) defaultInstance {
  return [Content defaultInstance];
}
- (Content*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Content*) buildPartial {
  Content* returnMe = resultContent;
  self.resultContent = nil;
  return returnMe;
}
- (ContentBuilder*) mergeFrom:(Content*) other {
  if (other == [Content defaultInstance]) {
    return self;
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasBusinessType) {
    [self setBusinessType:other.businessType];
  }
  if (other.hasTermId) {
    [self setTermId:other.termId];
  }
  if (other.hasPayPassword) {
    [self setPayPassword:other.payPassword];
  }
  if (other.hasBankId) {
    [self setBankId:other.bankId];
  }
  if (other.hasBankName) {
    [self setBankName:other.bankName];
  }
  if (other.hasOrderId) {
    [self setOrderId:other.orderId];
  }
  if (other.hasAmt) {
    [self setAmt:other.amt];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  if (other.hasValidateCode) {
    [self setValidateCode:other.validateCode];
  }
  if (other.hasTermTxnTime) {
    [self setTermTxnTime:other.termTxnTime];
  }
  if (other.hasIdType) {
    [self setIdType:other.idType];
  }
  if (other.hasHolderName) {
    [self setHolderName:other.holderName];
  }
  if (other.hasExpireDate) {
    [self setExpireDate:other.expireDate];
  }
  if (other.hasVaType) {
    [self setVaType:other.vaType];
  }
  if (other.hasPan) {
    [self setPan:other.pan];
  }
  if (other.hasShortPan) {
    [self setShortPan:other.shortPan];
  }
  if (other.hasPhoneNo) {
    [self setPhoneNo:other.phoneNo];
  }
  if (other.hasAuthDebitBankNames) {
    [self setAuthDebitBankNames:other.authDebitBankNames];
  }
  if (other.hasCardId) {
    [self setCardId:other.cardId];
  }
  if (other.hasTxnType) {
    [self setTxnType:other.txnType];
  }
  if (other.hasProductCode) {
    [self setProductCode:other.productCode];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasProvince) {
    [self setProvince:other.province];
  }
  if (other.hasCity) {
    [self setCity:other.city];
  }
  if (other.hasPageNo) {
    [self setPageNo:other.pageNo];
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasOptionType) {
    [self setOptionType:other.optionType];
  }
  if (other.hasSecurityQuestion) {
    [self setSecurityQuestion:other.securityQuestion];
  }
  if (other.hasSecurityAnswer) {
    [self setSecurityAnswer:other.securityAnswer];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasUniQrCode) {
    [self setUniQrCode:other.uniQrCode];
  }
  if (other.hasProductType) {
    [self setProductType:other.productType];
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasResendFlag) {
    [self setResendFlag:other.resendFlag];
  }
  if (other.hasPasswordType) {
    [self setPasswordType:other.passwordType];
  }
  if (other.hasCvv2) {
    [self setCvv2:other.cvv2];
  }
  if (other.hasRefreshToken) {
    [self setRefreshToken:other.refreshToken];
  }
  if (other.hasIdTxnCtrl) {
    [self setIdTxnCtrl:other.idTxnCtrl];
  }
  if (other.hasExtData1) {
    [self setExtData1:other.extData1];
  }
  if (other.hasAuthBankIds) {
    [self setAuthBankIds:other.authBankIds];
  }
  if (other.hasAuthDebitBankIds) {
    [self setAuthDebitBankIds:other.authDebitBankIds];
  }
  if (other.hasAuthBankNames) {
    [self setAuthBankNames:other.authBankNames];
  }
  if (other.hasBranchBank) {
    [self setBranchBank:other.branchBank];
  }
  if (other.hasTxnFlag) {
    [self setTxnFlag:other.txnFlag];
  }
  if (other.hasAuthCode) {
    [self setAuthCode:other.authCode];
  }
  if (other.hasTxnTime) {
    [self setTxnTime:other.txnTime];
  }
  if (other.hasSignFlag) {
    [self setSignFlag:other.signFlag];
  }
  if (other.hasProductName) {
    [self setProductName:other.productName];
  }
  if (other.hasZoneType) {
    [self setZoneType:other.zoneType];
  }
  if (other.hasPin) {
    [self setPin:other.pin];
  }
  if (other.hasOrigOrderId) {
    [self setOrigOrderId:other.origOrderId];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasRemark) {
    [self setRemark:other.remark];
  }
  if (other.hasMemAcctcodeName) {
    [self setMemAcctcodeName:other.memAcctcodeName];
  }
  if (other.hasMemAcctcodeBalance) {
    [self setMemAcctcodeBalance:other.memAcctcodeBalance];
  }
  if (other.hasExistFlg) {
    [self setExistFlg:other.existFlg];
  }
  if (other.hasPayeeNotes) {
    [self setPayeeNotes:other.payeeNotes];
  }
  if (other.hasRealNameFlg) {
    [self setRealNameFlg:other.realNameFlg];
  }
  if (other.hasBindPhoneFlg) {
    [self setBindPhoneFlg:other.bindPhoneFlg];
  }
  if (other.hasFirstLoginFlg) {
    [self setFirstLoginFlg:other.firstLoginFlg];
  }
  if (other.hasTotalAmt) {
    [self setTotalAmt:other.totalAmt];
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  if (other.hasOrderType) {
    [self setOrderType:other.orderType];
  }
  if (other.hasCertId) {
    [self setCertId:other.certId];
  }
  if (other.hasRecommendId) {
    [self setRecommendId:other.recommendId];
  }
  if (other.hasOrderCode) {
    [self setOrderCode:other.orderCode];
  }
  if (other.hasMax) {
    [self setMax:other.max];
  }
  if (other.hasStatusSet) {
    [self setStatusSet:other.statusSet];
  }
  if (other.hasOutTradeNo) {
    [self setOutTradeNo:other.outTradeNo];
  }
  if (other.hasAppInfo) {
    [self mergeAppInfo:other.appInfo];
  }
  if (other.bankArray.count > 0) {
    if (resultContent.bankArray == nil) {
      resultContent.bankArray = [[NSMutableArray alloc] initWithArray:other.bankArray];
    } else {
      [resultContent.bankArray addObjectsFromArray:other.bankArray];
    }
  }
  if (other.hasMember) {
    [self mergeMember:other.member];
  }
  if (other.memberIdentityArray.count > 0) {
    if (resultContent.memberIdentityArray == nil) {
      resultContent.memberIdentityArray = [[NSMutableArray alloc] initWithArray:other.memberIdentityArray];
    } else {
      [resultContent.memberIdentityArray addObjectsFromArray:other.memberIdentityArray];
    }
  }
  if (other.safeProblemArray.count > 0) {
    if (resultContent.safeProblemArray == nil) {
      resultContent.safeProblemArray = [[NSMutableArray alloc] initWithArray:other.safeProblemArray];
    } else {
      [resultContent.safeProblemArray addObjectsFromArray:other.safeProblemArray];
    }
  }
  if (other.queryWalletBill99BillResponseArray.count > 0) {
    if (resultContent.queryWalletBill99BillResponseArray == nil) {
      resultContent.queryWalletBill99BillResponseArray = [[NSMutableArray alloc] initWithArray:other.queryWalletBill99BillResponseArray];
    } else {
      [resultContent.queryWalletBill99BillResponseArray addObjectsFromArray:other.queryWalletBill99BillResponseArray];
    }
  }
  if (other.atpProdArray.count > 0) {
    if (resultContent.atpProdArray == nil) {
      resultContent.atpProdArray = [[NSMutableArray alloc] initWithArray:other.atpProdArray];
    } else {
      [resultContent.atpProdArray addObjectsFromArray:other.atpProdArray];
    }
  }
  if (other.hasTradeId) {
    [self setTradeId:other.tradeId];
  }
  if (other.hasEndTime) {
    [self setEndTime:other.endTime];
  }
  if (other.solidCardArray.count > 0) {
    if (resultContent.solidCardArray == nil) {
      resultContent.solidCardArray = [[NSMutableArray alloc] initWithArray:other.solidCardArray];
    } else {
      [resultContent.solidCardArray addObjectsFromArray:other.solidCardArray];
    }
  }
  if (other.hasUserFlag) {
    [self setUserFlag:other.userFlag];
  }
  if (other.hasIdCardNo) {
    [self setIdCardNo:other.idCardNo];
  }
  if (other.hasIdCardImg) {
    [self setIdCardImg:other.idCardImg];
  }
  if (other.hasPhoto) {
    [self setPhoto:other.photo];
  }
  if (other.hasIsDisplay) {
    [self setIsDisplay:other.isDisplay];
  }
  if (other.hasShortPhones) {
    [self setShortPhones:other.shortPhones];
  }
  if (other.hasRipAmount) {
    [self setRipAmount:other.ripAmount];
  }
  if (other.hasMemberAuthDto) {
    [self mergeMemberAuthDto:other.memberAuthDto];
  }
  if (other.bankLimitAmountDtoArray.count > 0) {
    if (resultContent.bankLimitAmountDtoArray == nil) {
      resultContent.bankLimitAmountDtoArray = [[NSMutableArray alloc] initWithArray:other.bankLimitAmountDtoArray];
    } else {
      [resultContent.bankLimitAmountDtoArray addObjectsFromArray:other.bankLimitAmountDtoArray];
    }
  }
  if (other.hasOccupation) {
    [self setOccupation:other.occupation];
  }
  if (other.hasPartnerUserId) {
    [self setPartnerUserId:other.partnerUserId];
  }
  if (other.hasMemberBankAcctId) {
    [self setMemberBankAcctId:other.memberBankAcctId];
  }
  if (other.hasExpiresIn) {
    [self setExpiresIn:other.expiresIn];
  }
  if (other.hasAppUpInfo) {
    [self mergeAppUpInfo:other.appUpInfo];
  }
  if (other.hasKeyboardSeq) {
    [self setKeyboardSeq:other.keyboardSeq];
  }
  if (other.hasImgCode) {
    [self setImgCode:other.imgCode];
  }
  if (other.hasImgToken) {
    [self setImgToken:other.imgToken];
  }
  if (other.hasValidateToken) {
    [self setValidateToken:other.validateToken];
  }
  if (other.hasErrorType) {
    [self setErrorType:other.errorType];
  }
  if (other.hasFlag) {
    [self setFlag:other.flag];
  }
  if (other.queryAllFinaprodResponseArray.count > 0) {
    if (resultContent.queryAllFinaprodResponseArray == nil) {
      resultContent.queryAllFinaprodResponseArray = [[NSMutableArray alloc] initWithArray:other.queryAllFinaprodResponseArray];
    } else {
      [resultContent.queryAllFinaprodResponseArray addObjectsFromArray:other.queryAllFinaprodResponseArray];
    }
  }
  if (other.hasFinProdType) {
    [self setFinProdType:other.finProdType];
  }
  if (other.hasTradeType) {
    [self setTradeType:other.tradeType];
  }
  if (other.hasProdStatus) {
    [self setProdStatus:other.prodStatus];
  }
  if (other.hasQueryOrders) {
    [self setQueryOrders:other.queryOrders];
  }
  if (other.hasHorizonTo) {
    [self setHorizonTo:other.horizonTo];
  }
  if (other.hasReturnRateExp) {
    [self setReturnRateExp:other.returnRateExp];
  }
  if (other.atpTradeOrderArray.count > 0) {
    if (resultContent.atpTradeOrderArray == nil) {
      resultContent.atpTradeOrderArray = [[NSMutableArray alloc] initWithArray:other.atpTradeOrderArray];
    } else {
      [resultContent.atpTradeOrderArray addObjectsFromArray:other.atpTradeOrderArray];
    }
  }
  if (other.hasTotalFrozenAmt) {
    [self setTotalFrozenAmt:other.totalFrozenAmt];
  }
  if (other.hasFee) {
    [self setFee:other.fee];
  }
  if (other.hasTransFeeRate) {
    [self setTransFeeRate:other.transFeeRate];
  }
  if (other.hasBankNameId) {
    [self setBankNameId:other.bankNameId];
  }
  if (other.hasFinancialInfo) {
    [self mergeFinancialInfo:other.financialInfo];
  }
  if (other.prodAccountInfoArray.count > 0) {
    if (resultContent.prodAccountInfoArray == nil) {
      resultContent.prodAccountInfoArray = [[NSMutableArray alloc] initWithArray:other.prodAccountInfoArray];
    } else {
      [resultContent.prodAccountInfoArray addObjectsFromArray:other.prodAccountInfoArray];
    }
  }
  if (other.hasIsMainOrder) {
    [self setIsMainOrder:other.isMainOrder];
  }
  if (other.hasMerchantId) {
    [self setMerchantId:other.merchantId];
  }
  if (other.hasMerchantName) {
    [self setMerchantName:other.merchantName];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasIsRoot) {
    [self setIsRoot:other.isRoot];
  }
  if (other.hasSize) {
    [self setSize:other.size];
  }
  if (other.hasPhoneModel) {
    [self setPhoneModel:other.phoneModel];
  }
  if (other.hasWifiName) {
    [self setWifiName:other.wifiName];
  }
  if (other.hasWifiMac) {
    [self setWifiMac:other.wifiMac];
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.hasMerchantCode) {
    [self setMerchantCode:other.merchantCode];
  }
  if (other.hasBillOrderNo) {
    [self setBillOrderNo:other.billOrderNo];
  }
  if (other.hasChannelType) {
    [self setChannelType:other.channelType];
  }
  if (other.hasOrderAmount) {
    [self setOrderAmount:other.orderAmount];
  }
  if (other.hasPayMode) {
    [self setPayMode:other.payMode];
  }
  if (other.hasPayAmount) {
    [self setPayAmount:other.payAmount];
  }
  if (other.hasOrderStatus) {
    [self setOrderStatus:other.orderStatus];
  }
  if (other.hasOutOrderType) {
    [self setOutOrderType:other.outOrderType];
  }
  if (other.hasTxnTimeStart) {
    [self setTxnTimeStart:other.txnTimeStart];
  }
  if (other.hasTxnTimeExpire) {
    [self setTxnTimeExpire:other.txnTimeExpire];
  }
  if (other.hasPayStatus) {
    [self setPayStatus:other.payStatus];
  }
  if (other.hasProductInfo) {
    [self mergeProductInfo:other.productInfo];
  }
  if (other.payMethodArray.count > 0) {
    if (resultContent.payMethodArray == nil) {
      resultContent.payMethodArray = [[NSMutableArray alloc] initWithArray:other.payMethodArray];
    } else {
      [resultContent.payMethodArray addObjectsFromArray:other.payMethodArray];
    }
  }
  if (other.hasOutEquityCode) {
    [self setOutEquityCode:other.outEquityCode];
  }
  if (other.hasOutEquityAmount) {
    [self setOutEquityAmount:other.outEquityAmount];
  }
  if (other.hasPayMethodId) {
    [self setPayMethodId:other.payMethodId];
  }
  if (other.instalmentArray.count > 0) {
    if (resultContent.instalmentArray == nil) {
      resultContent.instalmentArray = [[NSMutableArray alloc] initWithArray:other.instalmentArray];
    } else {
      [resultContent.instalmentArray addObjectsFromArray:other.instalmentArray];
    }
  }
  if (other.hasInstalmentId) {
    [self setInstalmentId:other.instalmentId];
  }
  if (other.hasTxnEndTime) {
    [self setTxnEndTime:other.txnEndTime];
  }
  if (other.hasValidateElement) {
    [self setValidateElement:other.validateElement];
  }
  if (other.hasSMsCode) {
    [self setSMsCode:other.sMsCode];
  }
  if (other.voucherArray.count > 0) {
    if (resultContent.voucherArray == nil) {
      resultContent.voucherArray = [[NSMutableArray alloc] initWithArray:other.voucherArray];
    } else {
      [resultContent.voucherArray addObjectsFromArray:other.voucherArray];
    }
  }
  if (other.ateTradeOrderArray.count > 0) {
    if (resultContent.ateTradeOrderArray == nil) {
      resultContent.ateTradeOrderArray = [[NSMutableArray alloc] initWithArray:other.ateTradeOrderArray];
    } else {
      [resultContent.ateTradeOrderArray addObjectsFromArray:other.ateTradeOrderArray];
    }
  }
  if (other.hasEquityAmount) {
    [self setEquityAmount:other.equityAmount];
  }
  if (other.hasSupportFinger) {
    [self setSupportFinger:other.supportFinger];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTradeStatus) {
    [self setTradeStatus:other.tradeStatus];
  }
  if (other.hasProductDesc) {
    [self setProductDesc:other.productDesc];
  }
  if (other.hasSubMerchantName) {
    [self setSubMerchantName:other.subMerchantName];
  }
  if (other.hasMemo) {
    [self setMemo:other.memo];
  }
  if (other.hasNotifyMode) {
    [self setNotifyMode:other.notifyMode];
  }
  if (other.memberListArray.count > 0) {
    if (resultContent.memberListArray == nil) {
      resultContent.memberListArray = [[NSMutableArray alloc] initWithArray:other.memberListArray];
    } else {
      [resultContent.memberListArray addObjectsFromArray:other.memberListArray];
    }
  }
  if (other.hasGpsInfo) {
    [self setGpsInfo:other.gpsInfo];
  }
  if (other.hasPublishNo) {
    [self setPublishNo:other.publishNo];
  }
  if (other.hasResolution) {
    [self setResolution:other.resolution];
  }
  if (other.hasMsgTypeId) {
    [self setMsgTypeId:other.msgTypeId];
  }
  if (other.hasLastRecordId) {
    [self setLastRecordId:other.lastRecordId];
  }
  if (other.hasScollUp) {
    [self setScollUp:other.scollUp];
  }
  if (other.hasJsonCallBack) {
    [self setJsonCallBack:other.jsonCallBack];
  }
  if (other.msgTypeInfoArray.count > 0) {
    if (resultContent.msgTypeInfoArray == nil) {
      resultContent.msgTypeInfoArray = [[NSMutableArray alloc] initWithArray:other.msgTypeInfoArray];
    } else {
      [resultContent.msgTypeInfoArray addObjectsFromArray:other.msgTypeInfoArray];
    }
  }
  if (other.msgInfoArray.count > 0) {
    if (resultContent.msgInfoArray == nil) {
      resultContent.msgInfoArray = [[NSMutableArray alloc] initWithArray:other.msgInfoArray];
    } else {
      [resultContent.msgInfoArray addObjectsFromArray:other.msgInfoArray];
    }
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.resourceInfoArray.count > 0) {
    if (resultContent.resourceInfoArray == nil) {
      resultContent.resourceInfoArray = [[NSMutableArray alloc] initWithArray:other.resourceInfoArray];
    } else {
      [resultContent.resourceInfoArray addObjectsFromArray:other.resourceInfoArray];
    }
  }
  if (other.commonZipInfoArray.count > 0) {
    if (resultContent.commonZipInfoArray == nil) {
      resultContent.commonZipInfoArray = [[NSMutableArray alloc] initWithArray:other.commonZipInfoArray];
    } else {
      [resultContent.commonZipInfoArray addObjectsFromArray:other.commonZipInfoArray];
    }
  }
  if (other.shareInfoArray.count > 0) {
    if (resultContent.shareInfoArray == nil) {
      resultContent.shareInfoArray = [[NSMutableArray alloc] initWithArray:other.shareInfoArray];
    } else {
      [resultContent.shareInfoArray addObjectsFromArray:other.shareInfoArray];
    }
  }
  if (other.hasResourceId) {
    [self setResourceId:other.resourceId];
  }
  if (other.hasVcsBizType) {
    [self setVcsBizType:other.vcsBizType];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasRepayCode) {
    [self setRepayCode:other.repayCode];
  }
  if (other.userAppLoginInfoArray.count > 0) {
    if (resultContent.userAppLoginInfoArray == nil) {
      resultContent.userAppLoginInfoArray = [[NSMutableArray alloc] initWithArray:other.userAppLoginInfoArray];
    } else {
      [resultContent.userAppLoginInfoArray addObjectsFromArray:other.userAppLoginInfoArray];
    }
  }
  if (other.hasResultType) {
    [self setResultType:other.resultType];
  }
  if (other.conflictAccArray.count > 0) {
    if (resultContent.conflictAccArray == nil) {
      resultContent.conflictAccArray = [[NSMutableArray alloc] initWithArray:other.conflictAccArray];
    } else {
      [resultContent.conflictAccArray addObjectsFromArray:other.conflictAccArray];
    }
  }
  if (other.hasSysFrom) {
    [self setSysFrom:other.sysFrom];
  }
  if (other.hasLoginPin) {
    [self setLoginPin:other.loginPin];
  }
  if (other.hasNewLoginPin) {
    [self setNewLoginPin:other.newLoginPin];
  }
  if (other.hasPayPwd) {
    [self setPayPwd:other.payPwd];
  }
  if (other.hasNewPayPwd) {
    [self setNewPayPwd:other.newPayPwd];
  }
  if (other.hasPayPwdResetFlag) {
    [self setPayPwdResetFlag:other.payPwdResetFlag];
  }
  if (other.hasSex) {
    [self setSex:other.sex];
  }
  if (other.hasBirthday) {
    [self setBirthday:other.birthday];
  }
  if (other.hasNationality) {
    [self setNationality:other.nationality];
  }
  if (other.hasIssuingAuthority) {
    [self setIssuingAuthority:other.issuingAuthority];
  }
  if (other.cardInfoArray.count > 0) {
    if (resultContent.cardInfoArray == nil) {
      resultContent.cardInfoArray = [[NSMutableArray alloc] initWithArray:other.cardInfoArray];
    } else {
      [resultContent.cardInfoArray addObjectsFromArray:other.cardInfoArray];
    }
  }
  if (other.hasSummarizeInfo) {
    [self mergeSummarizeInfo:other.summarizeInfo];
  }
  if (other.hasCurrentPage) {
    [self setCurrentPage:other.currentPage];
  }
  if (other.hasPageSize) {
    [self setPageSize:other.pageSize];
  }
  if (other.txnInfoArray.count > 0) {
    if (resultContent.txnInfoArray == nil) {
      resultContent.txnInfoArray = [[NSMutableArray alloc] initWithArray:other.txnInfoArray];
    } else {
      [resultContent.txnInfoArray addObjectsFromArray:other.txnInfoArray];
    }
  }
  if (other.hasApplyTime) {
    [self setApplyTime:other.applyTime];
  }
  if (other.hasTotalFee) {
    [self setTotalFee:other.totalFee];
  }
  if (other.hasTipInfo) {
    [self setTipInfo:other.tipInfo];
  }
  if (other.hasCheckCode) {
    [self setCheckCode:other.checkCode];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  if (other.hasRepayAmt) {
    [self setRepayAmt:other.repayAmt];
  }
  if (other.hasBillOrderId) {
    [self setBillOrderId:other.billOrderId];
  }
  if (other.hasTxnAcctNo) {
    [self setTxnAcctNo:other.txnAcctNo];
  }
  if (other.hasLastRowNum) {
    [self setLastRowNum:other.lastRowNum];
  }
  if (other.hasInfo) {
    [self setInfo:other.info];
  }
  if (other.creditOrderArray.count > 0) {
    if (resultContent.creditOrderArray == nil) {
      resultContent.creditOrderArray = [[NSMutableArray alloc] initWithArray:other.creditOrderArray];
    } else {
      [resultContent.creditOrderArray addObjectsFromArray:other.creditOrderArray];
    }
  }
  if (other.hasRepayStatus) {
    [self setRepayStatus:other.repayStatus];
  }
  if (other.hasInterest) {
    [self setInterest:other.interest];
  }
  if (other.hasReturnAmt) {
    [self setReturnAmt:other.returnAmt];
  }
  if (other.hasStages) {
    [self setStages:other.stages];
  }
  if (other.divideArray.count > 0) {
    if (resultContent.divideArray == nil) {
      resultContent.divideArray = [[NSMutableArray alloc] initWithArray:other.divideArray];
    } else {
      [resultContent.divideArray addObjectsFromArray:other.divideArray];
    }
  }
  if (other.repayOrderArray.count > 0) {
    if (resultContent.repayOrderArray == nil) {
      resultContent.repayOrderArray = [[NSMutableArray alloc] initWithArray:other.repayOrderArray];
    } else {
      [resultContent.repayOrderArray addObjectsFromArray:other.repayOrderArray];
    }
  }
  if (other.payTypesArray.count > 0) {
    if (resultContent.payTypesArray == nil) {
      resultContent.payTypesArray = [[NSMutableArray alloc] initWithArray:other.payTypesArray];
    } else {
      [resultContent.payTypesArray addObjectsFromArray:other.payTypesArray];
    }
  }
  if (other.hasPayType) {
    [self setPayType:other.payType];
  }
  if (other.repayRecordArray.count > 0) {
    if (resultContent.repayRecordArray == nil) {
      resultContent.repayRecordArray = [[NSMutableArray alloc] initWithArray:other.repayRecordArray];
    } else {
      [resultContent.repayRecordArray addObjectsFromArray:other.repayRecordArray];
    }
  }
  if (other.hasAccountAmt) {
    [self setAccountAmt:other.accountAmt];
  }
  if (other.hasStatusName) {
    [self setStatusName:other.statusName];
  }
  if (other.hasForceFaceCheck) {
    [self setForceFaceCheck:other.forceFaceCheck];
  }
  if (other.hasAllowRepay) {
    [self setAllowRepay:other.allowRepay];
  }
  if (other.hasLocationProvince) {
    [self setLocationProvince:other.locationProvince];
  }
  if (other.hasLocationCity) {
    [self setLocationCity:other.locationCity];
  }
  if (other.hasLocationDistrict) {
    [self setLocationDistrict:other.locationDistrict];
  }
  if (other.hasLocationAddress) {
    [self setLocationAddress:other.locationAddress];
  }
  if (other.hasKakaUrl) {
    [self setKakaUrl:other.kakaUrl];
  }
  if (other.hasDoudouUrl) {
    [self setDoudouUrl:other.doudouUrl];
  }
  if (other.hasRepayId) {
    [self setRepayId:other.repayId];
  }
  if (other.contractArray.count > 0) {
    if (resultContent.contractArray == nil) {
      resultContent.contractArray = [[NSMutableArray alloc] initWithArray:other.contractArray];
    } else {
      [resultContent.contractArray addObjectsFromArray:other.contractArray];
    }
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasFrozenInfo) {
    [self mergeFrozenInfo:other.frozenInfo];
  }
  if (other.hasFcsCreditAmt) {
    [self setFcsCreditAmt:other.fcsCreditAmt];
  }
  if (other.hasLeftFcsCreditAmt) {
    [self setLeftFcsCreditAmt:other.leftFcsCreditAmt];
  }
  if (other.hasFcsCreditAmtStatus) {
    [self setFcsCreditAmtStatus:other.fcsCreditAmtStatus];
  }
  if (other.hasFcsCreditAmtType) {
    [self setFcsCreditAmtType:other.fcsCreditAmtType];
  }
  if (other.hasFcsCreditUrl) {
    [self setFcsCreditUrl:other.fcsCreditUrl];
  }
  if (other.hasLeftCreditAmtName) {
    [self setLeftCreditAmtName:other.leftCreditAmtName];
  }
  if (other.hasTotalCreditAmtName) {
    [self setTotalCreditAmtName:other.totalCreditAmtName];
  }
  if (other.hasFcsCreditName) {
    [self setFcsCreditName:other.fcsCreditName];
  }
  if (other.hasFcsName) {
    [self setFcsName:other.fcsName];
  }
  if (other.hasQuotaShowType) {
    [self setQuotaShowType:other.quotaShowType];
  }
  if (other.hasFcsMerchantName) {
    [self setFcsMerchantName:other.fcsMerchantName];
  }
  if (other.hasLeftFcsCreditName) {
    [self setLeftFcsCreditName:other.leftFcsCreditName];
  }
  if (other.hasSupplementInfo) {
    [self setSupplementInfo:other.supplementInfo];
  }
  if (other.hasExtInfo) {
    [self setExtInfo:other.extInfo];
  }
  if (other.hasSort) {
    [self setSort:other.sort];
  }
  if (other.quotaListArray.count > 0) {
    if (resultContent.quotaListArray == nil) {
      resultContent.quotaListArray = [[NSMutableArray alloc] initWithArray:other.quotaListArray];
    } else {
      [resultContent.quotaListArray addObjectsFromArray:other.quotaListArray];
    }
  }
  if (other.hasIsShowPreQuotaAmt) {
    [self setIsShowPreQuotaAmt:other.isShowPreQuotaAmt];
  }
  if (other.hasPreFcsAmt) {
    [self setPreFcsAmt:other.preFcsAmt];
  }
  if (other.hasPreFcsUrl) {
    [self setPreFcsUrl:other.preFcsUrl];
  }
  if (other.freeListArray.count > 0) {
    if (resultContent.freeListArray == nil) {
      resultContent.freeListArray = [[NSMutableArray alloc] initWithArray:other.freeListArray];
    } else {
      [resultContent.freeListArray addObjectsFromArray:other.freeListArray];
    }
  }
  if (other.hasUserGrade) {
    [self setUserGrade:other.userGrade];
  }
  if (other.hasMemberTwo) {
    [self mergeMemberTwo:other.memberTwo];
  }
  if (other.hasMebCode) {
    [self setMebCode:other.mebCode];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasLastRequestTime) {
    [self setLastRequestTime:other.lastRequestTime];
  }
  if (other.hasCardInfoObject) {
    [self mergeCardInfoObject:other.cardInfoObject];
  }
  if (other.hasOrderInfo) {
    [self mergeOrderInfo:other.orderInfo];
  }
  if (other.productGroupArray.count > 0) {
    if (resultContent.productGroupArray == nil) {
      resultContent.productGroupArray = [[NSMutableArray alloc] initWithArray:other.productGroupArray];
    } else {
      [resultContent.productGroupArray addObjectsFromArray:other.productGroupArray];
    }
  }
  if (other.hasAmtType) {
    [self setAmtType:other.amtType];
  }
  if (other.withdrawLimitArray.count > 0) {
    if (resultContent.withdrawLimitArray == nil) {
      resultContent.withdrawLimitArray = [[NSMutableArray alloc] initWithArray:other.withdrawLimitArray];
    } else {
      [resultContent.withdrawLimitArray addObjectsFromArray:other.withdrawLimitArray];
    }
  }
  if (other.hasEquityCode) {
    [self setEquityCode:other.equityCode];
  }
  if (other.hasFunctionCode) {
    [self setFunctionCode:other.functionCode];
  }
  if (other.hasTwSign) {
    [self setTwSign:other.twSign];
  }
  if (other.hasLeftSumAmt) {
    [self setLeftSumAmt:other.leftSumAmt];
  }
  if (other.hasVirtualOrderAmt) {
    [self setVirtualOrderAmt:other.virtualOrderAmt];
  }
  if (other.hasSumCreditAmt) {
    [self setSumCreditAmt:other.sumCreditAmt];
  }
  if (other.hasShowVoucher) {
    [self setShowVoucher:other.showVoucher];
  }
  if (other.equityInfoArray.count > 0) {
    if (resultContent.equityInfoArray == nil) {
      resultContent.equityInfoArray = [[NSMutableArray alloc] initWithArray:other.equityInfoArray];
    } else {
      [resultContent.equityInfoArray addObjectsFromArray:other.equityInfoArray];
    }
  }
  if (other.activityArray.count > 0) {
    if (resultContent.activityArray == nil) {
      resultContent.activityArray = [[NSMutableArray alloc] initWithArray:other.activityArray];
    } else {
      [resultContent.activityArray addObjectsFromArray:other.activityArray];
    }
  }
  if (other.hasBillId) {
    [self setBillId:other.billId];
  }
  if (other.hasSiedc) {
    [self setSiedc:other.siedc];
  }
  if (other.interestsArray.count > 0) {
    if (resultContent.interestsArray == nil) {
      resultContent.interestsArray = [[NSMutableArray alloc] initWithArray:other.interestsArray];
    } else {
      [resultContent.interestsArray addObjectsFromArray:other.interestsArray];
    }
  }
  if (other.hasQueryInterval) {
    [self setQueryInterval:other.queryInterval];
  }
  if (other.hasQueryTimes) {
    [self setQueryTimes:other.queryTimes];
  }
  if (other.hasStlMerchantCode) {
    [self setStlMerchantCode:other.stlMerchantCode];
  }
  if (other.hasEquityMessage) {
    [self setEquityMessage:other.equityMessage];
  }
  if (other.hasOutEquityMessage) {
    [self setOutEquityMessage:other.outEquityMessage];
  }
  if (other.seedDataArray.count > 0) {
    if (resultContent.seedDataArray == nil) {
      resultContent.seedDataArray = [[NSMutableArray alloc] initWithArray:other.seedDataArray];
    } else {
      [resultContent.seedDataArray addObjectsFromArray:other.seedDataArray];
    }
  }
  if (other.extMapArray.count > 0) {
    if (resultContent.extMapArray == nil) {
      resultContent.extMapArray = [[NSMutableArray alloc] initWithArray:other.extMapArray];
    } else {
      [resultContent.extMapArray addObjectsFromArray:other.extMapArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPassword:[input readString]];
        break;
      }
      case 18: {
        [self setBusinessType:[input readString]];
        break;
      }
      case 26: {
        [self setTermId:[input readString]];
        break;
      }
      case 34: {
        [self setPayPassword:[input readString]];
        break;
      }
      case 42: {
        [self setBankId:[input readString]];
        break;
      }
      case 50: {
        [self setBankName:[input readString]];
        break;
      }
      case 58: {
        [self setOrderId:[input readString]];
        break;
      }
      case 66: {
        [self setAmt:[input readString]];
        break;
      }
      case 74: {
        [self setToken:[input readString]];
        break;
      }
      case 82: {
        [self setValidateCode:[input readString]];
        break;
      }
      case 90: {
        [self setTermTxnTime:[input readString]];
        break;
      }
      case 98: {
        [self setIdType:[input readString]];
        break;
      }
      case 106: {
        [self setHolderName:[input readString]];
        break;
      }
      case 114: {
        [self setExpireDate:[input readString]];
        break;
      }
      case 122: {
        [self setVaType:[input readString]];
        break;
      }
      case 130: {
        [self setPan:[input readString]];
        break;
      }
      case 138: {
        [self setShortPan:[input readString]];
        break;
      }
      case 146: {
        [self setPhoneNo:[input readString]];
        break;
      }
      case 154: {
        [self setAuthDebitBankNames:[input readString]];
        break;
      }
      case 162: {
        [self setCardId:[input readString]];
        break;
      }
      case 170: {
        [self setTxnType:[input readString]];
        break;
      }
      case 178: {
        [self setProductCode:[input readString]];
        break;
      }
      case 186: {
        [self setId:[input readString]];
        break;
      }
      case 194: {
        [self setName:[input readString]];
        break;
      }
      case 202: {
        [self setProvince:[input readString]];
        break;
      }
      case 210: {
        [self setCity:[input readString]];
        break;
      }
      case 218: {
        [self setPageNo:[input readString]];
        break;
      }
      case 226: {
        [self setStartDate:[input readString]];
        break;
      }
      case 234: {
        [self setEndDate:[input readString]];
        break;
      }
      case 242: {
        [self setStatus:[input readString]];
        break;
      }
      case 250: {
        [self setOptionType:[input readString]];
        break;
      }
      case 258: {
        [self setSecurityQuestion:[input readString]];
        break;
      }
      case 266: {
        [self setSecurityAnswer:[input readString]];
        break;
      }
      case 274: {
        [self setCardType:[input readString]];
        break;
      }
      case 282: {
        [self setEmail:[input readString]];
        break;
      }
      case 290: {
        [self setUniQrCode:[input readString]];
        break;
      }
      case 298: {
        [self setProductType:[input readString]];
        break;
      }
      case 306: {
        [self setAddress:[input readString]];
        break;
      }
      case 314: {
        [self setResendFlag:[input readString]];
        break;
      }
      case 322: {
        [self setPasswordType:[input readString]];
        break;
      }
      case 330: {
        [self setCvv2:[input readString]];
        break;
      }
      case 338: {
        [self setRefreshToken:[input readString]];
        break;
      }
      case 346: {
        [self setIdTxnCtrl:[input readString]];
        break;
      }
      case 354: {
        [self setExtData1:[input readString]];
        break;
      }
      case 362: {
        [self setAuthBankIds:[input readString]];
        break;
      }
      case 370: {
        [self setAuthDebitBankIds:[input readString]];
        break;
      }
      case 378: {
        [self setAuthBankNames:[input readString]];
        break;
      }
      case 386: {
        [self setBranchBank:[input readString]];
        break;
      }
      case 394: {
        [self setTxnFlag:[input readString]];
        break;
      }
      case 402: {
        [self setAuthCode:[input readString]];
        break;
      }
      case 410: {
        [self setTxnTime:[input readString]];
        break;
      }
      case 418: {
        [self setSignFlag:[input readString]];
        break;
      }
      case 426: {
        [self setProductName:[input readString]];
        break;
      }
      case 434: {
        [self setZoneType:[input readString]];
        break;
      }
      case 442: {
        [self setPin:[input readString]];
        break;
      }
      case 450: {
        [self setOrigOrderId:[input readString]];
        break;
      }
      case 458: {
        [self setCount:[input readString]];
        break;
      }
      case 466: {
        [self setRemark:[input readString]];
        break;
      }
      case 474: {
        [self setMemAcctcodeName:[input readString]];
        break;
      }
      case 482: {
        [self setMemAcctcodeBalance:[input readString]];
        break;
      }
      case 490: {
        [self setExistFlg:[input readString]];
        break;
      }
      case 498: {
        [self setPayeeNotes:[input readString]];
        break;
      }
      case 506: {
        [self setRealNameFlg:[input readString]];
        break;
      }
      case 514: {
        [self setBindPhoneFlg:[input readString]];
        break;
      }
      case 522: {
        [self setFirstLoginFlg:[input readString]];
        break;
      }
      case 530: {
        [self setTotalAmt:[input readString]];
        break;
      }
      case 538: {
        [self setTotalCount:[input readString]];
        break;
      }
      case 546: {
        [self setOrderType:[input readString]];
        break;
      }
      case 554: {
        [self setCertId:[input readString]];
        break;
      }
      case 562: {
        [self setRecommendId:[input readString]];
        break;
      }
      case 570: {
        [self setOrderCode:[input readString]];
        break;
      }
      case 578: {
        [self setMax:[input readString]];
        break;
      }
      case 586: {
        [self setStatusSet:[input readString]];
        break;
      }
      case 594: {
        [self setOutTradeNo:[input readString]];
        break;
      }
      case 602: {
        ContentAppInfoBuilder* subBuilder = [ContentAppInfo builder];
        if (self.hasAppInfo) {
          [subBuilder mergeFrom:self.appInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAppInfo:[subBuilder buildPartial]];
        break;
      }
      case 610: {
        ContentBankBuilder* subBuilder = [ContentBank builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBank:[subBuilder buildPartial]];
        break;
      }
      case 618: {
        ContentMemberBuilder* subBuilder = [ContentMember builder];
        if (self.hasMember) {
          [subBuilder mergeFrom:self.member];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMember:[subBuilder buildPartial]];
        break;
      }
      case 626: {
        ContentMemberIdentityBuilder* subBuilder = [ContentMemberIdentity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMemberIdentity:[subBuilder buildPartial]];
        break;
      }
      case 634: {
        [self addSafeProblem:[input readString]];
        break;
      }
      case 642: {
        ContentQueryWalletBill99BillResponseBuilder* subBuilder = [ContentQueryWalletBill99BillResponse builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQueryWalletBill99BillResponse:[subBuilder buildPartial]];
        break;
      }
      case 650: {
        ContentAtpProdBuilder* subBuilder = [ContentAtpProd builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAtpProd:[subBuilder buildPartial]];
        break;
      }
      case 658: {
        [self setTradeId:[input readString]];
        break;
      }
      case 666: {
        [self setEndTime:[input readString]];
        break;
      }
      case 674: {
        ContentSolidCardBuilder* subBuilder = [ContentSolidCard builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSolidCard:[subBuilder buildPartial]];
        break;
      }
      case 682: {
        [self setUserFlag:[input readString]];
        break;
      }
      case 690: {
        [self setIdCardNo:[input readString]];
        break;
      }
      case 698: {
        [self setIdCardImg:[input readString]];
        break;
      }
      case 706: {
        [self setPhoto:[input readString]];
        break;
      }
      case 714: {
        [self setIsDisplay:[input readString]];
        break;
      }
      case 722: {
        [self setShortPhones:[input readString]];
        break;
      }
      case 730: {
        [self setRipAmount:[input readString]];
        break;
      }
      case 738: {
        ContentMemberAuthDtoBuilder* subBuilder = [ContentMemberAuthDto builder];
        if (self.hasMemberAuthDto) {
          [subBuilder mergeFrom:self.memberAuthDto];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMemberAuthDto:[subBuilder buildPartial]];
        break;
      }
      case 746: {
        ContentBankLimitAmountDtoBuilder* subBuilder = [ContentBankLimitAmountDto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBankLimitAmountDto:[subBuilder buildPartial]];
        break;
      }
      case 754: {
        [self setOccupation:[input readString]];
        break;
      }
      case 762: {
        [self setPartnerUserId:[input readString]];
        break;
      }
      case 770: {
        [self setMemberBankAcctId:[input readString]];
        break;
      }
      case 778: {
        [self setExpiresIn:[input readString]];
        break;
      }
      case 786: {
        ContentAppUpInfoBuilder* subBuilder = [ContentAppUpInfo builder];
        if (self.hasAppUpInfo) {
          [subBuilder mergeFrom:self.appUpInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAppUpInfo:[subBuilder buildPartial]];
        break;
      }
      case 794: {
        [self setKeyboardSeq:[input readString]];
        break;
      }
      case 802: {
        [self setImgCode:[input readString]];
        break;
      }
      case 810: {
        [self setImgToken:[input readString]];
        break;
      }
      case 818: {
        [self setValidateToken:[input readString]];
        break;
      }
      case 826: {
        [self setErrorType:[input readString]];
        break;
      }
      case 834: {
        [self setFlag:[input readString]];
        break;
      }
      case 842: {
        ContentQueryAllFinaprodResponseBuilder* subBuilder = [ContentQueryAllFinaprodResponse builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQueryAllFinaprodResponse:[subBuilder buildPartial]];
        break;
      }
      case 850: {
        [self setFinProdType:[input readString]];
        break;
      }
      case 858: {
        [self setTradeType:[input readString]];
        break;
      }
      case 866: {
        [self setProdStatus:[input readString]];
        break;
      }
      case 874: {
        [self setQueryOrders:[input readString]];
        break;
      }
      case 882: {
        [self setHorizonTo:[input readString]];
        break;
      }
      case 890: {
        [self setReturnRateExp:[input readString]];
        break;
      }
      case 898: {
        ContentAtpTradeOrderBuilder* subBuilder = [ContentAtpTradeOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAtpTradeOrder:[subBuilder buildPartial]];
        break;
      }
      case 906: {
        [self setTotalFrozenAmt:[input readString]];
        break;
      }
      case 914: {
        [self setFee:[input readString]];
        break;
      }
      case 922: {
        [self setTransFeeRate:[input readString]];
        break;
      }
      case 930: {
        [self setBankNameId:[input readString]];
        break;
      }
      case 938: {
        ContentFinancialInfoBuilder* subBuilder = [ContentFinancialInfo builder];
        if (self.hasFinancialInfo) {
          [subBuilder mergeFrom:self.financialInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFinancialInfo:[subBuilder buildPartial]];
        break;
      }
      case 946: {
        ContentProdAccountInfoBuilder* subBuilder = [ContentProdAccountInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProdAccountInfo:[subBuilder buildPartial]];
        break;
      }
      case 954: {
        [self setIsMainOrder:[input readString]];
        break;
      }
      case 962: {
        [self setMerchantId:[input readString]];
        break;
      }
      case 970: {
        [self setMerchantName:[input readString]];
        break;
      }
      case 978: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 986: {
        [self setIsRoot:[input readString]];
        break;
      }
      case 994: {
        [self setSize:[input readString]];
        break;
      }
      case 1002: {
        [self setPhoneModel:[input readString]];
        break;
      }
      case 1010: {
        [self setWifiName:[input readString]];
        break;
      }
      case 1018: {
        [self setWifiMac:[input readString]];
        break;
      }
      case 1026: {
        [self setAppId:[input readString]];
        break;
      }
      case 1034: {
        [self setMerchantCode:[input readString]];
        break;
      }
      case 1042: {
        [self setBillOrderNo:[input readString]];
        break;
      }
      case 1050: {
        [self setChannelType:[input readString]];
        break;
      }
      case 1058: {
        [self setOrderAmount:[input readString]];
        break;
      }
      case 1066: {
        [self setPayMode:[input readString]];
        break;
      }
      case 1074: {
        [self setPayAmount:[input readString]];
        break;
      }
      case 1082: {
        [self setOrderStatus:[input readString]];
        break;
      }
      case 1090: {
        [self setOutOrderType:[input readString]];
        break;
      }
      case 1098: {
        [self setTxnTimeStart:[input readString]];
        break;
      }
      case 1106: {
        [self setTxnTimeExpire:[input readString]];
        break;
      }
      case 1114: {
        [self setPayStatus:[input readString]];
        break;
      }
      case 1122: {
        ContentProductInfoBuilder* subBuilder = [ContentProductInfo builder];
        if (self.hasProductInfo) {
          [subBuilder mergeFrom:self.productInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProductInfo:[subBuilder buildPartial]];
        break;
      }
      case 1130: {
        ContentPayMethodBuilder* subBuilder = [ContentPayMethod builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPayMethod:[subBuilder buildPartial]];
        break;
      }
      case 1138: {
        [self setOutEquityCode:[input readString]];
        break;
      }
      case 1146: {
        [self setOutEquityAmount:[input readString]];
        break;
      }
      case 1154: {
        [self setPayMethodId:[input readString]];
        break;
      }
      case 1162: {
        ContentInstalmentBuilder* subBuilder = [ContentInstalment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInstalment:[subBuilder buildPartial]];
        break;
      }
      case 1170: {
        [self setInstalmentId:[input readString]];
        break;
      }
      case 1178: {
        [self setTxnEndTime:[input readString]];
        break;
      }
      case 1186: {
        [self setValidateElement:[input readString]];
        break;
      }
      case 1194: {
        [self setSMsCode:[input readString]];
        break;
      }
      case 1202: {
        ContentVoucherBuilder* subBuilder = [ContentVoucher builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addVoucher:[subBuilder buildPartial]];
        break;
      }
      case 1210: {
        ContentAteTradeOrderBuilder* subBuilder = [ContentAteTradeOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAteTradeOrder:[subBuilder buildPartial]];
        break;
      }
      case 1218: {
        [self setEquityAmount:[input readString]];
        break;
      }
      case 1226: {
        [self setSupportFinger:[input readString]];
        break;
      }
      case 1234: {
        [self setType:[input readString]];
        break;
      }
      case 1242: {
        [self setTradeStatus:[input readString]];
        break;
      }
      case 1250: {
        [self setProductDesc:[input readString]];
        break;
      }
      case 1258: {
        [self setSubMerchantName:[input readString]];
        break;
      }
      case 1266: {
        [self setMemo:[input readString]];
        break;
      }
      case 1274: {
        [self setNotifyMode:[input readString]];
        break;
      }
      case 1282: {
        ContentMemberTwoBuilder* subBuilder = [ContentMemberTwo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMemberList:[subBuilder buildPartial]];
        break;
      }
      case 1290: {
        [self setGpsInfo:[input readString]];
        break;
      }
      case 1298: {
        [self setPublishNo:[input readString]];
        break;
      }
      case 1306: {
        [self setResolution:[input readString]];
        break;
      }
      case 1314: {
        [self setMsgTypeId:[input readString]];
        break;
      }
      case 1322: {
        [self setLastRecordId:[input readString]];
        break;
      }
      case 1330: {
        [self setScollUp:[input readString]];
        break;
      }
      case 1338: {
        [self setJsonCallBack:[input readString]];
        break;
      }
      case 1346: {
        ContentMsgTypeInfoBuilder* subBuilder = [ContentMsgTypeInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMsgTypeInfo:[subBuilder buildPartial]];
        break;
      }
      case 1354: {
        ContentMsgInfoBuilder* subBuilder = [ContentMsgInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMsgInfo:[subBuilder buildPartial]];
        break;
      }
      case 1362: {
        [self setMsgId:[input readString]];
        break;
      }
      case 1370: {
        ContentResourceInfoBuilder* subBuilder = [ContentResourceInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addResourceInfo:[subBuilder buildPartial]];
        break;
      }
      case 1378: {
        ContentCommonZipInfoBuilder* subBuilder = [ContentCommonZipInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCommonZipInfo:[subBuilder buildPartial]];
        break;
      }
      case 1386: {
        ContentShareInfoBuilder* subBuilder = [ContentShareInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addShareInfo:[subBuilder buildPartial]];
        break;
      }
      case 1394: {
        [self setResourceId:[input readString]];
        break;
      }
      case 1402: {
        [self setVcsBizType:[input readString]];
        break;
      }
      case 1410: {
        [self setMsg:[input readString]];
        break;
      }
      case 1418: {
        [self setRepayCode:[input readString]];
        break;
      }
      case 1426: {
        ContentUserAppLoginInfoBuilder* subBuilder = [ContentUserAppLoginInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserAppLoginInfo:[subBuilder buildPartial]];
        break;
      }
      case 1434: {
        [self setResultType:[input readString]];
        break;
      }
      case 1442: {
        ContentConflictAccBuilder* subBuilder = [ContentConflictAcc builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConflictAcc:[subBuilder buildPartial]];
        break;
      }
      case 1450: {
        [self setSysFrom:[input readString]];
        break;
      }
      case 1458: {
        [self setLoginPin:[input readString]];
        break;
      }
      case 1466: {
        [self setNewLoginPin:[input readString]];
        break;
      }
      case 1474: {
        [self setPayPwd:[input readString]];
        break;
      }
      case 1482: {
        [self setNewPayPwd:[input readString]];
        break;
      }
      case 1490: {
        [self setPayPwdResetFlag:[input readString]];
        break;
      }
      case 1498: {
        [self setSex:[input readString]];
        break;
      }
      case 1506: {
        [self setBirthday:[input readString]];
        break;
      }
      case 1514: {
        [self setNationality:[input readString]];
        break;
      }
      case 1522: {
        [self setIssuingAuthority:[input readString]];
        break;
      }
      case 1530: {
        ContentCardInfoBuilder* subBuilder = [ContentCardInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCardInfo:[subBuilder buildPartial]];
        break;
      }
      case 1538: {
        ContentSummarizeInfoBuilder* subBuilder = [ContentSummarizeInfo builder];
        if (self.hasSummarizeInfo) {
          [subBuilder mergeFrom:self.summarizeInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSummarizeInfo:[subBuilder buildPartial]];
        break;
      }
      case 1546: {
        [self setCurrentPage:[input readString]];
        break;
      }
      case 1554: {
        [self setPageSize:[input readString]];
        break;
      }
      case 1562: {
        ContentTxnInfoBuilder* subBuilder = [ContentTxnInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTxnInfo:[subBuilder buildPartial]];
        break;
      }
      case 1570: {
        [self setApplyTime:[input readString]];
        break;
      }
      case 1578: {
        [self setTotalFee:[input readString]];
        break;
      }
      case 1586: {
        [self setTipInfo:[input readString]];
        break;
      }
      case 1594: {
        [self setCheckCode:[input readString]];
        break;
      }
      case 1602: {
        [self setTotal:[input readString]];
        break;
      }
      case 1610: {
        [self setRepayAmt:[input readString]];
        break;
      }
      case 1618: {
        [self setBillOrderId:[input readString]];
        break;
      }
      case 1626: {
        [self setTxnAcctNo:[input readString]];
        break;
      }
      case 1634: {
        [self setLastRowNum:[input readString]];
        break;
      }
      case 1642: {
        [self setInfo:[input readString]];
        break;
      }
      case 1650: {
        ContentCreditOrderBuilder* subBuilder = [ContentCreditOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCreditOrder:[subBuilder buildPartial]];
        break;
      }
      case 1658: {
        [self setRepayStatus:[input readString]];
        break;
      }
      case 1666: {
        [self setInterest:[input readString]];
        break;
      }
      case 1674: {
        [self setReturnAmt:[input readString]];
        break;
      }
      case 1682: {
        [self setStages:[input readString]];
        break;
      }
      case 1690: {
        ContentDivideBuilder* subBuilder = [ContentDivide builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDivide:[subBuilder buildPartial]];
        break;
      }
      case 1698: {
        ContentRepayOrderBuilder* subBuilder = [ContentRepayOrder builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepayOrder:[subBuilder buildPartial]];
        break;
      }
      case 1706: {
        ContentPayTypeBuilder* subBuilder = [ContentPayType builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPayTypes:[subBuilder buildPartial]];
        break;
      }
      case 1714: {
        [self setPayType:[input readString]];
        break;
      }
      case 1722: {
        ContentRepayRecordBuilder* subBuilder = [ContentRepayRecord builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepayRecord:[subBuilder buildPartial]];
        break;
      }
      case 1730: {
        [self setAccountAmt:[input readString]];
        break;
      }
      case 1738: {
        [self setStatusName:[input readString]];
        break;
      }
      case 1746: {
        [self setForceFaceCheck:[input readString]];
        break;
      }
      case 1754: {
        [self setAllowRepay:[input readString]];
        break;
      }
      case 1762: {
        [self setLocationProvince:[input readString]];
        break;
      }
      case 1770: {
        [self setLocationCity:[input readString]];
        break;
      }
      case 1778: {
        [self setLocationDistrict:[input readString]];
        break;
      }
      case 1786: {
        [self setLocationAddress:[input readString]];
        break;
      }
      case 1794: {
        [self setKakaUrl:[input readString]];
        break;
      }
      case 1802: {
        [self setDoudouUrl:[input readString]];
        break;
      }
      case 1810: {
        [self setRepayId:[input readString]];
        break;
      }
      case 1818: {
        ContentContractBuilder* subBuilder = [ContentContract builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContract:[subBuilder buildPartial]];
        break;
      }
      case 1826: {
        [self setUrl:[input readString]];
        break;
      }
      case 1834: {
        ContentFrozenInfoBuilder* subBuilder = [ContentFrozenInfo builder];
        if (self.hasFrozenInfo) {
          [subBuilder mergeFrom:self.frozenInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFrozenInfo:[subBuilder buildPartial]];
        break;
      }
      case 1842: {
        [self setFcsCreditAmt:[input readString]];
        break;
      }
      case 1850: {
        [self setLeftFcsCreditAmt:[input readString]];
        break;
      }
      case 1858: {
        [self setFcsCreditAmtStatus:[input readString]];
        break;
      }
      case 1866: {
        [self setFcsCreditAmtType:[input readString]];
        break;
      }
      case 1874: {
        [self setFcsCreditUrl:[input readString]];
        break;
      }
      case 1882: {
        [self setLeftCreditAmtName:[input readString]];
        break;
      }
      case 1890: {
        [self setTotalCreditAmtName:[input readString]];
        break;
      }
      case 1898: {
        [self setFcsCreditName:[input readString]];
        break;
      }
      case 1906: {
        [self setFcsName:[input readString]];
        break;
      }
      case 1914: {
        [self setQuotaShowType:[input readString]];
        break;
      }
      case 1922: {
        [self setFcsMerchantName:[input readString]];
        break;
      }
      case 1930: {
        [self setLeftFcsCreditName:[input readString]];
        break;
      }
      case 1938: {
        [self setSupplementInfo:[input readString]];
        break;
      }
      case 1946: {
        [self setExtInfo:[input readString]];
        break;
      }
      case 1954: {
        [self setSort:[input readString]];
        break;
      }
      case 1962: {
        ContentResultBuilder* subBuilder = [ContentResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQuotaList:[subBuilder buildPartial]];
        break;
      }
      case 1970: {
        [self setIsShowPreQuotaAmt:[input readString]];
        break;
      }
      case 1978: {
        [self setPreFcsAmt:[input readString]];
        break;
      }
      case 1986: {
        [self setPreFcsUrl:[input readString]];
        break;
      }
      case 1994: {
        ContentResultBuilder* subBuilder = [ContentResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFreeList:[subBuilder buildPartial]];
        break;
      }
      case 2002: {
        [self setUserGrade:[input readString]];
        break;
      }
      case 2010: {
        ContentMemberTwoBuilder* subBuilder = [ContentMemberTwo builder];
        if (self.hasMemberTwo) {
          [subBuilder mergeFrom:self.memberTwo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMemberTwo:[subBuilder buildPartial]];
        break;
      }
      case 2018: {
        [self setMebCode:[input readString]];
        break;
      }
      case 2026: {
        [self setUserName:[input readString]];
        break;
      }
      case 2034: {
        [self setLastRequestTime:[input readString]];
        break;
      }
      case 2042: {
        ContentCardInfoBuilder* subBuilder = [ContentCardInfo builder];
        if (self.hasCardInfoObject) {
          [subBuilder mergeFrom:self.cardInfoObject];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCardInfoObject:[subBuilder buildPartial]];
        break;
      }
      case 2050: {
        ContentOrderInfoBuilder* subBuilder = [ContentOrderInfo builder];
        if (self.hasOrderInfo) {
          [subBuilder mergeFrom:self.orderInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrderInfo:[subBuilder buildPartial]];
        break;
      }
      case 2058: {
        ContentProductGroupBuilder* subBuilder = [ContentProductGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProductGroup:[subBuilder buildPartial]];
        break;
      }
      case 2066: {
        [self setAmtType:[input readString]];
        break;
      }
      case 2074: {
        ContentWithdrawLimitBuilder* subBuilder = [ContentWithdrawLimit builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWithdrawLimit:[subBuilder buildPartial]];
        break;
      }
      case 2082: {
        [self setEquityCode:[input readString]];
        break;
      }
      case 2090: {
        [self setFunctionCode:[input readString]];
        break;
      }
      case 2098: {
        [self setTwSign:[input readString]];
        break;
      }
      case 2106: {
        [self setLeftSumAmt:[input readString]];
        break;
      }
      case 2114: {
        [self setVirtualOrderAmt:[input readString]];
        break;
      }
      case 2122: {
        [self setSumCreditAmt:[input readString]];
        break;
      }
      case 2130: {
        [self setShowVoucher:[input readString]];
        break;
      }
      case 2138: {
        ContentEquityInfoBuilder* subBuilder = [ContentEquityInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEquityInfo:[subBuilder buildPartial]];
        break;
      }
      case 2146: {
        ContentActivityBuilder* subBuilder = [ContentActivity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addActivity:[subBuilder buildPartial]];
        break;
      }
      case 2154: {
        [self setBillId:[input readString]];
        break;
      }
      case 2162: {
        [self setSiedc:[input readString]];
        break;
      }
      case 2170: {
        ContentInterestBuilder* subBuilder = [ContentInterest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInterests:[subBuilder buildPartial]];
        break;
      }
      case 2178: {
        [self setQueryInterval:[input readString]];
        break;
      }
      case 2186: {
        [self setQueryTimes:[input readString]];
        break;
      }
      case 2194: {
        [self setStlMerchantCode:[input readString]];
        break;
      }
      case 2202: {
        [self setEquityMessage:[input readString]];
        break;
      }
      case 2210: {
        [self setOutEquityMessage:[input readString]];
        break;
      }
      case 2218: {
        ContentSeedDataBuilder* subBuilder = [ContentSeedData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSeedData:[subBuilder buildPartial]];
        break;
      }
      case 7994: {
        ContentExtMapBuilder* subBuilder = [ContentExtMap builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExtMap:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPassword {
  return resultContent.hasPassword;
}
- (NSString*) password {
  return resultContent.password;
}
- (ContentBuilder*) setPassword:(NSString*) value {
  resultContent.hasPassword = YES;
  resultContent.password = value;
  return self;
}
- (ContentBuilder*) clearPassword {
  resultContent.hasPassword = NO;
  resultContent.password = @"";
  return self;
}
- (BOOL) hasBusinessType {
  return resultContent.hasBusinessType;
}
- (NSString*) businessType {
  return resultContent.businessType;
}
- (ContentBuilder*) setBusinessType:(NSString*) value {
  resultContent.hasBusinessType = YES;
  resultContent.businessType = value;
  return self;
}
- (ContentBuilder*) clearBusinessType {
  resultContent.hasBusinessType = NO;
  resultContent.businessType = @"";
  return self;
}
- (BOOL) hasTermId {
  return resultContent.hasTermId;
}
- (NSString*) termId {
  return resultContent.termId;
}
- (ContentBuilder*) setTermId:(NSString*) value {
  resultContent.hasTermId = YES;
  resultContent.termId = value;
  return self;
}
- (ContentBuilder*) clearTermId {
  resultContent.hasTermId = NO;
  resultContent.termId = @"";
  return self;
}
- (BOOL) hasPayPassword {
  return resultContent.hasPayPassword;
}
- (NSString*) payPassword {
  return resultContent.payPassword;
}
- (ContentBuilder*) setPayPassword:(NSString*) value {
  resultContent.hasPayPassword = YES;
  resultContent.payPassword = value;
  return self;
}
- (ContentBuilder*) clearPayPassword {
  resultContent.hasPayPassword = NO;
  resultContent.payPassword = @"";
  return self;
}
- (BOOL) hasBankId {
  return resultContent.hasBankId;
}
- (NSString*) bankId {
  return resultContent.bankId;
}
- (ContentBuilder*) setBankId:(NSString*) value {
  resultContent.hasBankId = YES;
  resultContent.bankId = value;
  return self;
}
- (ContentBuilder*) clearBankId {
  resultContent.hasBankId = NO;
  resultContent.bankId = @"";
  return self;
}
- (BOOL) hasBankName {
  return resultContent.hasBankName;
}
- (NSString*) bankName {
  return resultContent.bankName;
}
- (ContentBuilder*) setBankName:(NSString*) value {
  resultContent.hasBankName = YES;
  resultContent.bankName = value;
  return self;
}
- (ContentBuilder*) clearBankName {
  resultContent.hasBankName = NO;
  resultContent.bankName = @"";
  return self;
}
- (BOOL) hasOrderId {
  return resultContent.hasOrderId;
}
- (NSString*) orderId {
  return resultContent.orderId;
}
- (ContentBuilder*) setOrderId:(NSString*) value {
  resultContent.hasOrderId = YES;
  resultContent.orderId = value;
  return self;
}
- (ContentBuilder*) clearOrderId {
  resultContent.hasOrderId = NO;
  resultContent.orderId = @"";
  return self;
}
- (BOOL) hasAmt {
  return resultContent.hasAmt;
}
- (NSString*) amt {
  return resultContent.amt;
}
- (ContentBuilder*) setAmt:(NSString*) value {
  resultContent.hasAmt = YES;
  resultContent.amt = value;
  return self;
}
- (ContentBuilder*) clearAmt {
  resultContent.hasAmt = NO;
  resultContent.amt = @"";
  return self;
}
- (BOOL) hasToken {
  return resultContent.hasToken;
}
- (NSString*) token {
  return resultContent.token;
}
- (ContentBuilder*) setToken:(NSString*) value {
  resultContent.hasToken = YES;
  resultContent.token = value;
  return self;
}
- (ContentBuilder*) clearToken {
  resultContent.hasToken = NO;
  resultContent.token = @"";
  return self;
}
- (BOOL) hasValidateCode {
  return resultContent.hasValidateCode;
}
- (NSString*) validateCode {
  return resultContent.validateCode;
}
- (ContentBuilder*) setValidateCode:(NSString*) value {
  resultContent.hasValidateCode = YES;
  resultContent.validateCode = value;
  return self;
}
- (ContentBuilder*) clearValidateCode {
  resultContent.hasValidateCode = NO;
  resultContent.validateCode = @"";
  return self;
}
- (BOOL) hasTermTxnTime {
  return resultContent.hasTermTxnTime;
}
- (NSString*) termTxnTime {
  return resultContent.termTxnTime;
}
- (ContentBuilder*) setTermTxnTime:(NSString*) value {
  resultContent.hasTermTxnTime = YES;
  resultContent.termTxnTime = value;
  return self;
}
- (ContentBuilder*) clearTermTxnTime {
  resultContent.hasTermTxnTime = NO;
  resultContent.termTxnTime = @"";
  return self;
}
- (BOOL) hasIdType {
  return resultContent.hasIdType;
}
- (NSString*) idType {
  return resultContent.idType;
}
- (ContentBuilder*) setIdType:(NSString*) value {
  resultContent.hasIdType = YES;
  resultContent.idType = value;
  return self;
}
- (ContentBuilder*) clearIdType {
  resultContent.hasIdType = NO;
  resultContent.idType = @"";
  return self;
}
- (BOOL) hasHolderName {
  return resultContent.hasHolderName;
}
- (NSString*) holderName {
  return resultContent.holderName;
}
- (ContentBuilder*) setHolderName:(NSString*) value {
  resultContent.hasHolderName = YES;
  resultContent.holderName = value;
  return self;
}
- (ContentBuilder*) clearHolderName {
  resultContent.hasHolderName = NO;
  resultContent.holderName = @"";
  return self;
}
- (BOOL) hasExpireDate {
  return resultContent.hasExpireDate;
}
- (NSString*) expireDate {
  return resultContent.expireDate;
}
- (ContentBuilder*) setExpireDate:(NSString*) value {
  resultContent.hasExpireDate = YES;
  resultContent.expireDate = value;
  return self;
}
- (ContentBuilder*) clearExpireDate {
  resultContent.hasExpireDate = NO;
  resultContent.expireDate = @"";
  return self;
}
- (BOOL) hasVaType {
  return resultContent.hasVaType;
}
- (NSString*) vaType {
  return resultContent.vaType;
}
- (ContentBuilder*) setVaType:(NSString*) value {
  resultContent.hasVaType = YES;
  resultContent.vaType = value;
  return self;
}
- (ContentBuilder*) clearVaType {
  resultContent.hasVaType = NO;
  resultContent.vaType = @"";
  return self;
}
- (BOOL) hasPan {
  return resultContent.hasPan;
}
- (NSString*) pan {
  return resultContent.pan;
}
- (ContentBuilder*) setPan:(NSString*) value {
  resultContent.hasPan = YES;
  resultContent.pan = value;
  return self;
}
- (ContentBuilder*) clearPan {
  resultContent.hasPan = NO;
  resultContent.pan = @"";
  return self;
}
- (BOOL) hasShortPan {
  return resultContent.hasShortPan;
}
- (NSString*) shortPan {
  return resultContent.shortPan;
}
- (ContentBuilder*) setShortPan:(NSString*) value {
  resultContent.hasShortPan = YES;
  resultContent.shortPan = value;
  return self;
}
- (ContentBuilder*) clearShortPan {
  resultContent.hasShortPan = NO;
  resultContent.shortPan = @"";
  return self;
}
- (BOOL) hasPhoneNo {
  return resultContent.hasPhoneNo;
}
- (NSString*) phoneNo {
  return resultContent.phoneNo;
}
- (ContentBuilder*) setPhoneNo:(NSString*) value {
  resultContent.hasPhoneNo = YES;
  resultContent.phoneNo = value;
  return self;
}
- (ContentBuilder*) clearPhoneNo {
  resultContent.hasPhoneNo = NO;
  resultContent.phoneNo = @"";
  return self;
}
- (BOOL) hasAuthDebitBankNames {
  return resultContent.hasAuthDebitBankNames;
}
- (NSString*) authDebitBankNames {
  return resultContent.authDebitBankNames;
}
- (ContentBuilder*) setAuthDebitBankNames:(NSString*) value {
  resultContent.hasAuthDebitBankNames = YES;
  resultContent.authDebitBankNames = value;
  return self;
}
- (ContentBuilder*) clearAuthDebitBankNames {
  resultContent.hasAuthDebitBankNames = NO;
  resultContent.authDebitBankNames = @"";
  return self;
}
- (BOOL) hasCardId {
  return resultContent.hasCardId;
}
- (NSString*) cardId {
  return resultContent.cardId;
}
- (ContentBuilder*) setCardId:(NSString*) value {
  resultContent.hasCardId = YES;
  resultContent.cardId = value;
  return self;
}
- (ContentBuilder*) clearCardId {
  resultContent.hasCardId = NO;
  resultContent.cardId = @"";
  return self;
}
- (BOOL) hasTxnType {
  return resultContent.hasTxnType;
}
- (NSString*) txnType {
  return resultContent.txnType;
}
- (ContentBuilder*) setTxnType:(NSString*) value {
  resultContent.hasTxnType = YES;
  resultContent.txnType = value;
  return self;
}
- (ContentBuilder*) clearTxnType {
  resultContent.hasTxnType = NO;
  resultContent.txnType = @"";
  return self;
}
- (BOOL) hasProductCode {
  return resultContent.hasProductCode;
}
- (NSString*) productCode {
  return resultContent.productCode;
}
- (ContentBuilder*) setProductCode:(NSString*) value {
  resultContent.hasProductCode = YES;
  resultContent.productCode = value;
  return self;
}
- (ContentBuilder*) clearProductCode {
  resultContent.hasProductCode = NO;
  resultContent.productCode = @"";
  return self;
}
- (BOOL) hasId {
  return resultContent.hasId;
}
- (NSString*) id {
  return resultContent.id;
}
- (ContentBuilder*) setId:(NSString*) value {
  resultContent.hasId = YES;
  resultContent.id = value;
  return self;
}
- (ContentBuilder*) clearId {
  resultContent.hasId = NO;
  resultContent.id = @"";
  return self;
}
- (BOOL) hasName {
  return resultContent.hasName;
}
- (NSString*) name {
  return resultContent.name;
}
- (ContentBuilder*) setName:(NSString*) value {
  resultContent.hasName = YES;
  resultContent.name = value;
  return self;
}
- (ContentBuilder*) clearName {
  resultContent.hasName = NO;
  resultContent.name = @"";
  return self;
}
- (BOOL) hasProvince {
  return resultContent.hasProvince;
}
- (NSString*) province {
  return resultContent.province;
}
- (ContentBuilder*) setProvince:(NSString*) value {
  resultContent.hasProvince = YES;
  resultContent.province = value;
  return self;
}
- (ContentBuilder*) clearProvince {
  resultContent.hasProvince = NO;
  resultContent.province = @"";
  return self;
}
- (BOOL) hasCity {
  return resultContent.hasCity;
}
- (NSString*) city {
  return resultContent.city;
}
- (ContentBuilder*) setCity:(NSString*) value {
  resultContent.hasCity = YES;
  resultContent.city = value;
  return self;
}
- (ContentBuilder*) clearCity {
  resultContent.hasCity = NO;
  resultContent.city = @"";
  return self;
}
- (BOOL) hasPageNo {
  return resultContent.hasPageNo;
}
- (NSString*) pageNo {
  return resultContent.pageNo;
}
- (ContentBuilder*) setPageNo:(NSString*) value {
  resultContent.hasPageNo = YES;
  resultContent.pageNo = value;
  return self;
}
- (ContentBuilder*) clearPageNo {
  resultContent.hasPageNo = NO;
  resultContent.pageNo = @"";
  return self;
}
- (BOOL) hasStartDate {
  return resultContent.hasStartDate;
}
- (NSString*) startDate {
  return resultContent.startDate;
}
- (ContentBuilder*) setStartDate:(NSString*) value {
  resultContent.hasStartDate = YES;
  resultContent.startDate = value;
  return self;
}
- (ContentBuilder*) clearStartDate {
  resultContent.hasStartDate = NO;
  resultContent.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return resultContent.hasEndDate;
}
- (NSString*) endDate {
  return resultContent.endDate;
}
- (ContentBuilder*) setEndDate:(NSString*) value {
  resultContent.hasEndDate = YES;
  resultContent.endDate = value;
  return self;
}
- (ContentBuilder*) clearEndDate {
  resultContent.hasEndDate = NO;
  resultContent.endDate = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultContent.hasStatus;
}
- (NSString*) status {
  return resultContent.status;
}
- (ContentBuilder*) setStatus:(NSString*) value {
  resultContent.hasStatus = YES;
  resultContent.status = value;
  return self;
}
- (ContentBuilder*) clearStatus {
  resultContent.hasStatus = NO;
  resultContent.status = @"";
  return self;
}
- (BOOL) hasOptionType {
  return resultContent.hasOptionType;
}
- (NSString*) optionType {
  return resultContent.optionType;
}
- (ContentBuilder*) setOptionType:(NSString*) value {
  resultContent.hasOptionType = YES;
  resultContent.optionType = value;
  return self;
}
- (ContentBuilder*) clearOptionType {
  resultContent.hasOptionType = NO;
  resultContent.optionType = @"";
  return self;
}
- (BOOL) hasSecurityQuestion {
  return resultContent.hasSecurityQuestion;
}
- (NSString*) securityQuestion {
  return resultContent.securityQuestion;
}
- (ContentBuilder*) setSecurityQuestion:(NSString*) value {
  resultContent.hasSecurityQuestion = YES;
  resultContent.securityQuestion = value;
  return self;
}
- (ContentBuilder*) clearSecurityQuestion {
  resultContent.hasSecurityQuestion = NO;
  resultContent.securityQuestion = @"";
  return self;
}
- (BOOL) hasSecurityAnswer {
  return resultContent.hasSecurityAnswer;
}
- (NSString*) securityAnswer {
  return resultContent.securityAnswer;
}
- (ContentBuilder*) setSecurityAnswer:(NSString*) value {
  resultContent.hasSecurityAnswer = YES;
  resultContent.securityAnswer = value;
  return self;
}
- (ContentBuilder*) clearSecurityAnswer {
  resultContent.hasSecurityAnswer = NO;
  resultContent.securityAnswer = @"";
  return self;
}
- (BOOL) hasCardType {
  return resultContent.hasCardType;
}
- (NSString*) cardType {
  return resultContent.cardType;
}
- (ContentBuilder*) setCardType:(NSString*) value {
  resultContent.hasCardType = YES;
  resultContent.cardType = value;
  return self;
}
- (ContentBuilder*) clearCardType {
  resultContent.hasCardType = NO;
  resultContent.cardType = @"";
  return self;
}
- (BOOL) hasEmail {
  return resultContent.hasEmail;
}
- (NSString*) email {
  return resultContent.email;
}
- (ContentBuilder*) setEmail:(NSString*) value {
  resultContent.hasEmail = YES;
  resultContent.email = value;
  return self;
}
- (ContentBuilder*) clearEmail {
  resultContent.hasEmail = NO;
  resultContent.email = @"";
  return self;
}
- (BOOL) hasUniQrCode {
  return resultContent.hasUniQrCode;
}
- (NSString*) uniQrCode {
  return resultContent.uniQrCode;
}
- (ContentBuilder*) setUniQrCode:(NSString*) value {
  resultContent.hasUniQrCode = YES;
  resultContent.uniQrCode = value;
  return self;
}
- (ContentBuilder*) clearUniQrCode {
  resultContent.hasUniQrCode = NO;
  resultContent.uniQrCode = @"";
  return self;
}
- (BOOL) hasProductType {
  return resultContent.hasProductType;
}
- (NSString*) productType {
  return resultContent.productType;
}
- (ContentBuilder*) setProductType:(NSString*) value {
  resultContent.hasProductType = YES;
  resultContent.productType = value;
  return self;
}
- (ContentBuilder*) clearProductType {
  resultContent.hasProductType = NO;
  resultContent.productType = @"";
  return self;
}
- (BOOL) hasAddress {
  return resultContent.hasAddress;
}
- (NSString*) address {
  return resultContent.address;
}
- (ContentBuilder*) setAddress:(NSString*) value {
  resultContent.hasAddress = YES;
  resultContent.address = value;
  return self;
}
- (ContentBuilder*) clearAddress {
  resultContent.hasAddress = NO;
  resultContent.address = @"";
  return self;
}
- (BOOL) hasResendFlag {
  return resultContent.hasResendFlag;
}
- (NSString*) resendFlag {
  return resultContent.resendFlag;
}
- (ContentBuilder*) setResendFlag:(NSString*) value {
  resultContent.hasResendFlag = YES;
  resultContent.resendFlag = value;
  return self;
}
- (ContentBuilder*) clearResendFlag {
  resultContent.hasResendFlag = NO;
  resultContent.resendFlag = @"";
  return self;
}
- (BOOL) hasPasswordType {
  return resultContent.hasPasswordType;
}
- (NSString*) passwordType {
  return resultContent.passwordType;
}
- (ContentBuilder*) setPasswordType:(NSString*) value {
  resultContent.hasPasswordType = YES;
  resultContent.passwordType = value;
  return self;
}
- (ContentBuilder*) clearPasswordType {
  resultContent.hasPasswordType = NO;
  resultContent.passwordType = @"";
  return self;
}
- (BOOL) hasCvv2 {
  return resultContent.hasCvv2;
}
- (NSString*) cvv2 {
  return resultContent.cvv2;
}
- (ContentBuilder*) setCvv2:(NSString*) value {
  resultContent.hasCvv2 = YES;
  resultContent.cvv2 = value;
  return self;
}
- (ContentBuilder*) clearCvv2 {
  resultContent.hasCvv2 = NO;
  resultContent.cvv2 = @"";
  return self;
}
- (BOOL) hasRefreshToken {
  return resultContent.hasRefreshToken;
}
- (NSString*) refreshToken {
  return resultContent.refreshToken;
}
- (ContentBuilder*) setRefreshToken:(NSString*) value {
  resultContent.hasRefreshToken = YES;
  resultContent.refreshToken = value;
  return self;
}
- (ContentBuilder*) clearRefreshToken {
  resultContent.hasRefreshToken = NO;
  resultContent.refreshToken = @"";
  return self;
}
- (BOOL) hasIdTxnCtrl {
  return resultContent.hasIdTxnCtrl;
}
- (NSString*) idTxnCtrl {
  return resultContent.idTxnCtrl;
}
- (ContentBuilder*) setIdTxnCtrl:(NSString*) value {
  resultContent.hasIdTxnCtrl = YES;
  resultContent.idTxnCtrl = value;
  return self;
}
- (ContentBuilder*) clearIdTxnCtrl {
  resultContent.hasIdTxnCtrl = NO;
  resultContent.idTxnCtrl = @"";
  return self;
}
- (BOOL) hasExtData1 {
  return resultContent.hasExtData1;
}
- (NSString*) extData1 {
  return resultContent.extData1;
}
- (ContentBuilder*) setExtData1:(NSString*) value {
  resultContent.hasExtData1 = YES;
  resultContent.extData1 = value;
  return self;
}
- (ContentBuilder*) clearExtData1 {
  resultContent.hasExtData1 = NO;
  resultContent.extData1 = @"";
  return self;
}
- (BOOL) hasAuthBankIds {
  return resultContent.hasAuthBankIds;
}
- (NSString*) authBankIds {
  return resultContent.authBankIds;
}
- (ContentBuilder*) setAuthBankIds:(NSString*) value {
  resultContent.hasAuthBankIds = YES;
  resultContent.authBankIds = value;
  return self;
}
- (ContentBuilder*) clearAuthBankIds {
  resultContent.hasAuthBankIds = NO;
  resultContent.authBankIds = @"";
  return self;
}
- (BOOL) hasAuthDebitBankIds {
  return resultContent.hasAuthDebitBankIds;
}
- (NSString*) authDebitBankIds {
  return resultContent.authDebitBankIds;
}
- (ContentBuilder*) setAuthDebitBankIds:(NSString*) value {
  resultContent.hasAuthDebitBankIds = YES;
  resultContent.authDebitBankIds = value;
  return self;
}
- (ContentBuilder*) clearAuthDebitBankIds {
  resultContent.hasAuthDebitBankIds = NO;
  resultContent.authDebitBankIds = @"";
  return self;
}
- (BOOL) hasAuthBankNames {
  return resultContent.hasAuthBankNames;
}
- (NSString*) authBankNames {
  return resultContent.authBankNames;
}
- (ContentBuilder*) setAuthBankNames:(NSString*) value {
  resultContent.hasAuthBankNames = YES;
  resultContent.authBankNames = value;
  return self;
}
- (ContentBuilder*) clearAuthBankNames {
  resultContent.hasAuthBankNames = NO;
  resultContent.authBankNames = @"";
  return self;
}
- (BOOL) hasBranchBank {
  return resultContent.hasBranchBank;
}
- (NSString*) branchBank {
  return resultContent.branchBank;
}
- (ContentBuilder*) setBranchBank:(NSString*) value {
  resultContent.hasBranchBank = YES;
  resultContent.branchBank = value;
  return self;
}
- (ContentBuilder*) clearBranchBank {
  resultContent.hasBranchBank = NO;
  resultContent.branchBank = @"";
  return self;
}
- (BOOL) hasTxnFlag {
  return resultContent.hasTxnFlag;
}
- (NSString*) txnFlag {
  return resultContent.txnFlag;
}
- (ContentBuilder*) setTxnFlag:(NSString*) value {
  resultContent.hasTxnFlag = YES;
  resultContent.txnFlag = value;
  return self;
}
- (ContentBuilder*) clearTxnFlag {
  resultContent.hasTxnFlag = NO;
  resultContent.txnFlag = @"";
  return self;
}
- (BOOL) hasAuthCode {
  return resultContent.hasAuthCode;
}
- (NSString*) authCode {
  return resultContent.authCode;
}
- (ContentBuilder*) setAuthCode:(NSString*) value {
  resultContent.hasAuthCode = YES;
  resultContent.authCode = value;
  return self;
}
- (ContentBuilder*) clearAuthCode {
  resultContent.hasAuthCode = NO;
  resultContent.authCode = @"";
  return self;
}
- (BOOL) hasTxnTime {
  return resultContent.hasTxnTime;
}
- (NSString*) txnTime {
  return resultContent.txnTime;
}
- (ContentBuilder*) setTxnTime:(NSString*) value {
  resultContent.hasTxnTime = YES;
  resultContent.txnTime = value;
  return self;
}
- (ContentBuilder*) clearTxnTime {
  resultContent.hasTxnTime = NO;
  resultContent.txnTime = @"";
  return self;
}
- (BOOL) hasSignFlag {
  return resultContent.hasSignFlag;
}
- (NSString*) signFlag {
  return resultContent.signFlag;
}
- (ContentBuilder*) setSignFlag:(NSString*) value {
  resultContent.hasSignFlag = YES;
  resultContent.signFlag = value;
  return self;
}
- (ContentBuilder*) clearSignFlag {
  resultContent.hasSignFlag = NO;
  resultContent.signFlag = @"";
  return self;
}
- (BOOL) hasProductName {
  return resultContent.hasProductName;
}
- (NSString*) productName {
  return resultContent.productName;
}
- (ContentBuilder*) setProductName:(NSString*) value {
  resultContent.hasProductName = YES;
  resultContent.productName = value;
  return self;
}
- (ContentBuilder*) clearProductName {
  resultContent.hasProductName = NO;
  resultContent.productName = @"";
  return self;
}
- (BOOL) hasZoneType {
  return resultContent.hasZoneType;
}
- (NSString*) zoneType {
  return resultContent.zoneType;
}
- (ContentBuilder*) setZoneType:(NSString*) value {
  resultContent.hasZoneType = YES;
  resultContent.zoneType = value;
  return self;
}
- (ContentBuilder*) clearZoneType {
  resultContent.hasZoneType = NO;
  resultContent.zoneType = @"";
  return self;
}
- (BOOL) hasPin {
  return resultContent.hasPin;
}
- (NSString*) pin {
  return resultContent.pin;
}
- (ContentBuilder*) setPin:(NSString*) value {
  resultContent.hasPin = YES;
  resultContent.pin = value;
  return self;
}
- (ContentBuilder*) clearPin {
  resultContent.hasPin = NO;
  resultContent.pin = @"";
  return self;
}
- (BOOL) hasOrigOrderId {
  return resultContent.hasOrigOrderId;
}
- (NSString*) origOrderId {
  return resultContent.origOrderId;
}
- (ContentBuilder*) setOrigOrderId:(NSString*) value {
  resultContent.hasOrigOrderId = YES;
  resultContent.origOrderId = value;
  return self;
}
- (ContentBuilder*) clearOrigOrderId {
  resultContent.hasOrigOrderId = NO;
  resultContent.origOrderId = @"";
  return self;
}
- (BOOL) hasCount {
  return resultContent.hasCount;
}
- (NSString*) count {
  return resultContent.count;
}
- (ContentBuilder*) setCount:(NSString*) value {
  resultContent.hasCount = YES;
  resultContent.count = value;
  return self;
}
- (ContentBuilder*) clearCount {
  resultContent.hasCount = NO;
  resultContent.count = @"";
  return self;
}
- (BOOL) hasRemark {
  return resultContent.hasRemark;
}
- (NSString*) remark {
  return resultContent.remark;
}
- (ContentBuilder*) setRemark:(NSString*) value {
  resultContent.hasRemark = YES;
  resultContent.remark = value;
  return self;
}
- (ContentBuilder*) clearRemark {
  resultContent.hasRemark = NO;
  resultContent.remark = @"";
  return self;
}
- (BOOL) hasMemAcctcodeName {
  return resultContent.hasMemAcctcodeName;
}
- (NSString*) memAcctcodeName {
  return resultContent.memAcctcodeName;
}
- (ContentBuilder*) setMemAcctcodeName:(NSString*) value {
  resultContent.hasMemAcctcodeName = YES;
  resultContent.memAcctcodeName = value;
  return self;
}
- (ContentBuilder*) clearMemAcctcodeName {
  resultContent.hasMemAcctcodeName = NO;
  resultContent.memAcctcodeName = @"";
  return self;
}
- (BOOL) hasMemAcctcodeBalance {
  return resultContent.hasMemAcctcodeBalance;
}
- (NSString*) memAcctcodeBalance {
  return resultContent.memAcctcodeBalance;
}
- (ContentBuilder*) setMemAcctcodeBalance:(NSString*) value {
  resultContent.hasMemAcctcodeBalance = YES;
  resultContent.memAcctcodeBalance = value;
  return self;
}
- (ContentBuilder*) clearMemAcctcodeBalance {
  resultContent.hasMemAcctcodeBalance = NO;
  resultContent.memAcctcodeBalance = @"";
  return self;
}
- (BOOL) hasExistFlg {
  return resultContent.hasExistFlg;
}
- (NSString*) existFlg {
  return resultContent.existFlg;
}
- (ContentBuilder*) setExistFlg:(NSString*) value {
  resultContent.hasExistFlg = YES;
  resultContent.existFlg = value;
  return self;
}
- (ContentBuilder*) clearExistFlg {
  resultContent.hasExistFlg = NO;
  resultContent.existFlg = @"";
  return self;
}
- (BOOL) hasPayeeNotes {
  return resultContent.hasPayeeNotes;
}
- (NSString*) payeeNotes {
  return resultContent.payeeNotes;
}
- (ContentBuilder*) setPayeeNotes:(NSString*) value {
  resultContent.hasPayeeNotes = YES;
  resultContent.payeeNotes = value;
  return self;
}
- (ContentBuilder*) clearPayeeNotes {
  resultContent.hasPayeeNotes = NO;
  resultContent.payeeNotes = @"";
  return self;
}
- (BOOL) hasRealNameFlg {
  return resultContent.hasRealNameFlg;
}
- (NSString*) realNameFlg {
  return resultContent.realNameFlg;
}
- (ContentBuilder*) setRealNameFlg:(NSString*) value {
  resultContent.hasRealNameFlg = YES;
  resultContent.realNameFlg = value;
  return self;
}
- (ContentBuilder*) clearRealNameFlg {
  resultContent.hasRealNameFlg = NO;
  resultContent.realNameFlg = @"";
  return self;
}
- (BOOL) hasBindPhoneFlg {
  return resultContent.hasBindPhoneFlg;
}
- (NSString*) bindPhoneFlg {
  return resultContent.bindPhoneFlg;
}
- (ContentBuilder*) setBindPhoneFlg:(NSString*) value {
  resultContent.hasBindPhoneFlg = YES;
  resultContent.bindPhoneFlg = value;
  return self;
}
- (ContentBuilder*) clearBindPhoneFlg {
  resultContent.hasBindPhoneFlg = NO;
  resultContent.bindPhoneFlg = @"";
  return self;
}
- (BOOL) hasFirstLoginFlg {
  return resultContent.hasFirstLoginFlg;
}
- (NSString*) firstLoginFlg {
  return resultContent.firstLoginFlg;
}
- (ContentBuilder*) setFirstLoginFlg:(NSString*) value {
  resultContent.hasFirstLoginFlg = YES;
  resultContent.firstLoginFlg = value;
  return self;
}
- (ContentBuilder*) clearFirstLoginFlg {
  resultContent.hasFirstLoginFlg = NO;
  resultContent.firstLoginFlg = @"";
  return self;
}
- (BOOL) hasTotalAmt {
  return resultContent.hasTotalAmt;
}
- (NSString*) totalAmt {
  return resultContent.totalAmt;
}
- (ContentBuilder*) setTotalAmt:(NSString*) value {
  resultContent.hasTotalAmt = YES;
  resultContent.totalAmt = value;
  return self;
}
- (ContentBuilder*) clearTotalAmt {
  resultContent.hasTotalAmt = NO;
  resultContent.totalAmt = @"";
  return self;
}
- (BOOL) hasTotalCount {
  return resultContent.hasTotalCount;
}
- (NSString*) totalCount {
  return resultContent.totalCount;
}
- (ContentBuilder*) setTotalCount:(NSString*) value {
  resultContent.hasTotalCount = YES;
  resultContent.totalCount = value;
  return self;
}
- (ContentBuilder*) clearTotalCount {
  resultContent.hasTotalCount = NO;
  resultContent.totalCount = @"";
  return self;
}
- (BOOL) hasOrderType {
  return resultContent.hasOrderType;
}
- (NSString*) orderType {
  return resultContent.orderType;
}
- (ContentBuilder*) setOrderType:(NSString*) value {
  resultContent.hasOrderType = YES;
  resultContent.orderType = value;
  return self;
}
- (ContentBuilder*) clearOrderType {
  resultContent.hasOrderType = NO;
  resultContent.orderType = @"";
  return self;
}
- (BOOL) hasCertId {
  return resultContent.hasCertId;
}
- (NSString*) certId {
  return resultContent.certId;
}
- (ContentBuilder*) setCertId:(NSString*) value {
  resultContent.hasCertId = YES;
  resultContent.certId = value;
  return self;
}
- (ContentBuilder*) clearCertId {
  resultContent.hasCertId = NO;
  resultContent.certId = @"";
  return self;
}
- (BOOL) hasRecommendId {
  return resultContent.hasRecommendId;
}
- (NSString*) recommendId {
  return resultContent.recommendId;
}
- (ContentBuilder*) setRecommendId:(NSString*) value {
  resultContent.hasRecommendId = YES;
  resultContent.recommendId = value;
  return self;
}
- (ContentBuilder*) clearRecommendId {
  resultContent.hasRecommendId = NO;
  resultContent.recommendId = @"";
  return self;
}
- (BOOL) hasOrderCode {
  return resultContent.hasOrderCode;
}
- (NSString*) orderCode {
  return resultContent.orderCode;
}
- (ContentBuilder*) setOrderCode:(NSString*) value {
  resultContent.hasOrderCode = YES;
  resultContent.orderCode = value;
  return self;
}
- (ContentBuilder*) clearOrderCode {
  resultContent.hasOrderCode = NO;
  resultContent.orderCode = @"";
  return self;
}
- (BOOL) hasMax {
  return resultContent.hasMax;
}
- (NSString*) max {
  return resultContent.max;
}
- (ContentBuilder*) setMax:(NSString*) value {
  resultContent.hasMax = YES;
  resultContent.max = value;
  return self;
}
- (ContentBuilder*) clearMax {
  resultContent.hasMax = NO;
  resultContent.max = @"";
  return self;
}
- (BOOL) hasStatusSet {
  return resultContent.hasStatusSet;
}
- (NSString*) statusSet {
  return resultContent.statusSet;
}
- (ContentBuilder*) setStatusSet:(NSString*) value {
  resultContent.hasStatusSet = YES;
  resultContent.statusSet = value;
  return self;
}
- (ContentBuilder*) clearStatusSet {
  resultContent.hasStatusSet = NO;
  resultContent.statusSet = @"";
  return self;
}
- (BOOL) hasOutTradeNo {
  return resultContent.hasOutTradeNo;
}
- (NSString*) outTradeNo {
  return resultContent.outTradeNo;
}
- (ContentBuilder*) setOutTradeNo:(NSString*) value {
  resultContent.hasOutTradeNo = YES;
  resultContent.outTradeNo = value;
  return self;
}
- (ContentBuilder*) clearOutTradeNo {
  resultContent.hasOutTradeNo = NO;
  resultContent.outTradeNo = @"";
  return self;
}
- (BOOL) hasAppInfo {
  return resultContent.hasAppInfo;
}
- (ContentAppInfo*) appInfo {
  return resultContent.appInfo;
}
- (ContentBuilder*) setAppInfo:(ContentAppInfo*) value {
  resultContent.hasAppInfo = YES;
  resultContent.appInfo = value;
  return self;
}
- (ContentBuilder*) setAppInfoBuilder:(ContentAppInfoBuilder*) builderForValue {
  return [self setAppInfo:[builderForValue build]];
}
- (ContentBuilder*) mergeAppInfo:(ContentAppInfo*) value {
  if (resultContent.hasAppInfo &&
      resultContent.appInfo != [ContentAppInfo defaultInstance]) {
    resultContent.appInfo =
      [[[ContentAppInfo builderWithPrototype:resultContent.appInfo] mergeFrom:value] buildPartial];
  } else {
    resultContent.appInfo = value;
  }
  resultContent.hasAppInfo = YES;
  return self;
}
- (ContentBuilder*) clearAppInfo {
  resultContent.hasAppInfo = NO;
  resultContent.appInfo = [ContentAppInfo defaultInstance];
  return self;
}
- (NSMutableArray *)bank {
  return resultContent.bankArray;
}
- (ContentBank*)bankAtIndex:(NSUInteger)index {
  return [resultContent bankAtIndex:index];
}
- (ContentBuilder *)addBank:(ContentBank*)value {
  if (resultContent.bankArray == nil) {
    resultContent.bankArray = [[NSMutableArray alloc]init];
  }
  [resultContent.bankArray addObject:value];
  return self;
}
- (ContentBuilder *)setBankArray:(NSArray *)array {
  resultContent.bankArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearBank {
  resultContent.bankArray = nil;
  return self;
}
- (BOOL) hasMember {
  return resultContent.hasMember;
}
- (ContentMember*) member {
  return resultContent.member;
}
- (ContentBuilder*) setMember:(ContentMember*) value {
  resultContent.hasMember = YES;
  resultContent.member = value;
  return self;
}
- (ContentBuilder*) setMemberBuilder:(ContentMemberBuilder*) builderForValue {
  return [self setMember:[builderForValue build]];
}
- (ContentBuilder*) mergeMember:(ContentMember*) value {
  if (resultContent.hasMember &&
      resultContent.member != [ContentMember defaultInstance]) {
    resultContent.member =
      [[[ContentMember builderWithPrototype:resultContent.member] mergeFrom:value] buildPartial];
  } else {
    resultContent.member = value;
  }
  resultContent.hasMember = YES;
  return self;
}
- (ContentBuilder*) clearMember {
  resultContent.hasMember = NO;
  resultContent.member = [ContentMember defaultInstance];
  return self;
}
- (NSMutableArray *)memberIdentity {
  return resultContent.memberIdentityArray;
}
- (ContentMemberIdentity*)memberIdentityAtIndex:(NSUInteger)index {
  return [resultContent memberIdentityAtIndex:index];
}
- (ContentBuilder *)addMemberIdentity:(ContentMemberIdentity*)value {
  if (resultContent.memberIdentityArray == nil) {
    resultContent.memberIdentityArray = [[NSMutableArray alloc]init];
  }
  [resultContent.memberIdentityArray addObject:value];
  return self;
}
- (ContentBuilder *)setMemberIdentityArray:(NSArray *)array {
  resultContent.memberIdentityArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearMemberIdentity {
  resultContent.memberIdentityArray = nil;
  return self;
}
- (NSMutableArray *)safeProblem {
  return resultContent.safeProblemArray;
}
- (NSString*)safeProblemAtIndex:(NSUInteger)index {
  return [resultContent safeProblemAtIndex:index];
}
- (ContentBuilder *)addSafeProblem:(NSString*)value {
  if (resultContent.safeProblemArray == nil) {
    resultContent.safeProblemArray = [[NSMutableArray alloc]init];
  }
  [resultContent.safeProblemArray addObject:value];
  return self;
}
- (ContentBuilder *)setSafeProblemArray:(NSArray *)array {
  resultContent.safeProblemArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ContentBuilder *)clearSafeProblem {
  resultContent.safeProblemArray = nil;
  return self;
}
- (NSMutableArray *)queryWalletBill99BillResponse {
  return resultContent.queryWalletBill99BillResponseArray;
}
- (ContentQueryWalletBill99BillResponse*)queryWalletBill99BillResponseAtIndex:(NSUInteger)index {
  return [resultContent queryWalletBill99BillResponseAtIndex:index];
}
- (ContentBuilder *)addQueryWalletBill99BillResponse:(ContentQueryWalletBill99BillResponse*)value {
  if (resultContent.queryWalletBill99BillResponseArray == nil) {
    resultContent.queryWalletBill99BillResponseArray = [[NSMutableArray alloc]init];
  }
  [resultContent.queryWalletBill99BillResponseArray addObject:value];
  return self;
}
- (ContentBuilder *)setQueryWalletBill99BillResponseArray:(NSArray *)array {
  resultContent.queryWalletBill99BillResponseArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearQueryWalletBill99BillResponse {
  resultContent.queryWalletBill99BillResponseArray = nil;
  return self;
}
- (NSMutableArray *)atpProd {
  return resultContent.atpProdArray;
}
- (ContentAtpProd*)atpProdAtIndex:(NSUInteger)index {
  return [resultContent atpProdAtIndex:index];
}
- (ContentBuilder *)addAtpProd:(ContentAtpProd*)value {
  if (resultContent.atpProdArray == nil) {
    resultContent.atpProdArray = [[NSMutableArray alloc]init];
  }
  [resultContent.atpProdArray addObject:value];
  return self;
}
- (ContentBuilder *)setAtpProdArray:(NSArray *)array {
  resultContent.atpProdArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearAtpProd {
  resultContent.atpProdArray = nil;
  return self;
}
- (BOOL) hasTradeId {
  return resultContent.hasTradeId;
}
- (NSString*) tradeId {
  return resultContent.tradeId;
}
- (ContentBuilder*) setTradeId:(NSString*) value {
  resultContent.hasTradeId = YES;
  resultContent.tradeId = value;
  return self;
}
- (ContentBuilder*) clearTradeId {
  resultContent.hasTradeId = NO;
  resultContent.tradeId = @"";
  return self;
}
- (BOOL) hasEndTime {
  return resultContent.hasEndTime;
}
- (NSString*) endTime {
  return resultContent.endTime;
}
- (ContentBuilder*) setEndTime:(NSString*) value {
  resultContent.hasEndTime = YES;
  resultContent.endTime = value;
  return self;
}
- (ContentBuilder*) clearEndTime {
  resultContent.hasEndTime = NO;
  resultContent.endTime = @"";
  return self;
}
- (NSMutableArray *)solidCard {
  return resultContent.solidCardArray;
}
- (ContentSolidCard*)solidCardAtIndex:(NSUInteger)index {
  return [resultContent solidCardAtIndex:index];
}
- (ContentBuilder *)addSolidCard:(ContentSolidCard*)value {
  if (resultContent.solidCardArray == nil) {
    resultContent.solidCardArray = [[NSMutableArray alloc]init];
  }
  [resultContent.solidCardArray addObject:value];
  return self;
}
- (ContentBuilder *)setSolidCardArray:(NSArray *)array {
  resultContent.solidCardArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearSolidCard {
  resultContent.solidCardArray = nil;
  return self;
}
- (BOOL) hasUserFlag {
  return resultContent.hasUserFlag;
}
- (NSString*) userFlag {
  return resultContent.userFlag;
}
- (ContentBuilder*) setUserFlag:(NSString*) value {
  resultContent.hasUserFlag = YES;
  resultContent.userFlag = value;
  return self;
}
- (ContentBuilder*) clearUserFlag {
  resultContent.hasUserFlag = NO;
  resultContent.userFlag = @"";
  return self;
}
- (BOOL) hasIdCardNo {
  return resultContent.hasIdCardNo;
}
- (NSString*) idCardNo {
  return resultContent.idCardNo;
}
- (ContentBuilder*) setIdCardNo:(NSString*) value {
  resultContent.hasIdCardNo = YES;
  resultContent.idCardNo = value;
  return self;
}
- (ContentBuilder*) clearIdCardNo {
  resultContent.hasIdCardNo = NO;
  resultContent.idCardNo = @"";
  return self;
}
- (BOOL) hasIdCardImg {
  return resultContent.hasIdCardImg;
}
- (NSString*) idCardImg {
  return resultContent.idCardImg;
}
- (ContentBuilder*) setIdCardImg:(NSString*) value {
  resultContent.hasIdCardImg = YES;
  resultContent.idCardImg = value;
  return self;
}
- (ContentBuilder*) clearIdCardImg {
  resultContent.hasIdCardImg = NO;
  resultContent.idCardImg = @"";
  return self;
}
- (BOOL) hasPhoto {
  return resultContent.hasPhoto;
}
- (NSString*) photo {
  return resultContent.photo;
}
- (ContentBuilder*) setPhoto:(NSString*) value {
  resultContent.hasPhoto = YES;
  resultContent.photo = value;
  return self;
}
- (ContentBuilder*) clearPhoto {
  resultContent.hasPhoto = NO;
  resultContent.photo = @"";
  return self;
}
- (BOOL) hasIsDisplay {
  return resultContent.hasIsDisplay;
}
- (NSString*) isDisplay {
  return resultContent.isDisplay;
}
- (ContentBuilder*) setIsDisplay:(NSString*) value {
  resultContent.hasIsDisplay = YES;
  resultContent.isDisplay = value;
  return self;
}
- (ContentBuilder*) clearIsDisplay {
  resultContent.hasIsDisplay = NO;
  resultContent.isDisplay = @"";
  return self;
}
- (BOOL) hasShortPhones {
  return resultContent.hasShortPhones;
}
- (NSString*) shortPhones {
  return resultContent.shortPhones;
}
- (ContentBuilder*) setShortPhones:(NSString*) value {
  resultContent.hasShortPhones = YES;
  resultContent.shortPhones = value;
  return self;
}
- (ContentBuilder*) clearShortPhones {
  resultContent.hasShortPhones = NO;
  resultContent.shortPhones = @"";
  return self;
}
- (BOOL) hasRipAmount {
  return resultContent.hasRipAmount;
}
- (NSString*) ripAmount {
  return resultContent.ripAmount;
}
- (ContentBuilder*) setRipAmount:(NSString*) value {
  resultContent.hasRipAmount = YES;
  resultContent.ripAmount = value;
  return self;
}
- (ContentBuilder*) clearRipAmount {
  resultContent.hasRipAmount = NO;
  resultContent.ripAmount = @"";
  return self;
}
- (BOOL) hasMemberAuthDto {
  return resultContent.hasMemberAuthDto;
}
- (ContentMemberAuthDto*) memberAuthDto {
  return resultContent.memberAuthDto;
}
- (ContentBuilder*) setMemberAuthDto:(ContentMemberAuthDto*) value {
  resultContent.hasMemberAuthDto = YES;
  resultContent.memberAuthDto = value;
  return self;
}
- (ContentBuilder*) setMemberAuthDtoBuilder:(ContentMemberAuthDtoBuilder*) builderForValue {
  return [self setMemberAuthDto:[builderForValue build]];
}
- (ContentBuilder*) mergeMemberAuthDto:(ContentMemberAuthDto*) value {
  if (resultContent.hasMemberAuthDto &&
      resultContent.memberAuthDto != [ContentMemberAuthDto defaultInstance]) {
    resultContent.memberAuthDto =
      [[[ContentMemberAuthDto builderWithPrototype:resultContent.memberAuthDto] mergeFrom:value] buildPartial];
  } else {
    resultContent.memberAuthDto = value;
  }
  resultContent.hasMemberAuthDto = YES;
  return self;
}
- (ContentBuilder*) clearMemberAuthDto {
  resultContent.hasMemberAuthDto = NO;
  resultContent.memberAuthDto = [ContentMemberAuthDto defaultInstance];
  return self;
}
- (NSMutableArray *)bankLimitAmountDto {
  return resultContent.bankLimitAmountDtoArray;
}
- (ContentBankLimitAmountDto*)bankLimitAmountDtoAtIndex:(NSUInteger)index {
  return [resultContent bankLimitAmountDtoAtIndex:index];
}
- (ContentBuilder *)addBankLimitAmountDto:(ContentBankLimitAmountDto*)value {
  if (resultContent.bankLimitAmountDtoArray == nil) {
    resultContent.bankLimitAmountDtoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.bankLimitAmountDtoArray addObject:value];
  return self;
}
- (ContentBuilder *)setBankLimitAmountDtoArray:(NSArray *)array {
  resultContent.bankLimitAmountDtoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearBankLimitAmountDto {
  resultContent.bankLimitAmountDtoArray = nil;
  return self;
}
- (BOOL) hasOccupation {
  return resultContent.hasOccupation;
}
- (NSString*) occupation {
  return resultContent.occupation;
}
- (ContentBuilder*) setOccupation:(NSString*) value {
  resultContent.hasOccupation = YES;
  resultContent.occupation = value;
  return self;
}
- (ContentBuilder*) clearOccupation {
  resultContent.hasOccupation = NO;
  resultContent.occupation = @"";
  return self;
}
- (BOOL) hasPartnerUserId {
  return resultContent.hasPartnerUserId;
}
- (NSString*) partnerUserId {
  return resultContent.partnerUserId;
}
- (ContentBuilder*) setPartnerUserId:(NSString*) value {
  resultContent.hasPartnerUserId = YES;
  resultContent.partnerUserId = value;
  return self;
}
- (ContentBuilder*) clearPartnerUserId {
  resultContent.hasPartnerUserId = NO;
  resultContent.partnerUserId = @"";
  return self;
}
- (BOOL) hasMemberBankAcctId {
  return resultContent.hasMemberBankAcctId;
}
- (NSString*) memberBankAcctId {
  return resultContent.memberBankAcctId;
}
- (ContentBuilder*) setMemberBankAcctId:(NSString*) value {
  resultContent.hasMemberBankAcctId = YES;
  resultContent.memberBankAcctId = value;
  return self;
}
- (ContentBuilder*) clearMemberBankAcctId {
  resultContent.hasMemberBankAcctId = NO;
  resultContent.memberBankAcctId = @"";
  return self;
}
- (BOOL) hasExpiresIn {
  return resultContent.hasExpiresIn;
}
- (NSString*) expiresIn {
  return resultContent.expiresIn;
}
- (ContentBuilder*) setExpiresIn:(NSString*) value {
  resultContent.hasExpiresIn = YES;
  resultContent.expiresIn = value;
  return self;
}
- (ContentBuilder*) clearExpiresIn {
  resultContent.hasExpiresIn = NO;
  resultContent.expiresIn = @"";
  return self;
}
- (BOOL) hasAppUpInfo {
  return resultContent.hasAppUpInfo;
}
- (ContentAppUpInfo*) appUpInfo {
  return resultContent.appUpInfo;
}
- (ContentBuilder*) setAppUpInfo:(ContentAppUpInfo*) value {
  resultContent.hasAppUpInfo = YES;
  resultContent.appUpInfo = value;
  return self;
}
- (ContentBuilder*) setAppUpInfoBuilder:(ContentAppUpInfoBuilder*) builderForValue {
  return [self setAppUpInfo:[builderForValue build]];
}
- (ContentBuilder*) mergeAppUpInfo:(ContentAppUpInfo*) value {
  if (resultContent.hasAppUpInfo &&
      resultContent.appUpInfo != [ContentAppUpInfo defaultInstance]) {
    resultContent.appUpInfo =
      [[[ContentAppUpInfo builderWithPrototype:resultContent.appUpInfo] mergeFrom:value] buildPartial];
  } else {
    resultContent.appUpInfo = value;
  }
  resultContent.hasAppUpInfo = YES;
  return self;
}
- (ContentBuilder*) clearAppUpInfo {
  resultContent.hasAppUpInfo = NO;
  resultContent.appUpInfo = [ContentAppUpInfo defaultInstance];
  return self;
}
- (BOOL) hasKeyboardSeq {
  return resultContent.hasKeyboardSeq;
}
- (NSString*) keyboardSeq {
  return resultContent.keyboardSeq;
}
- (ContentBuilder*) setKeyboardSeq:(NSString*) value {
  resultContent.hasKeyboardSeq = YES;
  resultContent.keyboardSeq = value;
  return self;
}
- (ContentBuilder*) clearKeyboardSeq {
  resultContent.hasKeyboardSeq = NO;
  resultContent.keyboardSeq = @"";
  return self;
}
- (BOOL) hasImgCode {
  return resultContent.hasImgCode;
}
- (NSString*) imgCode {
  return resultContent.imgCode;
}
- (ContentBuilder*) setImgCode:(NSString*) value {
  resultContent.hasImgCode = YES;
  resultContent.imgCode = value;
  return self;
}
- (ContentBuilder*) clearImgCode {
  resultContent.hasImgCode = NO;
  resultContent.imgCode = @"";
  return self;
}
- (BOOL) hasImgToken {
  return resultContent.hasImgToken;
}
- (NSString*) imgToken {
  return resultContent.imgToken;
}
- (ContentBuilder*) setImgToken:(NSString*) value {
  resultContent.hasImgToken = YES;
  resultContent.imgToken = value;
  return self;
}
- (ContentBuilder*) clearImgToken {
  resultContent.hasImgToken = NO;
  resultContent.imgToken = @"";
  return self;
}
- (BOOL) hasValidateToken {
  return resultContent.hasValidateToken;
}
- (NSString*) validateToken {
  return resultContent.validateToken;
}
- (ContentBuilder*) setValidateToken:(NSString*) value {
  resultContent.hasValidateToken = YES;
  resultContent.validateToken = value;
  return self;
}
- (ContentBuilder*) clearValidateToken {
  resultContent.hasValidateToken = NO;
  resultContent.validateToken = @"";
  return self;
}
- (BOOL) hasErrorType {
  return resultContent.hasErrorType;
}
- (NSString*) errorType {
  return resultContent.errorType;
}
- (ContentBuilder*) setErrorType:(NSString*) value {
  resultContent.hasErrorType = YES;
  resultContent.errorType = value;
  return self;
}
- (ContentBuilder*) clearErrorType {
  resultContent.hasErrorType = NO;
  resultContent.errorType = @"";
  return self;
}
- (BOOL) hasFlag {
  return resultContent.hasFlag;
}
- (NSString*) flag {
  return resultContent.flag;
}
- (ContentBuilder*) setFlag:(NSString*) value {
  resultContent.hasFlag = YES;
  resultContent.flag = value;
  return self;
}
- (ContentBuilder*) clearFlag {
  resultContent.hasFlag = NO;
  resultContent.flag = @"";
  return self;
}
- (NSMutableArray *)queryAllFinaprodResponse {
  return resultContent.queryAllFinaprodResponseArray;
}
- (ContentQueryAllFinaprodResponse*)queryAllFinaprodResponseAtIndex:(NSUInteger)index {
  return [resultContent queryAllFinaprodResponseAtIndex:index];
}
- (ContentBuilder *)addQueryAllFinaprodResponse:(ContentQueryAllFinaprodResponse*)value {
  if (resultContent.queryAllFinaprodResponseArray == nil) {
    resultContent.queryAllFinaprodResponseArray = [[NSMutableArray alloc]init];
  }
  [resultContent.queryAllFinaprodResponseArray addObject:value];
  return self;
}
- (ContentBuilder *)setQueryAllFinaprodResponseArray:(NSArray *)array {
  resultContent.queryAllFinaprodResponseArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearQueryAllFinaprodResponse {
  resultContent.queryAllFinaprodResponseArray = nil;
  return self;
}
- (BOOL) hasFinProdType {
  return resultContent.hasFinProdType;
}
- (NSString*) finProdType {
  return resultContent.finProdType;
}
- (ContentBuilder*) setFinProdType:(NSString*) value {
  resultContent.hasFinProdType = YES;
  resultContent.finProdType = value;
  return self;
}
- (ContentBuilder*) clearFinProdType {
  resultContent.hasFinProdType = NO;
  resultContent.finProdType = @"";
  return self;
}
- (BOOL) hasTradeType {
  return resultContent.hasTradeType;
}
- (NSString*) tradeType {
  return resultContent.tradeType;
}
- (ContentBuilder*) setTradeType:(NSString*) value {
  resultContent.hasTradeType = YES;
  resultContent.tradeType = value;
  return self;
}
- (ContentBuilder*) clearTradeType {
  resultContent.hasTradeType = NO;
  resultContent.tradeType = @"";
  return self;
}
- (BOOL) hasProdStatus {
  return resultContent.hasProdStatus;
}
- (NSString*) prodStatus {
  return resultContent.prodStatus;
}
- (ContentBuilder*) setProdStatus:(NSString*) value {
  resultContent.hasProdStatus = YES;
  resultContent.prodStatus = value;
  return self;
}
- (ContentBuilder*) clearProdStatus {
  resultContent.hasProdStatus = NO;
  resultContent.prodStatus = @"";
  return self;
}
- (BOOL) hasQueryOrders {
  return resultContent.hasQueryOrders;
}
- (NSString*) queryOrders {
  return resultContent.queryOrders;
}
- (ContentBuilder*) setQueryOrders:(NSString*) value {
  resultContent.hasQueryOrders = YES;
  resultContent.queryOrders = value;
  return self;
}
- (ContentBuilder*) clearQueryOrders {
  resultContent.hasQueryOrders = NO;
  resultContent.queryOrders = @"";
  return self;
}
- (BOOL) hasHorizonTo {
  return resultContent.hasHorizonTo;
}
- (NSString*) horizonTo {
  return resultContent.horizonTo;
}
- (ContentBuilder*) setHorizonTo:(NSString*) value {
  resultContent.hasHorizonTo = YES;
  resultContent.horizonTo = value;
  return self;
}
- (ContentBuilder*) clearHorizonTo {
  resultContent.hasHorizonTo = NO;
  resultContent.horizonTo = @"";
  return self;
}
- (BOOL) hasReturnRateExp {
  return resultContent.hasReturnRateExp;
}
- (NSString*) returnRateExp {
  return resultContent.returnRateExp;
}
- (ContentBuilder*) setReturnRateExp:(NSString*) value {
  resultContent.hasReturnRateExp = YES;
  resultContent.returnRateExp = value;
  return self;
}
- (ContentBuilder*) clearReturnRateExp {
  resultContent.hasReturnRateExp = NO;
  resultContent.returnRateExp = @"";
  return self;
}
- (NSMutableArray *)atpTradeOrder {
  return resultContent.atpTradeOrderArray;
}
- (ContentAtpTradeOrder*)atpTradeOrderAtIndex:(NSUInteger)index {
  return [resultContent atpTradeOrderAtIndex:index];
}
- (ContentBuilder *)addAtpTradeOrder:(ContentAtpTradeOrder*)value {
  if (resultContent.atpTradeOrderArray == nil) {
    resultContent.atpTradeOrderArray = [[NSMutableArray alloc]init];
  }
  [resultContent.atpTradeOrderArray addObject:value];
  return self;
}
- (ContentBuilder *)setAtpTradeOrderArray:(NSArray *)array {
  resultContent.atpTradeOrderArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearAtpTradeOrder {
  resultContent.atpTradeOrderArray = nil;
  return self;
}
- (BOOL) hasTotalFrozenAmt {
  return resultContent.hasTotalFrozenAmt;
}
- (NSString*) totalFrozenAmt {
  return resultContent.totalFrozenAmt;
}
- (ContentBuilder*) setTotalFrozenAmt:(NSString*) value {
  resultContent.hasTotalFrozenAmt = YES;
  resultContent.totalFrozenAmt = value;
  return self;
}
- (ContentBuilder*) clearTotalFrozenAmt {
  resultContent.hasTotalFrozenAmt = NO;
  resultContent.totalFrozenAmt = @"";
  return self;
}
- (BOOL) hasFee {
  return resultContent.hasFee;
}
- (NSString*) fee {
  return resultContent.fee;
}
- (ContentBuilder*) setFee:(NSString*) value {
  resultContent.hasFee = YES;
  resultContent.fee = value;
  return self;
}
- (ContentBuilder*) clearFee {
  resultContent.hasFee = NO;
  resultContent.fee = @"";
  return self;
}
- (BOOL) hasTransFeeRate {
  return resultContent.hasTransFeeRate;
}
- (NSString*) transFeeRate {
  return resultContent.transFeeRate;
}
- (ContentBuilder*) setTransFeeRate:(NSString*) value {
  resultContent.hasTransFeeRate = YES;
  resultContent.transFeeRate = value;
  return self;
}
- (ContentBuilder*) clearTransFeeRate {
  resultContent.hasTransFeeRate = NO;
  resultContent.transFeeRate = @"";
  return self;
}
- (BOOL) hasBankNameId {
  return resultContent.hasBankNameId;
}
- (NSString*) bankNameId {
  return resultContent.bankNameId;
}
- (ContentBuilder*) setBankNameId:(NSString*) value {
  resultContent.hasBankNameId = YES;
  resultContent.bankNameId = value;
  return self;
}
- (ContentBuilder*) clearBankNameId {
  resultContent.hasBankNameId = NO;
  resultContent.bankNameId = @"";
  return self;
}
- (BOOL) hasFinancialInfo {
  return resultContent.hasFinancialInfo;
}
- (ContentFinancialInfo*) financialInfo {
  return resultContent.financialInfo;
}
- (ContentBuilder*) setFinancialInfo:(ContentFinancialInfo*) value {
  resultContent.hasFinancialInfo = YES;
  resultContent.financialInfo = value;
  return self;
}
- (ContentBuilder*) setFinancialInfoBuilder:(ContentFinancialInfoBuilder*) builderForValue {
  return [self setFinancialInfo:[builderForValue build]];
}
- (ContentBuilder*) mergeFinancialInfo:(ContentFinancialInfo*) value {
  if (resultContent.hasFinancialInfo &&
      resultContent.financialInfo != [ContentFinancialInfo defaultInstance]) {
    resultContent.financialInfo =
      [[[ContentFinancialInfo builderWithPrototype:resultContent.financialInfo] mergeFrom:value] buildPartial];
  } else {
    resultContent.financialInfo = value;
  }
  resultContent.hasFinancialInfo = YES;
  return self;
}
- (ContentBuilder*) clearFinancialInfo {
  resultContent.hasFinancialInfo = NO;
  resultContent.financialInfo = [ContentFinancialInfo defaultInstance];
  return self;
}
- (NSMutableArray *)prodAccountInfo {
  return resultContent.prodAccountInfoArray;
}
- (ContentProdAccountInfo*)prodAccountInfoAtIndex:(NSUInteger)index {
  return [resultContent prodAccountInfoAtIndex:index];
}
- (ContentBuilder *)addProdAccountInfo:(ContentProdAccountInfo*)value {
  if (resultContent.prodAccountInfoArray == nil) {
    resultContent.prodAccountInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.prodAccountInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setProdAccountInfoArray:(NSArray *)array {
  resultContent.prodAccountInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearProdAccountInfo {
  resultContent.prodAccountInfoArray = nil;
  return self;
}
- (BOOL) hasIsMainOrder {
  return resultContent.hasIsMainOrder;
}
- (NSString*) isMainOrder {
  return resultContent.isMainOrder;
}
- (ContentBuilder*) setIsMainOrder:(NSString*) value {
  resultContent.hasIsMainOrder = YES;
  resultContent.isMainOrder = value;
  return self;
}
- (ContentBuilder*) clearIsMainOrder {
  resultContent.hasIsMainOrder = NO;
  resultContent.isMainOrder = @"";
  return self;
}
- (BOOL) hasMerchantId {
  return resultContent.hasMerchantId;
}
- (NSString*) merchantId {
  return resultContent.merchantId;
}
- (ContentBuilder*) setMerchantId:(NSString*) value {
  resultContent.hasMerchantId = YES;
  resultContent.merchantId = value;
  return self;
}
- (ContentBuilder*) clearMerchantId {
  resultContent.hasMerchantId = NO;
  resultContent.merchantId = @"";
  return self;
}
- (BOOL) hasMerchantName {
  return resultContent.hasMerchantName;
}
- (NSString*) merchantName {
  return resultContent.merchantName;
}
- (ContentBuilder*) setMerchantName:(NSString*) value {
  resultContent.hasMerchantName = YES;
  resultContent.merchantName = value;
  return self;
}
- (ContentBuilder*) clearMerchantName {
  resultContent.hasMerchantName = NO;
  resultContent.merchantName = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return resultContent.hasOsVersion;
}
- (NSString*) osVersion {
  return resultContent.osVersion;
}
- (ContentBuilder*) setOsVersion:(NSString*) value {
  resultContent.hasOsVersion = YES;
  resultContent.osVersion = value;
  return self;
}
- (ContentBuilder*) clearOsVersion {
  resultContent.hasOsVersion = NO;
  resultContent.osVersion = @"";
  return self;
}
- (BOOL) hasIsRoot {
  return resultContent.hasIsRoot;
}
- (NSString*) isRoot {
  return resultContent.isRoot;
}
- (ContentBuilder*) setIsRoot:(NSString*) value {
  resultContent.hasIsRoot = YES;
  resultContent.isRoot = value;
  return self;
}
- (ContentBuilder*) clearIsRoot {
  resultContent.hasIsRoot = NO;
  resultContent.isRoot = @"";
  return self;
}
- (BOOL) hasSize {
  return resultContent.hasSize;
}
- (NSString*) size {
  return resultContent.size;
}
- (ContentBuilder*) setSize:(NSString*) value {
  resultContent.hasSize = YES;
  resultContent.size = value;
  return self;
}
- (ContentBuilder*) clearSize {
  resultContent.hasSize = NO;
  resultContent.size = @"";
  return self;
}
- (BOOL) hasPhoneModel {
  return resultContent.hasPhoneModel;
}
- (NSString*) phoneModel {
  return resultContent.phoneModel;
}
- (ContentBuilder*) setPhoneModel:(NSString*) value {
  resultContent.hasPhoneModel = YES;
  resultContent.phoneModel = value;
  return self;
}
- (ContentBuilder*) clearPhoneModel {
  resultContent.hasPhoneModel = NO;
  resultContent.phoneModel = @"";
  return self;
}
- (BOOL) hasWifiName {
  return resultContent.hasWifiName;
}
- (NSString*) wifiName {
  return resultContent.wifiName;
}
- (ContentBuilder*) setWifiName:(NSString*) value {
  resultContent.hasWifiName = YES;
  resultContent.wifiName = value;
  return self;
}
- (ContentBuilder*) clearWifiName {
  resultContent.hasWifiName = NO;
  resultContent.wifiName = @"";
  return self;
}
- (BOOL) hasWifiMac {
  return resultContent.hasWifiMac;
}
- (NSString*) wifiMac {
  return resultContent.wifiMac;
}
- (ContentBuilder*) setWifiMac:(NSString*) value {
  resultContent.hasWifiMac = YES;
  resultContent.wifiMac = value;
  return self;
}
- (ContentBuilder*) clearWifiMac {
  resultContent.hasWifiMac = NO;
  resultContent.wifiMac = @"";
  return self;
}
- (BOOL) hasAppId {
  return resultContent.hasAppId;
}
- (NSString*) appId {
  return resultContent.appId;
}
- (ContentBuilder*) setAppId:(NSString*) value {
  resultContent.hasAppId = YES;
  resultContent.appId = value;
  return self;
}
- (ContentBuilder*) clearAppId {
  resultContent.hasAppId = NO;
  resultContent.appId = @"";
  return self;
}
- (BOOL) hasMerchantCode {
  return resultContent.hasMerchantCode;
}
- (NSString*) merchantCode {
  return resultContent.merchantCode;
}
- (ContentBuilder*) setMerchantCode:(NSString*) value {
  resultContent.hasMerchantCode = YES;
  resultContent.merchantCode = value;
  return self;
}
- (ContentBuilder*) clearMerchantCode {
  resultContent.hasMerchantCode = NO;
  resultContent.merchantCode = @"";
  return self;
}
- (BOOL) hasBillOrderNo {
  return resultContent.hasBillOrderNo;
}
- (NSString*) billOrderNo {
  return resultContent.billOrderNo;
}
- (ContentBuilder*) setBillOrderNo:(NSString*) value {
  resultContent.hasBillOrderNo = YES;
  resultContent.billOrderNo = value;
  return self;
}
- (ContentBuilder*) clearBillOrderNo {
  resultContent.hasBillOrderNo = NO;
  resultContent.billOrderNo = @"";
  return self;
}
- (BOOL) hasChannelType {
  return resultContent.hasChannelType;
}
- (NSString*) channelType {
  return resultContent.channelType;
}
- (ContentBuilder*) setChannelType:(NSString*) value {
  resultContent.hasChannelType = YES;
  resultContent.channelType = value;
  return self;
}
- (ContentBuilder*) clearChannelType {
  resultContent.hasChannelType = NO;
  resultContent.channelType = @"";
  return self;
}
- (BOOL) hasOrderAmount {
  return resultContent.hasOrderAmount;
}
- (NSString*) orderAmount {
  return resultContent.orderAmount;
}
- (ContentBuilder*) setOrderAmount:(NSString*) value {
  resultContent.hasOrderAmount = YES;
  resultContent.orderAmount = value;
  return self;
}
- (ContentBuilder*) clearOrderAmount {
  resultContent.hasOrderAmount = NO;
  resultContent.orderAmount = @"";
  return self;
}
- (BOOL) hasPayMode {
  return resultContent.hasPayMode;
}
- (NSString*) payMode {
  return resultContent.payMode;
}
- (ContentBuilder*) setPayMode:(NSString*) value {
  resultContent.hasPayMode = YES;
  resultContent.payMode = value;
  return self;
}
- (ContentBuilder*) clearPayMode {
  resultContent.hasPayMode = NO;
  resultContent.payMode = @"";
  return self;
}
- (BOOL) hasPayAmount {
  return resultContent.hasPayAmount;
}
- (NSString*) payAmount {
  return resultContent.payAmount;
}
- (ContentBuilder*) setPayAmount:(NSString*) value {
  resultContent.hasPayAmount = YES;
  resultContent.payAmount = value;
  return self;
}
- (ContentBuilder*) clearPayAmount {
  resultContent.hasPayAmount = NO;
  resultContent.payAmount = @"";
  return self;
}
- (BOOL) hasOrderStatus {
  return resultContent.hasOrderStatus;
}
- (NSString*) orderStatus {
  return resultContent.orderStatus;
}
- (ContentBuilder*) setOrderStatus:(NSString*) value {
  resultContent.hasOrderStatus = YES;
  resultContent.orderStatus = value;
  return self;
}
- (ContentBuilder*) clearOrderStatus {
  resultContent.hasOrderStatus = NO;
  resultContent.orderStatus = @"";
  return self;
}
- (BOOL) hasOutOrderType {
  return resultContent.hasOutOrderType;
}
- (NSString*) outOrderType {
  return resultContent.outOrderType;
}
- (ContentBuilder*) setOutOrderType:(NSString*) value {
  resultContent.hasOutOrderType = YES;
  resultContent.outOrderType = value;
  return self;
}
- (ContentBuilder*) clearOutOrderType {
  resultContent.hasOutOrderType = NO;
  resultContent.outOrderType = @"";
  return self;
}
- (BOOL) hasTxnTimeStart {
  return resultContent.hasTxnTimeStart;
}
- (NSString*) txnTimeStart {
  return resultContent.txnTimeStart;
}
- (ContentBuilder*) setTxnTimeStart:(NSString*) value {
  resultContent.hasTxnTimeStart = YES;
  resultContent.txnTimeStart = value;
  return self;
}
- (ContentBuilder*) clearTxnTimeStart {
  resultContent.hasTxnTimeStart = NO;
  resultContent.txnTimeStart = @"";
  return self;
}
- (BOOL) hasTxnTimeExpire {
  return resultContent.hasTxnTimeExpire;
}
- (NSString*) txnTimeExpire {
  return resultContent.txnTimeExpire;
}
- (ContentBuilder*) setTxnTimeExpire:(NSString*) value {
  resultContent.hasTxnTimeExpire = YES;
  resultContent.txnTimeExpire = value;
  return self;
}
- (ContentBuilder*) clearTxnTimeExpire {
  resultContent.hasTxnTimeExpire = NO;
  resultContent.txnTimeExpire = @"";
  return self;
}
- (BOOL) hasPayStatus {
  return resultContent.hasPayStatus;
}
- (NSString*) payStatus {
  return resultContent.payStatus;
}
- (ContentBuilder*) setPayStatus:(NSString*) value {
  resultContent.hasPayStatus = YES;
  resultContent.payStatus = value;
  return self;
}
- (ContentBuilder*) clearPayStatus {
  resultContent.hasPayStatus = NO;
  resultContent.payStatus = @"";
  return self;
}
- (BOOL) hasProductInfo {
  return resultContent.hasProductInfo;
}
- (ContentProductInfo*) productInfo {
  return resultContent.productInfo;
}
- (ContentBuilder*) setProductInfo:(ContentProductInfo*) value {
  resultContent.hasProductInfo = YES;
  resultContent.productInfo = value;
  return self;
}
- (ContentBuilder*) setProductInfoBuilder:(ContentProductInfoBuilder*) builderForValue {
  return [self setProductInfo:[builderForValue build]];
}
- (ContentBuilder*) mergeProductInfo:(ContentProductInfo*) value {
  if (resultContent.hasProductInfo &&
      resultContent.productInfo != [ContentProductInfo defaultInstance]) {
    resultContent.productInfo =
      [[[ContentProductInfo builderWithPrototype:resultContent.productInfo] mergeFrom:value] buildPartial];
  } else {
    resultContent.productInfo = value;
  }
  resultContent.hasProductInfo = YES;
  return self;
}
- (ContentBuilder*) clearProductInfo {
  resultContent.hasProductInfo = NO;
  resultContent.productInfo = [ContentProductInfo defaultInstance];
  return self;
}
- (NSMutableArray *)payMethod {
  return resultContent.payMethodArray;
}
- (ContentPayMethod*)payMethodAtIndex:(NSUInteger)index {
  return [resultContent payMethodAtIndex:index];
}
- (ContentBuilder *)addPayMethod:(ContentPayMethod*)value {
  if (resultContent.payMethodArray == nil) {
    resultContent.payMethodArray = [[NSMutableArray alloc]init];
  }
  [resultContent.payMethodArray addObject:value];
  return self;
}
- (ContentBuilder *)setPayMethodArray:(NSArray *)array {
  resultContent.payMethodArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearPayMethod {
  resultContent.payMethodArray = nil;
  return self;
}
- (BOOL) hasOutEquityCode {
  return resultContent.hasOutEquityCode;
}
- (NSString*) outEquityCode {
  return resultContent.outEquityCode;
}
- (ContentBuilder*) setOutEquityCode:(NSString*) value {
  resultContent.hasOutEquityCode = YES;
  resultContent.outEquityCode = value;
  return self;
}
- (ContentBuilder*) clearOutEquityCode {
  resultContent.hasOutEquityCode = NO;
  resultContent.outEquityCode = @"";
  return self;
}
- (BOOL) hasOutEquityAmount {
  return resultContent.hasOutEquityAmount;
}
- (NSString*) outEquityAmount {
  return resultContent.outEquityAmount;
}
- (ContentBuilder*) setOutEquityAmount:(NSString*) value {
  resultContent.hasOutEquityAmount = YES;
  resultContent.outEquityAmount = value;
  return self;
}
- (ContentBuilder*) clearOutEquityAmount {
  resultContent.hasOutEquityAmount = NO;
  resultContent.outEquityAmount = @"";
  return self;
}
- (BOOL) hasPayMethodId {
  return resultContent.hasPayMethodId;
}
- (NSString*) payMethodId {
  return resultContent.payMethodId;
}
- (ContentBuilder*) setPayMethodId:(NSString*) value {
  resultContent.hasPayMethodId = YES;
  resultContent.payMethodId = value;
  return self;
}
- (ContentBuilder*) clearPayMethodId {
  resultContent.hasPayMethodId = NO;
  resultContent.payMethodId = @"";
  return self;
}
- (NSMutableArray *)instalment {
  return resultContent.instalmentArray;
}
- (ContentInstalment*)instalmentAtIndex:(NSUInteger)index {
  return [resultContent instalmentAtIndex:index];
}
- (ContentBuilder *)addInstalment:(ContentInstalment*)value {
  if (resultContent.instalmentArray == nil) {
    resultContent.instalmentArray = [[NSMutableArray alloc]init];
  }
  [resultContent.instalmentArray addObject:value];
  return self;
}
- (ContentBuilder *)setInstalmentArray:(NSArray *)array {
  resultContent.instalmentArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearInstalment {
  resultContent.instalmentArray = nil;
  return self;
}
- (BOOL) hasInstalmentId {
  return resultContent.hasInstalmentId;
}
- (NSString*) instalmentId {
  return resultContent.instalmentId;
}
- (ContentBuilder*) setInstalmentId:(NSString*) value {
  resultContent.hasInstalmentId = YES;
  resultContent.instalmentId = value;
  return self;
}
- (ContentBuilder*) clearInstalmentId {
  resultContent.hasInstalmentId = NO;
  resultContent.instalmentId = @"";
  return self;
}
- (BOOL) hasTxnEndTime {
  return resultContent.hasTxnEndTime;
}
- (NSString*) txnEndTime {
  return resultContent.txnEndTime;
}
- (ContentBuilder*) setTxnEndTime:(NSString*) value {
  resultContent.hasTxnEndTime = YES;
  resultContent.txnEndTime = value;
  return self;
}
- (ContentBuilder*) clearTxnEndTime {
  resultContent.hasTxnEndTime = NO;
  resultContent.txnEndTime = @"";
  return self;
}
- (BOOL) hasValidateElement {
  return resultContent.hasValidateElement;
}
- (NSString*) validateElement {
  return resultContent.validateElement;
}
- (ContentBuilder*) setValidateElement:(NSString*) value {
  resultContent.hasValidateElement = YES;
  resultContent.validateElement = value;
  return self;
}
- (ContentBuilder*) clearValidateElement {
  resultContent.hasValidateElement = NO;
  resultContent.validateElement = @"";
  return self;
}
- (BOOL) hasSMsCode {
  return resultContent.hasSMsCode;
}
- (NSString*) sMsCode {
  return resultContent.sMsCode;
}
- (ContentBuilder*) setSMsCode:(NSString*) value {
  resultContent.hasSMsCode = YES;
  resultContent.sMsCode = value;
  return self;
}
- (ContentBuilder*) clearSMsCode {
  resultContent.hasSMsCode = NO;
  resultContent.sMsCode = @"";
  return self;
}
- (NSMutableArray *)voucher {
  return resultContent.voucherArray;
}
- (ContentVoucher*)voucherAtIndex:(NSUInteger)index {
  return [resultContent voucherAtIndex:index];
}
- (ContentBuilder *)addVoucher:(ContentVoucher*)value {
  if (resultContent.voucherArray == nil) {
    resultContent.voucherArray = [[NSMutableArray alloc]init];
  }
  [resultContent.voucherArray addObject:value];
  return self;
}
- (ContentBuilder *)setVoucherArray:(NSArray *)array {
  resultContent.voucherArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearVoucher {
  resultContent.voucherArray = nil;
  return self;
}
- (NSMutableArray *)ateTradeOrder {
  return resultContent.ateTradeOrderArray;
}
- (ContentAteTradeOrder*)ateTradeOrderAtIndex:(NSUInteger)index {
  return [resultContent ateTradeOrderAtIndex:index];
}
- (ContentBuilder *)addAteTradeOrder:(ContentAteTradeOrder*)value {
  if (resultContent.ateTradeOrderArray == nil) {
    resultContent.ateTradeOrderArray = [[NSMutableArray alloc]init];
  }
  [resultContent.ateTradeOrderArray addObject:value];
  return self;
}
- (ContentBuilder *)setAteTradeOrderArray:(NSArray *)array {
  resultContent.ateTradeOrderArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearAteTradeOrder {
  resultContent.ateTradeOrderArray = nil;
  return self;
}
- (BOOL) hasEquityAmount {
  return resultContent.hasEquityAmount;
}
- (NSString*) equityAmount {
  return resultContent.equityAmount;
}
- (ContentBuilder*) setEquityAmount:(NSString*) value {
  resultContent.hasEquityAmount = YES;
  resultContent.equityAmount = value;
  return self;
}
- (ContentBuilder*) clearEquityAmount {
  resultContent.hasEquityAmount = NO;
  resultContent.equityAmount = @"";
  return self;
}
- (BOOL) hasSupportFinger {
  return resultContent.hasSupportFinger;
}
- (NSString*) supportFinger {
  return resultContent.supportFinger;
}
- (ContentBuilder*) setSupportFinger:(NSString*) value {
  resultContent.hasSupportFinger = YES;
  resultContent.supportFinger = value;
  return self;
}
- (ContentBuilder*) clearSupportFinger {
  resultContent.hasSupportFinger = NO;
  resultContent.supportFinger = @"";
  return self;
}
- (BOOL) hasType {
  return resultContent.hasType;
}
- (NSString*) type {
  return resultContent.type;
}
- (ContentBuilder*) setType:(NSString*) value {
  resultContent.hasType = YES;
  resultContent.type = value;
  return self;
}
- (ContentBuilder*) clearType {
  resultContent.hasType = NO;
  resultContent.type = @"";
  return self;
}
- (BOOL) hasTradeStatus {
  return resultContent.hasTradeStatus;
}
- (NSString*) tradeStatus {
  return resultContent.tradeStatus;
}
- (ContentBuilder*) setTradeStatus:(NSString*) value {
  resultContent.hasTradeStatus = YES;
  resultContent.tradeStatus = value;
  return self;
}
- (ContentBuilder*) clearTradeStatus {
  resultContent.hasTradeStatus = NO;
  resultContent.tradeStatus = @"";
  return self;
}
- (BOOL) hasProductDesc {
  return resultContent.hasProductDesc;
}
- (NSString*) productDesc {
  return resultContent.productDesc;
}
- (ContentBuilder*) setProductDesc:(NSString*) value {
  resultContent.hasProductDesc = YES;
  resultContent.productDesc = value;
  return self;
}
- (ContentBuilder*) clearProductDesc {
  resultContent.hasProductDesc = NO;
  resultContent.productDesc = @"";
  return self;
}
- (BOOL) hasSubMerchantName {
  return resultContent.hasSubMerchantName;
}
- (NSString*) subMerchantName {
  return resultContent.subMerchantName;
}
- (ContentBuilder*) setSubMerchantName:(NSString*) value {
  resultContent.hasSubMerchantName = YES;
  resultContent.subMerchantName = value;
  return self;
}
- (ContentBuilder*) clearSubMerchantName {
  resultContent.hasSubMerchantName = NO;
  resultContent.subMerchantName = @"";
  return self;
}
- (BOOL) hasMemo {
  return resultContent.hasMemo;
}
- (NSString*) memo {
  return resultContent.memo;
}
- (ContentBuilder*) setMemo:(NSString*) value {
  resultContent.hasMemo = YES;
  resultContent.memo = value;
  return self;
}
- (ContentBuilder*) clearMemo {
  resultContent.hasMemo = NO;
  resultContent.memo = @"";
  return self;
}
- (BOOL) hasNotifyMode {
  return resultContent.hasNotifyMode;
}
- (NSString*) notifyMode {
  return resultContent.notifyMode;
}
- (ContentBuilder*) setNotifyMode:(NSString*) value {
  resultContent.hasNotifyMode = YES;
  resultContent.notifyMode = value;
  return self;
}
- (ContentBuilder*) clearNotifyMode {
  resultContent.hasNotifyMode = NO;
  resultContent.notifyMode = @"";
  return self;
}
- (NSMutableArray *)memberList {
  return resultContent.memberListArray;
}
- (ContentMemberTwo*)memberListAtIndex:(NSUInteger)index {
  return [resultContent memberListAtIndex:index];
}
- (ContentBuilder *)addMemberList:(ContentMemberTwo*)value {
  if (resultContent.memberListArray == nil) {
    resultContent.memberListArray = [[NSMutableArray alloc]init];
  }
  [resultContent.memberListArray addObject:value];
  return self;
}
- (ContentBuilder *)setMemberListArray:(NSArray *)array {
  resultContent.memberListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearMemberList {
  resultContent.memberListArray = nil;
  return self;
}
- (BOOL) hasGpsInfo {
  return resultContent.hasGpsInfo;
}
- (NSString*) gpsInfo {
  return resultContent.gpsInfo;
}
- (ContentBuilder*) setGpsInfo:(NSString*) value {
  resultContent.hasGpsInfo = YES;
  resultContent.gpsInfo = value;
  return self;
}
- (ContentBuilder*) clearGpsInfo {
  resultContent.hasGpsInfo = NO;
  resultContent.gpsInfo = @"";
  return self;
}
- (BOOL) hasPublishNo {
  return resultContent.hasPublishNo;
}
- (NSString*) publishNo {
  return resultContent.publishNo;
}
- (ContentBuilder*) setPublishNo:(NSString*) value {
  resultContent.hasPublishNo = YES;
  resultContent.publishNo = value;
  return self;
}
- (ContentBuilder*) clearPublishNo {
  resultContent.hasPublishNo = NO;
  resultContent.publishNo = @"";
  return self;
}
- (BOOL) hasResolution {
  return resultContent.hasResolution;
}
- (NSString*) resolution {
  return resultContent.resolution;
}
- (ContentBuilder*) setResolution:(NSString*) value {
  resultContent.hasResolution = YES;
  resultContent.resolution = value;
  return self;
}
- (ContentBuilder*) clearResolution {
  resultContent.hasResolution = NO;
  resultContent.resolution = @"";
  return self;
}
- (BOOL) hasMsgTypeId {
  return resultContent.hasMsgTypeId;
}
- (NSString*) msgTypeId {
  return resultContent.msgTypeId;
}
- (ContentBuilder*) setMsgTypeId:(NSString*) value {
  resultContent.hasMsgTypeId = YES;
  resultContent.msgTypeId = value;
  return self;
}
- (ContentBuilder*) clearMsgTypeId {
  resultContent.hasMsgTypeId = NO;
  resultContent.msgTypeId = @"";
  return self;
}
- (BOOL) hasLastRecordId {
  return resultContent.hasLastRecordId;
}
- (NSString*) lastRecordId {
  return resultContent.lastRecordId;
}
- (ContentBuilder*) setLastRecordId:(NSString*) value {
  resultContent.hasLastRecordId = YES;
  resultContent.lastRecordId = value;
  return self;
}
- (ContentBuilder*) clearLastRecordId {
  resultContent.hasLastRecordId = NO;
  resultContent.lastRecordId = @"";
  return self;
}
- (BOOL) hasScollUp {
  return resultContent.hasScollUp;
}
- (NSString*) scollUp {
  return resultContent.scollUp;
}
- (ContentBuilder*) setScollUp:(NSString*) value {
  resultContent.hasScollUp = YES;
  resultContent.scollUp = value;
  return self;
}
- (ContentBuilder*) clearScollUp {
  resultContent.hasScollUp = NO;
  resultContent.scollUp = @"";
  return self;
}
- (BOOL) hasJsonCallBack {
  return resultContent.hasJsonCallBack;
}
- (NSString*) jsonCallBack {
  return resultContent.jsonCallBack;
}
- (ContentBuilder*) setJsonCallBack:(NSString*) value {
  resultContent.hasJsonCallBack = YES;
  resultContent.jsonCallBack = value;
  return self;
}
- (ContentBuilder*) clearJsonCallBack {
  resultContent.hasJsonCallBack = NO;
  resultContent.jsonCallBack = @"";
  return self;
}
- (NSMutableArray *)msgTypeInfo {
  return resultContent.msgTypeInfoArray;
}
- (ContentMsgTypeInfo*)msgTypeInfoAtIndex:(NSUInteger)index {
  return [resultContent msgTypeInfoAtIndex:index];
}
- (ContentBuilder *)addMsgTypeInfo:(ContentMsgTypeInfo*)value {
  if (resultContent.msgTypeInfoArray == nil) {
    resultContent.msgTypeInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.msgTypeInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setMsgTypeInfoArray:(NSArray *)array {
  resultContent.msgTypeInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearMsgTypeInfo {
  resultContent.msgTypeInfoArray = nil;
  return self;
}
- (NSMutableArray *)msgInfo {
  return resultContent.msgInfoArray;
}
- (ContentMsgInfo*)msgInfoAtIndex:(NSUInteger)index {
  return [resultContent msgInfoAtIndex:index];
}
- (ContentBuilder *)addMsgInfo:(ContentMsgInfo*)value {
  if (resultContent.msgInfoArray == nil) {
    resultContent.msgInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.msgInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setMsgInfoArray:(NSArray *)array {
  resultContent.msgInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearMsgInfo {
  resultContent.msgInfoArray = nil;
  return self;
}
- (BOOL) hasMsgId {
  return resultContent.hasMsgId;
}
- (NSString*) msgId {
  return resultContent.msgId;
}
- (ContentBuilder*) setMsgId:(NSString*) value {
  resultContent.hasMsgId = YES;
  resultContent.msgId = value;
  return self;
}
- (ContentBuilder*) clearMsgId {
  resultContent.hasMsgId = NO;
  resultContent.msgId = @"";
  return self;
}
- (NSMutableArray *)resourceInfo {
  return resultContent.resourceInfoArray;
}
- (ContentResourceInfo*)resourceInfoAtIndex:(NSUInteger)index {
  return [resultContent resourceInfoAtIndex:index];
}
- (ContentBuilder *)addResourceInfo:(ContentResourceInfo*)value {
  if (resultContent.resourceInfoArray == nil) {
    resultContent.resourceInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.resourceInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setResourceInfoArray:(NSArray *)array {
  resultContent.resourceInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearResourceInfo {
  resultContent.resourceInfoArray = nil;
  return self;
}
- (NSMutableArray *)commonZipInfo {
  return resultContent.commonZipInfoArray;
}
- (ContentCommonZipInfo*)commonZipInfoAtIndex:(NSUInteger)index {
  return [resultContent commonZipInfoAtIndex:index];
}
- (ContentBuilder *)addCommonZipInfo:(ContentCommonZipInfo*)value {
  if (resultContent.commonZipInfoArray == nil) {
    resultContent.commonZipInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.commonZipInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setCommonZipInfoArray:(NSArray *)array {
  resultContent.commonZipInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearCommonZipInfo {
  resultContent.commonZipInfoArray = nil;
  return self;
}
- (NSMutableArray *)shareInfo {
  return resultContent.shareInfoArray;
}
- (ContentShareInfo*)shareInfoAtIndex:(NSUInteger)index {
  return [resultContent shareInfoAtIndex:index];
}
- (ContentBuilder *)addShareInfo:(ContentShareInfo*)value {
  if (resultContent.shareInfoArray == nil) {
    resultContent.shareInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.shareInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setShareInfoArray:(NSArray *)array {
  resultContent.shareInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearShareInfo {
  resultContent.shareInfoArray = nil;
  return self;
}
- (BOOL) hasResourceId {
  return resultContent.hasResourceId;
}
- (NSString*) resourceId {
  return resultContent.resourceId;
}
- (ContentBuilder*) setResourceId:(NSString*) value {
  resultContent.hasResourceId = YES;
  resultContent.resourceId = value;
  return self;
}
- (ContentBuilder*) clearResourceId {
  resultContent.hasResourceId = NO;
  resultContent.resourceId = @"";
  return self;
}
- (BOOL) hasVcsBizType {
  return resultContent.hasVcsBizType;
}
- (NSString*) vcsBizType {
  return resultContent.vcsBizType;
}
- (ContentBuilder*) setVcsBizType:(NSString*) value {
  resultContent.hasVcsBizType = YES;
  resultContent.vcsBizType = value;
  return self;
}
- (ContentBuilder*) clearVcsBizType {
  resultContent.hasVcsBizType = NO;
  resultContent.vcsBizType = @"";
  return self;
}
- (BOOL) hasMsg {
  return resultContent.hasMsg;
}
- (NSString*) msg {
  return resultContent.msg;
}
- (ContentBuilder*) setMsg:(NSString*) value {
  resultContent.hasMsg = YES;
  resultContent.msg = value;
  return self;
}
- (ContentBuilder*) clearMsg {
  resultContent.hasMsg = NO;
  resultContent.msg = @"";
  return self;
}
- (BOOL) hasRepayCode {
  return resultContent.hasRepayCode;
}
- (NSString*) repayCode {
  return resultContent.repayCode;
}
- (ContentBuilder*) setRepayCode:(NSString*) value {
  resultContent.hasRepayCode = YES;
  resultContent.repayCode = value;
  return self;
}
- (ContentBuilder*) clearRepayCode {
  resultContent.hasRepayCode = NO;
  resultContent.repayCode = @"";
  return self;
}
- (NSMutableArray *)userAppLoginInfo {
  return resultContent.userAppLoginInfoArray;
}
- (ContentUserAppLoginInfo*)userAppLoginInfoAtIndex:(NSUInteger)index {
  return [resultContent userAppLoginInfoAtIndex:index];
}
- (ContentBuilder *)addUserAppLoginInfo:(ContentUserAppLoginInfo*)value {
  if (resultContent.userAppLoginInfoArray == nil) {
    resultContent.userAppLoginInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.userAppLoginInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setUserAppLoginInfoArray:(NSArray *)array {
  resultContent.userAppLoginInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearUserAppLoginInfo {
  resultContent.userAppLoginInfoArray = nil;
  return self;
}
- (BOOL) hasResultType {
  return resultContent.hasResultType;
}
- (NSString*) resultType {
  return resultContent.resultType;
}
- (ContentBuilder*) setResultType:(NSString*) value {
  resultContent.hasResultType = YES;
  resultContent.resultType = value;
  return self;
}
- (ContentBuilder*) clearResultType {
  resultContent.hasResultType = NO;
  resultContent.resultType = @"";
  return self;
}
- (NSMutableArray *)conflictAcc {
  return resultContent.conflictAccArray;
}
- (ContentConflictAcc*)conflictAccAtIndex:(NSUInteger)index {
  return [resultContent conflictAccAtIndex:index];
}
- (ContentBuilder *)addConflictAcc:(ContentConflictAcc*)value {
  if (resultContent.conflictAccArray == nil) {
    resultContent.conflictAccArray = [[NSMutableArray alloc]init];
  }
  [resultContent.conflictAccArray addObject:value];
  return self;
}
- (ContentBuilder *)setConflictAccArray:(NSArray *)array {
  resultContent.conflictAccArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearConflictAcc {
  resultContent.conflictAccArray = nil;
  return self;
}
- (BOOL) hasSysFrom {
  return resultContent.hasSysFrom;
}
- (NSString*) sysFrom {
  return resultContent.sysFrom;
}
- (ContentBuilder*) setSysFrom:(NSString*) value {
  resultContent.hasSysFrom = YES;
  resultContent.sysFrom = value;
  return self;
}
- (ContentBuilder*) clearSysFrom {
  resultContent.hasSysFrom = NO;
  resultContent.sysFrom = @"";
  return self;
}
- (BOOL) hasLoginPin {
  return resultContent.hasLoginPin;
}
- (NSString*) loginPin {
  return resultContent.loginPin;
}
- (ContentBuilder*) setLoginPin:(NSString*) value {
  resultContent.hasLoginPin = YES;
  resultContent.loginPin = value;
  return self;
}
- (ContentBuilder*) clearLoginPin {
  resultContent.hasLoginPin = NO;
  resultContent.loginPin = @"";
  return self;
}
- (BOOL) hasNewLoginPin {
  return resultContent.hasNewLoginPin;
}
- (NSString*) newLoginPin {
  return resultContent.newLoginPin;
}
- (ContentBuilder*) setNewLoginPin:(NSString*) value {
  resultContent.hasNewLoginPin = YES;
  resultContent.newLoginPin = value;
  return self;
}
- (ContentBuilder*) clearNewLoginPin {
  resultContent.hasNewLoginPin = NO;
  resultContent.newLoginPin = @"";
  return self;
}
- (BOOL) hasPayPwd {
  return resultContent.hasPayPwd;
}
- (NSString*) payPwd {
  return resultContent.payPwd;
}
- (ContentBuilder*) setPayPwd:(NSString*) value {
  resultContent.hasPayPwd = YES;
  resultContent.payPwd = value;
  return self;
}
- (ContentBuilder*) clearPayPwd {
  resultContent.hasPayPwd = NO;
  resultContent.payPwd = @"";
  return self;
}
- (BOOL) hasNewPayPwd {
  return resultContent.hasNewPayPwd;
}
- (NSString*) newPayPwd {
  return resultContent.newPayPwd;
}
- (ContentBuilder*) setNewPayPwd:(NSString*) value {
  resultContent.hasNewPayPwd = YES;
  resultContent.newPayPwd = value;
  return self;
}
- (ContentBuilder*) clearNewPayPwd {
  resultContent.hasNewPayPwd = NO;
  resultContent.newPayPwd = @"";
  return self;
}
- (BOOL) hasPayPwdResetFlag {
  return resultContent.hasPayPwdResetFlag;
}
- (NSString*) payPwdResetFlag {
  return resultContent.payPwdResetFlag;
}
- (ContentBuilder*) setPayPwdResetFlag:(NSString*) value {
  resultContent.hasPayPwdResetFlag = YES;
  resultContent.payPwdResetFlag = value;
  return self;
}
- (ContentBuilder*) clearPayPwdResetFlag {
  resultContent.hasPayPwdResetFlag = NO;
  resultContent.payPwdResetFlag = @"";
  return self;
}
- (BOOL) hasSex {
  return resultContent.hasSex;
}
- (NSString*) sex {
  return resultContent.sex;
}
- (ContentBuilder*) setSex:(NSString*) value {
  resultContent.hasSex = YES;
  resultContent.sex = value;
  return self;
}
- (ContentBuilder*) clearSex {
  resultContent.hasSex = NO;
  resultContent.sex = @"";
  return self;
}
- (BOOL) hasBirthday {
  return resultContent.hasBirthday;
}
- (NSString*) birthday {
  return resultContent.birthday;
}
- (ContentBuilder*) setBirthday:(NSString*) value {
  resultContent.hasBirthday = YES;
  resultContent.birthday = value;
  return self;
}
- (ContentBuilder*) clearBirthday {
  resultContent.hasBirthday = NO;
  resultContent.birthday = @"";
  return self;
}
- (BOOL) hasNationality {
  return resultContent.hasNationality;
}
- (NSString*) nationality {
  return resultContent.nationality;
}
- (ContentBuilder*) setNationality:(NSString*) value {
  resultContent.hasNationality = YES;
  resultContent.nationality = value;
  return self;
}
- (ContentBuilder*) clearNationality {
  resultContent.hasNationality = NO;
  resultContent.nationality = @"";
  return self;
}
- (BOOL) hasIssuingAuthority {
  return resultContent.hasIssuingAuthority;
}
- (NSString*) issuingAuthority {
  return resultContent.issuingAuthority;
}
- (ContentBuilder*) setIssuingAuthority:(NSString*) value {
  resultContent.hasIssuingAuthority = YES;
  resultContent.issuingAuthority = value;
  return self;
}
- (ContentBuilder*) clearIssuingAuthority {
  resultContent.hasIssuingAuthority = NO;
  resultContent.issuingAuthority = @"";
  return self;
}
- (NSMutableArray *)cardInfo {
  return resultContent.cardInfoArray;
}
- (ContentCardInfo*)cardInfoAtIndex:(NSUInteger)index {
  return [resultContent cardInfoAtIndex:index];
}
- (ContentBuilder *)addCardInfo:(ContentCardInfo*)value {
  if (resultContent.cardInfoArray == nil) {
    resultContent.cardInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.cardInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setCardInfoArray:(NSArray *)array {
  resultContent.cardInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearCardInfo {
  resultContent.cardInfoArray = nil;
  return self;
}
- (BOOL) hasSummarizeInfo {
  return resultContent.hasSummarizeInfo;
}
- (ContentSummarizeInfo*) summarizeInfo {
  return resultContent.summarizeInfo;
}
- (ContentBuilder*) setSummarizeInfo:(ContentSummarizeInfo*) value {
  resultContent.hasSummarizeInfo = YES;
  resultContent.summarizeInfo = value;
  return self;
}
- (ContentBuilder*) setSummarizeInfoBuilder:(ContentSummarizeInfoBuilder*) builderForValue {
  return [self setSummarizeInfo:[builderForValue build]];
}
- (ContentBuilder*) mergeSummarizeInfo:(ContentSummarizeInfo*) value {
  if (resultContent.hasSummarizeInfo &&
      resultContent.summarizeInfo != [ContentSummarizeInfo defaultInstance]) {
    resultContent.summarizeInfo =
      [[[ContentSummarizeInfo builderWithPrototype:resultContent.summarizeInfo] mergeFrom:value] buildPartial];
  } else {
    resultContent.summarizeInfo = value;
  }
  resultContent.hasSummarizeInfo = YES;
  return self;
}
- (ContentBuilder*) clearSummarizeInfo {
  resultContent.hasSummarizeInfo = NO;
  resultContent.summarizeInfo = [ContentSummarizeInfo defaultInstance];
  return self;
}
- (BOOL) hasCurrentPage {
  return resultContent.hasCurrentPage;
}
- (NSString*) currentPage {
  return resultContent.currentPage;
}
- (ContentBuilder*) setCurrentPage:(NSString*) value {
  resultContent.hasCurrentPage = YES;
  resultContent.currentPage = value;
  return self;
}
- (ContentBuilder*) clearCurrentPage {
  resultContent.hasCurrentPage = NO;
  resultContent.currentPage = @"";
  return self;
}
- (BOOL) hasPageSize {
  return resultContent.hasPageSize;
}
- (NSString*) pageSize {
  return resultContent.pageSize;
}
- (ContentBuilder*) setPageSize:(NSString*) value {
  resultContent.hasPageSize = YES;
  resultContent.pageSize = value;
  return self;
}
- (ContentBuilder*) clearPageSize {
  resultContent.hasPageSize = NO;
  resultContent.pageSize = @"";
  return self;
}
- (NSMutableArray *)txnInfo {
  return resultContent.txnInfoArray;
}
- (ContentTxnInfo*)txnInfoAtIndex:(NSUInteger)index {
  return [resultContent txnInfoAtIndex:index];
}
- (ContentBuilder *)addTxnInfo:(ContentTxnInfo*)value {
  if (resultContent.txnInfoArray == nil) {
    resultContent.txnInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.txnInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setTxnInfoArray:(NSArray *)array {
  resultContent.txnInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearTxnInfo {
  resultContent.txnInfoArray = nil;
  return self;
}
- (BOOL) hasApplyTime {
  return resultContent.hasApplyTime;
}
- (NSString*) applyTime {
  return resultContent.applyTime;
}
- (ContentBuilder*) setApplyTime:(NSString*) value {
  resultContent.hasApplyTime = YES;
  resultContent.applyTime = value;
  return self;
}
- (ContentBuilder*) clearApplyTime {
  resultContent.hasApplyTime = NO;
  resultContent.applyTime = @"";
  return self;
}
- (BOOL) hasTotalFee {
  return resultContent.hasTotalFee;
}
- (NSString*) totalFee {
  return resultContent.totalFee;
}
- (ContentBuilder*) setTotalFee:(NSString*) value {
  resultContent.hasTotalFee = YES;
  resultContent.totalFee = value;
  return self;
}
- (ContentBuilder*) clearTotalFee {
  resultContent.hasTotalFee = NO;
  resultContent.totalFee = @"";
  return self;
}
- (BOOL) hasTipInfo {
  return resultContent.hasTipInfo;
}
- (NSString*) tipInfo {
  return resultContent.tipInfo;
}
- (ContentBuilder*) setTipInfo:(NSString*) value {
  resultContent.hasTipInfo = YES;
  resultContent.tipInfo = value;
  return self;
}
- (ContentBuilder*) clearTipInfo {
  resultContent.hasTipInfo = NO;
  resultContent.tipInfo = @"";
  return self;
}
- (BOOL) hasCheckCode {
  return resultContent.hasCheckCode;
}
- (NSString*) checkCode {
  return resultContent.checkCode;
}
- (ContentBuilder*) setCheckCode:(NSString*) value {
  resultContent.hasCheckCode = YES;
  resultContent.checkCode = value;
  return self;
}
- (ContentBuilder*) clearCheckCode {
  resultContent.hasCheckCode = NO;
  resultContent.checkCode = @"";
  return self;
}
- (BOOL) hasTotal {
  return resultContent.hasTotal;
}
- (NSString*) total {
  return resultContent.total;
}
- (ContentBuilder*) setTotal:(NSString*) value {
  resultContent.hasTotal = YES;
  resultContent.total = value;
  return self;
}
- (ContentBuilder*) clearTotal {
  resultContent.hasTotal = NO;
  resultContent.total = @"";
  return self;
}
- (BOOL) hasRepayAmt {
  return resultContent.hasRepayAmt;
}
- (NSString*) repayAmt {
  return resultContent.repayAmt;
}
- (ContentBuilder*) setRepayAmt:(NSString*) value {
  resultContent.hasRepayAmt = YES;
  resultContent.repayAmt = value;
  return self;
}
- (ContentBuilder*) clearRepayAmt {
  resultContent.hasRepayAmt = NO;
  resultContent.repayAmt = @"";
  return self;
}
- (BOOL) hasBillOrderId {
  return resultContent.hasBillOrderId;
}
- (NSString*) billOrderId {
  return resultContent.billOrderId;
}
- (ContentBuilder*) setBillOrderId:(NSString*) value {
  resultContent.hasBillOrderId = YES;
  resultContent.billOrderId = value;
  return self;
}
- (ContentBuilder*) clearBillOrderId {
  resultContent.hasBillOrderId = NO;
  resultContent.billOrderId = @"";
  return self;
}
- (BOOL) hasTxnAcctNo {
  return resultContent.hasTxnAcctNo;
}
- (NSString*) txnAcctNo {
  return resultContent.txnAcctNo;
}
- (ContentBuilder*) setTxnAcctNo:(NSString*) value {
  resultContent.hasTxnAcctNo = YES;
  resultContent.txnAcctNo = value;
  return self;
}
- (ContentBuilder*) clearTxnAcctNo {
  resultContent.hasTxnAcctNo = NO;
  resultContent.txnAcctNo = @"";
  return self;
}
- (BOOL) hasLastRowNum {
  return resultContent.hasLastRowNum;
}
- (NSString*) lastRowNum {
  return resultContent.lastRowNum;
}
- (ContentBuilder*) setLastRowNum:(NSString*) value {
  resultContent.hasLastRowNum = YES;
  resultContent.lastRowNum = value;
  return self;
}
- (ContentBuilder*) clearLastRowNum {
  resultContent.hasLastRowNum = NO;
  resultContent.lastRowNum = @"";
  return self;
}
- (BOOL) hasInfo {
  return resultContent.hasInfo;
}
- (NSString*) info {
  return resultContent.info;
}
- (ContentBuilder*) setInfo:(NSString*) value {
  resultContent.hasInfo = YES;
  resultContent.info = value;
  return self;
}
- (ContentBuilder*) clearInfo {
  resultContent.hasInfo = NO;
  resultContent.info = @"";
  return self;
}
- (NSMutableArray *)creditOrder {
  return resultContent.creditOrderArray;
}
- (ContentCreditOrder*)creditOrderAtIndex:(NSUInteger)index {
  return [resultContent creditOrderAtIndex:index];
}
- (ContentBuilder *)addCreditOrder:(ContentCreditOrder*)value {
  if (resultContent.creditOrderArray == nil) {
    resultContent.creditOrderArray = [[NSMutableArray alloc]init];
  }
  [resultContent.creditOrderArray addObject:value];
  return self;
}
- (ContentBuilder *)setCreditOrderArray:(NSArray *)array {
  resultContent.creditOrderArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearCreditOrder {
  resultContent.creditOrderArray = nil;
  return self;
}
- (BOOL) hasRepayStatus {
  return resultContent.hasRepayStatus;
}
- (NSString*) repayStatus {
  return resultContent.repayStatus;
}
- (ContentBuilder*) setRepayStatus:(NSString*) value {
  resultContent.hasRepayStatus = YES;
  resultContent.repayStatus = value;
  return self;
}
- (ContentBuilder*) clearRepayStatus {
  resultContent.hasRepayStatus = NO;
  resultContent.repayStatus = @"";
  return self;
}
- (BOOL) hasInterest {
  return resultContent.hasInterest;
}
- (NSString*) interest {
  return resultContent.interest;
}
- (ContentBuilder*) setInterest:(NSString*) value {
  resultContent.hasInterest = YES;
  resultContent.interest = value;
  return self;
}
- (ContentBuilder*) clearInterest {
  resultContent.hasInterest = NO;
  resultContent.interest = @"";
  return self;
}
- (BOOL) hasReturnAmt {
  return resultContent.hasReturnAmt;
}
- (NSString*) returnAmt {
  return resultContent.returnAmt;
}
- (ContentBuilder*) setReturnAmt:(NSString*) value {
  resultContent.hasReturnAmt = YES;
  resultContent.returnAmt = value;
  return self;
}
- (ContentBuilder*) clearReturnAmt {
  resultContent.hasReturnAmt = NO;
  resultContent.returnAmt = @"";
  return self;
}
- (BOOL) hasStages {
  return resultContent.hasStages;
}
- (NSString*) stages {
  return resultContent.stages;
}
- (ContentBuilder*) setStages:(NSString*) value {
  resultContent.hasStages = YES;
  resultContent.stages = value;
  return self;
}
- (ContentBuilder*) clearStages {
  resultContent.hasStages = NO;
  resultContent.stages = @"";
  return self;
}
- (NSMutableArray *)divide {
  return resultContent.divideArray;
}
- (ContentDivide*)divideAtIndex:(NSUInteger)index {
  return [resultContent divideAtIndex:index];
}
- (ContentBuilder *)addDivide:(ContentDivide*)value {
  if (resultContent.divideArray == nil) {
    resultContent.divideArray = [[NSMutableArray alloc]init];
  }
  [resultContent.divideArray addObject:value];
  return self;
}
- (ContentBuilder *)setDivideArray:(NSArray *)array {
  resultContent.divideArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearDivide {
  resultContent.divideArray = nil;
  return self;
}
- (NSMutableArray *)repayOrder {
  return resultContent.repayOrderArray;
}
- (ContentRepayOrder*)repayOrderAtIndex:(NSUInteger)index {
  return [resultContent repayOrderAtIndex:index];
}
- (ContentBuilder *)addRepayOrder:(ContentRepayOrder*)value {
  if (resultContent.repayOrderArray == nil) {
    resultContent.repayOrderArray = [[NSMutableArray alloc]init];
  }
  [resultContent.repayOrderArray addObject:value];
  return self;
}
- (ContentBuilder *)setRepayOrderArray:(NSArray *)array {
  resultContent.repayOrderArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearRepayOrder {
  resultContent.repayOrderArray = nil;
  return self;
}
- (NSMutableArray *)payTypes {
  return resultContent.payTypesArray;
}
- (ContentPayType*)payTypesAtIndex:(NSUInteger)index {
  return [resultContent payTypesAtIndex:index];
}
- (ContentBuilder *)addPayTypes:(ContentPayType*)value {
  if (resultContent.payTypesArray == nil) {
    resultContent.payTypesArray = [[NSMutableArray alloc]init];
  }
  [resultContent.payTypesArray addObject:value];
  return self;
}
- (ContentBuilder *)setPayTypesArray:(NSArray *)array {
  resultContent.payTypesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearPayTypes {
  resultContent.payTypesArray = nil;
  return self;
}
- (BOOL) hasPayType {
  return resultContent.hasPayType;
}
- (NSString*) payType {
  return resultContent.payType;
}
- (ContentBuilder*) setPayType:(NSString*) value {
  resultContent.hasPayType = YES;
  resultContent.payType = value;
  return self;
}
- (ContentBuilder*) clearPayType {
  resultContent.hasPayType = NO;
  resultContent.payType = @"";
  return self;
}
- (NSMutableArray *)repayRecord {
  return resultContent.repayRecordArray;
}
- (ContentRepayRecord*)repayRecordAtIndex:(NSUInteger)index {
  return [resultContent repayRecordAtIndex:index];
}
- (ContentBuilder *)addRepayRecord:(ContentRepayRecord*)value {
  if (resultContent.repayRecordArray == nil) {
    resultContent.repayRecordArray = [[NSMutableArray alloc]init];
  }
  [resultContent.repayRecordArray addObject:value];
  return self;
}
- (ContentBuilder *)setRepayRecordArray:(NSArray *)array {
  resultContent.repayRecordArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearRepayRecord {
  resultContent.repayRecordArray = nil;
  return self;
}
- (BOOL) hasAccountAmt {
  return resultContent.hasAccountAmt;
}
- (NSString*) accountAmt {
  return resultContent.accountAmt;
}
- (ContentBuilder*) setAccountAmt:(NSString*) value {
  resultContent.hasAccountAmt = YES;
  resultContent.accountAmt = value;
  return self;
}
- (ContentBuilder*) clearAccountAmt {
  resultContent.hasAccountAmt = NO;
  resultContent.accountAmt = @"";
  return self;
}
- (BOOL) hasStatusName {
  return resultContent.hasStatusName;
}
- (NSString*) statusName {
  return resultContent.statusName;
}
- (ContentBuilder*) setStatusName:(NSString*) value {
  resultContent.hasStatusName = YES;
  resultContent.statusName = value;
  return self;
}
- (ContentBuilder*) clearStatusName {
  resultContent.hasStatusName = NO;
  resultContent.statusName = @"";
  return self;
}
- (BOOL) hasForceFaceCheck {
  return resultContent.hasForceFaceCheck;
}
- (NSString*) forceFaceCheck {
  return resultContent.forceFaceCheck;
}
- (ContentBuilder*) setForceFaceCheck:(NSString*) value {
  resultContent.hasForceFaceCheck = YES;
  resultContent.forceFaceCheck = value;
  return self;
}
- (ContentBuilder*) clearForceFaceCheck {
  resultContent.hasForceFaceCheck = NO;
  resultContent.forceFaceCheck = @"";
  return self;
}
- (BOOL) hasAllowRepay {
  return resultContent.hasAllowRepay;
}
- (NSString*) allowRepay {
  return resultContent.allowRepay;
}
- (ContentBuilder*) setAllowRepay:(NSString*) value {
  resultContent.hasAllowRepay = YES;
  resultContent.allowRepay = value;
  return self;
}
- (ContentBuilder*) clearAllowRepay {
  resultContent.hasAllowRepay = NO;
  resultContent.allowRepay = @"";
  return self;
}
- (BOOL) hasLocationProvince {
  return resultContent.hasLocationProvince;
}
- (NSString*) locationProvince {
  return resultContent.locationProvince;
}
- (ContentBuilder*) setLocationProvince:(NSString*) value {
  resultContent.hasLocationProvince = YES;
  resultContent.locationProvince = value;
  return self;
}
- (ContentBuilder*) clearLocationProvince {
  resultContent.hasLocationProvince = NO;
  resultContent.locationProvince = @"";
  return self;
}
- (BOOL) hasLocationCity {
  return resultContent.hasLocationCity;
}
- (NSString*) locationCity {
  return resultContent.locationCity;
}
- (ContentBuilder*) setLocationCity:(NSString*) value {
  resultContent.hasLocationCity = YES;
  resultContent.locationCity = value;
  return self;
}
- (ContentBuilder*) clearLocationCity {
  resultContent.hasLocationCity = NO;
  resultContent.locationCity = @"";
  return self;
}
- (BOOL) hasLocationDistrict {
  return resultContent.hasLocationDistrict;
}
- (NSString*) locationDistrict {
  return resultContent.locationDistrict;
}
- (ContentBuilder*) setLocationDistrict:(NSString*) value {
  resultContent.hasLocationDistrict = YES;
  resultContent.locationDistrict = value;
  return self;
}
- (ContentBuilder*) clearLocationDistrict {
  resultContent.hasLocationDistrict = NO;
  resultContent.locationDistrict = @"";
  return self;
}
- (BOOL) hasLocationAddress {
  return resultContent.hasLocationAddress;
}
- (NSString*) locationAddress {
  return resultContent.locationAddress;
}
- (ContentBuilder*) setLocationAddress:(NSString*) value {
  resultContent.hasLocationAddress = YES;
  resultContent.locationAddress = value;
  return self;
}
- (ContentBuilder*) clearLocationAddress {
  resultContent.hasLocationAddress = NO;
  resultContent.locationAddress = @"";
  return self;
}
- (BOOL) hasKakaUrl {
  return resultContent.hasKakaUrl;
}
- (NSString*) kakaUrl {
  return resultContent.kakaUrl;
}
- (ContentBuilder*) setKakaUrl:(NSString*) value {
  resultContent.hasKakaUrl = YES;
  resultContent.kakaUrl = value;
  return self;
}
- (ContentBuilder*) clearKakaUrl {
  resultContent.hasKakaUrl = NO;
  resultContent.kakaUrl = @"";
  return self;
}
- (BOOL) hasDoudouUrl {
  return resultContent.hasDoudouUrl;
}
- (NSString*) doudouUrl {
  return resultContent.doudouUrl;
}
- (ContentBuilder*) setDoudouUrl:(NSString*) value {
  resultContent.hasDoudouUrl = YES;
  resultContent.doudouUrl = value;
  return self;
}
- (ContentBuilder*) clearDoudouUrl {
  resultContent.hasDoudouUrl = NO;
  resultContent.doudouUrl = @"";
  return self;
}
- (BOOL) hasRepayId {
  return resultContent.hasRepayId;
}
- (NSString*) repayId {
  return resultContent.repayId;
}
- (ContentBuilder*) setRepayId:(NSString*) value {
  resultContent.hasRepayId = YES;
  resultContent.repayId = value;
  return self;
}
- (ContentBuilder*) clearRepayId {
  resultContent.hasRepayId = NO;
  resultContent.repayId = @"";
  return self;
}
- (NSMutableArray *)contract {
  return resultContent.contractArray;
}
- (ContentContract*)contractAtIndex:(NSUInteger)index {
  return [resultContent contractAtIndex:index];
}
- (ContentBuilder *)addContract:(ContentContract*)value {
  if (resultContent.contractArray == nil) {
    resultContent.contractArray = [[NSMutableArray alloc]init];
  }
  [resultContent.contractArray addObject:value];
  return self;
}
- (ContentBuilder *)setContractArray:(NSArray *)array {
  resultContent.contractArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearContract {
  resultContent.contractArray = nil;
  return self;
}
- (BOOL) hasUrl {
  return resultContent.hasUrl;
}
- (NSString*) url {
  return resultContent.url;
}
- (ContentBuilder*) setUrl:(NSString*) value {
  resultContent.hasUrl = YES;
  resultContent.url = value;
  return self;
}
- (ContentBuilder*) clearUrl {
  resultContent.hasUrl = NO;
  resultContent.url = @"";
  return self;
}
- (BOOL) hasFrozenInfo {
  return resultContent.hasFrozenInfo;
}
- (ContentFrozenInfo*) frozenInfo {
  return resultContent.frozenInfo;
}
- (ContentBuilder*) setFrozenInfo:(ContentFrozenInfo*) value {
  resultContent.hasFrozenInfo = YES;
  resultContent.frozenInfo = value;
  return self;
}
- (ContentBuilder*) setFrozenInfoBuilder:(ContentFrozenInfoBuilder*) builderForValue {
  return [self setFrozenInfo:[builderForValue build]];
}
- (ContentBuilder*) mergeFrozenInfo:(ContentFrozenInfo*) value {
  if (resultContent.hasFrozenInfo &&
      resultContent.frozenInfo != [ContentFrozenInfo defaultInstance]) {
    resultContent.frozenInfo =
      [[[ContentFrozenInfo builderWithPrototype:resultContent.frozenInfo] mergeFrom:value] buildPartial];
  } else {
    resultContent.frozenInfo = value;
  }
  resultContent.hasFrozenInfo = YES;
  return self;
}
- (ContentBuilder*) clearFrozenInfo {
  resultContent.hasFrozenInfo = NO;
  resultContent.frozenInfo = [ContentFrozenInfo defaultInstance];
  return self;
}
- (BOOL) hasFcsCreditAmt {
  return resultContent.hasFcsCreditAmt;
}
- (NSString*) fcsCreditAmt {
  return resultContent.fcsCreditAmt;
}
- (ContentBuilder*) setFcsCreditAmt:(NSString*) value {
  resultContent.hasFcsCreditAmt = YES;
  resultContent.fcsCreditAmt = value;
  return self;
}
- (ContentBuilder*) clearFcsCreditAmt {
  resultContent.hasFcsCreditAmt = NO;
  resultContent.fcsCreditAmt = @"";
  return self;
}
- (BOOL) hasLeftFcsCreditAmt {
  return resultContent.hasLeftFcsCreditAmt;
}
- (NSString*) leftFcsCreditAmt {
  return resultContent.leftFcsCreditAmt;
}
- (ContentBuilder*) setLeftFcsCreditAmt:(NSString*) value {
  resultContent.hasLeftFcsCreditAmt = YES;
  resultContent.leftFcsCreditAmt = value;
  return self;
}
- (ContentBuilder*) clearLeftFcsCreditAmt {
  resultContent.hasLeftFcsCreditAmt = NO;
  resultContent.leftFcsCreditAmt = @"";
  return self;
}
- (BOOL) hasFcsCreditAmtStatus {
  return resultContent.hasFcsCreditAmtStatus;
}
- (NSString*) fcsCreditAmtStatus {
  return resultContent.fcsCreditAmtStatus;
}
- (ContentBuilder*) setFcsCreditAmtStatus:(NSString*) value {
  resultContent.hasFcsCreditAmtStatus = YES;
  resultContent.fcsCreditAmtStatus = value;
  return self;
}
- (ContentBuilder*) clearFcsCreditAmtStatus {
  resultContent.hasFcsCreditAmtStatus = NO;
  resultContent.fcsCreditAmtStatus = @"";
  return self;
}
- (BOOL) hasFcsCreditAmtType {
  return resultContent.hasFcsCreditAmtType;
}
- (NSString*) fcsCreditAmtType {
  return resultContent.fcsCreditAmtType;
}
- (ContentBuilder*) setFcsCreditAmtType:(NSString*) value {
  resultContent.hasFcsCreditAmtType = YES;
  resultContent.fcsCreditAmtType = value;
  return self;
}
- (ContentBuilder*) clearFcsCreditAmtType {
  resultContent.hasFcsCreditAmtType = NO;
  resultContent.fcsCreditAmtType = @"";
  return self;
}
- (BOOL) hasFcsCreditUrl {
  return resultContent.hasFcsCreditUrl;
}
- (NSString*) fcsCreditUrl {
  return resultContent.fcsCreditUrl;
}
- (ContentBuilder*) setFcsCreditUrl:(NSString*) value {
  resultContent.hasFcsCreditUrl = YES;
  resultContent.fcsCreditUrl = value;
  return self;
}
- (ContentBuilder*) clearFcsCreditUrl {
  resultContent.hasFcsCreditUrl = NO;
  resultContent.fcsCreditUrl = @"";
  return self;
}
- (BOOL) hasLeftCreditAmtName {
  return resultContent.hasLeftCreditAmtName;
}
- (NSString*) leftCreditAmtName {
  return resultContent.leftCreditAmtName;
}
- (ContentBuilder*) setLeftCreditAmtName:(NSString*) value {
  resultContent.hasLeftCreditAmtName = YES;
  resultContent.leftCreditAmtName = value;
  return self;
}
- (ContentBuilder*) clearLeftCreditAmtName {
  resultContent.hasLeftCreditAmtName = NO;
  resultContent.leftCreditAmtName = @"";
  return self;
}
- (BOOL) hasTotalCreditAmtName {
  return resultContent.hasTotalCreditAmtName;
}
- (NSString*) totalCreditAmtName {
  return resultContent.totalCreditAmtName;
}
- (ContentBuilder*) setTotalCreditAmtName:(NSString*) value {
  resultContent.hasTotalCreditAmtName = YES;
  resultContent.totalCreditAmtName = value;
  return self;
}
- (ContentBuilder*) clearTotalCreditAmtName {
  resultContent.hasTotalCreditAmtName = NO;
  resultContent.totalCreditAmtName = @"";
  return self;
}
- (BOOL) hasFcsCreditName {
  return resultContent.hasFcsCreditName;
}
- (NSString*) fcsCreditName {
  return resultContent.fcsCreditName;
}
- (ContentBuilder*) setFcsCreditName:(NSString*) value {
  resultContent.hasFcsCreditName = YES;
  resultContent.fcsCreditName = value;
  return self;
}
- (ContentBuilder*) clearFcsCreditName {
  resultContent.hasFcsCreditName = NO;
  resultContent.fcsCreditName = @"";
  return self;
}
- (BOOL) hasFcsName {
  return resultContent.hasFcsName;
}
- (NSString*) fcsName {
  return resultContent.fcsName;
}
- (ContentBuilder*) setFcsName:(NSString*) value {
  resultContent.hasFcsName = YES;
  resultContent.fcsName = value;
  return self;
}
- (ContentBuilder*) clearFcsName {
  resultContent.hasFcsName = NO;
  resultContent.fcsName = @"";
  return self;
}
- (BOOL) hasQuotaShowType {
  return resultContent.hasQuotaShowType;
}
- (NSString*) quotaShowType {
  return resultContent.quotaShowType;
}
- (ContentBuilder*) setQuotaShowType:(NSString*) value {
  resultContent.hasQuotaShowType = YES;
  resultContent.quotaShowType = value;
  return self;
}
- (ContentBuilder*) clearQuotaShowType {
  resultContent.hasQuotaShowType = NO;
  resultContent.quotaShowType = @"";
  return self;
}
- (BOOL) hasFcsMerchantName {
  return resultContent.hasFcsMerchantName;
}
- (NSString*) fcsMerchantName {
  return resultContent.fcsMerchantName;
}
- (ContentBuilder*) setFcsMerchantName:(NSString*) value {
  resultContent.hasFcsMerchantName = YES;
  resultContent.fcsMerchantName = value;
  return self;
}
- (ContentBuilder*) clearFcsMerchantName {
  resultContent.hasFcsMerchantName = NO;
  resultContent.fcsMerchantName = @"";
  return self;
}
- (BOOL) hasLeftFcsCreditName {
  return resultContent.hasLeftFcsCreditName;
}
- (NSString*) leftFcsCreditName {
  return resultContent.leftFcsCreditName;
}
- (ContentBuilder*) setLeftFcsCreditName:(NSString*) value {
  resultContent.hasLeftFcsCreditName = YES;
  resultContent.leftFcsCreditName = value;
  return self;
}
- (ContentBuilder*) clearLeftFcsCreditName {
  resultContent.hasLeftFcsCreditName = NO;
  resultContent.leftFcsCreditName = @"";
  return self;
}
- (BOOL) hasSupplementInfo {
  return resultContent.hasSupplementInfo;
}
- (NSString*) supplementInfo {
  return resultContent.supplementInfo;
}
- (ContentBuilder*) setSupplementInfo:(NSString*) value {
  resultContent.hasSupplementInfo = YES;
  resultContent.supplementInfo = value;
  return self;
}
- (ContentBuilder*) clearSupplementInfo {
  resultContent.hasSupplementInfo = NO;
  resultContent.supplementInfo = @"";
  return self;
}
- (BOOL) hasExtInfo {
  return resultContent.hasExtInfo;
}
- (NSString*) extInfo {
  return resultContent.extInfo;
}
- (ContentBuilder*) setExtInfo:(NSString*) value {
  resultContent.hasExtInfo = YES;
  resultContent.extInfo = value;
  return self;
}
- (ContentBuilder*) clearExtInfo {
  resultContent.hasExtInfo = NO;
  resultContent.extInfo = @"";
  return self;
}
- (BOOL) hasSort {
  return resultContent.hasSort;
}
- (NSString*) sort {
  return resultContent.sort;
}
- (ContentBuilder*) setSort:(NSString*) value {
  resultContent.hasSort = YES;
  resultContent.sort = value;
  return self;
}
- (ContentBuilder*) clearSort {
  resultContent.hasSort = NO;
  resultContent.sort = @"";
  return self;
}
- (NSMutableArray *)quotaList {
  return resultContent.quotaListArray;
}
- (ContentResult*)quotaListAtIndex:(NSUInteger)index {
  return [resultContent quotaListAtIndex:index];
}
- (ContentBuilder *)addQuotaList:(ContentResult*)value {
  if (resultContent.quotaListArray == nil) {
    resultContent.quotaListArray = [[NSMutableArray alloc]init];
  }
  [resultContent.quotaListArray addObject:value];
  return self;
}
- (ContentBuilder *)setQuotaListArray:(NSArray *)array {
  resultContent.quotaListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearQuotaList {
  resultContent.quotaListArray = nil;
  return self;
}
- (BOOL) hasIsShowPreQuotaAmt {
  return resultContent.hasIsShowPreQuotaAmt;
}
- (NSString*) isShowPreQuotaAmt {
  return resultContent.isShowPreQuotaAmt;
}
- (ContentBuilder*) setIsShowPreQuotaAmt:(NSString*) value {
  resultContent.hasIsShowPreQuotaAmt = YES;
  resultContent.isShowPreQuotaAmt = value;
  return self;
}
- (ContentBuilder*) clearIsShowPreQuotaAmt {
  resultContent.hasIsShowPreQuotaAmt = NO;
  resultContent.isShowPreQuotaAmt = @"";
  return self;
}
- (BOOL) hasPreFcsAmt {
  return resultContent.hasPreFcsAmt;
}
- (NSString*) preFcsAmt {
  return resultContent.preFcsAmt;
}
- (ContentBuilder*) setPreFcsAmt:(NSString*) value {
  resultContent.hasPreFcsAmt = YES;
  resultContent.preFcsAmt = value;
  return self;
}
- (ContentBuilder*) clearPreFcsAmt {
  resultContent.hasPreFcsAmt = NO;
  resultContent.preFcsAmt = @"";
  return self;
}
- (BOOL) hasPreFcsUrl {
  return resultContent.hasPreFcsUrl;
}
- (NSString*) preFcsUrl {
  return resultContent.preFcsUrl;
}
- (ContentBuilder*) setPreFcsUrl:(NSString*) value {
  resultContent.hasPreFcsUrl = YES;
  resultContent.preFcsUrl = value;
  return self;
}
- (ContentBuilder*) clearPreFcsUrl {
  resultContent.hasPreFcsUrl = NO;
  resultContent.preFcsUrl = @"";
  return self;
}
- (NSMutableArray *)freeList {
  return resultContent.freeListArray;
}
- (ContentResult*)freeListAtIndex:(NSUInteger)index {
  return [resultContent freeListAtIndex:index];
}
- (ContentBuilder *)addFreeList:(ContentResult*)value {
  if (resultContent.freeListArray == nil) {
    resultContent.freeListArray = [[NSMutableArray alloc]init];
  }
  [resultContent.freeListArray addObject:value];
  return self;
}
- (ContentBuilder *)setFreeListArray:(NSArray *)array {
  resultContent.freeListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearFreeList {
  resultContent.freeListArray = nil;
  return self;
}
- (BOOL) hasUserGrade {
  return resultContent.hasUserGrade;
}
- (NSString*) userGrade {
  return resultContent.userGrade;
}
- (ContentBuilder*) setUserGrade:(NSString*) value {
  resultContent.hasUserGrade = YES;
  resultContent.userGrade = value;
  return self;
}
- (ContentBuilder*) clearUserGrade {
  resultContent.hasUserGrade = NO;
  resultContent.userGrade = @"";
  return self;
}
- (BOOL) hasMemberTwo {
  return resultContent.hasMemberTwo;
}
- (ContentMemberTwo*) memberTwo {
  return resultContent.memberTwo;
}
- (ContentBuilder*) setMemberTwo:(ContentMemberTwo*) value {
  resultContent.hasMemberTwo = YES;
  resultContent.memberTwo = value;
  return self;
}
- (ContentBuilder*) setMemberTwoBuilder:(ContentMemberTwoBuilder*) builderForValue {
  return [self setMemberTwo:[builderForValue build]];
}
- (ContentBuilder*) mergeMemberTwo:(ContentMemberTwo*) value {
  if (resultContent.hasMemberTwo &&
      resultContent.memberTwo != [ContentMemberTwo defaultInstance]) {
    resultContent.memberTwo =
      [[[ContentMemberTwo builderWithPrototype:resultContent.memberTwo] mergeFrom:value] buildPartial];
  } else {
    resultContent.memberTwo = value;
  }
  resultContent.hasMemberTwo = YES;
  return self;
}
- (ContentBuilder*) clearMemberTwo {
  resultContent.hasMemberTwo = NO;
  resultContent.memberTwo = [ContentMemberTwo defaultInstance];
  return self;
}
- (BOOL) hasMebCode {
  return resultContent.hasMebCode;
}
- (NSString*) mebCode {
  return resultContent.mebCode;
}
- (ContentBuilder*) setMebCode:(NSString*) value {
  resultContent.hasMebCode = YES;
  resultContent.mebCode = value;
  return self;
}
- (ContentBuilder*) clearMebCode {
  resultContent.hasMebCode = NO;
  resultContent.mebCode = @"";
  return self;
}
- (BOOL) hasUserName {
  return resultContent.hasUserName;
}
- (NSString*) userName {
  return resultContent.userName;
}
- (ContentBuilder*) setUserName:(NSString*) value {
  resultContent.hasUserName = YES;
  resultContent.userName = value;
  return self;
}
- (ContentBuilder*) clearUserName {
  resultContent.hasUserName = NO;
  resultContent.userName = @"";
  return self;
}
- (BOOL) hasLastRequestTime {
  return resultContent.hasLastRequestTime;
}
- (NSString*) lastRequestTime {
  return resultContent.lastRequestTime;
}
- (ContentBuilder*) setLastRequestTime:(NSString*) value {
  resultContent.hasLastRequestTime = YES;
  resultContent.lastRequestTime = value;
  return self;
}
- (ContentBuilder*) clearLastRequestTime {
  resultContent.hasLastRequestTime = NO;
  resultContent.lastRequestTime = @"";
  return self;
}
- (BOOL) hasCardInfoObject {
  return resultContent.hasCardInfoObject;
}
- (ContentCardInfo*) cardInfoObject {
  return resultContent.cardInfoObject;
}
- (ContentBuilder*) setCardInfoObject:(ContentCardInfo*) value {
  resultContent.hasCardInfoObject = YES;
  resultContent.cardInfoObject = value;
  return self;
}
- (ContentBuilder*) setCardInfoObjectBuilder:(ContentCardInfoBuilder*) builderForValue {
  return [self setCardInfoObject:[builderForValue build]];
}
- (ContentBuilder*) mergeCardInfoObject:(ContentCardInfo*) value {
  if (resultContent.hasCardInfoObject &&
      resultContent.cardInfoObject != [ContentCardInfo defaultInstance]) {
    resultContent.cardInfoObject =
      [[[ContentCardInfo builderWithPrototype:resultContent.cardInfoObject] mergeFrom:value] buildPartial];
  } else {
    resultContent.cardInfoObject = value;
  }
  resultContent.hasCardInfoObject = YES;
  return self;
}
- (ContentBuilder*) clearCardInfoObject {
  resultContent.hasCardInfoObject = NO;
  resultContent.cardInfoObject = [ContentCardInfo defaultInstance];
  return self;
}
- (BOOL) hasOrderInfo {
  return resultContent.hasOrderInfo;
}
- (ContentOrderInfo*) orderInfo {
  return resultContent.orderInfo;
}
- (ContentBuilder*) setOrderInfo:(ContentOrderInfo*) value {
  resultContent.hasOrderInfo = YES;
  resultContent.orderInfo = value;
  return self;
}
- (ContentBuilder*) setOrderInfoBuilder:(ContentOrderInfoBuilder*) builderForValue {
  return [self setOrderInfo:[builderForValue build]];
}
- (ContentBuilder*) mergeOrderInfo:(ContentOrderInfo*) value {
  if (resultContent.hasOrderInfo &&
      resultContent.orderInfo != [ContentOrderInfo defaultInstance]) {
    resultContent.orderInfo =
      [[[ContentOrderInfo builderWithPrototype:resultContent.orderInfo] mergeFrom:value] buildPartial];
  } else {
    resultContent.orderInfo = value;
  }
  resultContent.hasOrderInfo = YES;
  return self;
}
- (ContentBuilder*) clearOrderInfo {
  resultContent.hasOrderInfo = NO;
  resultContent.orderInfo = [ContentOrderInfo defaultInstance];
  return self;
}
- (NSMutableArray *)productGroup {
  return resultContent.productGroupArray;
}
- (ContentProductGroup*)productGroupAtIndex:(NSUInteger)index {
  return [resultContent productGroupAtIndex:index];
}
- (ContentBuilder *)addProductGroup:(ContentProductGroup*)value {
  if (resultContent.productGroupArray == nil) {
    resultContent.productGroupArray = [[NSMutableArray alloc]init];
  }
  [resultContent.productGroupArray addObject:value];
  return self;
}
- (ContentBuilder *)setProductGroupArray:(NSArray *)array {
  resultContent.productGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearProductGroup {
  resultContent.productGroupArray = nil;
  return self;
}
- (BOOL) hasAmtType {
  return resultContent.hasAmtType;
}
- (NSString*) amtType {
  return resultContent.amtType;
}
- (ContentBuilder*) setAmtType:(NSString*) value {
  resultContent.hasAmtType = YES;
  resultContent.amtType = value;
  return self;
}
- (ContentBuilder*) clearAmtType {
  resultContent.hasAmtType = NO;
  resultContent.amtType = @"";
  return self;
}
- (NSMutableArray *)withdrawLimit {
  return resultContent.withdrawLimitArray;
}
- (ContentWithdrawLimit*)withdrawLimitAtIndex:(NSUInteger)index {
  return [resultContent withdrawLimitAtIndex:index];
}
- (ContentBuilder *)addWithdrawLimit:(ContentWithdrawLimit*)value {
  if (resultContent.withdrawLimitArray == nil) {
    resultContent.withdrawLimitArray = [[NSMutableArray alloc]init];
  }
  [resultContent.withdrawLimitArray addObject:value];
  return self;
}
- (ContentBuilder *)setWithdrawLimitArray:(NSArray *)array {
  resultContent.withdrawLimitArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearWithdrawLimit {
  resultContent.withdrawLimitArray = nil;
  return self;
}
- (BOOL) hasEquityCode {
  return resultContent.hasEquityCode;
}
- (NSString*) equityCode {
  return resultContent.equityCode;
}
- (ContentBuilder*) setEquityCode:(NSString*) value {
  resultContent.hasEquityCode = YES;
  resultContent.equityCode = value;
  return self;
}
- (ContentBuilder*) clearEquityCode {
  resultContent.hasEquityCode = NO;
  resultContent.equityCode = @"";
  return self;
}
- (BOOL) hasFunctionCode {
  return resultContent.hasFunctionCode;
}
- (NSString*) functionCode {
  return resultContent.functionCode;
}
- (ContentBuilder*) setFunctionCode:(NSString*) value {
  resultContent.hasFunctionCode = YES;
  resultContent.functionCode = value;
  return self;
}
- (ContentBuilder*) clearFunctionCode {
  resultContent.hasFunctionCode = NO;
  resultContent.functionCode = @"";
  return self;
}
- (BOOL) hasTwSign {
  return resultContent.hasTwSign;
}
- (NSString*) twSign {
  return resultContent.twSign;
}
- (ContentBuilder*) setTwSign:(NSString*) value {
  resultContent.hasTwSign = YES;
  resultContent.twSign = value;
  return self;
}
- (ContentBuilder*) clearTwSign {
  resultContent.hasTwSign = NO;
  resultContent.twSign = @"";
  return self;
}
- (BOOL) hasLeftSumAmt {
  return resultContent.hasLeftSumAmt;
}
- (NSString*) leftSumAmt {
  return resultContent.leftSumAmt;
}
- (ContentBuilder*) setLeftSumAmt:(NSString*) value {
  resultContent.hasLeftSumAmt = YES;
  resultContent.leftSumAmt = value;
  return self;
}
- (ContentBuilder*) clearLeftSumAmt {
  resultContent.hasLeftSumAmt = NO;
  resultContent.leftSumAmt = @"";
  return self;
}
- (BOOL) hasVirtualOrderAmt {
  return resultContent.hasVirtualOrderAmt;
}
- (NSString*) virtualOrderAmt {
  return resultContent.virtualOrderAmt;
}
- (ContentBuilder*) setVirtualOrderAmt:(NSString*) value {
  resultContent.hasVirtualOrderAmt = YES;
  resultContent.virtualOrderAmt = value;
  return self;
}
- (ContentBuilder*) clearVirtualOrderAmt {
  resultContent.hasVirtualOrderAmt = NO;
  resultContent.virtualOrderAmt = @"";
  return self;
}
- (BOOL) hasSumCreditAmt {
  return resultContent.hasSumCreditAmt;
}
- (NSString*) sumCreditAmt {
  return resultContent.sumCreditAmt;
}
- (ContentBuilder*) setSumCreditAmt:(NSString*) value {
  resultContent.hasSumCreditAmt = YES;
  resultContent.sumCreditAmt = value;
  return self;
}
- (ContentBuilder*) clearSumCreditAmt {
  resultContent.hasSumCreditAmt = NO;
  resultContent.sumCreditAmt = @"";
  return self;
}
- (BOOL) hasShowVoucher {
  return resultContent.hasShowVoucher;
}
- (NSString*) showVoucher {
  return resultContent.showVoucher;
}
- (ContentBuilder*) setShowVoucher:(NSString*) value {
  resultContent.hasShowVoucher = YES;
  resultContent.showVoucher = value;
  return self;
}
- (ContentBuilder*) clearShowVoucher {
  resultContent.hasShowVoucher = NO;
  resultContent.showVoucher = @"";
  return self;
}
- (NSMutableArray *)equityInfo {
  return resultContent.equityInfoArray;
}
- (ContentEquityInfo*)equityInfoAtIndex:(NSUInteger)index {
  return [resultContent equityInfoAtIndex:index];
}
- (ContentBuilder *)addEquityInfo:(ContentEquityInfo*)value {
  if (resultContent.equityInfoArray == nil) {
    resultContent.equityInfoArray = [[NSMutableArray alloc]init];
  }
  [resultContent.equityInfoArray addObject:value];
  return self;
}
- (ContentBuilder *)setEquityInfoArray:(NSArray *)array {
  resultContent.equityInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearEquityInfo {
  resultContent.equityInfoArray = nil;
  return self;
}
- (NSMutableArray *)activity {
  return resultContent.activityArray;
}
- (ContentActivity*)activityAtIndex:(NSUInteger)index {
  return [resultContent activityAtIndex:index];
}
- (ContentBuilder *)addActivity:(ContentActivity*)value {
  if (resultContent.activityArray == nil) {
    resultContent.activityArray = [[NSMutableArray alloc]init];
  }
  [resultContent.activityArray addObject:value];
  return self;
}
- (ContentBuilder *)setActivityArray:(NSArray *)array {
  resultContent.activityArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearActivity {
  resultContent.activityArray = nil;
  return self;
}
- (BOOL) hasBillId {
  return resultContent.hasBillId;
}
- (NSString*) billId {
  return resultContent.billId;
}
- (ContentBuilder*) setBillId:(NSString*) value {
  resultContent.hasBillId = YES;
  resultContent.billId = value;
  return self;
}
- (ContentBuilder*) clearBillId {
  resultContent.hasBillId = NO;
  resultContent.billId = @"";
  return self;
}
- (BOOL) hasSiedc {
  return resultContent.hasSiedc;
}
- (NSString*) siedc {
  return resultContent.siedc;
}
- (ContentBuilder*) setSiedc:(NSString*) value {
  resultContent.hasSiedc = YES;
  resultContent.siedc = value;
  return self;
}
- (ContentBuilder*) clearSiedc {
  resultContent.hasSiedc = NO;
  resultContent.siedc = @"";
  return self;
}
- (NSMutableArray *)interests {
  return resultContent.interestsArray;
}
- (ContentInterest*)interestsAtIndex:(NSUInteger)index {
  return [resultContent interestsAtIndex:index];
}
- (ContentBuilder *)addInterests:(ContentInterest*)value {
  if (resultContent.interestsArray == nil) {
    resultContent.interestsArray = [[NSMutableArray alloc]init];
  }
  [resultContent.interestsArray addObject:value];
  return self;
}
- (ContentBuilder *)setInterestsArray:(NSArray *)array {
  resultContent.interestsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearInterests {
  resultContent.interestsArray = nil;
  return self;
}
- (BOOL) hasQueryInterval {
  return resultContent.hasQueryInterval;
}
- (NSString*) queryInterval {
  return resultContent.queryInterval;
}
- (ContentBuilder*) setQueryInterval:(NSString*) value {
  resultContent.hasQueryInterval = YES;
  resultContent.queryInterval = value;
  return self;
}
- (ContentBuilder*) clearQueryInterval {
  resultContent.hasQueryInterval = NO;
  resultContent.queryInterval = @"";
  return self;
}
- (BOOL) hasQueryTimes {
  return resultContent.hasQueryTimes;
}
- (NSString*) queryTimes {
  return resultContent.queryTimes;
}
- (ContentBuilder*) setQueryTimes:(NSString*) value {
  resultContent.hasQueryTimes = YES;
  resultContent.queryTimes = value;
  return self;
}
- (ContentBuilder*) clearQueryTimes {
  resultContent.hasQueryTimes = NO;
  resultContent.queryTimes = @"";
  return self;
}
- (BOOL) hasStlMerchantCode {
  return resultContent.hasStlMerchantCode;
}
- (NSString*) stlMerchantCode {
  return resultContent.stlMerchantCode;
}
- (ContentBuilder*) setStlMerchantCode:(NSString*) value {
  resultContent.hasStlMerchantCode = YES;
  resultContent.stlMerchantCode = value;
  return self;
}
- (ContentBuilder*) clearStlMerchantCode {
  resultContent.hasStlMerchantCode = NO;
  resultContent.stlMerchantCode = @"";
  return self;
}
- (BOOL) hasEquityMessage {
  return resultContent.hasEquityMessage;
}
- (NSString*) equityMessage {
  return resultContent.equityMessage;
}
- (ContentBuilder*) setEquityMessage:(NSString*) value {
  resultContent.hasEquityMessage = YES;
  resultContent.equityMessage = value;
  return self;
}
- (ContentBuilder*) clearEquityMessage {
  resultContent.hasEquityMessage = NO;
  resultContent.equityMessage = @"";
  return self;
}
- (BOOL) hasOutEquityMessage {
  return resultContent.hasOutEquityMessage;
}
- (NSString*) outEquityMessage {
  return resultContent.outEquityMessage;
}
- (ContentBuilder*) setOutEquityMessage:(NSString*) value {
  resultContent.hasOutEquityMessage = YES;
  resultContent.outEquityMessage = value;
  return self;
}
- (ContentBuilder*) clearOutEquityMessage {
  resultContent.hasOutEquityMessage = NO;
  resultContent.outEquityMessage = @"";
  return self;
}
- (NSMutableArray *)seedData {
  return resultContent.seedDataArray;
}
- (ContentSeedData*)seedDataAtIndex:(NSUInteger)index {
  return [resultContent seedDataAtIndex:index];
}
- (ContentBuilder *)addSeedData:(ContentSeedData*)value {
  if (resultContent.seedDataArray == nil) {
    resultContent.seedDataArray = [[NSMutableArray alloc]init];
  }
  [resultContent.seedDataArray addObject:value];
  return self;
}
- (ContentBuilder *)setSeedDataArray:(NSArray *)array {
  resultContent.seedDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearSeedData {
  resultContent.seedDataArray = nil;
  return self;
}
- (NSMutableArray *)extMap {
  return resultContent.extMapArray;
}
- (ContentExtMap*)extMapAtIndex:(NSUInteger)index {
  return [resultContent extMapAtIndex:index];
}
- (ContentBuilder *)addExtMap:(ContentExtMap*)value {
  if (resultContent.extMapArray == nil) {
    resultContent.extMapArray = [[NSMutableArray alloc]init];
  }
  [resultContent.extMapArray addObject:value];
  return self;
}
- (ContentBuilder *)setExtMapArray:(NSArray *)array {
  resultContent.extMapArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ContentBuilder *)clearExtMap {
  resultContent.extMapArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
